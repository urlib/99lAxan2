{"posts":[{"title":"C++STL\u4e2d\u96c6\u5408\u7684\u4f7f\u7528\u603b\u7ed3","date":"2017-12-14T23:04:00+08:00","path":"https:\/\/skywt.cn\/posts\/cppstlset","text":"C++ STL \u91cc\u7684 set\uff0c\u987e\u540d\u601d\u4e49\u5c31\u662f\u96c6\u5408\u3002\u548c\u6570\u5b66\u91cc\u7684\u96c6\u5408\u4e00\u6837\uff0cC++ STL \u91cc\u7684\u96c6\u5408\u4e5f\u5177\u6709\u4e92\u5f02\u6027\uff0c\u5373\u6bcf\u4e2a\u5143\u7d20\u6700\u591a\u53ea\u51fa\u73b0\u4e00\u6b21\u3002\u5982\u679c\u9700\u8981\u67d0\u4e2a\u503c\u51fa\u73b0\u591a\u6b21\u5c31\u53ef\u4ee5\u7528 multiset\u3002\n\u96c6\u5408\u7684\u597d\u5904\u662f\uff0c\u96c6\u5408\u91cc\u5b58\u7684\u5143\u7d20\u90fd\u662f\u4ece\u5c0f\u5230\u5927\u6392\u597d\u5e8f\u7684\u3002\u8fd9\u548c\u63d2\u6392\u4e0d\u540c\uff0c\u96c6\u5408\u7684\u590d\u6742\u5ea6\u662f log2(n)\uff0c\u5bf9\u89e3\u51b3\u4e00\u4e9b\u9898\u76ee\u5341\u5206\u6709\u7528\u3002\n\n\u96c6\u5408\u7684\u57fa\u672c\u64cd\u4f5c\u548c\u5e38\u7528\u51fd\u6570\n\u9700\u8981\u8c03\u7528 set \u5934\u6587\u4ef6\uff1a#include&lt;set&gt;\n\u521b\u5efa\u96c6\u5408\uff1aset&lt;int&gt; s \u6216\u8005 multiset&lt;int&gt; s\n\u5176\u4e2d int \u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u7c7b\u578b\u6216\u8005\u7ed3\u6784\u4f53\u4e4b\u7c7b\u7684\u3002\nbegin() \u8fd4\u56de\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\nclear() \u6e05\u9664\u96c6\u5408\u91cc\u7684\u6240\u6709\u5143\u7d20\ncount() \u8fd4\u56de\u67d0\u4e2a\u503c\u5143\u7d20\u7684\u4e2a\u6570\nempty() \u5982\u679c\u96c6\u5408\u4e3a\u7a7a\uff0c\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse\nend() \u8fd4\u56de\u6307\u5411\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\nerase() \u5220\u9664\u96c6\u5408\u4e2d\u7684\u5143\u7d20\nfind()\u00a0\u67e5\u627e\u4e00\u4e2a\u5143\u7d20\u5e76\u8fd4\u56de\u5176\u8fed\u4ee3\u5668\ninsert() \u5728\u96c6\u5408\u4e2d\u63d2\u5165\u5143\u7d20\nlower_bound() \u8fd4\u56de\u6307\u5411\u5927\u4e8e\u7b49\u4e8e\u67d0\u503c\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\nupper_bound() \u8fd4\u56de\u5927\u4e8e\u67d0\u4e2a\u503c\u7684\u5143\u7d20\u7684\u8fed\u4ee3\u5668\nkey_comp() \u8fd4\u56de\u4e00\u4e2a\u7528\u4e8e\u5143\u7d20\u95f4\u503c\u6bd4\u8f83\u7684\u51fd\u6570\nmax_size() \u8fd4\u56de\u96c6\u5408\u80fd\u5bb9\u7eb3\u7684\u5143\u7d20\u7684\u6700\u5927\u9650\u503c\nrbegin() \u8fd4\u56de\u6307\u5411\u96c6\u5408\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u53cd\u5411\u8fed\u4ee3\u5668\nrend() \u8fd4\u56de\u6307\u5411\u96c6\u5408\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u53cd\u5411\u8fed\u4ee3\u5668\nsize() \u96c6\u5408\u4e2d\u5143\u7d20\u7684\u6570\u76ee\nswap() \u4ea4\u6362\u4e24\u4e2a\u96c6\u5408\u53d8\u91cf\nvalue_comp() \u8fd4\u56de\u4e00\u4e2a\u7528\u4e8e\u6bd4\u8f83\u5143\u7d20\u95f4\u7684\u503c\u7684\u51fd\u6570\n\u5c31\u9171\uff0c\u9700\u8981\u518d\u8865\u5145\u3002","tags":[{"name":"C++\u8bed\u8a00","slug":"C-\u8bed\u8a00","permalink":"https:\/\/skywt.cn\/tag\/C-%E8%AF%AD%E8%A8%80\/"},{"name":"OI\u7b97\u6cd5","slug":"OI\u7b97\u6cd5","permalink":"https:\/\/skywt.cn\/tag\/OI%E7%AE%97%E6%B3%95\/"},{"name":"STL","slug":"STL","permalink":"https:\/\/skywt.cn\/tag\/STL\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"NOIP2017\u666e\u53ca\u7ec4 \u89e3\u9898\u62a5\u544a\uff08\u6210\u7ee9|\u56fe\u4e66\u7ba1\u7406\u5458|\u68cb\u76d8|\u8df3\u623f\u5b50\uff09","date":"2018-01-02T21:59:07+08:00","path":"https:\/\/skywt.cn\/posts\/noip2017pj","text":"\u611f\u89c9\u4eca\u5e74\u8bd5\u5377\u6bd4\u53bb\u5e74\u7b80\u5355\uff0c\u4e0d\u8fc7\u6570\u636e\u6bd4\u53bb\u5e74\u5f3a\uff08\u4f3c\u4e4e\u4e00\u7fa4dalao\u56e0\u4e3a\u67d0\u9898\u4e00\u4e2a\u5c0f\u5c0f\u7684\u5931\u8bef\u800c350\uff09\u3002\nNOIP2017 Junior\n\nT1.\u6210\u7ee9(score.cpp\/c\/pas)\n\u5927\u6c34\u9898\uff0c\u4e0d\u591a\u8bf4\u3002\n T2.\u56fe\u4e66\u7ba1\u7406\u5458(librarian.cpp\/c\/pas)\n\u5927\u6c34\u9898\uff0c\u4e0d\u591a\u8bf4\u3002\nT3.\u68cb\u76d8(chess.cpp\/c\/pas)\n\u8fd9\u9898\u4e0d\u96be\u770b\u51fa\u5176\u5b9e\u5c31\u662f\u6700\u77ed\u8def\u3002\u90a3\u4e48\u5c31\u5f88\u5bb9\u6613\u60f3\u5230\u4e24\u79cd\u65b9\u6cd5\uff1aSPFA\u6216\u8005DP\u3002\n\u89e3\u6cd5\u4e00\uff1aSPFA\nSPFA\u7684\u7b97\u6cd5\u4e0d\u96be\u60f3\u5230\uff0c\u4e5f\u5c31\u662f\u4ece\u8d77\u70b9\u8d70\u5230\u7ec8\u70b9\uff0c\u5224\u65ad\u51e0\u79cd\u60c5\u51b5\uff1a\n\u2460\u5f53\u524d\u683c\u5b50\u662f\u65e0\u8272\u7684\uff08\u5373\u4e0a\u6b21\u4f7f\u7528\u4e86\u9b54\u6cd5\uff09\uff1a\u5982\u679c\u4e0b\u4e2a\u683c\u5b50\u6709\u989c\u8272\u5c31\u8d70\uff0c\u5426\u5219\u5c31\u6ca1\u6cd5\u8d70\uff1b\n\u2461\u4e0b\u4e00\u683c\u5b50\u4e0e\u8fd9\u4e2a\u683c\u5b50\u989c\u8272\u76f8\u540c\uff1a\u76f4\u63a5\u8d70\u8fc7\u53bb\uff0c\u4e0d\u82b1\u8d39\u91d1\u5e01\uff1b\n\u2462\u4e0b\u4e2a\u683c\u5b50\u989c\u8272\u4e0d\u540c\u5e76\u4e14\u6709\u989c\u8272\uff1a\u91d1\u5e01+1\uff1b\n\u2463\u4e0b\u4e2a\u683c\u5b50\u6ca1\u989c\u8272\uff1a\u76f4\u63a5\u8d70\u8fc7\u53bb\uff08\u56e0\u4e3a\u5728\u5904\u7406\u8fd9\u4e2a\u70b9\u7684\u65f6\u5019\u4f1a\u5224\u65ad\u5230\uff09\u3002\n\u7b80\u5355\u5224\u65ad\u4e0b\u8fd9\u56db\u79cd\u60c5\u51b5\u5c31\u53ef\u4ee5\u4e86\uff5e\uff5e\n\u89e3\u6cd5\u4e8c\uff1a\u52a8\u6001\u89c4\u5212\nDP\u7684\u7b97\u6cd5\u4e5f\u5e76\u4e0d\u96be\u7406\u89e3\u3002\u5c31\u662f\u6709\u70b9\u7c7b\u4f3c\u8fc7\u6cb3\u5352\u3002\u9ebb\u70e6\u5c31\u5728\u8fd9\u9898\u4e0a\u4e0b\u5de6\u53f3\u90fd\u53ef\u4ee5\u8d70\u3002\u8fc7\u6cb3\u5352\u90a3\u9898\u53ea\u80fd\u5411\u53f3\u5411\u4e0b\uff0c\u6240\u4ee5\u76f4\u63a5\u6839\u636e\u5de6\u8fb9\u3001\u4e0a\u9762\u63a8\u51fa\u5f53\u524d\u72b6\u6001\u5c31\u53ef\u4ee5\uff0c\u4f46\u662f\u8fd9\u9898\u5c31\u9700\u8981\u4ece\u56db\u4e2a\u65b9\u5411\u63a8\u8fc7\u6765\u3002\u90a3\u4e48\u8fd9\u6837DP\u662f\u6709\u540e\u6548\u6027\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u52374\u8d9f\uff1a\u4ece\u5750\u4e0a\u5230\u53f3\u4e0b\uff0c\u4ece\u53f3\u4e0b\u5230\u5de6\u4e0a\uff0c\u4ece\u5de6\u4e0a\u5230\u53f3\u4e0b\uff0c\u4ece\u53f3\u4e0b\u5230\u5de6\u4e0a\u2026\u2026\u5c31\u884c\u4e86\u3002\nT3.\u623f\u5b50(jump.cpp\/c\/pas)\n\u4e8c\u5206+DP+\u5355\u8c03\u961f\u5217\u4f18\u5316\u3002\n&quot;\u73b0\u5728\u5c0f R \u5e0c\u671b\u83b7\u5f97\u81f3\u5c11 k \u5206\uff0c\u8bf7\u95ee\u4ed6\u81f3\u5c11\u8981\u82b1\u591a\u5c11\u91d1\u5e01\u6765\u6539\u9020\u4ed6\u7684\u673a\u5668\u4eba\u3002&quot;\u663e\u7136\uff0c\u6700\u5927\u5f53\u4e2d\u6c42\u6700\u5c0f\uff0c\u4e8c\u5206\u3002\u56e0\u4e3a\u9898\u76ee\u91ccg\u4e0d\u77e5\u9053\uff0c\u4e8c\u5206\u80af\u5b9a\u662f\u679a\u4e3eg\uff08\u5373\u6539\u9020\u82b1\u8d39\u7684\u91d1\u5e01\uff0c\u4e5f\u5c31\u662f\u5728d\u7684\u57fa\u7840\u4e0a\u6b65\u6570\u5141\u8bb8\u7684\u53d8\u5316\u91cf\uff09\uff0c\u679a\u4e3e\u51fa\u6765g\u4ee5\u540e\u5f88\u5bb9\u6613\u60f3\u5230\u4e00\u4e2aO(N\u00b2)\u7684DP\uff1aF[i]\u8868\u793a\u8df3\u5230\u7b2ci\u4e2a\u683c\u5b50\u83b7\u5f97\u7684\u6700\u5927\u91d1\u5e01\u6570\u91cf\u3002\u4f46\u662f\u6570\u636e\u8303\u56f4\u662f\uff1a1 \u2264 n \u2264 500000, O(N\u00b2)\u663e\u7136\u8981\u8d85\u65f6\u2026\u2026\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2aF\u6570\u7ec4\u662f\u5355\u8c03\u9012\u589e\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528\u5355\u8c03\u6808\u4f18\u5316\uff1a\u7ef4\u62a4\u4e00\u4e2a\u5355\u8c03\u964d\u7684\u961f\u5217\uff08\u8fd9\u91cc\u547d\u540d\u4e3a\u6570\u7ec4que\uff0c\u5b58\u4e00\u4e2aDP\u72b6\u6001\uff08\u5c31\u662fF[x]\u7684\u503c\uff09\u548c\u4f4d\u7f6e\uff09\uff0c\u6bcf\u6b21\u53ea\u8981\u5148\u4fee\u6b63\u961f\u5217\u5934\uff08\u5c31\u662f\u5982\u679c\u961f\u5217\u5934\u6307\u5411\u7684\u683c\u5b50\u8df3\u4e0d\u5230\u5f53\u524d\u7684\uff0c\u5c31head++\uff0c\u76f4\u5230\u961f\u5217\u5934\u6ee1\u8db3\u6216\u8005\u5168\u5220\u5149\u4e86\uff09\uff0c\u53d6\u961f\u5217\u5934\u4fee\u6b63\u5f53\u524d\u72b6\u6001F[i]\uff0c\u518d\u4ece\u961f\u5217\u5c3e\u628a\u6ca1\u6709F[i]\u4f18\u79c0\u7684\u5168\u5220\u6389\uff0c\u518d\u628aF[i]\u5165\u961f\u3002\u6bcf\u6b21\u90fd\u8fd9\u4e48\u7ef4\u62a4\u4e0b\u5c31\u597d\u4e86\uff0c\u7b54\u6848\u5c31\u662fMax(F[1~n])\u3002","tags":[{"name":"C++\u8bed\u8a00","slug":"C-\u8bed\u8a00","permalink":"https:\/\/skywt.cn\/tag\/C-%E8%AF%AD%E8%A8%80\/"},{"name":"OI\u7b97\u6cd5","slug":"OI\u7b97\u6cd5","permalink":"https:\/\/skywt.cn\/tag\/OI%E7%AE%97%E6%B3%95\/"},{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"}],"categories":[]},{"title":"VIM\u5e38\u7528\u547d\u4ee4\u6c47\u603b","date":"2018-01-03T21:07:53+08:00","path":"https:\/\/skywt.cn\/posts\/vimcmd","text":"Linux\u7528\u4e45\u4e86\u53d1\u73b0VIM\u547d\u4ee4\u8fd8\u662f\u9700\u8981\u5b66\u4e00\u4e0b\u2026\u2026\u4e00\u5f00\u59cb\u7528VIM\uff1a\u201c\u8fd9\u4ec0\u4e48\u5783\u573e\u7f16\u8f91\u5668\uff0c\u8fde\u56fe\u5f62\u754c\u9762\u90fd\u6ca1\u6709\uff0c\u8fd8\u8981\u7528\u547d\u4ee4\u884c\uff0c\u4e0d\u80fd\u76f4\u63a5\u79fb\u52a8\u5149\u6807\uff0c\u4e0a\u4e2a\u4e16\u7eaa\u7684\u5427\uff01\u201dVIM\u5728\u7ec8\u7aef\u91cc\u8fd0\u884c\uff0c\u4f7f\u7528\u65b9\u5f0f\u5b8c\u5168\u4e0e\u6211\u4eec\u4e60\u60ef\u7528\u7684Windows\u64cd\u4f5c\u7cfb\u7edf\u91cc\u7684\u6587\u672c\u7f16\u8f91\u5668\u4e0d\u540c\u3002\u5b9e\u9645\u4e0a\u8fd9\u5c31\u662fVIM\u7684\u5f3a\u5927\u4e4b\u5904\uff1a\u4e0d\u9700\u8981\u56fe\u5f62\u754c\u9762\u5c31\u53ef\u4ee5\u76f4\u63a5\u5728\u7ec8\u7aef\u91cc\u7f16\u8f91\u6587\u672c\u3002\u4e00\u822c\u7f51\u4e0a\u79df\u7684VPS\u670d\u52a1\u5668\u90fd\u662f\u6ca1\u6709\u56fe\u5f62\u754c\u9762\u7684\u64cd\u4f5c\u7cfb\u7edf\uff08\u6bd4\u5982\u8bf4\u6211\u524d\u51e0\u5929\u79df\u7684\u642c\u74e6\u5de5\u7684VPS\uff0c\u53ea\u80fdSSH\u8fde\u63a5\u2026\u2026\uff09\uff0c\u8fd9\u65f6\u5019\u8981\u7528\u5230VIM\u3002\u800c\u4e14\u7528VIM\u66f4\u6709Geek\u8303\uff0c\u53ef\u4ee5\u66f4\u597d\u5730\u5728\u540c\u5b66\u9762\u524d\u88c5\u903c\uff08\u9003\u3002\u3002\u3002VIM\u547d\u4ee4\u770b\u8d77\u6765\u5f88\u591a\uff0c\u5176\u5b9e\u4e00\u5927\u5806\u90fd\u7528\u4e0d\u7740\u3002\u53ea\u9700\u8981\u719f\u6089\u51e0\u4e2a\u5e38\u7528\u7684\u547d\u4ee4\u5c31\u884c\u4e86\uff0c\u5176\u4ed6\u7684\u64cd\u4f5c\u57fa\u672c\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e9b\u57fa\u672c\u547d\u4ee4\u5b9e\u73b0\u3002\u4ee5\u4e0b\u52a0\u7c97\u7684\u5c31\u662f\u7ecf\u5e38\u7528\u7684\u547d\u4ee4\u3002\u90e8\u5206\u547d\u4ee4\u524d\u6709\u534a\u89d2\u5192\u53f7\u201c:\u201d\u3002\u4e00\u3001\u6253\u5f00\u3001\u65b0\u5efa\u4e0e\u4fdd\u5b58\u3001\u9000\u51favi filename\uff1a\u6253\u5f00\u6216\u65b0\u5efa\u6587\u4ef6\uff0c\u5e76\u5c06\u5149\u6807\u7f6e\u4e8e\u7b2c\u4e00\u884c\u9996vi +n filename\uff1a\u6253\u5f00\u6587\u4ef6\uff0c\u5e76\u5c06\u5149\u6807\u7f6e\u4e8e\u7b2cn\u884c\u9996\nvi + filename\uff1a\u6253\u5f00\u6587\u4ef6\uff0c\u5e76\u5c06\u5149\u6807\u7f6e\u4e8e\u6700\u540e\u4e00\u884c\u9996\nvi +\/pattern filename\uff1a\u6253\u5f00\u6587\u4ef6\uff0c\u5e76\u5c06\u5149\u6807\u7f6e\u4e8e\u7b2c\u4e00\u4e2a\u4e0epattern\u5339\u914d\u7684\u4e32\u5904\nvi -r filename\uff1a\u5728\u4e0a\u6b21\u6b63\u7528vi\u7f16\u8f91\u65f6\u53d1\u751f\u7cfb\u7edf\u5d29\u6e83\uff0c\u6062\u590dfilename\nvi filename....filename\uff1a\u6253\u5f00\u591a\u4e2a\u6587\u4ef6\uff0c\u4f9d\u6b21\u8fdb\u884c\u7f16\u8f91\nu\uff1a\u64a4\u9500\nCtrl+r\uff1a\u91cd\u505a\n:w\uff1a\u4fdd\u5b58\n:q\uff1a\u9000\u51fa\uff08\u4e5f\u53ef\u4ee5\u4f7f\u7528:wq\u4fdd\u5b58\u5e76\u9000\u51fa\uff09\u4e8c\u3001\u79fb\u52a8\u5149\u6807\u7c7b\u547d\u4ee4h\u6216Backspace\u6216\u2190\uff1a\u5149\u6807\u5de6\u79fb\u4e00\u4e2a\u5b57\u7b26\nl\u6216space\u6216\u2192\uff1a\u5149\u6807\u53f3\u79fb\u4e00\u4e2a\u5b57\u7b26\nk\u6216Ctrl+p\u6216\u2191\uff1a\u5149\u6807\u4e0a\u79fb\u4e00\u884c\nj\u6216Ctrl+n\u6216Enter\u6216\u2193\uff1a\u5149\u6807\u4e0b\u79fb\u4e00\u884c\n\uff08\u4ee5\u4e0a\u56db\u4e2a\u7528\u2191\u2193\u2190\u2192\u8db3\u77e3\u3002\uff09\nw\u6216W\uff1a\u5149\u6807\u53f3\u79fb\u4e00\u4e2a\u5b57\u81f3\u5b57\u9996\nb\u6216B\uff1a\u5149\u6807\u5de6\u79fb\u4e00\u4e2a\u5b57\u81f3\u5b57\u9996\ne\u6216E\uff1a\u5149\u6807\u53f3\u79fb\u4e00\u4e2a\u5b57\u81f3\u5b57\u5c3e\n)\uff1a\u5149\u6807\u79fb\u81f3\u53e5\u5c3e\n(\uff1a\u5149\u6807\u79fb\u81f3\u53e5\u9996\n}\uff1a\u5149\u6807\u79fb\u81f3\u6bb5\u843d\u5f00\u5934\n{\uff1a\u5149\u6807\u79fb\u81f3\u6bb5\u843d\u7ed3\u5c3e\nnG\uff1a\u5149\u6807\u79fb\u81f3\u7b2cn\u884c\u9996\nn+\uff1a\u5149\u6807\u4e0b\u79fbn\u884c\nn-\uff1a\u5149\u6807\u4e0a\u79fbn\u884c\nn$\uff1a\u5149\u6807\u79fb\u81f3\u7b2cn\u884c\u5c3e\nH\uff1a\u5149\u6807\u79fb\u81f3\u5c4f\u5e55\u9876\u884c\nM\uff1a\u5149\u6807\u79fb\u81f3\u5c4f\u5e55\u4e2d\u95f4\u884c\nL\uff1a\u5149\u6807\u79fb\u81f3\u5c4f\u5e55\u6700\u540e\u884c\n0\uff1a\uff08\u6570\u5b57\u96f6\uff09\u5149\u6807\u79fb\u81f3\u5f53\u524d\u884c\u9996\n$\uff1a\u5149\u6807\u79fb\u81f3\u5f53\u524d\u884c\u5c3e\u4e09\u3001\u5c4f\u5e55\u7ffb\u6eda\u7c7b\u547d\u4ee4Ctrl+u\uff1a\u5411\u6587\u4ef6\u9996\u7ffb\u534a\u5c4f\nCtrl+d\uff1a\u5411\u6587\u4ef6\u5c3e\u7ffb\u534a\u5c4f\nCtrl+f\uff1a\u5411\u6587\u4ef6\u5c3e\u7ffb\u4e00\u5c4f\nCtrl\uff0bb\uff1a\u5411\u6587\u4ef6\u9996\u7ffb\u4e00\u5c4f\nnz\uff1a\u5c06\u7b2cn\u884c\u6eda\u81f3\u5c4f\u5e55\u9876\u90e8\uff0c\u4e0d\u6307\u5b9an\u65f6\u5c06\u5f53\u524d\u884c\u6eda\u81f3\u5c4f\u5e55\u9876\u90e8\u3002\u56db\u3001\u63d2\u5165\u6587\u672c\u7c7b\u547d\u4ee4i\uff1a\u5728\u5149\u6807\u524d\nI\uff1a\u5728\u5f53\u524d\u884c\u9996\na\uff1a\u5149\u6807\u540e\nA\uff1a\u5728\u5f53\u524d\u884c\u5c3e\no\uff1a\u5728\u5f53\u524d\u884c\u4e4b\u4e0b\u65b0\u5f00\u4e00\u884c\nO\uff1a\u5728\u5f53\u524d\u884c\u4e4b\u4e0a\u65b0\u5f00\u4e00\u884c\nr\uff1a\u66ff\u6362\u5f53\u524d\u5b57\u7b26\nR\uff1a\u66ff\u6362\u5f53\u524d\u5b57\u7b26\u53ca\u5176\u540e\u7684\u5b57\u7b26\uff0c\u76f4\u81f3\u6309ESC\u952e\ns\uff1a\u4ece\u5f53\u524d\u5149\u6807\u4f4d\u7f6e\u5904\u5f00\u59cb\uff0c\u4ee5\u8f93\u5165\u7684\u6587\u672c\u66ff\u4ee3\u6307\u5b9a\u6570\u76ee\u7684\u5b57\u7b26\nS\uff1a\u5220\u9664\u6307\u5b9a\u6570\u76ee\u7684\u884c\uff0c\u5e76\u4ee5\u6240\u8f93\u5165\u6587\u672c\u4ee3\u66ff\u4e4b\nncw\u6216nCW\uff1a\u4fee\u6539\u6307\u5b9a\u6570\u76ee\u7684\u5b57\nnCC\uff1a\u4fee\u6539\u6307\u5b9a\u6570\u76ee\u7684\u884c\u4e94\u3001\u5220\u9664\u547d\u4ee4\uff08\u4e2a\u4eba\u89c9\u5f97\u5176\u5b9e\u5220\u9664\u7684\u8bdd\u76f4\u63a5\u9009\u4e2d\u518d\u6309d\u5c31\u53ef\u4ee5\u4e86\u2026\u2026\uff09\nndw\u6216ndW\uff1a\u5220\u9664\u5149\u6807\u5904\u5f00\u59cb\u53ca\u5176\u540e\u7684n-1\u4e2a\u5b57\ndo\uff1a\u5220\u81f3\u884c\u9996\nd$\uff1a\u5220\u81f3\u884c\u5c3e\nndd\uff1a\u5220\u9664\u5f53\u524d\u884c\u53ca\u5176\u540en-1\u884c\nx\u6216X\uff1a\u5220\u9664\u4e00\u4e2a\u5b57\u7b26\uff0cx\u5220\u9664\u5149\u6807\u540e\u7684\uff0c\u800cX\u5220\u9664\u5149\u6807\u524d\u7684\nCtrl+u\uff1a\u5220\u9664\u8f93\u5165\u65b9\u5f0f\u4e0b\u6240\u8f93\u5165\u7684\u6587\u672c\u4e94\u3001\u9009\u62e9\u6587\u672c\u3001\u5220\u9664\u3001\u590d\u5236\u3001\u7c98\u8d34v\uff1a\u4ece\u5149\u6807\u5f53\u524d\u4f4d\u7f6e\u5f00\u59cb\uff0c\u9009\u4e2d\u5149\u6807\u7ecf\u8fc7\u7684\u5730\u65b9\uff0c\u518d\u6309\u4e00\u4e0bv\u7ed3\u675f\u3002\u00a0\nV\uff1a\u4ece\u5149\u6807\u5f53\u524d\u884c\u5f00\u59cb\uff0c\u9009\u4e2d\u5149\u6807\u7ecf\u8fc7\u7684\u5730\u65b9\uff0c\u518d\u6309\u4e00\u4e0b\uff36\u7ed3\u675f\u3002\nCtrl+v\uff1a\u4ece\u5149\u6807\u5f53\u524d\u4f4d\u7f6e\u5f00\u59cb\uff0c\u9009\u4e2d\u5149\u6807\u8d77\u70b9\u548c\u7ec8\u70b9\u6240\u6784\u6210\u7684\u77e9\u5f62\u533a\u57df\uff0c\u518d\u6309\u4e00\u4e0bCtrl+v\u7ed3\u675f\u3002\n\u9009\u4e2d\u540e\u5c31\u53ef\u4ee5\u7528\u7f16\u8f91\u547d\u4ee4\u5bf9\u5176\u8fdb\u884c\u7f16\u8f91\uff1a\nd\uff1a\u5220\u9664\ny\uff1a\u590d\u5236\uff08\u9ed8\u8ba4\u662f\u590d\u5236\u5230\"\u5bc4\u5b58\u5668\u201d\uff09\np\uff1a\u7c98\u8d34\uff08\u9ed8\u8ba4\u4ece\"\u5bc4\u5b58\u5668\u201c\u53d6\u51fa\u5185\u5bb9\u7c98\u8d34\uff09\n+y\uff1a\u590d\u5236\u5230\u7cfb\u7edf\u526a\u8d34\u677f\uff08\u4e5f\u5c31\u662fvim\u7684+\u5bc4\u5b58\u5668\uff09\n+p\uff1a\u4ece\u7cfb\u7edf\u526a\u8d34\u677f\u7c98\u8d34\u516d\u3001\u641c\u7d22\u53ca\u66ff\u6362\u547d\u4ee4\/pattern\uff1a\u4ece\u5149\u6807\u5f00\u59cb\u5904\u5411\u6587\u4ef6\u5c3e\u641c\u7d22pattern\n?pattern\uff1a\u4ece\u5149\u6807\u5f00\u59cb\u5904\u5411\u6587\u4ef6\u9996\u641c\u7d22pattern\nn\uff1a\u5728\u540c\u4e00\u65b9\u5411\u91cd\u590d\u4e0a\u4e00\u6b21\u641c\u7d22\u547d\u4ee4\nN\uff1a\u5728\u53cd\u65b9\u5411\u4e0a\u91cd\u590d\u4e0a\u4e00\u6b21\u641c\u7d22\u547d\u4ee4\n:s\/p1\/p2\/g\uff1a\u5c06\u5f53\u524d\u884c\u4e2d\u6240\u6709p1\u5747\u7528p2\u66ff\u4ee3\n:n1,n2s\/p1\/p2\/g\uff1a\u5c06\u7b2cn1\u81f3n2\u884c\u4e2d\u6240\u6709p1\u5747\u7528p2\u66ff\u4ee3\n:g\/p1\/s\/\/p2\/g\uff1a\u5c06\u6587\u4ef6\u4e2d\u6240\u6709p1\u5747\u7528p2\u66ff\u6362\u5c31\u8fd9\u4e48\u591a\u5427\uff0c\u5176\u5b9eVIM\u8fd8\u6709\u5f88\u591a\u63d2\u4ef6\uff0c\u5f88\u591a\u529f\u80fd\u53ef\u4ee5\u62d3\u5c55\u3002\u591a\u7528\u7528\uff0c\u8fd9\u4e9b\u547d\u4ee4\u5c31\u719f\u6089\u4e86\u3002\u53c2\u8003\uff1a\nhttps:\/\/www.cnblogs.com\/zf2011\/archive\/2011\/05\/17\/2049155.html\nhttps:\/\/www.cnblogs.com\/yangjig\/p\/6014198.html","tags":[{"name":"\u65e5\u5e38\u641e\u673a","slug":"\u65e5\u5e38\u641e\u673a","permalink":"https:\/\/skywt.cn\/tag\/%E6%97%A5%E5%B8%B8%E6%90%9E%E6%9C%BA\/"},{"name":"Linux","slug":"Linux","permalink":"https:\/\/skywt.cn\/tag\/Linux\/"},{"name":"\u5e38\u7528Linux\u547d\u4ee4","slug":"\u5e38\u7528Linux\u547d\u4ee4","permalink":"https:\/\/skywt.cn\/tag\/%E5%B8%B8%E7%94%A8Linux%E5%91%BD%E4%BB%A4\/"}],"categories":[]},{"title":"SPFA \u7b97\u6cd5\u603b\u7ed3","date":"2018-01-08T21:47:01+08:00","path":"https:\/\/skywt.cn\/posts\/spfasummary","text":"2019.10.11 Upd\uff1a\u8fd9\u662f ZS \u65f6\u671f\u5199\u7684\u4e00\u7bc7\u975e\u5e38 naive \u7684\u535a\u5ba2\uff0c\u522b\u770b\u4e86\u3002\nSPFA \u4f1a\u88ab\u5361\uff0cDij \u624d\u6700\u597d\u3002\n\nSPFA\u771f\u662f\u6700\u597d\u7684\u5355\u6e90\u6700\u77ed\u8def\u7b97\u6cd5\uff0c\u6ca1\u6709\u4e4b\u4e00\u3002\nSPFA\u5168\u79f0\u662fShortest\u00a0Path\u00a0Faster\u00a0Algorithm\uff0c\u76f4\u8bd1\u8fc7\u6765\u5c31\u662f\u201c\u6700\u77ed\u8def\u66f4\u5feb\u7b97\u6cd5\u201d\uff0c\u4ece\u8fd9\u4e2a\u540d\u79f0\u5c31\u80fd\u770b\u51faSPFA\u6548\u7387\u5f88\u9ad8\u3002SPFA\u52a0\u4e0aSLF\u4f18\u5316\u4ee5\u540e\u88ab\u79f0\u4f5c\u5355\u6e90\u6700\u77ed\u8def\u7684\u201c\u65e0\u654c\u201d\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u8fbe\u5230O(ke)\uff08k\u8868\u793a\u5e73\u5747\u6bcf\u4e2a\u8282\u70b9\u5165\u961f\u6b21\u6570\uff0ck\u22642\uff0ce\u8868\u793a\u8fb9\u6570\uff09\uff0c\u53ef\u4ee5\u5237\u8d1f\u8fb9\u6743\u3002\n\nSPFA\u9700\u8981\u4f7f\u7528\u90bb\u63a5\u8868\u8fd9\u79cd\u5b58\u56fe\u65b9\u5f0f\uff08\u4e5f\u53ef\u4ee5\u8bf4\u90bb\u63a5\u8868\u662f\u4e00\u79cd\u7a7a\u95f4\u4f18\u5316\uff0c\u56e0\u4e3a\u5176\u5b9e\u7528\u666e\u901a\u7684\u4e8c\u7ef4\u77e9\u9635\u5b58\u56fe\u4e5f\u53ef\u4ee5\uff09\uff0c\u6545\u8981\u7406\u89e3SPFA\u9996\u5148\u8981\u7406\u89e3\u90bb\u63a5\u8868\u3002\n\u90bb\u63a5\u8868\n\u90bb\u63a5\u8868\u662f\u4e2a\u9ed1\u79d1\u6280\u7684\u73a9\u610f\u513f\uff1a\u7528\u6765\u5b58\u56fe\uff0c\u662f\u4e00\u6761\u8fb9\u4e00\u6761\u8fb9\u5b58\u7684\uff0c\u6709\u591a\u5c11\u8fb9\u5c31\u5b58\u591a\u5c11\u3002\u5bf9\u4e8e\u6bcf\u6761\u8fb9\uff0c\u53ea\u9700\u8981\u5173\u6ce8\u5173\u4e8e\u8fd9\u6761\u8fb9\u7684\u51e0\u4e2a\u503c\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u5efa\u7acb\u7684\u51e0\u4e2a\u6570\u7ec4\uff08\u5047\u8bbe\u8fd9\u6761\u8fb9\u662fi\uff09\uff1a\nson[i]\uff1a\u8fd9\u6761\u8fb9\u7684\u513f\u5b50\u3002\u6211\u4eec\u628a\u6240\u6709\u56fe\u90fd\u7406\u89e3\u4e3a\u6709\u5411\u56fe\uff08\u5982\u679c\u662f\u65e0\u5411\u56fe\u5c31x\u5230y\u5efa\u8fb9\uff0c\u518dy\u5230x\u5efa\u8fb9\uff09\u3002\nlnk[x]\uff1ax\u8fd9\u4e2a\u70b9\u8fde\u51fa\u7684\u6700\u540e\u4e00\u6761\u8fb9\uff08\u6211\u4eec\u5047\u8bbe\u4e0ex\u8fde\u63a5\u7684\u8fb9\u90fd\u662f\u6709\u987a\u5e8f\u7684\u3002\u8fd9\u4e2a\u987a\u5e8f\u4efb\u610f\uff0c\u5c31\u662f\u6211\u4eec\u6dfb\u8fb9\u7684\u987a\u5e8f\uff09\u3002\nnxt[i]\uff1a\u6309\u521a\u521a\u7684\u987a\u5e8f\uff0ci\u8fd9\u6761\u8fb9\u7684\u7236\u8282\u70b9\u8fde\u51fa\u7684\u4e0b\u4e00\u6761\u8fb9\u3002\nw[i]\uff1a\u7f16\u53f7\u4e3ai\u7684\u8fb9\u7684\u6743\u503c\u3002\n\u8bbe\u8981\u5c06\u70b9x,y\u8fde\u901a\uff0c\u8fde\u901a\u540e\u8fb9\u7684\u6743\u503c\u4e3az\uff0c\u5982\u679c\u76ee\u524d\u5df2\u7ecf\u6709tot\u6761\u8fb9\uff0c\u90a3\u4e48\u8fd9\u6761\u8fb9\u5c31\u6781\u4e3atot+1\uff0c\u76f4\u63a5tot++\u5373\u53ef\u3002\u90a3\u4e48y\u5c31\u662ftot\u8fd9\u6761\u8fb9\u7684\u513f\u5b50\uff0c\u5373son[tot]=y\uff1b\u6743\u503c\u4e3az\uff0c\u5219w[tot]=z\uff1b\u6700\u540ex\u70b9\u8fde\u63a5\u7684\u662ftot\uff0clnk[x]\u8868\u793ax\u8fde\u51fa\u7684\u8fb9\uff0c\u6545lnk[x]=tot\uff1b\u4f46\u662f\u8fd9\u6837\u5c31\u628a\u4e0a\u4e00\u6761\u8fb9\u6e05\u6389\u4e86\uff0c\u6240\u4ee5\u5728lnk[x]=tot\u4e4b\u524d\u5e94\u8be5nxt[tot]=lnk[x]\u3002\nSPFA\n\u63a5\u4e0b\u6765\u5c31\u662fSPFA\u4e3b\u7a0b\u5e8f\u4e86\u3002\n\u5148\u89e3\u91ca\u4e0b\u8fd9\u4e9b\u6570\u7ec4\u90fd\u662f\u5565\uff1a\ndst[x]\uff1a\u8868\u793a\u7531\u8d77\u70b9\u5230x\u70b9\u7684\u6700\u77ed\u8def\uff08\u5c31\u662f\u5b58\u6700\u7ec8\u7684\u7ed3\u679c\uff0c\u4e0d\u65ad\u4fee\u6b63\uff09\u3002\nvis[x]\uff1a\uff08\u5e03\u5c14\u7c7b\u578b\uff09\u6807\u8bb0x\u70b9\u662f\u5426\u5728\u961f\u5217\u4e2d\u3002\nque[x]\uff1a\u5c31\u662fBFS\u91cc\u7684\u961f\u5217\uff0c\u5bf9\u5e94\u6709head\u548ctail\u3002\nSPFA\u7528\u4e8e\u5237\u5355\u6e90\u6700\u77ed\u8def\u3002DP+BFS\u7684\u601d\u60f3\uff0c\u5176\u5b9e\u5de5\u4f5c\u539f\u7406\u548cBFS\u5dee\u4e0d\u591a\uff1a\u5148\u628a\u8fd9\u4e9b\u70b9\u4e00\u4e2a\u4e2a\u5165\u961f\uff0c\u518d\u62d3\u5c55\u4e0b\u53bb\uff0c\u540c\u65f6\u4fee\u6b63dst\u6570\u7ec4\u3002\u5728\u628ahead++\u62d3\u5c55\u7684\u540c\u65f6\uff0c\u628avis[que[head]]\u6253\u6210false\u4e86\uff0c\u4e3a\u4ec0\u4e48\u8981\u8fd9\u4e48\u505a\uff1f\u5f15\u7528\u4e00\u6bb5FQY\u5927\u4f6c\u300c\u6df1\u5ea6\u89e3\u6790SPFA\u7684\u539f\u7406\u4e0e\u6784\u9020\u300d\u91cc\u7684\u4e00\u6bb5\u8bdd\uff1a\n\n\u6211\u4eec\u5148\u770bhead\u5f80\u524d\u8d70\u4e86\u4e00\u4e2a\u70b9\u540e\uff0c\u628avis\u6807\u8bb0\u6253\u6389\u4e86\u3002\u4e3a\u4ec0\u4e48\u8981\u628a\u5df2\u5165\u961f\u7684\u6807\u8bb0\u53bb\u6389\u5462\uff1f\u6211\u4eec\u77e5\u9053\uff0c\u5728\u6709\u8fb9\u6743\u7684\u56fe\u4e2d\uff0c\u8def\u5f84\u77ed\u7684\u8def\u7ebf\u8ddd\u79bb\u4e0d\u4e00\u5b9a\u77ed\uff08\u5373\u8d70\u8fc7\u7684\u70b9\u5c11\u7684\u8def\u7ebfdist\u4e0d\u4e00\u5b9a\u5c31\u5c0f\uff09\u90a3\u4e48\u56e0\u4e3a\u5e7f\u641c\u7684\u7279\u6027\uff08\u5e7f\u5ea6\u4f18\u5148\uff0c\u5373\u8def\u5f84\u77ed\u4f18\u5148\uff09\u5bfc\u81f4\u5148\u4fee\u6b63dist\u7684\u503c\uff08\u5148\u4fee\u6b63\u7684\u8def\u7ebf\u8def\u5f84\u4e00\u5b9a\u77ed\uff09\u4e0d\u4e00\u5b9a\u662f\u6700\u540e\u7684\u7b54\u6848\uff0c\u6709\u53ef\u80fd\u540e\u9762\u8fd8\u4f1a\u518d\u6b21\u6269\u5c55\u5230\u5f53\u524d\u7684head\u70b9\uff0c\u800c\u4fee\u6b63\u51fa\u7684dist\u503c\u8f83\u5c0f\uff08\u540e\u4fee\u6b63\u7684\u8def\u7ebf\u8def\u5f84\u8f83\u957f\u800c\u8ddd\u79bb\u53ef\u80fd\u5c0f\uff09\u3002\u5728\u8fd9\u6837\u4e00\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e3a\u4e86\u540e\u9762\u8def\u5f84\u957f\u7684\u8def\u7ebf\u4e5f\u80fd\u4fee\u6b63\u5230\u8be5\u70b9\uff0c\u5c31\u628a\u8fd9\u91cc\u7684\u6807\u8bb0\u53bb\u6389\u4e86\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\u8fd9\u91cc\u7684vis[que[head]]\u6807\u6210\u5047\u503c\uff0c\u662f\u4e3a\u4e86\u4e4b\u540eque[head]\u8fd9\u4e2a\u70b9\u53ef\u80fd\u91cd\u65b0\u5165\u961f\u8003\u8651\u7684\u3002\u4e3a\u4ec0\u4e48\u8981\u91cd\u65b0\u5165\u961f\uff1f\u56e0\u4e3a\u4e4b\u540e\u53ef\u80fd\u8fd8\u91cd\u590d\u4fee\u6b63\u5230que[head]\u5e76\u4e14\u4fee\u6b63\u5f97\u5230\u7684\u662f\u66f4\u4f18\u79c0\u7684\u89e3\uff08\u4e0a\u9762\u4e00\u6bb5\u6587\u5b57\u89e3\u51b3\u4e86\u8fd9\u4e2a\u7591\u60d1\uff1a\u90a3\u4e48\u4e3a\u4ec0\u4e48\u53c8\u4f1a\u91cd\u65b0\u4fee\u6b63\u5230\u8fd9\u4e2a\u70b9\uff0c\u5f97\u51fa\u66f4\u4f18\u79c0\u7684\u89e3\uff1f\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u4e0d\u662f\u8def\u5f84\u77ed\u7684\u4f18\u5148\uff0c\u5148\u4fee\u6b63\u7684\u66f4\u4f18\u79c0\u5417\uff1f\u4e0d\uff0c\u56e0\u4e3a\u6709\u8fb9\u6743\uff0c\u8def\u5f84\u77ed\u7684\u4e0d\u4e00\u5b9adst\u5c0f\uff0c\u6240\u4ee5\u6709\u7684\u70b9\u8981\u91cd\u590d\u4fee\u6b63\uff09\u3002\n\u63a5\u4e0b\u6765\u7531que[head]\u5f00\u59cb\u62d3\u5c55\uff0c\u4e00\u65e6\u53d1\u73b0\u65b0\u7684\u8def\u7ebf\uff08dst[que[head]]+w[i]\uff09\u6bd4\u539f\u6765\u7684\uff08dst[son[i]]\uff09\u4f18\u79c0\u5c31\u4fee\u6b63\uff0c\u5982\u679cvis[son[i]]==false\uff0c\u4e5f\u5c31\u662f\u8bf4son[i]\u4e0d\u5728\u961f\u5217\u4e2d\uff0c\u5f53\u7136\u5c31\u662f\u5165\u961f\u4e86\uff0c\u4f46\u662f\u5982\u679cson[i]\u5728\u961f\u5217\u4e2d\uff0c\u8981\u4e0d\u8981\u5165\u961f\u5462\uff1f\u663e\u7136\u4e0d\u9700\u8981\u3002\u4f46\u662f\u5982\u679c\u5165\u961f\u4e86\u4e5f\u4e0d\u4f1a\u5f71\u54cd\u7b54\u6848\u3002\u4e3a\u4ec0\u4e48\u4e0d\u9700\u8981\u5165\u961f\u5462\uff1f\uff08\u53ef\u80fd\u4f60\u7684\u7591\u95ee\u662f\uff1a\u5728\u4fee\u6b63\u540e\u9762\u8fd9\u4e2ason[i]\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u4f1a\u66f4\u4f18\u79c0\u554a\uff1f\uff09\u56e0\u4e3a\u5982\u679cson[i]\u5df2\u7ecf\u5728\u961f\u5217\u4e2d\uff0c\u90a3\u4e48\u8bf4\u660e\u4ee5\u540e\u4e00\u5b9a\u4f1a\u518d\u4eceson[i]\u5f00\u59cb\u4fee\u6b63\uff0c\u90a3\u4e48\u95ee\u9898\u5c31\u662f\u4ece\u4e0a\u4e00\u4e2ason[i]\u4e4b\u540e\u5230\u8fd9\u4e2ason[i]\u4e4b\u524d\u8fd9\u4e00\u6bb5\uff0c\u4f1a\u4e0d\u4f1a\u5bfc\u81f4\u540e\u9762\u80fd\u4fee\u6b63\u51fa\u66f4\u4f18\u79c0\u7684son[i]\uff1f\u663e\u7136\u8fd9\u4e0d\u9700\u8981\u8003\u8651\uff0c\u56e0\u4e3a\u5982\u679c\u66f4\u4f18\u79c0\uff0c\u4e4b\u540e\u8fd8\u662f\u4f1a\u91cd\u65b0\u628ason[i]\u4fee\u6b63\/\u5165\u961f\u7684\uff01\u6240\u4ee5\uff0c\u8fd9\u4e2a\u65f6\u5019son[i]\u5c31\u4e0d\u8981\u5165\u961f\uff0c\u56e0\u4e3a\u5165\u961f\u65e0\u7591\u4f1a\u6d6a\u8d39\u65f6\u95f4\u548c\u7a7a\u95f4\u3002\nSLF\u4f18\u5316\n\u65e2\u7136SPFA\u7531BFS\u800c\u6765\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u770b\u770b\u4e24\u8005\u6709\u4ec0\u4e48\u533a\u522b\uff1aBFS\u89e3\u7684\u9898\u76ee\u4e3a\u4ec0\u4e48\u5143\u7d20\u4e0d\u9700\u8981\u591a\u6b21\u5165\u961f\uff1f\u5c31\u662f\u56e0\u4e3a\u4fdd\u8bc1\u4e86\u5e8f\u5217\u7684\u5355\u8c03\u9012\u589e\uff0c\u6216\u8005\u8bf4\u8fb9\u6743\u76f8\u7b49\u3002\u6bd4\u5982\u8bf4\u4e00\u4e9b\u4e00\u683c\u4e00\u683c\u8d70\u7684\u8d70\u8ff7\u5bab\u9898\u76ee\uff0c\u8fb9\u6743\u90fd\u662f1\uff0c\u5c31\u80fd\u786e\u4fdd\u5e8f\u5217\u7684\u5355\u8c03\u9012\u589e\u3002\u4e5f\u5c31\u662f\u56e0\u4e3aSPFA\u7684\u5e8f\u5217\u4e0d\u662f\u5355\u8c03\u7684\uff0c\u6240\u4ee5\u6548\u7387\u4e0d\u5982BFS\uff08\u56e0\u4e3a\u6bcf\u4e2a\u8282\u70b9\u8981\u591a\u6b21\u5165\u961f\uff09\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u601d\u8003\uff1a\u80fd\u4e0d\u80fd\u8ba9SPFA\u6548\u7387\u63a5\u8fd1BFS\uff1f\u90a3\u4e48\u81ea\u7136\u60f3\u5230\u5982\u679c\u80fd\u8ba9SPFA\u7684\u5e8f\u5217\u5c3d\u91cf\u5355\u8c03\u9012\u589e\u8be5\u591a\u597d\u3002\u5f88\u5bb9\u6613\u60f3\u5230\u8fd9\u4e2a\u4f18\u5316\uff1a\u5982\u679c\u5f53\u524d\u5165\u961f\u7684\u70b9\uff08que[tail]\uff09\u6bd4\u4e0b\u4e00\u4e2a\u8981\u8d70\u7684\u70b9\uff08que[head+1]\uff09\u8ddd\u79bb\u5c0f\u5c31\u4ea4\u6362\u8fd9\u4e24\u4e2a\u70b9\u3002\u56e0\u4e3a\u5bf9\u4e8e\u961f\u5217\u91cc\u7684\u6bcf\u4e2a\u70b9\uff0c\u5148\u5237\u540e\u5237\u5e76\u4e0d\u4f1a\u5f71\u54cd\u7b54\u6848\u3002\n\u4ece\u539f\u7406\u6765\u770b\uff0c\u4e3a\u4ec0\u4e48SLF\u4f18\u5316\u771f\u7684\u80fd\u8d77\u5230\u4f18\u5316\u7684\u4f5c\u7528\u5462\uff1f\u5f53\u6211\u4eec\u628atail\u653e\u5230\u524d\u9762\u4e86\u4ee5\u540e\uff0c\u7531\u4e8edst[que[tail]]\u6bd4\u8f83\u5c0f\uff0c\u6240\u4ee5\u5148\u4fee\u6b63\u51fa\u7684\u540e\u9762\u4e00\u7cfb\u5217\u503c\u90fd\u79bb\u6700\u4f18\u89e3\u6bd4\u8f83\u8fd1\uff0c\u6bd4\u539f\u6765\u7684dst[que[head+1]]\u4fee\u6b63\u51fa\u7684\u66f4\u4f18\u3002\u90a3\u4e48\u5728\u4e4b\u540e\u505a\u7684\u65f6\u5019\u5c31\u4f1a\u5c11\u4fee\u6b63\u51e0\u6b21\uff0c\u8fbe\u5230\u65f6\u95f4\u4f18\u5316\u7684\u76ee\u7684\u3002\n\u9898\u5916\u8bdd\n\u7ef4\u57fa\u767e\u79d1\u6761\u76ee\uff1a\nhttps:\/\/en.wikipedia.org\/wiki\/Bellman%E2%80%93Ford_algorithm\nhttps:\/\/en.wikipedia.org\/wiki\/Shortest_Path_Faster_Algorithm\n\uff08\u4e2d\u6587\u7684\u76f4\u63a5\u91cd\u5b9a\u5411\u5230\u4e86https:\/\/zh.wikipedia.org\/wiki\/%E8%B4%9D%E5%B0%94%E6%9B%BC-%E7%A6%8F%E7%89%B9%E7%AE%97%E6%B3%95 \uff09\n\u4e0a\u9762\u8bf4\uff1a\n\nIn China, an algorithm which adds a first-in first-out queue to the Bellman-Ford algorithm, known as\u00a0SPFA, published by Fanding Duan in 1994, is popular with students who take part in\u00a0NOIP\u00a0and\u00a0ACM-ICPC.\n\u5728\u4e2d\u56fd\uff0c\u7531Fanding Duan\uff08\u6bb5\u51e1\u4e01\uff09\u4e8e1994\u5e74\u51fa\u7248\u7684\u4e00\u79cd\u5728Bellman-Ford\u7b97\u6cd5\uff08\u79f0\u4e3aSPFA\uff09\u4e2d\u589e\u52a0\u5148\u8fdb\u5148\u51fa\u961f\u5217\u7684\u7b97\u6cd5\uff0c\u53d7\u5230\u53c2\u52a0NOIP\u548cACM-ICPC\u7684\u5b66\u751f\u7684\u6b22\u8fce\u3002\n\n\u636e\u8bf4SPFA\u8fd8\u662f\u897f\u5357\u4ea4\u901a\u5927\u5b66\u8f6f\u4ef6\u5b66\u9662\u526f\u9662\u957f\u6bb5\u51e1\u4e01\u4e8e1994\u5e74\u63d0\u51fa\u7684\u3002\u4e0d\u8fc7\u636e\u8bf4\u8bba\u6587\u91cc\u8bc1\u660e\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u90e8\u5206\u662f\u9519\u7684\uff0c\u6240\u4ee5\u56fd\u9645\u4e0a\u4e0d\u627f\u8ba4SPFA\u7b97\u6cd5\uff0c\u53ea\u627f\u8ba4Bellman-Ford\u7684\u961f\u5217\u4f18\u5316\u3002\n\u00a0\nSPFA\u7b97\u6cd5\u771f\u662f\u592a\u592a\u592a\u592a\u592a\u6709\u7528\u4e86\uff01\uff01\uff01\n\u53c2\u8003\uff1a\nWM\u7684\u300aSPFA\u7b97\u6cd5\u603b\u7ed3\u300b\nFQY\u5927\u4f6c\u7684\u300a\u6df1\u5ea6\u89e3\u6790SPFA\u7684\u539f\u7406\u4e0e\u6784\u9020\u300b","tags":[{"name":"C++\u8bed\u8a00","slug":"C-\u8bed\u8a00","permalink":"https:\/\/skywt.cn\/tag\/C-%E8%AF%AD%E8%A8%80\/"},{"name":"OI\u7b97\u6cd5","slug":"OI\u7b97\u6cd5","permalink":"https:\/\/skywt.cn\/tag\/OI%E7%AE%97%E6%B3%95\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"\u5404\u4e2a\u5e73\u53f0\uff08Windows\/Linux\/Android\uff09SSH \u8fde\u63a5\u5de5\u5177","date":"2018-01-14T16:40:29+08:00","path":"https:\/\/skywt.cn\/posts\/sshtools","text":"\u6700\u8fd1\u4e70\u4e86\u4e2aVPS\uff0cCentOS\uff0c\u4e0d\u63d0\u4f9b\u56fe\u5f62\u754c\u9762\u2026\u2026\u90a3\u4e48\u6b63\u786e\u7684\u6253\u5f00\u65b9\u5f0f\u5f53\u7136\u5c31\u662fSSH\u8fde\u63a5\u4e86~\n\nLinux\nLinux \u4e0b\u7684 SSH \u8fde\u63a5\u6700\u65b9\u4fbf\u4e86\uff0c\u5927\u591a\u6570 Linux \u53d1\u884c\u7248\u90fd\u81ea\u5e26 openSSH \u3002\u6211\u7528\u7684\u662f Ubuntu16.04\uff0c\u7ec8\u7aef\u91cc\u76f4\u63a5\u6709SSH\u7684\u547d\u4ee4\uff1a\nssh root@127.0.0.1 -p 8080\n\u5176\u4e2d root \u5c31\u662f\u90a3\u4e2a VPS \u767b\u5f55\u7684\u7528\u6237\u540d\uff0c127.0.0.1 \u5c31\u662f IP \u5730\u5740\uff0c8080 \u662f\u7aef\u53e3\u3002\u5982\u679c\u4e0d\u4f7f\u7528 -p \u53c2\u6570\uff0c\u9ed8\u8ba4\u7aef\u53e3\u5c31\u662f 22\u3002\u5982\u679c\u6709\u5bc6\u7801\uff0c\u63a5\u4e0b\u6765\u5c31\u4f1a\u8981\u6c42\u8f93\u5165\u5bc6\u7801\u3002\u7136\u540e\u5c31\u7b97\u662f\u8fde\u4e0a\u4e86\u3002\n\u5982\u679c\u6ca1\u6709\u5b89\u88c5SSH\u670d\u52a1\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u5b89\u88c5\uff1a\nsudo apt-get install openssh-client\nsudo apt-get install openssh-server\nWindows\nWindows \u7cfb\u7edf\u91cc\u6ca1\u6709\u81ea\u5e26\u7684 SSH\uff0c\u4e0b\u8f7d\u5b89\u88c5 openSSH\uff0c\u5c31\u53ef\u4ee5\u5728 cmd \u91cc\u548c Linux \u4e00\u6837\u8fd0\u884cSSH\u547d\u4ee4\u4e86\u2026\u2026\nAndroid\nAndroid \u6709\u5f88\u591a\u7b2c\u4e09\u65b9 SSH \u8f6f\u4ef6\uff0c\u6bd4\u5982\u6211\u6bd4\u8f83\u559c\u6b22\u7684 JuiceSSH\u3002\u8fd8\u6709\u5404\u79cd\u7ec8\u7aef\u6a21\u62df\u5668\u90fd\u662f\u81ea\u5e26 SSH \u7684\u3002","tags":[{"name":"\u65e5\u5e38\u641e\u673a","slug":"\u65e5\u5e38\u641e\u673a","permalink":"https:\/\/skywt.cn\/tag\/%E6%97%A5%E5%B8%B8%E6%90%9E%E6%9C%BA\/"},{"name":"\u7f51\u7edc","slug":"\u7f51\u7edc","permalink":"https:\/\/skywt.cn\/tag\/%E7%BD%91%E7%BB%9C\/"},{"name":"Linux","slug":"Linux","permalink":"https:\/\/skywt.cn\/tag\/Linux\/"},{"name":"\u5e38\u7528Linux\u547d\u4ee4","slug":"\u5e38\u7528Linux\u547d\u4ee4","permalink":"https:\/\/skywt.cn\/tag\/%E5%B8%B8%E7%94%A8Linux%E5%91%BD%E4%BB%A4\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"\uff08\u8f6c\uff09SSH\u539f\u7406\u4e0e\u8fd0\u7528\uff08\u4e00\uff09\uff1a\u8fdc\u7a0b\u767b\u5f55","date":"2018-01-11T21:10:13+08:00","path":"https:\/\/skywt.cn\/posts\/sshremotelogin","text":"SSH\u662f\u6bcf\u4e00\u53f0Linux\u7535\u8111\u7684\u6807\u51c6\u914d\u7f6e\u3002\u968f\u7740Linux\u8bbe\u5907\u4ece\u7535\u8111\u9010\u6e10\u6269\u5c55\u5230\u624b\u673a\u3001\u5916\u8bbe\u548c\u5bb6\u7528\u7535\u5668\uff0cSSH\u7684\u4f7f\u7528\u8303\u56f4\u4e5f\u8d8a\u6765\u8d8a\u5e7f\u3002\u4e0d\u4ec5\u7a0b\u5e8f\u5458\u79bb\u4e0d\u5f00\u5b83\uff0c\u5f88\u591a\u666e\u901a\u7528\u6237\u4e5f\u6bcf\u5929\u4f7f\u7528\u3002SSH\u5177\u5907\u591a\u79cd\u529f\u80fd\uff0c\u53ef\u4ee5\u7528\u4e8e\u5f88\u591a\u573a\u5408\u3002\u6709\u4e9b\u4e8b\u60c5\uff0c\u6ca1\u6709\u5b83\u5c31\u662f\u529e\u4e0d\u6210\u3002\u8f6c\u8f7d\u51fa\u5904\uff1ahttp:\/\/www.ruanyifeng.com\/blog\/2011\/12\/ssh_remote_login.html\u867d\u7136\u672c\u6587\u5185\u5bb9\u53ea\u6d89\u53ca\u521d\u7ea7\u5e94\u7528\uff0c\u8f83\u4e3a\u7b80\u5355\uff0c\u4f46\u662f\u9700\u8981\u8bfb\u8005\u5177\u5907\u6700\u57fa\u672c\u7684\"Shell\u77e5\u8bc6\"\u548c\u4e86\u89e3\"\u516c\u94a5\u52a0\u5bc6\"\u7684\u6982\u5ff5\u3002\u5982\u679c\u4f60\u5bf9\u5b83\u4eec\u4e0d\u719f\u6089\uff0c\u6211\u63a8\u8350\u5148\u9605\u8bfb\u300aUNIX \/ Linux \u521d\u5b66\u8005\u6559\u7a0b\u300b\u548c\u300a\u6570\u5b57\u7b7e\u540d\u662f\u4ec0\u4e48\uff1f\u300b\u3002SSH\u539f\u7406\u4e0e\u8fd0\u7528\u4e00\u3001\u4ec0\u4e48\u662fSSH\uff1f\u7b80\u5355\u8bf4\uff0cSSH\u662f\u4e00\u79cd\u7f51\u7edc\u534f\u8bae\uff0c\u7528\u4e8e\u8ba1\u7b97\u673a\u4e4b\u95f4\u7684\u52a0\u5bc6\u767b\u5f55\u3002\u5982\u679c\u4e00\u4e2a\u7528\u6237\u4ece\u672c\u5730\u8ba1\u7b97\u673a\uff0c\u4f7f\u7528SSH\u534f\u8bae\u767b\u5f55\u53e6\u4e00\u53f0\u8fdc\u7a0b\u8ba1\u7b97\u673a\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8ba4\u4e3a\uff0c\u8fd9\u79cd\u767b\u5f55\u662f\u5b89\u5168\u7684\uff0c\u5373\u4f7f\u88ab\u4e2d\u9014\u622a\u83b7\uff0c\u5bc6\u7801\u4e5f\u4e0d\u4f1a\u6cc4\u9732\u3002\u6700\u65e9\u7684\u65f6\u5019\uff0c\u4e92\u8054\u7f51\u901a\u4fe1\u90fd\u662f\u660e\u6587\u901a\u4fe1\uff0c\u4e00\u65e6\u88ab\u622a\u83b7\uff0c\u5185\u5bb9\u5c31\u66b4\u9732\u65e0\u7591\u30021995\u5e74\uff0c\u82ac\u5170\u5b66\u8005Tatu Ylonen\u8bbe\u8ba1\u4e86SSH\u534f\u8bae\uff0c\u5c06\u767b\u5f55\u4fe1\u606f\u5168\u90e8\u52a0\u5bc6\uff0c\u6210\u4e3a\u4e92\u8054\u7f51\u5b89\u5168\u7684\u4e00\u4e2a\u57fa\u672c\u89e3\u51b3\u65b9\u6848\uff0c\u8fc5\u901f\u5728\u5168\u4e16\u754c\u83b7\u5f97\u63a8\u5e7f\uff0c\u76ee\u524d\u5df2\u7ecf\u6210\u4e3aLinux\u7cfb\u7edf\u7684\u6807\u51c6\u914d\u7f6e\u3002\u9700\u8981\u6307\u51fa\u7684\u662f\uff0cSSH\u53ea\u662f\u4e00\u79cd\u534f\u8bae\uff0c\u5b58\u5728\u591a\u79cd\u5b9e\u73b0\uff0c\u65e2\u6709\u5546\u4e1a\u5b9e\u73b0\uff0c\u4e5f\u6709\u5f00\u6e90\u5b9e\u73b0\u3002\u672c\u6587\u9488\u5bf9\u7684\u5b9e\u73b0\u662fOpenSSH\uff0c\u5b83\u662f\u81ea\u7531\u8f6f\u4ef6\uff0c\u5e94\u7528\u975e\u5e38\u5e7f\u6cdb\u3002\u6b64\u5916\uff0c\u672c\u6587\u53ea\u8ba8\u8bbaSSH\u5728Linux Shell\u4e2d\u7684\u7528\u6cd5\u3002\u5982\u679c\u8981\u5728Windows\u7cfb\u7edf\u4e2d\u4f7f\u7528SSH\uff0c\u4f1a\u7528\u5230\u53e6\u4e00\u79cd\u8f6f\u4ef6PuTTY\uff0c\u8fd9\u9700\u8981\u53e6\u6587\u4ecb\u7ecd\u3002\u4e8c\u3001\u6700\u57fa\u672c\u7684\u7528\u6cd5SSH\u4e3b\u8981\u7528\u4e8e\u8fdc\u7a0b\u767b\u5f55\u3002\u5047\u5b9a\u4f60\u8981\u4ee5\u7528\u6237\u540duser\uff0c\u767b\u5f55\u8fdc\u7a0b\u4e3b\u673ahost\uff0c\u53ea\u8981\u4e00\u6761\u7b80\u5355\u547d\u4ee4\u5c31\u53ef\u4ee5\u4e86\u3002\u3000\u3000$ ssh user@host\u5982\u679c\u672c\u5730\u7528\u6237\u540d\u4e0e\u8fdc\u7a0b\u7528\u6237\u540d\u4e00\u81f4\uff0c\u767b\u5f55\u65f6\u53ef\u4ee5\u7701\u7565\u7528\u6237\u540d\u3002\u3000\u3000$ ssh hostSSH\u7684\u9ed8\u8ba4\u7aef\u53e3\u662f22\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4f60\u7684\u767b\u5f55\u8bf7\u6c42\u4f1a\u9001\u8fdb\u8fdc\u7a0b\u4e3b\u673a\u768422\u7aef\u53e3\u3002\u4f7f\u7528p\u53c2\u6570\uff0c\u53ef\u4ee5\u4fee\u6539\u8fd9\u4e2a\u7aef\u53e3\u3002\u3000\u3000$ ssh -p 2222 user@host\u4e0a\u9762\u8fd9\u6761\u547d\u4ee4\u8868\u793a\uff0cssh\u76f4\u63a5\u8fde\u63a5\u8fdc\u7a0b\u4e3b\u673a\u76842222\u7aef\u53e3\u3002\u4e09\u3001\u4e2d\u95f4\u4eba\u653b\u51fbSSH\u4e4b\u6240\u4ee5\u80fd\u591f\u4fdd\u8bc1\u5b89\u5168\uff0c\u539f\u56e0\u5728\u4e8e\u5b83\u91c7\u7528\u4e86\u516c\u94a5\u52a0\u5bc6\u3002\u6574\u4e2a\u8fc7\u7a0b\u662f\u8fd9\u6837\u7684\uff1a\uff081\uff09\u8fdc\u7a0b\u4e3b\u673a\u6536\u5230\u7528\u6237\u7684\u767b\u5f55\u8bf7\u6c42\uff0c\u628a\u81ea\u5df1\u7684\u516c\u94a5\u53d1\u7ed9\u7528\u6237\u3002\uff082\uff09\u7528\u6237\u4f7f\u7528\u8fd9\u4e2a\u516c\u94a5\uff0c\u5c06\u767b\u5f55\u5bc6\u7801\u52a0\u5bc6\u540e\uff0c\u53d1\u9001\u56de\u6765\u3002\uff083\uff09\u8fdc\u7a0b\u4e3b\u673a\u7528\u81ea\u5df1\u7684\u79c1\u94a5\uff0c\u89e3\u5bc6\u767b\u5f55\u5bc6\u7801\uff0c\u5982\u679c\u5bc6\u7801\u6b63\u786e\uff0c\u5c31\u540c\u610f\u7528\u6237\u767b\u5f55\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u672c\u8eab\u662f\u5b89\u5168\u7684\uff0c\u4f46\u662f\u5b9e\u65bd\u7684\u65f6\u5019\u5b58\u5728\u4e00\u4e2a\u98ce\u9669\uff1a\u5982\u679c\u6709\u4eba\u622a\u83b7\u4e86\u767b\u5f55\u8bf7\u6c42\uff0c\u7136\u540e\u5192\u5145\u8fdc\u7a0b\u4e3b\u673a\uff0c\u5c06\u4f2a\u9020\u7684\u516c\u94a5\u53d1\u7ed9\u7528\u6237\uff0c\u90a3\u4e48\u7528\u6237\u5f88\u96be\u8fa8\u522b\u771f\u4f2a\u3002\u56e0\u4e3a\u4e0d\u50cfhttps\u534f\u8bae\uff0cSSH\u534f\u8bae\u7684\u516c\u94a5\u662f\u6ca1\u6709\u8bc1\u4e66\u4e2d\u5fc3\uff08CA\uff09\u516c\u8bc1\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u90fd\u662f\u81ea\u5df1\u7b7e\u53d1\u7684\u3002\u53ef\u4ee5\u8bbe\u60f3\uff0c\u5982\u679c\u653b\u51fb\u8005\u63d2\u5728\u7528\u6237\u4e0e\u8fdc\u7a0b\u4e3b\u673a\u4e4b\u95f4\uff08\u6bd4\u5982\u5728\u516c\u5171\u7684wifi\u533a\u57df\uff09\uff0c\u7528\u4f2a\u9020\u7684\u516c\u94a5\uff0c\u83b7\u53d6\u7528\u6237\u7684\u767b\u5f55\u5bc6\u7801\u3002\u518d\u7528\u8fd9\u4e2a\u5bc6\u7801\u767b\u5f55\u8fdc\u7a0b\u4e3b\u673a\uff0c\u90a3\u4e48SSH\u7684\u5b89\u5168\u673a\u5236\u5c31\u8361\u7136\u65e0\u5b58\u4e86\u3002\u8fd9\u79cd\u98ce\u9669\u5c31\u662f\u8457\u540d\u7684\"\u4e2d\u95f4\u4eba\u653b\u51fb\"\uff08Man-in-the-middle attack\uff09\u3002SSH\u534f\u8bae\u662f\u5982\u4f55\u5e94\u5bf9\u7684\u5462\uff1f\u56db\u3001\u53e3\u4ee4\u767b\u5f55\u5982\u679c\u4f60\u662f\u7b2c\u4e00\u6b21\u767b\u5f55\u5bf9\u65b9\u4e3b\u673a\uff0c\u7cfb\u7edf\u4f1a\u51fa\u73b0\u4e0b\u9762\u7684\u63d0\u793a\uff1a\u3000\u3000$ ssh user@hostThe authenticity of host 'host (12.18.429.21)' can't be established.RSA key fingerprint is 98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d.Are you sure you want to continue connecting (yes\/no)?\u8fd9\u6bb5\u8bdd\u7684\u610f\u601d\u662f\uff0c\u65e0\u6cd5\u786e\u8ba4host\u4e3b\u673a\u7684\u771f\u5b9e\u6027\uff0c\u53ea\u77e5\u9053\u5b83\u7684\u516c\u94a5\u6307\u7eb9\uff0c\u95ee\u4f60\u8fd8\u60f3\u7ee7\u7eed\u8fde\u63a5\u5417\uff1f\u6240\u8c13\"\u516c\u94a5\u6307\u7eb9\"\uff0c\u662f\u6307\u516c\u94a5\u957f\u5ea6\u8f83\u957f\uff08\u8fd9\u91cc\u91c7\u7528RSA\u7b97\u6cd5\uff0c\u957f\u8fbe1024\u4f4d\uff09\uff0c\u5f88\u96be\u6bd4\u5bf9\uff0c\u6240\u4ee5\u5bf9\u5176\u8fdb\u884cMD5\u8ba1\u7b97\uff0c\u5c06\u5b83\u53d8\u6210\u4e00\u4e2a128\u4f4d\u7684\u6307\u7eb9\u3002\u4e0a\u4f8b\u4e2d\u662f98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d\uff0c\u518d\u8fdb\u884c\u6bd4\u8f83\uff0c\u5c31\u5bb9\u6613\u591a\u4e86\u3002\u5f88\u81ea\u7136\u7684\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\uff0c\u7528\u6237\u600e\u4e48\u77e5\u9053\u8fdc\u7a0b\u4e3b\u673a\u7684\u516c\u94a5\u6307\u7eb9\u5e94\u8be5\u662f\u591a\u5c11\uff1f\u56de\u7b54\u662f\u6ca1\u6709\u597d\u529e\u6cd5\uff0c\u8fdc\u7a0b\u4e3b\u673a\u5fc5\u987b\u5728\u81ea\u5df1\u7684\u7f51\u7ad9\u4e0a\u8d34\u51fa\u516c\u94a5\u6307\u7eb9\uff0c\u4ee5\u4fbf\u7528\u6237\u81ea\u884c\u6838\u5bf9\u3002\u5047\u5b9a\u7ecf\u8fc7\u98ce\u9669\u8861\u91cf\u4ee5\u540e\uff0c\u7528\u6237\u51b3\u5b9a\u63a5\u53d7\u8fd9\u4e2a\u8fdc\u7a0b\u4e3b\u673a\u7684\u516c\u94a5\u3002\u3000\u3000Are you sure you want to continue connecting (yes\/no)? yes\u7cfb\u7edf\u4f1a\u51fa\u73b0\u4e00\u53e5\u63d0\u793a\uff0c\u8868\u793ahost\u4e3b\u673a\u5df2\u7ecf\u5f97\u5230\u8ba4\u53ef\u3002\u3000\u3000Warning: Permanently added 'host,12.18.429.21' (RSA) to the list of known hosts.\u7136\u540e\uff0c\u4f1a\u8981\u6c42\u8f93\u5165\u5bc6\u7801\u3002\u3000\u3000Password: (enter password)\u5982\u679c\u5bc6\u7801\u6b63\u786e\uff0c\u5c31\u53ef\u4ee5\u767b\u5f55\u4e86\u3002\u5f53\u8fdc\u7a0b\u4e3b\u673a\u7684\u516c\u94a5\u88ab\u63a5\u53d7\u4ee5\u540e\uff0c\u5b83\u5c31\u4f1a\u88ab\u4fdd\u5b58\u5728\u6587\u4ef6$HOME\/.ssh\/known_hosts\u4e4b\u4e2d\u3002\u4e0b\u6b21\u518d\u8fde\u63a5\u8fd9\u53f0\u4e3b\u673a\uff0c\u7cfb\u7edf\u5c31\u4f1a\u8ba4\u51fa\u5b83\u7684\u516c\u94a5\u5df2\u7ecf\u4fdd\u5b58\u5728\u672c\u5730\u4e86\uff0c\u4ece\u800c\u8df3\u8fc7\u8b66\u544a\u90e8\u5206\uff0c\u76f4\u63a5\u63d0\u793a\u8f93\u5165\u5bc6\u7801\u3002\u6bcf\u4e2aSSH\u7528\u6237\u90fd\u6709\u81ea\u5df1\u7684known_hosts\u6587\u4ef6\uff0c\u6b64\u5916\u7cfb\u7edf\u4e5f\u6709\u4e00\u4e2a\u8fd9\u6837\u7684\u6587\u4ef6\uff0c\u901a\u5e38\u662f\/etc\/ssh\/ssh_known_hosts\uff0c\u4fdd\u5b58\u4e00\u4e9b\u5bf9\u6240\u6709\u7528\u6237\u90fd\u53ef\u4fe1\u8d56\u7684\u8fdc\u7a0b\u4e3b\u673a\u7684\u516c\u94a5\u3002\u4e94\u3001\u516c\u94a5\u767b\u5f55\u4f7f\u7528\u5bc6\u7801\u767b\u5f55\uff0c\u6bcf\u6b21\u90fd\u5fc5\u987b\u8f93\u5165\u5bc6\u7801\uff0c\u975e\u5e38\u9ebb\u70e6\u3002\u597d\u5728SSH\u8fd8\u63d0\u4f9b\u4e86\u516c\u94a5\u767b\u5f55\uff0c\u53ef\u4ee5\u7701\u53bb\u8f93\u5165\u5bc6\u7801\u7684\u6b65\u9aa4\u3002\u6240\u8c13\"\u516c\u94a5\u767b\u5f55\"\uff0c\u539f\u7406\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u7528\u6237\u5c06\u81ea\u5df1\u7684\u516c\u94a5\u50a8\u5b58\u5728\u8fdc\u7a0b\u4e3b\u673a\u4e0a\u3002\u767b\u5f55\u7684\u65f6\u5019\uff0c\u8fdc\u7a0b\u4e3b\u673a\u4f1a\u5411\u7528\u6237\u53d1\u9001\u4e00\u6bb5\u968f\u673a\u5b57\u7b26\u4e32\uff0c\u7528\u6237\u7528\u81ea\u5df1\u7684\u79c1\u94a5\u52a0\u5bc6\u540e\uff0c\u518d\u53d1\u56de\u6765\u3002\u8fdc\u7a0b\u4e3b\u673a\u7528\u4e8b\u5148\u50a8\u5b58\u7684\u516c\u94a5\u8fdb\u884c\u89e3\u5bc6\uff0c\u5982\u679c\u6210\u529f\uff0c\u5c31\u8bc1\u660e\u7528\u6237\u662f\u53ef\u4fe1\u7684\uff0c\u76f4\u63a5\u5141\u8bb8\u767b\u5f55shell\uff0c\u4e0d\u518d\u8981\u6c42\u5bc6\u7801\u3002\u8fd9\u79cd\u65b9\u6cd5\u8981\u6c42\u7528\u6237\u5fc5\u987b\u63d0\u4f9b\u81ea\u5df1\u7684\u516c\u94a5\u3002\u5982\u679c\u6ca1\u6709\u73b0\u6210\u7684\uff0c\u53ef\u4ee5\u76f4\u63a5\u7528ssh-keygen\u751f\u6210\u4e00\u4e2a\uff1a\u3000\u3000$ ssh-keygen\u8fd0\u884c\u4e0a\u9762\u7684\u547d\u4ee4\u4ee5\u540e\uff0c\u7cfb\u7edf\u4f1a\u51fa\u73b0\u4e00\u7cfb\u5217\u63d0\u793a\uff0c\u53ef\u4ee5\u4e00\u8def\u56de\u8f66\u3002\u5176\u4e2d\u6709\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u8981\u4e0d\u8981\u5bf9\u79c1\u94a5\u8bbe\u7f6e\u53e3\u4ee4\uff08passphrase\uff09\uff0c\u5982\u679c\u62c5\u5fc3\u79c1\u94a5\u7684\u5b89\u5168\uff0c\u8fd9\u91cc\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2a\u3002\u8fd0\u884c\u7ed3\u675f\u4ee5\u540e\uff0c\u5728$HOME\/.ssh\/\u76ee\u5f55\u4e0b\uff0c\u4f1a\u65b0\u751f\u6210\u4e24\u4e2a\u6587\u4ef6\uff1aid_rsa.pub\u548cid_rsa\u3002\u524d\u8005\u662f\u4f60\u7684\u516c\u94a5\uff0c\u540e\u8005\u662f\u4f60\u7684\u79c1\u94a5\u3002\u8fd9\u65f6\u518d\u8f93\u5165\u4e0b\u9762\u7684\u547d\u4ee4\uff0c\u5c06\u516c\u94a5\u4f20\u9001\u5230\u8fdc\u7a0b\u4e3b\u673ahost\u4e0a\u9762\uff1a\u3000\u3000$ ssh-copy-id user@host\u597d\u4e86\uff0c\u4ece\u6b64\u4f60\u518d\u767b\u5f55\uff0c\u5c31\u4e0d\u9700\u8981\u8f93\u5165\u5bc6\u7801\u4e86\u3002\u5982\u679c\u8fd8\u662f\u4e0d\u884c\uff0c\u5c31\u6253\u5f00\u8fdc\u7a0b\u4e3b\u673a\u7684\/etc\/ssh\/sshd_config\u8fd9\u4e2a\u6587\u4ef6\uff0c\u68c0\u67e5\u4e0b\u9762\u51e0\u884c\u524d\u9762\"#\"\u6ce8\u91ca\u662f\u5426\u53d6\u6389\u3002\u3000\u3000RSAAuthentication yes\nPubkeyAuthentication yes\nAuthorizedKeysFile .ssh\/authorized_keys\u7136\u540e\uff0c\u91cd\u542f\u8fdc\u7a0b\u4e3b\u673a\u7684ssh\u670d\u52a1\u3002\u3000\u3000\/\/ ubuntu\u7cfb\u7edf\nservice ssh restart\/\/ debian\u7cfb\u7edf\n\/etc\/init.d\/ssh restart\u516d\u3001authorized_keys\u6587\u4ef6\u8fdc\u7a0b\u4e3b\u673a\u5c06\u7528\u6237\u7684\u516c\u94a5\uff0c\u4fdd\u5b58\u5728\u767b\u5f55\u540e\u7684\u7528\u6237\u4e3b\u76ee\u5f55\u7684$HOME\/.ssh\/authorized_keys\u6587\u4ef6\u4e2d\u3002\u516c\u94a5\u5c31\u662f\u4e00\u6bb5\u5b57\u7b26\u4e32\uff0c\u53ea\u8981\u628a\u5b83\u8ffd\u52a0\u5728authorized_keys\u6587\u4ef6\u7684\u672b\u5c3e\u5c31\u884c\u4e86\u3002\u8fd9\u91cc\u4e0d\u4f7f\u7528\u4e0a\u9762\u7684ssh-copy-id\u547d\u4ee4\uff0c\u6539\u7528\u4e0b\u9762\u7684\u547d\u4ee4\uff0c\u89e3\u91ca\u516c\u94a5\u7684\u4fdd\u5b58\u8fc7\u7a0b\uff1a\u3000\u3000$ ssh user@host 'mkdir -p .ssh && cat >> .ssh\/authorized_keys' < ~\/.ssh\/id_rsa.pub\u8fd9\u6761\u547d\u4ee4\u7531\u591a\u4e2a\u8bed\u53e5\u7ec4\u6210\uff0c\u4f9d\u6b21\u5206\u89e3\u5f00\u6765\u770b\uff1a\uff081\uff09\"$ ssh user@host\"\uff0c\u8868\u793a\u767b\u5f55\u8fdc\u7a0b\u4e3b\u673a\uff1b\uff082\uff09\u5355\u5f15\u53f7\u4e2d\u7684mkdir .ssh && cat >> .ssh\/authorized_keys\uff0c\u8868\u793a\u767b\u5f55\u540e\u5728\u8fdc\u7a0bshell\u4e0a\u6267\u884c\u7684\u547d\u4ee4\uff1a\uff083\uff09\"$ mkdir -p .ssh\"\u7684\u4f5c\u7528\u662f\uff0c\u5982\u679c\u7528\u6237\u4e3b\u76ee\u5f55\u4e2d\u7684.ssh\u76ee\u5f55\u4e0d\u5b58\u5728\uff0c\u5c31\u521b\u5efa\u4e00\u4e2a\uff1b\uff084\uff09'cat >> .ssh\/authorized_keys' < ~\/.ssh\/id_rsa.pub\u7684\u4f5c\u7528\u662f\uff0c\u5c06\u672c\u5730\u7684\u516c\u94a5\u6587\u4ef6~\/.ssh\/id_rsa.pub\uff0c\u91cd\u5b9a\u5411\u8ffd\u52a0\u5230\u8fdc\u7a0b\u6587\u4ef6authorized_keys\u7684\u672b\u5c3e\u3002\u5199\u5165authorized_keys\u6587\u4ef6\u540e\uff0c\u516c\u94a5\u767b\u5f55\u7684\u8bbe\u7f6e\u5c31\u5b8c\u6210\u4e86\u3002\u5173\u4e8eshell\u8fdc\u7a0b\u767b\u5f55\u7684\u90e8\u5206\u5c31\u5199\u5230\u8fd9\u91cc\uff0c\u4e0b\u4e00\u6b21\u63a5\u7740\u4ecb\u7ecd\u300a\u8fdc\u7a0b\u64cd\u4f5c\u548c\u7aef\u53e3\u8f6c\u53d1\u300b\u3002","tags":[{"name":"\u65e5\u5e38\u641e\u673a","slug":"\u65e5\u5e38\u641e\u673a","permalink":"https:\/\/skywt.cn\/tag\/%E6%97%A5%E5%B8%B8%E6%90%9E%E6%9C%BA\/"},{"name":"\u7f51\u7edc","slug":"\u7f51\u7edc","permalink":"https:\/\/skywt.cn\/tag\/%E7%BD%91%E7%BB%9C\/"},{"name":"Linux","slug":"Linux","permalink":"https:\/\/skywt.cn\/tag\/Linux\/"},{"name":"\u5e38\u7528Linux\u547d\u4ee4","slug":"\u5e38\u7528Linux\u547d\u4ee4","permalink":"https:\/\/skywt.cn\/tag\/%E5%B8%B8%E7%94%A8Linux%E5%91%BD%E4%BB%A4\/"}],"categories":[]},{"title":"\u52a8\u6001\u89c4\u5212\u7ecf\u5178\u9898\u76ee\uff08\u4e00\uff09\uff1a\u77f3\u5b50\u5408\u5e76","date":"2018-01-21T20:08:17+08:00","path":"https:\/\/skywt.cn\/posts\/stone","text":"\u52a8\u6001\u89c4\u5212\uff08Dynamic Programming\uff09\uff0c\u7b80\u79f0DP\uff0c\u662f\u7528\u4e8e\u6c42\u89e3\u51b3\u7b56\u8fc7\u7a0b\u4e2d\u7684\u6700\u4f18\u5316\u6570\u5b66\u65b9\u6cd5\uff0c\u4e0d\u4ec5\u7528\u4e8e\u7f16\u7a0b\u9886\u57df\uff0c\u4e5f\u7528\u4e8e\u7ba1\u7406\u5b66\u3001\u7ecf\u6d4e\u5b66\u3001\u751f\u7269\u5b66\uff08\u5177\u4f53\u8fd9\u4e09\u4e2a\u5730\u65b9\u600e\u4e48\u7528\u5c31\u4e0d\u5173\u6211\u4eec\u4e8b\u4e86\uff09\u3002\u4f5c\u4e3aNOIP\u7ade\u8d5b\u7684\u6bcf\u5e74\u5fc5\u8003\u9898\u578b\uff0c\u52a8\u6001\u89c4\u5212\u662f\u5f88\u91cd\u8981\u7684\uff01\uff01\uff01\u77f3\u5b50\u5408\u5e76\uff08NOI1995\uff09\uff08\u533a\u95f4DP\uff09\u6d1b\u8c37\u9898\u76ee\u63d0\u4ea4\u7f51\u5740\uff1a\u77f3\u5b50\u5408\u5e76\n \t\u95ee\u9898\u63cf\u8ff0\n\u5728\u4e00\u4e2a\u5706\u5f62\u64cd\u573a\u7684\u56db\u5468\u6446\u653eN\u5806\u77f3\u5b50\uff0c\u73b0\u8981\u5c06\u77f3\u5b50\u6709\u6b21\u5e8f\u5730\u5408\u5e76\u6210\u4e00\u5806\u3002\u89c4\u5b9a\u6bcf\u6b21\u53ea\u80fd\u9009\u76f8\u90bb\u76842\u5806\u5408\u5e76\u6210\u65b0\u7684\u4e00\u5806\uff0c\u5e76\u5c06\u65b0\u7684\u4e00\u5806\u7684\u77f3\u5b50\u6570\u8bb0\u4e3a\u8be5\u6b21\u5408\u5e76\u7684\u5f97\u5206\u3002\u8bd5\u8bbe\u8ba1\u51fa\u4e00\u4e2a\u7b97\u6cd5\uff0c\u8ba1\u7b97\u51fa\u5c06N\u5806\u77f3\u5b50\u5408\u5e76\u62101\u5806\u7684\u6700\u5c0f\u5f97\u5206\u548c\u6700\u5927\u5f97\u5206\u3002\n \t\u8f93\u5165\u6587\u4ef6\n\u8f93\u5165\u7b2c\u4e00\u884c\u4e3a n\uff08n\u2264100\uff09\uff0c\u8868\u793a\u6709 n \u5806\u77f3\u5b50\u3002\u7b2c\u4e8c\u884c\u4e3a n \u4e2a\u7528\u7a7a\u683c\u9694\u5f00\u7684\u6574\u6570\uff0c\u4f9d\u6b21\u8868\u793a\u8fd9 n \u5806\u77f3\u5b50\u7684\u77f3\u5b50\u6570\u91cf\u3002\uff08 \u22641000\uff09\n \t\u8f93\u51fa\u6587\u4ef6\n\u8f93\u51fa\u5171 2 \u884c\uff1b\n\u7b2c 1 \u884c\u4e3a\u5c06 n \u5806\u77f3\u5b50\u5408\u5e76\u6210\u4e00\u5806\u7684\u6700\u5c0f\u5f97\u5206\uff1b\n\u7b2c 2 \u884c\u4e3a\u5c06 n \u5806\u77f3\u5b50\u5408\u5e76\u6210\u4e00\u5806\u7684\u6700\u5927\u5f97\u5206\u3002\n \t\u8f93\u5165\u6837\u4f8b\n3\n1 2 3\n \t\u8f93\u51fa\u6837\u4f8b\n9\n11\n \t\u95ee\u9898\u5206\u6790\n\u4e00\u770b\u5230\u8fd9\u9898\uff0c\u6211\u7b2c\u4e00\u4e2a\u60f3\u5230\u7684\u5c31\u662f\u5408\u5e76\u679c\u5b50\u8fd9\u9053\u9898\u3002\u8fd9\u4e24\u9898\u7684\u786e\u5f88\u50cf\uff0c\u4f46\u662f\u4ed4\u7ec6\u770b\u5c31\u53d1\u73b0\u4ed6\u4eec\u5b58\u5728\u7684\u5f88\u660e\u663e\u7684\u4e00\u4e2a\u4e0d\u540c\u662f\uff1a\u8fd9\u9898\u53ea\u80fd\u5408\u5e76\u76f8\u90bb\u4e24\u5806\uff0c\u800c\u5408\u5e76\u679c\u5b50\u90a3\u9898\u53ef\u4ee5\u968f\u4fbf\u8df3\u4e24\u5806\u5408\u5e76\u3002\u90a3\u4e48\u8fd9\u9898\u53ef\u4ee5\u7528\u8d2a\u5fc3\u5417\uff1f\u663e\u7136\u6709\u5f88\u591a\u5f88\u591a\u5f88\u591a\u7684\u53cd\u4f8b\uff0c\u4ee5\u6c42\u6700\u5c0f\u4e3a\u4f8b\uff0c\u6bd4\u5982\u6709\u516d\u5806\u77f3\u5b50\uff0c\u5206\u522b\u662f3 4 6 5 4 2\uff1a\u8d2a\u5fc3\uff1a3 4 6 5 4 2\n5 4 6 5 4 (+5)\n9 6 5 4 (+9)\n9 6 9 (+9)\n15 9 (+15)\n24 (+24)\nTotal\uff1a62\u6b63\u89e3\uff1a3 4 6 5 4 2\n7 6 5 4 2 (+7)\n7 6 5 6 (+6)\n7 6 11 (+11)\n13 11 (+11)\n24 (+24)\nTotal\uff1a59\u6240\u4ee5\u8d2a\u5fc3\u7684\u65b9\u6cd5\u80af\u5b9a\u662f\u4e0d\u884c\u7684\u3002\u518d\u56de\u6765\u770b\u770b\u8fd9\u9898\uff0c\u53d1\u73b0\u9996\u5148\u51b3\u7b56\u4e0d\u662f\u6309\u7167\u4e00\u5806\u4e00\u5806\u6765\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u6ca1\u6cd5\u5237\u7ebf\u6027\u7684DP\uff1b\u4e00\u4e2a\u51b3\u7b56\u53ef\u4ee5\u5212\u5206\u6210\u5f88\u591a\u5b50\u51b3\u7b56\uff08\u4e5f\u5c31\u662f\u8bf4\u6240\u6709\u7684\u5408\u5e76\u53ef\u4ee5\u662f1~i\u7684\u5408\u5e76\u5f97\u5206+i+1~n\u7684\u5408\u5e76\u5f97\u5206\uff09\uff0c\u90a3\u4e48\u4e0d\u663e\u7136\u662f\u533a\u95f4DP\u561b\uff01\u9996\u5148\u5904\u7406\u73af\u7684\u95ee\u9898\u3002\u4e00\u822c\u5904\u7406\u73af\u7684\u95ee\u9898\u7684\u65b9\u6cd5\u5c31\u662f\uff1a\u590d\u5236\u4e00\u4efd\uff0c\u653e\u5230\u5e8f\u5217\u5c3e\uff0c\u8fd9\u6837\u5c31\u628a\u73af\u53d8\u6210\u957f\u5ea6\u4e3a\u539f\u6765\u4e24\u500d\u7684\u94fe\u4e86\u3002\u4f8b\u5982\uff1a\u73af\uff1a1 2 3 4\n\u94fe\uff1a1 2 3 4 1 2 3 4\u63a5\u4e0b\u6765\uff0cDP\u6b63\u5f0f\u90e8\u5206\uff1a\u5b9a\u4e49F[i][j]\u4e3a\u4ecei\u5230j\u4e00\u6bb5\u77f3\u5b50\u5408\u5e76\u7684\u6700\u4f18\u89e3\u3002\u90a3\u4e48\u81ea\u7136\u4f1a\u60f3\u5230\u5728i\uff5ej-1\u4e4b\u95f4\u679a\u4e3ek\uff08\u4e3a\u4ec0\u4e48\u662fj-1\u4e0d\u662fj\uff1f\u770b\u8f6c\u79fb\u65b9\u7a0b\u5c31\u77e5\u9053\u4e86\uff09\uff0c\u4e3a\u4e86\u65b9\u4fbf\u6211\u4eec\u5148\u9020\u51fa\u524d\u7f00\u548csum\uff0c\u8f6c\u79fb\u65b9\u7a0b\uff1aF[i][j]=max\/min(F[i][k],F[k+1][j])+sum[j]-sum[i-1];\u590d\u6742\u5ea6\uff1aO(N\u00b3)\u3002\u7b97\u662f\u633a\u7b80\u5355\u7684\u4e00\u9898\u3002","tags":[{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u52a8\u6001\u89c4\u5212\u7c7b\u578b\u9898","slug":"\u52a8\u6001\u89c4\u5212\u7c7b\u578b\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB%E5%9E%8B%E9%A2%98\/"},{"name":"\u533a\u95f4DP","slug":"\u533a\u95f4DP","permalink":"https:\/\/skywt.cn\/tag\/%E5%8C%BA%E9%97%B4DP\/"}],"categories":[]},{"title":"\u52a8\u6001\u89c4\u5212\u7ecf\u5178\u9898\u76ee\uff08\u4e8c\uff09\uff1a\u53c8\u4e0a\u9501\u5996\u5854","date":"2018-01-21T20:49:04+08:00","path":"https:\/\/skywt.cn\/posts\/tower","text":"\u53c8\u662f\u8d85\u7ea7\u6c34\u7684\u4e00\u9898\uff0c\u4e00\u9053\u7ebf\u6027DP\u3002\u8fd9\u51e0\u9053DP\u5f88\u7b80\u5355\uff0c\u5206\u6210\u5f88\u591a\u7bc7\u6587\u7ae0\u53d1\u53ef\u4ee5\u5047\u88c5\u81ea\u5df1\u7684\u535a\u5ba2\u5199\u4e86\u5f88\u591a\u6587\u7ae0\uff5e\u53c8\u4e0a\u9501\u5996\u5854(tower.pas\/c\/cpp)\u6d1b\u8c37\u9898\u76ee\u63d0\u4ea4\u5730\u5740\uff1a\u53c8\u4e0a\u9501\u5996\u5854\u9898\u76ee\u63cf\u8ff0\u5c0fD\u5728X\u661f\u4e70\u5b8c\u4e86\u60f3\u8981\u7684\u4e1c\u897f\uff0c\u5728\u98de\u5f80\u4e0b\u4e00\u4e2a\u76ee\u7684\u5730\u7684\u9014\u4e2d\uff0c\u6b63\u65e0\u804a\u7684\u4ed6\u8f6c\u5934\u770b\u4e86\u770b\u8eab\u8fb9\u7684\u5c0fA\uff0c\u53d1\u73b0\u5c0fA\u6b63\u5728\u73a9\u300a\u4ed9\u5251\u300b\u3002\u53ef\u662f\u5c0fA\u5f88\u5947\u602a\uff0c\u4ed6\u4e00\u76f4\u5728\u9501\u5996\u5854\u7684\u5468\u56f4\u8f6c\u6765\u8f6c\u53bb\uff0c\u53ef\u662f\u5c31\u662f\u4e0d\u8fdb\u53bb\u3002\u4e8e\u662f\u5c0fD\u95ee\u4ed6\uff1a\u201c\u4f60\u5728\u5e72\u4ec0\u4e48\uff1f\u600e\u4e48\u4e0d\u4e0a\u53bb\uff1f\u201d\u5c0fA \u8bf4\uff1a\u201c\u6211\u5728\u60f3\u600e\u4e48\u4ece\u9501\u5996\u5854\u5916\u9762\u722c\u4e0a\u53bb\u3002\u201d\uff08\u5012\u2026\uff09\u9501\u5996\u5854\u7684\u5efa\u9020\u5f88\u7279\u522b\uff0c\u5854\u603b\u5171\u6709n\u5c42\uff0c\u4f46\u662f\u9ad8\u5ea6\u5374\u4e0d\u76f8\u540c\uff0c\u8fd9\u9020\u6210\u4e86\u5c0fA\u722c\u8fc7\u6bcf\u5c42\u7684\u65f6\u95f4\u4e5f\u4e0d\u540c\u3002\u5c0fA\u4f1a\u7528\u4ed9\u672f\uff0c\u6bcf\u7528\u4e00\u6b21\u53ef\u4ee5\u8ba9\u4ed6\u5411\u4e0a\u8df3\u4e00\u5c42\u6216\u4e24\u5c42\uff0c\u4f46\u662f\u6bcf\u6b21\u8df3\u8dc3\u540e\u5c0fA\u90fd\u5c06\u7528\u5b8c\u7075\u529b\uff0c\u5fc5\u987b\u722c\u8fc7\u81f3\u5c11\u4e00\u5c42\u624d\u80fd\u518d\u6b21\u8df3\u8dc3\uff08\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u5c0fA\u9700\u8981\u8df3\u4e24\u6b21\u4e00\u5c42\u624d\u4f11\u606f\uff09\u3002\u5c0fA\u60f3\u7528\u6700\u77ed\u7684\u65f6\u95f4\u722c\u5230\u5854\u9876\uff0c\u53ef\u662f\u4ed6\u4e0d\u80fd\u627e\u5230\u65f6\u95f4\u6700\u77ed\u7684\u65b9\u6848\uff0c\u6240\u4ee5\u8bf7\u4f60\u5e2e\u4ed6\u627e\u5230\u4e00\u4e2a\u65f6\u95f4\u6700\u77ed\u7684\u65b9\u6848\u8ba9\u4ed6\u722c\u5230\u5854\u9876\u3002\u5c0fA\u53ea\u5173\u5fc3\u65f6\u95f4\uff0c\u6240\u4ee5\u4f60\u53ea\u8981\u544a\u8bc9\u4ed6\u6700\u77ed\u65f6\u95f4\u662f\u591a\u5c11\u5c31\u53ef\u4ee5\u4e86\u3002\u4f60\u53ef\u4ee5\u6700\u540e\u8df3\u5230\u5854\u5916\u5373\u8d85\u8fc7\u5854\u9ad8\u3002\n \t\u8f93\u5165\u683c\u5f0f\n\u7b2c\u4e00\u884c\u4e00\u4e2a\u6570n(n\u226410000)\uff0c\u8868\u793a\u5854\u7684\u5c42\u6570\u3002\n\u63a5\u4e0b\u6765\u7684n\u884c\u6bcf\u884c\u4e00\u4e2a\u6570(\u2264100)\uff0c\u8868\u793a\u4ece\u4e0b\u5f80\u4e0a\u6bcf\u5c42\u7684\u9ad8\u5ea6\u3002\n \t\u8f93\u51fa\u683c\u5f0f\n\u4e00\u4e2a\u6570\uff0c\u8868\u793a\u6700\u77ed\u65f6\u95f4\u3002\n \t\u6837\u4f8b\u8f93\u5165\n5\n3\n5\n1\n8\n4\n \t\u6837\u4f8b\u8f93\u51fa\n1\n \t\u6570\u636e\u89c4\u6a21\n\u5bf920%\u7684\u6570\u636e\uff1an\u226410\uff1b\n\u5bf940%\u7684\u6570\u636e\uff1an\u2264100\uff1b\n\u5bf960%\u7684\u6570\u636e\uff1an\u22645000\uff1b\n\u5bf9100%\u7684\u6570\u636e\uff1an\u226410000\uff1b\n \t\u95ee\u9898\u5206\u6790\n\u663e\u7136\u8fd9\u9898\u662fDP\uff0c\u7ebf\u6027DP\u3002\u76f4\u63a5F[i]\u5b9a\u4e49\u4e0d\u884c\uff0c\u56e0\u4e3a\u4e0a\u6b21\u7684\u662f\u5426\u7528\u4ed9\u672f\u8fd9\u4e00\u51b3\u7b56\u4f1a\u5f71\u54cd\u8fd9\u4e00\u6b21\u7684\u51b3\u7b56\u3002\u90a3\u4e48\u6211\u4eec\u81ea\u7136\u60f3\u5230\u5b9a\u4e49F[i][0\/1]\u8868\u793a\u5230\u8fbe\u7b2ci\u5c42\u6240\u7528\u6700\u77ed\u65f6\u95f4\uff0c0\u8868\u793a\u4e0a\u6b21\u662f\u98de\u8fc7\u6765\u7684\uff0c1\u8868\u793a\u4e0a\u6b21\u662f\u722c\u8fc7\u6765\u7684\u3002\u90a3\u4e48\u663e\u7136\u8f6c\u79fb\u65b9\u7a0b\u5c31\u662f\uff1aF[i][0]=min(F[i-1][1],F[i-1][0])+t[i];\nF[i][1]=min(F[i-1][1],F[i-2][1]);\u65f6\u95f4\u590d\u6742\u5ea6O(N)\uff01","tags":[{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u52a8\u6001\u89c4\u5212\u7c7b\u578b\u9898","slug":"\u52a8\u6001\u89c4\u5212\u7c7b\u578b\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB%E5%9E%8B%E9%A2%98\/"},{"name":"\u7ebf\u6027DP","slug":"\u7ebf\u6027DP","permalink":"https:\/\/skywt.cn\/tag\/%E7%BA%BF%E6%80%A7DP\/"}],"categories":[]},{"title":"\u6700\u957f\u516c\u5171\u4e0a\u5347\u5b50\u5e8f\u5217\uff08LICS\uff09","date":"2018-02-08T19:41:02+08:00","path":"https:\/\/skywt.cn\/posts\/lics","text":"\u6211\u4eec\u5b66\u8fc7\u6700\u957f\u5347\u5e8f\u5217\uff08Longest Increasing Subsequence\uff0c\u7b80\u79f0LIS\uff09\u548c\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\uff08Longest Common Subsequence\uff0c\u7b80\u79f0LCS\uff09\uff08\u6ca1\u9519\u4e4b\u524d\u4e24\u7bc7\u535a\u5ba2\u5c31\u662f\u4e3a\u8fd9\u7bc7\u51c6\u5907\u7684\u2026\u2026\uff09\uff0c\u90a3\u4e48\u5982\u679c\u6211\u4eec\u8981\u6c42\u6700\u957f\u516c\u5171\u4e0a\u5347\u5b50\u5e8f\u5217\uff08Longest Increasing Common Subsequence\uff0c\u7b80\u79f0LICS\u6216\u8005LCIS\uff09\u5462\uff1f\n\n\uff08\u5efa\u8bae\u9605\u8bfb\u672c\u6587\u4e4b\u524d\u5148\u770b\u770bLCS\u3002\uff09\n\u4f8b\u9898\uff1aGreatest Common Increasing Subsequence\u00a0\uff08HDU\uff09\nO\uff08N\u00b3\uff09\u7684\u52a8\u6001\u89c4\u5212\n\u4e00\u5f00\u59cb\u60f3\u5230\u7684\u80af\u5b9a\u662f\u7ed3\u5408LIS\u548cLCS\uff0c\u5982\u4f55\u7ed3\u5408\uff1f\u56de\u5fc6\u4e00\u4e0bLCS\u7684\u5b9a\u4e49\uff1aF[i][j]\u8868\u793aA\u7684\u7b2ci\u4f4d\u53ca\u4e4b\u524d \u7684\u5b50\u5e8f\u5217\u4e0e B\u7684\u7b2cj\u4f4d\u53ca\u4e4b\u524d \u7684\u5b50\u5e8f\u5217\uff0c\u8fd9\u4e24\u6bb5\u5e8f\u5217\u7684LCS\u957f\u5ea6\u3002\u6ce8\u610f\uff0cA\u4e2d1\u5230i\u6bb5\u4e0eB\u4e2d1\u5230j\u6bb5LCS\u4e0d\u4e00\u5b9a\u53d6\u4e86i\u6216j\u3002\u8fd9\u5c31\u5f88\u9ebb\u70e6\u4e86\uff1a\u5982\u4f55\u5224\u65ad\u4e0b\u4e00\u4e2a\u53d6\u7684\u5143\u7d20\u5927\u4e8eLCS\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u4e5f\u5c31\u662f\u5982\u4f55\u5224\u65ad\u53d6\u4e0b\u4e00\u4e2a\u5143\u7d20\u540e\u5e8f\u5217\u662f\u4e0d\u662f\u5347\u7684\u5462\uff1f\u8fd9\u65f6\u5019\u4e0d\u5f97\u4e0d\u91cd\u65b0\u8003\u8651DP\u7684\u5b9a\u4e49\u4e86\u3002\n\u7531\u4e8e\u8981\u6807\u8bb0LCS\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u4e0d\u59a8\u50cfLIS\u4e00\u6837\uff0c\u5b9a\u4e49F[i][j]\u8868\u793aA\u7684\u7b2ci\u4f4d\u53ca\u4e4b\u524d \u7684\u5b50\u5e8f\u5217\u4e0e B\u7684\u7b2cj\u4f4d\u53ca\u4e4b\u524d \u7684\u5b50\u5e8f\u5217\uff0c\u8fd9\u4e24\u6bb5\u5e8f\u5217\u7684LCS\u957f\u5ea6\uff0c\u5176\u4e2dB[j]\u662fLCS\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002\u4e0eLCS\u4e00\u6837\u679a\u4e3ei\u3001j\uff0c\u8ba8\u8bba\u51e0\u79cd\u60c5\u51b5\uff1a\n\nA[i]&gt;B[j]\uff1a\u65e2\u7136\u8fd9\u4f4d\u4e0a\u53ef\u4ee5\u53d6\uff0c\u56e0\u4e3a\u7b2c\u4e00\u7ef4\u5b9a\u4e49\u65f6\u6ca1\u6709\u89c4\u5b9aA[i]\u5fc5\u53d6\uff0c\u6240\u4ee5\u4e4b\u524d\u7684LICS\u957f\u5ea6\u7b2c\u4e00\u7ef4\u5fc5\u7136\u662fi-1\uff1b\u7136\u800c\u7b2c\u4e8c\u7ef4\u89c4\u5b9a\u4e86B[j]\u5fc5\u53d6\uff0c\u6240\u4ee5LICS\u957f\u5ea6\u7b2c\u4e8c\u7ef4\u4e0d\u4e00\u5b9a\u662fj-1\uff0c\u56e0\u4e3a\u5982\u679c\u53d6F[i-1][j-1]\u610f\u5473\u7740j-1\u5fc5\u53d6\u4e86\u3002\u6240\u4ee5\u5e94\u8be5\u679a\u4e3e\u4e00\u4e2ak\u2208[1,j-1]\uff0c\u5728F[i-1][k]\u4e2d\u53d6\u6700\u5927\u503c+1\u5c31\u662fF[i][j]\u4e86\u3002\nA[i]&lt;B[j]\uff1a\u7531\u4e8eB[j]\u662f\u6700\u540e\u4e00\u4e2a\uff0c\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u50cfLCS\u4e00\u6837F[i][j]=max(F[i-1][j],F[i][j-1])\uff1b\u5e94\u8be5\u662fF[i][j]=F[i-1][j]\uff0c\u56e0\u4e3a\u8fd9\u65f6\u6c42\u5f97\u7684LCS\u6839\u672c\u6ca1\u53d8\uff0cB[j]\u4e00\u5b9a\u4e0eA[1...i-1]\u4e2d\u4e00\u4e2a\u5143\u7d20\u76f8\u7b49\uff0c\u4e0d\u8003\u8651A[i]\u7167\u6837\u80fd\u5f97\u51fa\u6700\u4f18\u89e3\u3002\n\u6240\u4ee5\u5f97\u51fa\u8f6c\u79fb\u65b9\u7a0b\uff1a\n\nF[i][j]=F[i-1][j];        (a[i]\u2264b[j])\nF[i][j]=max(F[i-1][k])+1; (b[k]='0'&&chy) return x; else return y;\n}\nint main(){\n    freopen(\"lics.in\",\"r\",stdin);\n    freopen(\"lics.out\",\"w\",stdout);\n    t=read();\n    while (t--){\n        n=read();\n        for (int i=1;i","tags":[{"name":"OI\u7b97\u6cd5","slug":"OI\u7b97\u6cd5","permalink":"https:\/\/skywt.cn\/tag\/OI%E7%AE%97%E6%B3%95\/"},{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u52a8\u6001\u89c4\u5212\u7c7b\u578b\u9898","slug":"\u52a8\u6001\u89c4\u5212\u7c7b\u578b\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB%E5%9E%8B%E9%A2%98\/"}],"categories":[]},{"title":"\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\uff08LIS\uff09","date":"2018-02-07T22:31:40+08:00","path":"https:\/\/skywt.cn\/posts\/lis","text":"\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\uff0c\u5168\u79f0Longest Increasing Sequence\uff0c\u7b80\u79f0LIS\uff0c\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e0a\u662f\u6307\u4e00\u4e2a\u5e8f\u5217\u4e2d\u6700\u957f\u7684\u5355\u8c03\u9012\u589e\u7684\u5b50\u5e8f\u5217\uff08\u767e\u5ea6\u767e\u79d1\uff09\u3002\u8fd9\u4e2a\u5e8f\u5217\u4e0d\u4e00\u5b9a\u662f\u8fde\u7eed\u7684\u3002\u4e4b\u524d\u8bf4\u8fc7\uff0c\u52a8\u6001\u89c4\u5212\u5c31\u662f\u628a\u4e00\u4e2a\u95ee\u9898\u5206\u6210\u4e00\u5927\u5806\u5b50\u95ee\u9898\uff0c\u5bf9\u8fd9\u4e9b\u5b50\u95ee\u9898\u6c42\u89e3\uff0c\u6700\u540e\u6c42\u89e3\u51fa\u8fd9\u4e2a\u95ee\u9898\u3002\u5982\u4f55\u6c42\u6700\u957f\u5347\u5e8f\u5217\uff1f\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\uff0c\u968f\u4fbf\u53d6\u4e00\u4e2a\u6570\u5b57a[i]\uff08\u5f53\u7136\u662f\u5728\u5e8f\u5217\u91cc\uff09\uff0c\u8981\u662f\u6211\u4eec\u77e5\u9053a[i]\u4e4b\u524d\u7684\u4e14\u6700\u540e\u4e00\u4e2a\u6570\u636e\u6bd4a[i]\u5c0f\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u957f\u5ea6\u8be5\u591a\u597d\uff01\u76f4\u63a5+1\u5c31\u662f\u4ee5i\u4e3a\u7ed3\u5c3e\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u957f\u5ea6\u3002\u90a3\u4e48\u8981\u77e5\u9053\u4e4b\u524d\u7684\u6700\u957f\u5347\u5e8f\u5217\u957f\u5ea6\uff0c\u5c31\u8981\u6309\u7167\u540c\u6837\u7684\u65b9\u6cd5\u627e\u4e4b\u524d\u7684\u4e4b\u524d\u2026\u2026\u663e\u7136\u662f\u52a8\u6001\u89c4\u5212\u3002\u4e00\u3001\u666e\u901a\u7684DP\u65b9\u6cd5\u5b9a\u4e49F[i]\u8868\u793a\u4ee5\u961f\u5217\u4e2d\u7b2ci\u4e2a\u5143\u7d20\uff08a[i]\uff09\u4e3a\u7ed3\u5c3e\uff08\u5176\u4e2d\u7b2ci\u4e2a\u5143\u7d20\u5fc5\u53d6\uff09\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u957f\u5ea6\u3002\u8f6c\u79fb\u65b9\u7a0b\uff1aF[i]=max(F[i],F[j]+1);  (a[i]>a[j] && i>j)\u8fd9\u6837\u6c42\u65f6\u95f4\u590d\u6742\u5ea6O\uff08N\u00b2\uff09\u3002\u4e8c\u3001\u4e8c\u5206\u4f18\u5316\u7684\u65b9\u6cd5\u53e6\u4e00\u79cd\u6c42\u6cd5\u662f\u4e8c\u5206\u4f18\u5316\u3002\u7ef4\u62a4\u4e00\u4e2a\u5355\u8c03\u4e0d\u964d\u7684\u5e8f\u5217que\uff0c\u540c\u6837\u5b9a\u4e49F[i]\u4e3a\u4ee5\u961f\u5217\u4e2d\u7b2ci\u4e2a\u5143\u7d20\uff08a[i]\uff09\u4e3a\u7ed3\u5c3e\uff08\u5176\u4e2d\u7b2ci\u4e2a\u5143\u7d20\u5fc5\u53d6\uff09\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u957f\u5ea6\u3002\u6709\u4e2a\u8d2a\u5fc3\u7684\u60f3\u6cd5\uff1a\u6211\u4eec\u8981\u8ba9\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u5c3d\u91cf\u957f\uff0c\u5c31\u8981\u8ba9\u5e8f\u5217\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5c3d\u91cf\u5c0f\uff08\u8fd9\u6837\u624d\u80fd\u8ba9\u540e\u9762\u5143\u7d20\u53ef\u4ee5\u52a0\u5165\u7684\u53ef\u80fd\u6027\u66f4\u5927\uff09\uff0c\u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a\u6570\u5b57a[i]\uff0c\u5728\u5e8f\u5217\u4e2d\u7528\u4e8c\u5206\u627e\u4e00\u4e2a\u5927\u4e8ea[i]\u4e14\u6700\u63a5\u8fd1a[i]\u7684\u6570\u5b57\u66ff\u6362\uff0c\u8fd9\u6837\u5e76\u4e0d\u4f1a\u5f71\u54cd\u5e8f\u5217\u7684\u957f\u5ea6\uff0c\u4e5f\u80fd\u4fdd\u8bc1\u89e3\u6700\u4f18\u3002\u5982\u679c\u5e8f\u5217\u91cc\u6240\u6709\u6570\u5b57\u90fd\u5c0f\u4e8ea[i]\u5c31\u5c06\u5176\u52a0\u5165\u5e8f\u5217\u5c3e\u90e8\u3002\u8fd9\u91cc\u6709\u4e2a\u95ee\u9898\uff1a\u66ff\u6362\u4e86\u5e8f\u5217\u4e2d\u7684\u5143\u7d20\uff0c\u4f3c\u4e4e\u5e76\u4e0d\u80fd\u4fdd\u8bc1\u66ff\u6362\u4f4d\u7f6e\u4e4b\u540e\u7684\u5143\u7d20\u5728\u539f\u5e8f\u5217a[i]\u4e4b\u540e\u51fa\u73b0\uff1f\u4e3e\u4e2a\u6817\u5b50\uff1a\u7ef4\u62a4\u7684\u5e8f\u5217\uff08que\u6570\u7ec4\uff09\uff1a1 3 5 7 9\n\u539f\u5e8f\u5217\uff08a\u6570\u7ec4\uff09\uff1a1 3 5 7 9 4 10\uff08i=6\uff0c\u5373\u73b0\u5728\u8981\u5904\u74064\u8fd9\u4e2a\u6570\u5b57\uff09\n\u672c\u6b21\u66ff\u6362\u540e\uff1a1 3 4 7 9\u5f88\u663e\u7136\uff0c\u539f\u5e8f\u5217\u91cc1 3 4 7 9\u5e76\u4e0d\u7b26\u5408\u8981\u6c42\uff08\u6ca1\u6309\u7167\u987a\u5e8f\u6765\uff09\u3002\u6211\u4eec\u63a5\u7740\u5f80\u4e0b\u770b\uff1a\u4e0b\u4e00\u6b65\uff0c\u5904\u74066\uff0c\u66ff\u6362\u4e867\uff0c\u5e8f\u5217\u53d8\u6210\u4e861 3 4 7 9 10\uff0c\u957f\u5ea6\u662f6\uff0c\u6b63\u786e\u7b54\u6848\u662f1 3 5 7 9 10\uff0c\u957f\u5ea6\u4e5f\u662f6\uff0c\u548c\u7b54\u6848\u4e00\u6837\uff01\u5176\u5b9e\u66ff\u6362\u4e0d\u4f1a\u51cf\u5c0f\u5e8f\u5217\u957f\u5ea6\uff0c\u53ea\u4f1a\u589e\u52a0\u5e8f\u5217\u957f\u5ea6\uff1b\u5982\u679c\u4e4b\u524d\u628a\u5e8f\u5217\u4e2d\u67d0\u4e2a\u5143\u7d20\u66ff\u6362\u6210a[i]\uff0c\u90a3\u4e48\u4e4b\u540e\u65b0\u52a0\u5165\u5e8f\u5217\u7684\u5143\u7d20\uff08\u975e\u66ff\u6362\uff09\u80af\u5b9a\u90fd\u5728a[i]\u4e4b\u540e\uff01que\u5e8f\u5217\u5e76\u4e0d\u662f\u771f\u6b63\u7684\u6700\u957f\u4e0a\u5347\u5e8f\u5217\uff0c\u4f46\u662f\u957f\u5ea6\u4e00\u5b9a\u4e0e\u771f\u6b63\u7684\u6700\u957f\u4e0a\u5347\u5e8f\u5217\u76f8\u7b49\uff01\u8fd9\u4e48\u4f18\u5316\u53ef\u4ee5\u628a\u65f6\u95f4\u590d\u6742\u5ea6\u4f18\u5316\u5230O\uff08Nlog2\uff08N\uff09\uff09\u3002\u4ee3\u7801\uff08\u65b0\u9c9c\u51fa\u7089\u7684\uff01\uff01\uff01\uff09\uff1a#include\n#include\n#include\nusing namespace std;\nconst int maxn=100005;\nint n,a[maxn],que[maxn],len=0;\ninline int read(){\n int ret=0,f=1;char ch=getchar();\n while (ch'9') {if (ch=='-') f=-1;ch=getchar();}\n while (ch>='0'&&ch1)+L;\n  if (que[mid-1]","tags":[{"name":"OI\u7b97\u6cd5","slug":"OI\u7b97\u6cd5","permalink":"https:\/\/skywt.cn\/tag\/OI%E7%AE%97%E6%B3%95\/"},{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u52a8\u6001\u89c4\u5212\u7c7b\u578b\u9898","slug":"\u52a8\u6001\u89c4\u5212\u7c7b\u578b\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB%E5%9E%8B%E9%A2%98\/"}],"categories":[]},{"title":"\u52a8\u6001\u89c4\u5212\u7ecf\u5178\u9898\u76ee\uff08\u4e09\uff09\uff1a\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\uff08LCS\uff09","date":"2018-02-08T14:34:46+08:00","path":"https:\/\/skywt.cn\/posts\/lcs","text":"\u5199\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u548c\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u4e24\u7bc7\u535a\u5ba2\u90fd\u662f\u4e3a\u4e86\u540e\u9762\u7684\u6700\u957f\u516c\u5171\u4e0a\u5347\u5b50\u5e8f\u5217\u51c6\u5907\u554a~\u4e00\u4e2a\u5e8f\u5217\uff0c\u5982\u679c\u662f\u4e24\u4e2a\u6216\u591a\u4e2a\u5df2\u77e5\u5e8f\u5217\u7684\u5b50\u5e8f\u5217\uff0c\u4e14\u662f\u6240\u6709\u5b50\u5e8f\u5217\u4e2d\u6700\u957f\u7684\uff0c\u5219\u5b83\u5c31\u662f\u8fd9\u4e24\u4e2a\u5e8f\u5217\u7684\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\uff08Longest Common Sequence\uff0c\u7b80\u79f0LCS\uff09\u3002\u4e00\u822c\u6c42LCS\uff0c\u6211\u4eec\u90fd\u91c7\u7528\u52a8\u6001\u89c4\u5212\u89e3\u51b3\u3002\u6c42\u4e24\u4e2a\u5e8f\u5217\u7684LCS\u4e00\u770b\u627e\u4e0d\u5230\u5165\u624b\u70b9\uff0c\u4e0d\u50cftower\u90a3\u9898\u4e00\u6837\u6709\u660e\u663e\u7684\u8d70\u5411\uff0c\u6240\u4ee5\u96be\u4ee5\u63a8\u51fa\u4e0a\u4e00\u6b65\uff0c\u96be\u4ee5\u5212\u5206\u5b50\u95ee\u9898\u3002\u4ed4\u7ec6\u60f3\u60f3\uff0c\u5b58\u5728\u516c\u5171\u5b50\u5e8f\u5217\uff0c\u5c31\u5b58\u5728\u4e24\u4e2a\u5e8f\u5217\u4e2d\u5b58\u5728\u5143\u7d20\u76f8\u7b49\uff08\u5373A[i]=B[j]\uff09\u7684\u60c5\u51b5\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u4f1a\u60f3\u5230\u679a\u4e3ei\u548cj\u3002\uff08\u5206\u6790\u4e2d\u6240\u8bf4\u7684\u5e8f\u5217\u5747\u4e3a\u6570\u7ec4\uff0c\u4e0b\u6807\u4ece1\u5f00\u59cb\uff0c\u5e76\u975e\u5b57\u7b26\u4e32\uff09\u5047\u8bbe\u4e24\u4e2a\u5e8f\u5217\u5206\u522b\u4e3aA\uff08\u957f\u5ea6\u4e3an\uff09\u3001B\uff08\u957f\u5ea6\u4e3am\uff09\uff0c\u5b9a\u4e49\uff1aF[i][j]\u8868\u793a A\u7684\u7b2ci\u4f4d\u53ca\u4e4b\u524d \u8fd9\u6bb5\u5b50\u5e8f\u5217\u4e0e B\u7684\u7b2cj\u4f4d\u53ca\u4e4b\u524d \u8fd9\u6bb5\u5b50\u5e8f\u5217\uff0c\u8fd9\u4e24\u6bb5\u5b50\u5e8f\u5217\u7684LCS\u957f\u5ea6\u3002\u5206\u6790\u4e00\u4e0b\uff1a\u5982\u679cA[i]=B[j]\uff0c\u90a3\u4e48F[i][j]\u5c31\u662fF[i-1][j-1]+1\uff0c\u4e5f\u5c31\u662f\u8bf4\u516c\u5171\u5b50\u5e8f\u5217\u52a0\u4e86\u4e00\u4f4d\uff08\u8fd9\u4f4d\u4e0a\u662f\u300c\u516c\u5171\u7684\u300d\uff09\uff1b\u5982\u679cA[i]\u2260B[j]\uff0c\u90a3\u4e48F[i][j]\u5c31\u662fF[i-1][j]\u548cF[i][j-1]\u91cc\u6700\u5927\u7684\uff08\u56e0\u4e3aA[i]\u6216\u8005B[j]\u52a0\u4e0d\u52a0\u90fd\u548c\u7b54\u6848\u6ca1\u5173\u7cfb\uff09\u3002\u90a3\u4e48\u5f88\u5bb9\u6613\u5f97\u5230\u8f6c\u79fb\u65b9\u7a0b\uff1aF[i][j]=max(F[i-1][j-1]+(A[i]==B[j]),F[i-1][j],F[i][j-1]);\u663e\u7136\u6700\u540e\u7684\u7b54\u6848\u5c31\u662fF[n][m]\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u662fO\uff08N\u00b2\uff09\u3002\u518d\u5f00\u4e2a\u4e8c\u7ef4\u6570\u7ec4s\u8bb0\u5f55\u7b54\u6848\u5c31\u53ef\u4ee5\u4e86\u3002\u4ee5\u4e0b\u662f\u539f\u9898\u2026\u2026\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217(lcs.pas\/c\/cpp)\n \t\u95ee\u9898\u63cf\u8ff0\n\u4e00\u4e2a\u7ed9\u5b9a\u7684\u5b50\u5e8f\u5217\u662f\u5728\u8be5\u5e8f\u5217\u4e2d\u5220\u53bb\u82e5\u5e72\u5143\u7d20\u540e\u5f97\u5230\u7684\u5e8f\u5217\u3002\u4f8b\u5982\uff0c\u5e8f\u5217Z=\u662f\u5e8f\u5217X=\u7684\u5b50\u5e8f\u5217\u3002\u7ed9\u5b9a\u4e24\u4e2a\u5e8f\u5217X\u548cY\uff0c\u5f53\u53e6\u4e00\u5e8f\u5217Z\u65e2\u662fX\u7684\u5b50\u5e8f\u5217\u53c8\u662fY\u7684\u5b50\u5e8f\u5217\u65f6\uff0c\u79f0Z\u662f\u5e8f\u5217X\u3001Y\u7684\u516c\u5171\u5b50\u5e8f\u5217\u3002\u4f8b\u5982\uff0c\u82e5X=\uff0cY=\uff0c\u90a3\u4e48\u662fX\u548cY\u7684\u4e00\u4e2a\u516c\u5171\u5b50\u5e8f\u5217\uff0c\u4e5f\u662fX\u548cY\u7684\u4e00\u4e2a\u516c\u5171\u5b50\u5e8f\u5217\u3002\u7f16\u7a0b\u6c42\u51fa\u7ed9\u5b9a\u7684\u4e24\u4e2a\u5e8f\u5217\u4e2d\uff0c\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002\n \t\u8f93\u5165\u683c\u5f0f\n\u5171\u4e24\u884c\uff0c\u5404\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u8868\u793a\u7b2c\u4e00\u4e2a\u5e8f\u5217\uff0c\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\u8868\u793a\u7b2c\u4e8c\u4e2a\u5e8f\u5217\uff0c\u4e24\u4e2a\u5b57\u7b26\u4e32\uff0c\u957f\u5ea6\u5747\u5c0f\u4e8e1000\u3002\n \t\u8f93\u51fa\u683c\u5f0f\n\u7b2c\u4e00\u884c\uff1a\u4e00\u4e2a\u6574\u6570\uff0c\u5373\u4e24\u4e2a\u5e8f\u5217\u7684\u516c\u5171\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002\n\u7b2c\u4e8c\u884c\uff1a\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\uff0c\u5982\u6709\u591a\u89e3\uff0c\u5219\u5c3d\u91cf\u4ee5\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e3a\u4e3b\u3002\n \t\u8f93\u5165\u6837\u4f8b\naabaaecd\nabcd\n \t\u8f93\u51fa\u6837\u4f8b\n4abcd\n \t\u4ee3\u7801\n\u4e0d\u89c1\u4e86\uff01\n\uff08\u61d2\u5f97\u5199\u4ee3\u7801\u4e86\uff0c\u6709\u65f6\u95f4\u518d\u8865\u5427zzz\uff09","tags":[{"name":"OI\u7b97\u6cd5","slug":"OI\u7b97\u6cd5","permalink":"https:\/\/skywt.cn\/tag\/OI%E7%AE%97%E6%B3%95\/"},{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u52a8\u6001\u89c4\u5212\u7c7b\u578b\u9898","slug":"\u52a8\u6001\u89c4\u5212\u7c7b\u578b\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB%E5%9E%8B%E9%A2%98\/"}],"categories":[]},{"title":"Google\u76f8\u673a\u5b89\u88c5\u4f7f\u7528\u6559\u7a0b","date":"2018-02-20T20:52:27+08:00","path":"https:\/\/skywt.cn\/posts\/googlecamera","text":"\u4f17\u6240\u5468\u77e5\uff0cGoogle\u76f8\u673a\u7684\u7b97\u6cd5\uff08\u7279\u522b\u662fHDR+\uff09\u662f\u5927\u795e\u7ea7\u522b\u7684\uff0c\u800c\u5c0f\u7c736\u7cfb\u7edf\u81ea\u5e26\u76f8\u673a\u7b80\u76f4\u662f\u2026\u2026\uff08\u867d\u7136\u5c0f\u7c73Note3\u7684DXO\u5f97\u5206\u670990\u5206\uff0c\u800c\u4e14\u636e\u8bf4\u662f\u7528\u4e86\u548c\u5c0f\u7c736\u4e00\u6837\u7684\u76f8\u673a\u6a21\u7ec4\uff0c\u4f46\u662f\uff01Note3\u7684\u7b97\u6cd5\u548cMi6\u662f\u4e0d\u4e00\u6837\u7684\uff01\u4e0d\u7136Note3\u5c31\u6ca1\u6709\u5356\u70b9\u4e86\u2026\u2026\uff09\n\n\uff08\u53c2\u8003\u9177\u5b89\u5927\u4f6c\u5199\u7684\u6559\u7a0b\uff09\u4e00\u822c\u6765\u8bf4Google\u76f8\u673a\u7684HDR+\u53ea\u80fd\u5728\u8c37\u6b4c\u4eb2\u513f\u5b50\u8eab\u4e0a\u7528\uff08Pixel\u3001Nexus\u7cfb\u5217\uff09\uff0c\u8c37\u6b4c\u5546\u5e97\u867d\u7136\u6709\uff0c\u4f46\u662f\u5374\u662f\u9609\u5272\u7248\uff0c\u6ca1\u6709\u6211\u4eec\u6700\u60f3\u8981\u7684HDR+\u529f\u80fd\u2026\u2026\n\u597d\u5728\u6709\u5f88\u591a\u5927\u795e\u5236\u4f5c\u51fa\u4e86Google\u76f8\u673a\u63d0\u53d6\u7248\u3002\u8fd9\u4e9b\u5927\u795e\u5c31\u662f BSG\u3001Arnova8G \u7b49\u5927\u4f6c\u3002BSG\u6765\u81ea\u4fc4\u7f57\u65af\u8bba\u575b4PDA\uff08\u8fd9\u4e2a\u8bba\u575b\u4e0a\u5173\u4e8eGoogle\u76f8\u673a\u7684\u9875\u9762\u662f\u8fd9\u4e2a\u94fe\u63a5\uff0c\u5982\u679c\u4f60\u770b\u5f97\u61c2\u4fc4\u8bed\u2026\u2026\uff09\uff0c\u800cArnova8G\u5219\u6765\u81eaXDA\u3002\n\u8c37\u6b4c\u76f8\u673a\u5bf9\u6bd4\u5c0f\u7c736\u81ea\u5e26\u76f8\u673a\uff0c\u5728\u62cd\u591c\u666f\u65f6\uff08\u7528HDR+\uff09\u5341\u5206\u51fa\u8272\uff0c\u4e00\u53cd\u5c0f\u7c736\u62cd\u591c\u666f\u7684\u300c\u4eae\u778e\u773c\u300d\u3002\u800c\u4e14\uff08\u6211\u4f7f\u7528\u7684\u7248\u672c\uff09\u53ef\u4ee5\u8c03\u7528\u5c0f\u7c736\u7684\u56db\u8f74\u5149\u5b66\u9632\u6296\uff0c\u8fd9\u70b9\u8fd8\u662f\u4e0d\u9519\u7684\u3002\n\u5b89\u88c5\u524d\u51c6\u5907\n\n\u786e\u4fdd\u4f60\u7684\u624b\u673aCPU\u662f\u9ad8\u901a\u6653\u9f99\u5904\u7406\u5668\uff08\u6700\u597d\u662f820\u4ee5\u4e0a\uff0c600\u7cfb\u5217\u548c800\u5176\u4ed6\u673a\u578b\u4e5f\u53ef\u4ee5\u5c1d\u8bd5\uff09\uff0c\u5176\u4ed6CPU\u53ef\u80fd\u4e0d\u80fd\u652f\u6301\u3002\n\u786e\u4fdd\u4f60\u7684\u624b\u673a\u662fAndroid6.0\u4ee5\u4e0a\u3002\n\n\u4fee\u6539build.prop\u6587\u4ef6\n\u5927\u90e8\u5206\u673a\u578b\u4e0d\u9700\u8981\u52a0\u4ee3\u7801\u3002\u4f60\u53ef\u4ee5\u5148\u8fdb\u884c\u4e0b\u4e00\u6b65\uff0c\u4e0b\u8f7dGoogle\u76f8\u673a\u63d0\u53d6\u7248\u4ee5\u540e\u5982\u679c\u6253\u5f00\u95ea\u9000\u5c31\u8bf4\u660e\u4f60\u7684\u673a\u578b\u9700\u8981\u52a0\u4ee3\u7801\u3002\uff08\u5df2\u77e5\u5c0f\u7c736\u3001\u5c0f\u7c73Mix2\u9700\u8981\u52a0\u4ee3\u7801\uff09\n\n\u4e3a\u4ec0\u4e48\u8981\u52a0\u4ee3\u7801\u5462\uff1f\u5927\u6982\u539f\u56e0\u5c31\u662f\u90e8\u5206\u56fd\u4ea7\u5b9a\u5236UI\uff08\u5982MIUI\uff09\u6ca1\u6709\u5f00\u653e\u76f8\u673a\u63a5\u53e3\u5bfc\u81f4Google\u76f8\u673a\u6ca1\u6cd5\u8c03\u7528\u7cfb\u7edf\u81ea\u5e26\u7684\u6444\u50cf\u5934\u3002\n\n\n\u9996\u5148\u8981\u89e3bootloader\u9501\u5e76root\u4f60\u7684\u624b\u673a\uff0c\u5982\u679c\u662fMIUI\u81ea\u5e26root\u6216\u8005\u90e8\u5206\u53d8\u6001\u7684root\uff0c\u53ef\u80fd\u6ca1\u6709\u89e3\u9501system\u5206\u533a\uff0c\u5c31\u8981\u89e3\u9501system\uff08\u53ef\u4ee5\u7528Syslock\u8fd9\u6b3e\u8f6f\u4ef6\uff09\u3002\uff08\u6ce8\u610f\uff0c\u89e3\u9501system\u5206\u533a\u4e4b\u540e\u5c31\u4e0d\u80fd\u5347\u7ea7MIUI\u4e86\uff0c\u4e0d\u7136\u4f1a\u5361\u7c73\uff01\u66f4\u4e0d\u8981\u91cd\u65b0\u4e0a\u9501\uff0c\u4e5f\u4f1a\u5361\u7c73\uff09\n\u5b89\u88c5\u8c37\u6b4c\u6846\u67b6\uff08\u5982\u679c\u624b\u673a\u5df2\u7ecf\u53ef\u4ee5\u8fd0\u884cGoogle Play\u5546\u5e97\u8bf4\u660e\u5df2\u7ecf\u6709\u8c37\u6b4c\u6846\u67b6\uff0c\u5ffd\u7565\u6b64\u6b65\uff09\uff08\u53ea\u6709\u90e8\u5206\u56fd\u4ea7\u9b54\u6539ROM\u9700\u8981Google\u6846\u67b6\uff09\uff08\u4e5f\u53ef\u4ee5\u4f7f\u7528\u7cbe\u7b80\u7248Google\u76f8\u673a\u4e0d\u9700\u8981\u8c37\u6b4c\u6846\u67b6\uff0c\u4f46\u662f\u8fd8\u662f\u5efa\u8bae\u88c5\u4e2a\u8c37\u6b4c\u6846\u67b6\uff0c\u6bd5\u7adf\u4ee5\u540e\u7528\u5f97\u7740\uff09\uff1a\u63a8\u8350\u7528Go\u8c37\u6b4c\u5b89\u88c5\u5668\u4e4b\u7c7b\u7684\u5b89\u88c5\u5668\u4e00\u952e\u5b89\u88c5Google\u6846\u67b6\u3002\n\u4f7f\u7528RE\u7ba1\u7406\u5668\uff08Root Explorer\uff09\uff0c\u4ee5\u6587\u672c\u7f16\u8f91\u65b9\u5f0f\u6253\u5f00\uff08\u6839\u76ee\u5f55\u4e0b\u7684\uff09\/system\/build.prop\uff0c\u5728\u6700\u540e\u6362\u884c\u5e76\u52a0\u5165\u4ee5\u4e0b\u4ee3\u7801\uff1a\npersist.camera.HAL3.enabled=1\n\u6ce8\u610f\u4e00\u5b9a\u8981\u6362\u884c\uff0c\u591a\u7a7a\u683c\u5c11\u7a7a\u683c\u90fd\u6ca1\u5173\u7cfb\u3002\u9000\u51fa\u4fdd\u5b58\uff0c\u8fd9\u65f6\u5019RE\u7ba1\u7406\u5668\u4f1a\u81ea\u52a8\u5e2e\u4f60\u751f\u6210\u4e00\u4e2abuild.bak\u6587\u4ef6\uff0c\u4f5c\u4e3a\u539f\u6765build.prop\u6587\u4ef6\u7684\u5907\u4efd\uff08\u6ca1\u9519bak\u5c31\u662fbackup\u7684\u7b80\u5199\uff09\u3002\u5982\u679c\u4f60\u7ffb\u8f66\u4e86\uff0c\u5f00\u4e0d\u4e86\u673a\uff0c\u5c31\u7528TWRP\uff08\u6216\u8005\u5176\u4ed6\u7b2c\u4e09\u65b9Recovery\uff09\u91cc\u7684\u6587\u4ef6\u7ba1\u7406\u5220\u6389build.prop\uff0c\u628abuild.bak\u91cd\u547d\u540d\u4e3abuild.prop\uff0c\u518d\u91cd\u65b0\u5f00\u673a\u5373\u53ef\u3002\n\n\n\u8fd9\u65f6\u5019Google\u76f8\u673a\u5c31\u53ef\u4ee5\u7528\u4e86\u3002\n\n\u4e0b\u8f7d\u4e0e\u8bbe\u7f6eGoogle\u76f8\u673a\u63d0\u53d6\u7248\n\n\u4f60\u53ef\u4ee5\u53bb\u8fd9\u4e2a\u94fe\u63a5\u4e0b\u8f7d\u4e24\u4e2a\u5927\u4f6c\u63d0\u53d6\u4fee\u6539\u7684Google\u76f8\u673a\uff08\u6700\u597d\u627e\u5230\u5bf9\u5e94\u81ea\u5df1\u7684\u673a\u578b\u7684\u7248\u672c\uff09\uff08\u4e5f\u53ef\u4ee5\u53bb\u9177\u5b89\u8bc4\u8bba\u533a\u770b\u770b\u5927\u4f6c\u4eec\u5ea6\u76d8\u642c\u8fd0\u7684\uff09\uff0c\u4e0b\u8f7d\u5b89\u88c5\uff0c\u6253\u5f00\u8bbe\u7f6e\u53ef\u80fd\u4f1a\u6709\u300cBSG Mod Settings\u300d\u4e4b\u7c7b\u7684\uff0c\u8fd9\u91cc\u9762\u5c31\u662f\u4e00\u4e9b\u63d0\u53d6\u7248\u76f8\u673a\u7684\u8bbe\u7f6e\u3002\u5728\u4e0b\u8f7d\u9875\u9762\u4f60\u4e0b\u8f7d\u7684\u94fe\u63a5\u9644\u8fd1\u53ef\u80fd\u4f1a\u6709\u300csuggested settings\u300d\uff0c\u8fd9\u91cc\u9762\u5c31\u662f\u63d0\u53d6\u7248\u8bbe\u7f6e\u91cc\u5efa\u8bae\u7684\u8bbe\u7f6e\uff0c\u53ef\u4ee5\u6309\u7167\u91cc\u9762\u6307\u793a\u7684\u9009\u62e9\u3002\uff08\u8c8c\u4f3c\u4e00\u52a0\u548c\u5c0f\u7c73\u6bd4\u8f83\u70ed\u95e8\uff09\n\n\u4f60\u4e5f\u53ef\u4ee5\u53bb\u9177\u5b89\u7684Google\u76f8\u673a\u8bc4\u8bba\u533a\u770b\u770b\u5927\u4f6c\u4eec\u642c\u8fd0\u7684\u5176\u4ed6\u7248\u672c\u3002\u5982\u679c\u9047\u5230\u95ee\u9898\uff0c\u8bc4\u8bba\u533a\u91cc\u53ef\u80fd\u6709\u4f60\u8981\u7684\u7b54\u6848\u3002\n\n\u5982\u679c\u6253\u5f00\u95ea\u9000\uff0c\u8bf7\u770b\u4e0a\u4e00\u6b65\u3002\n\n\u4fee\u590d\u6162\u955c\u5934\n\n\u8bb8\u591a\u673a\u578b\u90fd\u4f1a\u9047\u5230\u8fd9\u6837\u7684\u95ee\u9898\uff1a\u70b9\u51fb\u5de6\u4e0a\u89d2\u6c49\u5821\u83dc\u5355-\u6162\u955c\u5934\u5c31\u95ea\u9000\u3002\u8fd9\u4e5f\u662f\u5b9a\u5236\u9b54\u6539Android\u7684\u539f\u56e0\u3002\u9700\u8981\u4e0b\u8f7dmedia_profiles.xml\u6587\u4ef6\uff0c\u66ff\u6362\/system\/etc\/media_profiles.xml\u6587\u4ef6\u66ff\u6362\u5e76\u628a\u6743\u9650\u8bbe\u4e3a0644\uff0c\u91cd\u542f\u624b\u673a\u3002\u5e76\u4e0d\u4fdd\u8bc1\u6240\u6709\u673a\u578b\u90fd\u652f\u6301\uff0c\u6240\u4ee5\u6ce8\u610f\u8981\u63d0\u524d\u5907\u4efd\u597d\u539f\u6765\u7684media_profiles.xml\u6587\u4ef6\u4ee5\u6551\u6025\uff01\n\n\u4fee\u590d\u7684\u6587\u4ef6\u4e0b\u8f7d\u94fe\u63a5\uff1a\u5ea6\u76d8\u4e0b\u8f7d\u00a0\u63d0\u53d6\u7801\uff1aeixd\uff08\u5982\u679c\u6709\u6761\u4ef6\u7528\u9b54\u6cd5\u53ef\u4ee5\u9009\u62e9 GoogleDrive\u4e0b\u8f7d\uff09\u3002\n\n\u5c3d\u60c5\u4eab\u53d7\n\n\u73b0\u5728\u5c31\u53ef\u4ee5\u4f53\u9a8c\u300c\u9006\u5149\u4e5f\u6e05\u6670\u300d\u7684Google\u7684\u9ed1\u79d1\u6280\u4e86\u3002","tags":[{"name":"\u65e5\u5e38\u641e\u673a","slug":"\u65e5\u5e38\u641e\u673a","permalink":"https:\/\/skywt.cn\/tag\/%E6%97%A5%E5%B8%B8%E6%90%9E%E6%9C%BA\/"},{"name":"\u9ed1\u79d1\u6280","slug":"\u9ed1\u79d1\u6280","permalink":"https:\/\/skywt.cn\/tag\/%E9%BB%91%E7%A7%91%E6%8A%80\/"},{"name":"Android","slug":"Android","permalink":"https:\/\/skywt.cn\/tag\/Android\/"}],"categories":[]},{"title":"Xposed\u6846\u67b6\u5982\u4f55\u5378\u8f7d\u4ee5\u53ca\u5378\u8f7d\u5305","date":"2018-02-24T20:30:24+08:00","path":"https:\/\/skywt.cn\/posts\/xposeduninst","text":"\u7ecf\u5e38\u770b\u5230\u9177\u5b89\u4e0a\u6709\u4eba\u5237Xposed\u7ffb\u8f66\u7684\uff08\u5361\u5728\u5f00\u673a\u9875\u9762\uff09\uff0c\u95ee\u5176\u89e3\u51b3\u65b9\u6cd5\uff0c\u9177\u53cb\u4eec\u7684\u53e3\u5f84\u4f3c\u4e4e\u51fa\u5947\u5730\u4e00\u81f4\uff1a\u300c\u53bbXDA\u4e0a\u627e\u5378\u8f7d\u5305\u554a\u3002\u300d\u4f46\u662fXDA\u8fd9\u79cd\u5168\u82f1\u6587\u7684\u8bba\u575b\uff08\u4f3c\u4e4e\u8fd8\u9700\u8981\u9b54\u6cd5\uff09\uff0c\u627e\u5378\u8f7d\u5305\u5e76\u6ca1\u6709\u8fd9\u4e48\u5bb9\u6613\u2026\u2026\u6240\u4ee5\u4eca\u5929\u6211\u5c31\u5199\u5199\u5982\u4f55\u5378\u8f7dXposed\u6846\u67b6\u4ee5\u53ca\u5378\u8f7d\u5305\u5230\u5e95\u5728\u54ea\u4e0b\u8f7d\u3002\n\n\u5728\u5f88\u4e45\u5f88\u4e45\u4ee5\u524d\uff0c\u6211\u8fd8\u5728\u7528\u8363\u80006P\u7684\u5e74\u4ee3\uff0c\u6211\u8fd8\u662f\u4e2a\u840c\u65b0\uff0c\u5bf9\u4e8e\u5237\u673a\u671b\u800c\u751f\u754f\uff0c\u5f53\u65f6\u5237Xposed\u6846\u67b6\u91cd\u542f\u90fd\u8981\u5fc3\u60c5\u5fd0\u5fd1\u4e0d\u5b89\u534a\u5929\uff0c\u4e00\u65e6\u53d1\u73b0\u5361\u5728\u5f00\u673a\u9875\u9762\u5c31\u53ea\u4f1a\u53cc\u6e05\uff08\u751a\u81f3\u56db\u6e05\u2026\u2026\uff09\u2026\u2026\u73b0\u5728\u77e5\u9053\u4e86\uff0c\u5176\u5b9e\u5e76\u4e0d\u662f\u6240\u6709\u5361\u5f00\u673a\u9875\u9762\u7684\u90fd\u4e0d\u53ef\u633d\u6551\u3002\n\u6700\u65b0\u7248\u672c\u7684MIUI9\uff0c\u7531\u4e8eMIUI\u5bf9Android\u7684\u9b54\u6539\uff0c\u5bfc\u81f4Xposed\u6846\u67b6\u91cc\u5fc5\u987b\u52fe\u9009\u300c\u7981\u7528\u8d44\u6e90\u94a9\u5b50\u300d\uff0c\u5426\u5219\u5237Xposed\u6846\u67b6\u5c31\u4f1a\u5f00\u673a\u5361\u7c73\u3002\u4e0a\u6b21\u6211\u5c31\u5fd8\u8bb0\u52fe\u9009\uff0c\u5361\u7c73\u4e86\u2026\u2026\u8fd8\u597d\uff0c\u73b0\u5728\u7684\u6211\u5df2\u7ecf\u4e0d\u662f\u4ee5\u524d\u7684\u6211\u4e86\uff08\u6ed1\u7a3d\uff09\u3002\n\u4e0b\u8f7dXposed\u6846\u67b6\u5378\u8f7d\u5305\n\u53ef\u4ee5\u8bf4Xposed\u6846\u67b6\u7684\u5b98\u7f51\u662fxposed.info\uff0c\u662fXposed\u7684\u53d1\u660e\u8005\uff0crovo89\u8fd9\u4f4d\u5927\u4f6c\u7ef4\u62a4\u7ba1\u7406\u7684\u3002\u8fd9\u4e2a\u7f51\u7ad9\u4e0a\u6709\u5f88\u591a\u6a21\u5757\uff0c\u4e5f\u6709\u5404\u4e2a\u7248\u672cXposed\u6846\u67b6\u548c\u5378\u8f7d\u5305\u4e0b\u8f7d\u94fe\u63a5\u3002\u5feb\u6377\u7684\u5378\u8f7d\u5305\u7d22\u5f15\u7f51\u5740\uff1ahttp:\/\/dl-xda.xposed.info\/framework\/uninstaller\/ \u3002\u8fd9\u91cc\u9762\u53ea\u8981\u9009\u62e9\u81ea\u5df1\u5b89\u88c5\u7684\u5bf9\u5e94\u6846\u67b6\u7248\u672c\u548c\u67b6\u6784\u5c31\u53ef\u4ee5\u4e86\u3002\u6bd4\u5982Mi6\u7684\u6653\u9f99835\u5c31\u662fARM64\u67b6\u6784\u7684\u3002\u73b0\u5728\u4e00\u822c\u65d7\u8230\u7ea7\u90fd\u662fARM64\u67b6\u6784\u7684\uff0cx86\u67b6\u6784\u7684\u5e94\u8be5\u662f\u82f1\u7279\u5c14\u82af\u7247\u2026\u2026\u90a3\u4e2a.asc\u540e\u7f00\u7684\u6587\u4ef6\u6211\u4e0d\u77e5\u9053\u662f\u5e72\u5565\u7684\u2026\u2026\u53cd\u6b63\u6211\u4eec\u53ea\u8981\u4e0b\u8f7d.zip\u62d3\u5c55\u540d\u7684\u6587\u4ef6\uff0c\u5728Recovery\u91cc\u5237\u5165\u5c31\u53ef\u4ee5\u4e86\u3002\n\uff08\u4eba\u751f\u7ecf\u9a8c\uff09\u5982\u4f55\u5c3d\u91cf\u907f\u514d\u7ffb\u8f66\nMIUI9\u5f00\u53d1\u7248\u53d1\u5e03\u540e\uff0c\u4e00\u7fa4\u4e00\u7fa4\u7684\u5927\u4f6c\u5237Xposed\u6846\u67b6\u7ffb\u8f66\u3002\u4e3b\u8981\u539f\u56e0\u5c31\u662f\u6ca1\u6709\u7981\u7528\u8d44\u6e90\u94a9\u5b50\u3002\u9177\u5b89\u751a\u81f3\u4e13\u95e8\u5f00\u51fa\u4e86\u4e00\u4e2a\u8bdd\u9898\uff1a#Xposed\u7ffb\u8f66\u70c8\u58eb\u5899#\u3002\u6240\u4ee5\u6211\u7684\u5efa\u8bae\u5c31\u662f\u5bf9\u4e8e\u90e8\u5206\u9b54\u6539\u7684UI\uff08\u7279\u522b\u662fMIUI\u8fd9\u79cd\u9b54\u6539\u5f88\u6df1\u7684\uff09\u5728\u4e0d\u77e5\u9053\u80fd\u4e0d\u80fd\u7528\u94a9\u5b50\u7684\u60c5\u51b5\u4e0b\u52fe\u9009\u7981\u7528\u94a9\u5b50\u4fdd\u5e73\u5b89\u3002\uff08\u76ee\u524d\u5df2\u77e5Mi6\u3001\u5c0f\u7c73Mix2\u5fc5\u987b\u7981\u7528\u94a9\u5b50\uff09\n\u56e0\u4e3aMIUI\u5f00\u53d1\u7248\u7684root\u9ed8\u8ba4\u662f\u6ca1\u6709\u89e3\u9501system\u5206\u533a\u7684\uff08\u88ab\u79f0\u4e3a\u5047root\uff09\uff0c\u6240\u4ee5\u6709\u4e00\u90e8\u5206\u540c\u5b66\u9700\u8981\u81ea\u5df1\u89e3\u9501system\u5206\u533a\uff0c\u5426\u5219\u4f1a\u5237\u5165\u5931\u8d25\u3002\u53ef\u4ee5\u7528Syslock\u8fd9\u4e2a\u8f6f\u4ef6\u3002\n\u5c31\u9171\uff0c\u60f3\u5230\u518d\u8865\u5145\u3002","tags":[{"name":"\u65e5\u5e38\u641e\u673a","slug":"\u65e5\u5e38\u641e\u673a","permalink":"https:\/\/skywt.cn\/tag\/%E6%97%A5%E5%B8%B8%E6%90%9E%E6%9C%BA\/"},{"name":"Android","slug":"Android","permalink":"https:\/\/skywt.cn\/tag\/Android\/"}],"categories":[]},{"title":"Windows \u4e0bU\u76d8\u81ea\u52a8\u5907\u4efd\u6279\u5904\u7406\u6587\u4ef6","date":"2018-02-25T19:34:44+08:00","path":"https:\/\/skywt.cn\/posts\/windowsdiskbackup","text":"\u56de\u5fc6\u8d77\u81ea\u5df1\u5bd2\u6691\u5047\u5728XH\u96c6\u8bad\u7684\u65f6\u5019\uff0c\u90a3\u4e2a\u65f6\u5019\u6bcf\u5929ZS\u8001\u5e08\u90fd\u4f1a\u63d0\u9192\u6211\u4eec\uff1a\u300c\u56de\u5bb6\u7ecf\u5e38\u7ed9U\u76d8\u505a\u505a\u5907\u4efd\uff0c\u7535\u5b50\u4ea7\u54c1\u7684\u4e1c\u897f\u4ec0\u4e48\u65f6\u5019\u51fa\u95ee\u9898\u4f60\u4e5f\u4e0d\u77e5\u9053\uff0cbalabala\u2026\u2026\u300d\u7136\u800c\uff0cU\u76d8\u91cc\u5185\u5bb9\u8d8a\u6765\u8d8a\u591a\uff0c\u590d\u5236\uff08\u5907\u4efd\uff09\u4e5f\u8981\u82b1\u5f88\u957f\u65f6\u95f4\uff0c\u665a\u4e0a\u5199\u597d\u4ee3\u7801\u8fd8\u8981\u770b\u7740U\u76d8\u91cc\u6570\u636e\u79fb\u52a8\u5341\u51e0\u5206\u949f\uff08\u56e0\u4e3a\u590d\u5236\u5b8c\u8981\u5173\u673a\uff09\uff0c\u592a\u6d6a\u8d39\u65f6\u95f4\u4e86\u2026\u2026\u800c\u4e14\u76f4\u63a5\u590d\u5236\u5bf9\u4e8e\u5907\u4efd\u6765\u8bf4\u8fd8\u6709\u4e2a\u7f3a\u9677\u3002\u4e8e\u662f\u4e4eU\u76d8\u81ea\u52a8\u5907\u4efd\u7684\u6279\u5904\u7406\u6587\u4ef6\u5c31\u5e94\u8fd0\u800c\u751f\u4e86\u3002\n\n\u524d\u9762\u8bf4\u7684\u300c\u7f3a\u9677\u300d\uff0c\u6307\u7684\u5176\u5b9e\u662f\uff1a\u5982\u679c\u6211\u5728U\u76d8\u91cc\u5220\u9664\u4e86\u67d0\u4e2a\u6587\u4ef6\uff0c\u628aU\u76d8\u590d\u5236\u5230\u539f\u6765\u7684\u5907\u4efd\u6587\u4ef6\u5939\uff08\u91cd\u590d\u6587\u4ef6\u8986\u76d6\uff09\uff0c\u5907\u4efd\u6587\u4ef6\u5939\u91cc\u9762\u4e0d\u4f1a\u628a\u6211\u5220\u6389\u7684\u6587\u4ef6\u5220\u9664\u3002\u867d\u7136\u5bf9\u4f7f\u7528\u6ca1\u6709\u5f71\u54cd\uff0c\u4f46\u662f\u5bf9\u5f3a\u8feb\u75c7\u7684\u6211\u5f71\u54cd\u8fd8\u662f\u5f88\u5927\u7684\u2026\u2026\n\u90a3\u4e48\u6211\u4eec\u7684\u6279\u5904\u7406\u8981\u505a\u4e09\u4ef6\u4e8b\uff1a\u5220\u9664\u539f\u6765\u5907\u4efd\u6587\u4ef6\u5939\u91cc\u7684\u6587\u4ef6\uff0c\u590d\u5236\u73b0U\u76d8\u6587\u4ef6\u8fdb\u5907\u4efd\u6587\u4ef6\u5939\uff0c\u5173\u673a\u3002\n\u9996\u5148\u5220\u9664\u6587\u4ef6\u7684\u547d\u4ee4\u662fdel\uff0c\u52a0\u4e0a\/f\u53ef\u4ee5\u5f3a\u5236\u5220\u9664\u53ea\u8bfb\u6587\u4ef6\uff1b\u52a0\u4e0a\/q\u53ef\u4ee5\u5f00\u542f\u300c\u5b89\u9759\u6a21\u5f0f\u300d\uff0c\u5220\u9664\u5168\u5c40\u901a\u914d\u7b26\u65f6\u4e0d\u8981\u6c42\u786e\u8ba4\uff08\u5b9e\u9645\u4e0a\u6211\u4eec\u5e76\u6ca1\u6709\u8ba9\u5b83\u5220\u9664\u5168\u5c40\u901a\u914d\u7b26\uff0c\u4f46\u662f\u6211\u603b\u89c9\u5f97\u52a0\u4e0a\u8fd9\u4e2a\u6bd4\u8f83\u5b89\u9759\u2026\u2026\uff09\uff1b\u52a0\u4e0a\/s\u5c31\u662f\u5220\u9664\u6240\u6709\u5b50\u76ee\u5f55\u4e2d\u7684\u6307\u5b9a\u6587\u4ef6\u3002\u6700\u540e\u52a0\u4e0a\u8def\u5f84\uff0c\u6211\u7684\u8def\u5f84\u662f\uff1aD:\\WT_Backup\u3002\ndel \/f \/q \/s D:\\WT_Backup\n\n\u4e0a\u9762\u7684del\u53ea\u80fd\u5220\u9664\u6587\u4ef6\uff0c\u4f46\u662f\u4e0d\u80fd\u5220\u9664\u76ee\u5f55\u3002\u5220\u9664\u76ee\u5f55\u7684\u547d\u4ee4\u662frd\uff0c\u52a0\u4e0a\/s\u5c31\u662f\u5220\u9664\u76ee\u5f55\u4e0b\u6240\u6709\u5b50\u76ee\u5f55\u548c\u6587\u4ef6\uff0c\u7528\u4e8e\u5220\u9664\u76ee\u5f55\u6811\uff1b\u52a0\u4e0a\/q\u540c\u7406\u662f\u5b89\u9759\u6a21\u5f0f\u3002\u6240\u4ee5\u4f7f\u7528rd\u547d\u4ee4\u5220\u5f97\u66f4\u5e72\u51c0\u3002\nrd \/s \/q D:\\WT_Backup\n\n\u63a5\u4e0b\u6765\u5c31\u662f\u590d\u5236\u4e86\u3002\u666e\u901a\u7684copy\u547d\u4ee4\u53c2\u6570\u592a\u5c11\uff0c\u7528xcopy\u547d\u4ee4\u66f4\u5389\u5bb3\u3002cmd\u91cc\u8f93\u5165xcopy \/?\u5c31\u53ef\u4ee5\u67e5\u770b\u53c2\u6570\u7684\u89e3\u91ca\uff08\u53c2\u6570\u592a\u591a\u4e86\uff0c\u8fd9\u91cc\u89e3\u91ca\u4e0d\u8fc7\u6765\u4e86\u2026\u2026\uff09\u3002\nxcopy E:\\ D:\\WTDB \/e \/i \/y \/h \/f\n\n\u6700\u540e\u5173\u673a\u5f88\u7b80\u5355\uff1a\u76f4\u63a5shutdown \/s\u3002\u52a0\u4e0aecho\u7b49\u7b49\u7684\u88c5\u9970\u5c31\u5927\u529f\u544a\u6210\u4e86~\n\u6700\u540e\u7684\u4ee3\u7801\uff1a\n@echo off\ntitle WT_BACKUPER - U\u76d8\u5907\u4efd\u6279\u5904\u7406\u6587\u4ef6\ncolor 0a\n\necho ==============================\necho BACKUPER\necho \u6b22\u8fce:)\necho \u5373\u5c06\u5f00\u59cb\u5907\u4efd...\necho ==============================\n\necho \u51c6\u5907\u6e05\u7a7a\u539f\u5907\u4efd\u6587\u4ef6\u5939... &amp; timeout \/t 5 &amp;\ndel \/f \/q \/s D:\\WT_Backup\nrd \/s \/q D:\\WTDB\necho \u51c6\u5907\u590d\u5236\u6587\u4ef6\u5230\u5907\u4efd\u6587\u4ef6\u5939... &amp; timeout \/t 3 &amp;\nxcopy E:\\ D:\\WTDB \/e \/i \/y \/h \/f\necho WTDisk\u5df2\u7ecf\u5907\u4efd\u5b8c\u6bd5\u3002\n\necho \u51c6\u5907\u5173\u673a...&amp; timeout \/t 5 &amp;\nshutdown \/s","tags":[{"name":"\u65e5\u5e38\u641e\u673a","slug":"\u65e5\u5e38\u641e\u673a","permalink":"https:\/\/skywt.cn\/tag\/%E6%97%A5%E5%B8%B8%E6%90%9E%E6%9C%BA\/"},{"name":"\u9ed1\u79d1\u6280","slug":"\u9ed1\u79d1\u6280","permalink":"https:\/\/skywt.cn\/tag\/%E9%BB%91%E7%A7%91%E6%8A%80\/"},{"name":"Windows","slug":"Windows","permalink":"https:\/\/skywt.cn\/tag\/Windows\/"}],"categories":[]},{"title":"POJ1723 \u58eb\u5175\u6392\u961f \u9898\u89e3","date":"2018-03-13T19:42:10+08:00","path":"https:\/\/skywt.cn\/posts\/poj1723","text":"\uff08POJ\u9898\u76ee\u94fe\u63a5\uff09\nN soldiers of the land Gridland are randomly scattered around the country.\nA position in Gridland is given by a pair (x,y) of integer coordinates. Soldiers can move - in one move, one soldier can go one unit up, down, left or right (hence, he can change either his x or his y coordinate by 1 or -1).\n\n\u6700\u5f00\u59cb\u770b\u8fd9\u9898\u60f3\u5230\u7684\u5c31\u662f\u679a\u4e3e\u961f\u4f0d\u7684\u8d77\u70b9\u3001\u8ba1\u7b97\u6bcf\u4e2a\u58eb\u5175\u79fb\u52a8\u5230\u5bf9\u5e94\u4f4d\u7f6e\u7684\u6700\u77ed\u8def\u3002\u9898\u76ee\u4e2d\u5e76\u6ca1\u6709\u786e\u5b9a\u58eb\u5175\u6392\u961f\u7684\u987a\u5e8f\uff0c\u90a3\u4e48\u5982\u4f55\u786e\u5b9a\u58eb\u5175\u79fb\u52a8\u5230\u7684\u300c\u5bf9\u5e94\u4f4d\u7f6e\u300d\u5462\uff1f\u663e\u7136\uff0c\u6309\u7167X\u5750\u6807\u6392\u5e8f\uff0c\u7b2c1\u4e2a\u58eb\u5175\u79fb\u52a8\u5230\u961f\u4f0d\u7684\u7b2c1\u4e2a\uff0c\u7b2c2\u4e2a\u58eb\u5175\u79fb\u52a8\u5230\u7b2c2\u4e2a\uff0c\u2026\u2026\uff0c\u7b2cN\u4e2a\u58eb\u5175\u79fb\u52a8\u5230\u7b2cN\u4e2a\u4f4d\u7f6e\u3002\u552f\u4e00\u6709\u95ee\u9898\u7684\u662f\u5982\u679c\u6709\u591a\u4e2a\u58eb\u5175X\u5750\u6807\u76f8\u540c\u600e\u4e48\u529e\u5462\uff1f\u5bb9\u6613\u8bc1\u660e\uff0c\u6309\u7167\u4efb\u610f\u987a\u5e8f\u8fd9\u4e9b\u58eb\u5175\u8d70\u7684\u8def\u52a0\u548c\u76f8\u7b49\u3002\n\u7136\u800c\u679a\u4e3e\u8d77\u70b9\u9700\u8981O\uff08\uff08MaxX-MinX\uff09\u00b2\uff09\uff0c\u8ba1\u7b97\u58eb\u5175\u53c8\u9700\u8981O\uff08N\uff09\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u63a5\u8fd110^12\uff0c\u80af\u5b9a\u8981\u8d85\u65f6\u3002\u8fd9\u65f6\u5019\u6211\u4eec\u4f1a\u60f3\u5230\uff1a\u80fd\u4e0d\u80fd\u76f4\u63a5\u786e\u5b9a\u961f\u4f0d\u7684y\u5750\u6807\uff1f\u5982\u679c\u6211\u4eec\u4e0d\u9700\u8981\u58eb\u5175\u79fb\u52a8\u5230\u6307\u5b9a\u4f4d\u7f6e\uff0c\u53ea\u9700\u8981\u4ed6\u4eec\u79fb\u52a8\u5230\u961f\u4f0d\u6240\u5728\u884c\uff08\u4e5f\u5c31\u662f\u5728y\u8f74\u65b9\u5411\u79fb\u52a8\uff09\uff0c\u6211\u4eec\u79f0\u6b64\u4e3a\u300c\u7b2c\u4e00\u9636\u6bb5\u300d\uff0c\u600e\u6837\u624d\u80fd\u4f7f\u58eb\u5175\u4eec\u300c\u7b2c\u4e00\u9636\u6bb5\u300d\u79fb\u52a8\u8ddd\u79bb\u6700\u5c0f\uff1f\u5047\u8bbe\u961f\u4f0d\u5728\u7b2cY\u884c\uff0c\u6211\u4eec\u5217\u51fa\u8fd9\u6837\u7684\u5f0f\u5b50\uff1a|Y1-Y|+|Y2-Y|+\u2026\u2026+|Yn-Y|\uff0c\u8fd9\u5c31\u662f\u300c\u7b2c\u4e00\u9636\u6bb5\u300d\u9700\u8981\u79fb\u52a8\u8ddd\u79bb\u603b\u548c\u3002\u663e\u7136\u53ea\u8981\u6392\u5e8f\u540eY\u53d6\u4e2d\u4f4d\u6570\u5c31\u53ef\u4ee5\u4e86\u3002\n\u4f46\u662f\u8fd9\u6837\u7684\u590d\u6742\u5ea6\u4ecd\u7136\u662fO\uff08N\u00b2\uff08MaxX-MinX\uff09\uff09\uff0c\u6700\u5927\u8fbe\u5230210^8\uff0c\u8fd8\u662f\u8981\u8d85\u65f6\u3002\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u4f1a\u60f3\u5230\uff1a\u80fd\u4e0d\u80fd\u7528\u7c7b\u4f3c\u7684\u65b9\u6cd5\u786e\u5b9a\u961f\u4f0d\u8d77\u70b9\u7684X\u5750\u6807\u5462\uff1f\u4ed4\u7ec6\u601d\u8003\uff1a\u5982\u679c\u961f\u4f0d\u7b2c\u4e00\u4e2a\u6a2a\u5750\u6807\u4e3aX\uff0c\u90a3\u4e48\u300c\u7b2c\u4e8c\u9636\u6bb5\u300d\u9700\u8981\u79fb\u52a8\u8ddd\u79bb\u603b\u548c\u5c31\u662f\uff1a|X1-X|+|X2-(X+1)|+|X3-(X+2)|+\u2026\u2026+|Xn-(X+n-1)|\uff0c\u53d8\u5f62\u5f97\u5230\uff1a|X1-X|+|X2-1-X|+\u2026\u2026+|Xn-n+1-X|\uff0c\u90a3\u4e48\u524d\u9762\u7684Xi-i+1\u662f\u53ef\u4ee5\u6784\u9020\u7684\uff0c\u6392\u5e8f\u53d6\u4e2d\u4f4d\u6570\u53c8\u53ef\u4ee5\u5f97\u5230\u961f\u4f0d\u7b2c\u4e00\u4e2aX\u5750\u6807\u4e86\uff01\n\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u662f\u9898\u76ee\u4e2d\u89c4\u5b9a\uff1a\u300cTwo or more soldiers must never occupy the same position at the same time.\u00a0\u300d\u8fd9\u4e2a\u600e\u4e48\u89e3\u51b3\uff1f\u5f88\u7b80\u5355\uff0c\u56e0\u4e3a\u5982\u679c\u4e24\u4e2a\u58eb\u5175X\u5750\u6807\u4e0d\u540c\uff0c\u4ed6\u4eec\u7684\u8def\u5f84\u4e00\u5b9a\u4e0d\u4f1a\u76f8\u4ea4\uff1b\u5982\u679c\u76f8\u540c\uff0c\u6709\u4e00\u4e2a\u5728\u524d\uff0c\u66f4\u4e0d\u4f1a\u76f8\u4ea4\u3002\n\u8d34\u4e0a\u4ee3\u7801\uff1a\n#include\n#include\n#include\n#include\nusing namespace std;\nconst int maxn=10005;\nint n,midnum_x,midnum_y,tmp[maxn],ans=0;\nstruct WT{\n    int x,y;\n}a[maxn];\ninline int read(){\n    int ret=0,f=1;char ch=getchar();\n    while (ch'9') {if (ch=='-') f=-1;ch=getchar();}\n    while (ch>='0'&&ch","tags":[{"name":"C++\u8bed\u8a00","slug":"C-\u8bed\u8a00","permalink":"https:\/\/skywt.cn\/tag\/C-%E8%AF%AD%E8%A8%80\/"},{"name":"OI\u5b66\u4e60","slug":"OI\u5b66\u4e60","permalink":"https:\/\/skywt.cn\/tag\/OI%E5%AD%A6%E4%B9%A0\/"},{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u6570\u5b66\u9898","slug":"\u6570\u5b66\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E6%95%B0%E5%AD%A6%E9%A2%98\/"}],"categories":[]},{"title":"BZOJ1002 \u8f6e\u72b6\u75c5\u6bd2 \u9898\u89e3","date":"2018-03-14T20:28:14+08:00","path":"https:\/\/skywt.cn\/posts\/bzoj1002","text":"\uff08BZOJ\u539f\u9898\u94fe\u63a5\uff09\u8fd9\u9898\u662f\u53ef\u4ee5\u63a8\u51fa\u516c\u5f0f\u7684\uff1aF[i]=F[i-1]*3-F[i-2]+2\u3002\u5957\u4e2a\u9ad8\u7cbe\u5ea6\u5c31\u597d\u4e86\u3002\uff08\u7531\u4e8e\u9700\u8981\u7528\u5230\u7684\u77e5\u8bc6\u592a\u590d\u6742\uff0c\u63a8\u4e0d\u6765\u2026\u2026\uff09\uff08\u5176\u5b9e\u53ef\u4ee5\u5199\u4e2a\u66b4\u529b\u63a8\u51fa\u6765\uff09\u4ee3\u7801\u5982\u4e0b\uff1a#include\n#include\n#include\n#include\nusing namespace std;\nconst int maxn=105,maxlen=105,tt=10000;\nint n;\nstruct Bigint{\n    int len,a[maxlen];\n    Bigint(){len=0;memset(a,0,sizeof(a));}\n    Bigint operator =(int b){\n        while (b) a[++len]=b%tt,b\/=tt;\n    }\n    Bigint operator +(Bigint b){\n        Bigint c;memset(c.a,0,sizeof(c.a));\n        c.len=max(len,b.len);\n        for (int i=1;i","tags":[{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u6570\u5b66\u9898","slug":"\u6570\u5b66\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E6%95%B0%E5%AD%A6%E9%A2%98\/"}],"categories":[]},{"title":"BZOJ1003 \u7269\u6d41\u8fd0\u8f93 \u9898\u89e3","date":"2018-03-15T20:22:38+08:00","path":"https:\/\/skywt.cn\/posts\/bzoj1003","text":"\u6700\u8fd1\u51c6\u5907\u5237\u5237BZOJ\u4e0a\u7684\u6c34\u9898\u2026\u2026\u7269\u6d41\u516c\u53f8\u8981\u628a\u4e00\u6279\u8d27\u7269\u4ece\u7801\u5934A\u8fd0\u5230\u7801\u5934B\u3002\u7531\u4e8e\u8d27\u7269\u91cf\u6bd4\u8f83\u5927\uff0c\u9700\u8981n\u5929\u624d\u80fd\u8fd0\u5b8c\u3002\u8d27\u7269\u8fd0\u8f93\u8fc7\u7a0b\u4e2d\u4e00\u822c\u8981\u8f6c\u505c\u597d\u51e0\u4e2a\u7801\u5934\u3002\u7269\u6d41\u516c\u53f8\u901a\u5e38\u4f1a\u8bbe\u8ba1\u4e00\u6761\u56fa\u5b9a\u7684\u8fd0\u8f93\u8def\u7ebf\uff0c\u4ee5\u4fbf\u5bf9\u6574\u4e2a\u8fd0\u8f93\u8fc7\u7a0b\u5b9e\u65bd\u4e25\u683c\u7684\u7ba1\u7406\u548c\u8ddf\u8e2a\u3002\u7531\u4e8e\u5404\u79cd\u56e0\u7d20\u7684\u5b58\u5728\uff0c\u6709\u7684\u65f6\u5019\u67d0\u4e2a\u7801\u5934\u4f1a\u65e0\u6cd5\u88c5\u5378\u8d27\u7269\u3002\u8fd9\u65f6\u5019\u5c31\u5fc5\u987b\u4fee\u6539\u8fd0\u8f93\u8def\u7ebf\uff0c\u8ba9\u8d27\u7269\u80fd\u591f\u6309\u65f6\u5230\u8fbe\u76ee\u7684\u5730\u3002\u4f46\u662f\u4fee\u6539\u8def\u7ebf\u662f\u4e00\u4ef6\u5341\u5206\u9ebb\u70e6\u7684\u4e8b\u60c5\uff0c\u4f1a\u5e26\u6765\u989d\u5916\u7684\u6210\u672c\u3002\u56e0\u6b64\u7269\u6d41\u516c\u53f8\u5e0c\u671b\u80fd\u591f\u8ba2\u4e00\u4e2an\u5929\u7684\u8fd0\u8f93\u8ba1\u5212\uff0c\u4f7f\u5f97\u603b\u6210\u672c\u5c3d\u53ef\u80fd\u5730\u5c0f\u3002\n\uff08BZOJ\u9898\u76ee\u94fe\u63a5\uff09\u8f93\u5165\u7b2c\u4e00\u884c\u662f\u56db\u4e2a\u6574\u6570n\uff081","tags":[{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u52a8\u6001\u89c4\u5212\u7c7b\u578b\u9898","slug":"\u52a8\u6001\u89c4\u5212\u7c7b\u578b\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB%E5%9E%8B%E9%A2%98\/"},{"name":"\u56fe\u8bba\u7c7b\u578b\u9898","slug":"\u56fe\u8bba\u7c7b\u578b\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E5%9B%BE%E8%AE%BA%E7%B1%BB%E5%9E%8B%E9%A2%98\/"},{"name":"\u6700\u77ed\u8def","slug":"\u6700\u77ed\u8def","permalink":"https:\/\/skywt.cn\/tag\/%E6%9C%80%E7%9F%AD%E8%B7%AF\/"},{"name":"\u7ebf\u6027DP","slug":"\u7ebf\u6027DP","permalink":"https:\/\/skywt.cn\/tag\/%E7%BA%BF%E6%80%A7DP\/"}],"categories":[]},{"title":"\u7f51\u7edc\u6d41\u6700\u5927\u6d41\u7b97\u6cd5\u603b\u7ed3\uff08Edmonds-Karp \u7b97\u6cd5+Dinic \u7b97\u6cd5\uff09","date":"2018-03-25T19:59:49+08:00","path":"https:\/\/skywt.cn\/posts\/network-flows","text":"\n\u7f51\u7edc\u6d41\uff08network-flows\uff09\u662f\u4e00\u79cd\u7c7b\u6bd4\u6c34\u6d41\u7684\u89e3\u51b3\u95ee\u9898\u65b9\u6cd5\uff0c\u4e0e\u7ebf\u6027\u89c4\u5212\u5bc6\u5207\u76f8\u5173\u3002\u7f51\u7edc\u6d41\u7684\u7406\u8bba\u548c\u5e94\u7528\u5728\u4e0d\u65ad\u53d1\u5c55\uff0c\u51fa\u73b0\u4e86\u5177\u6709\u589e\u76ca\u7684\u6d41\u3001\u591a\u7ec8\u7aef\u6d41\u3001\u591a\u5546\u54c1\u6d41\u4ee5\u53ca\u7f51\u7edc\u6d41\u7684\u5206\u89e3\u4e0e\u5408\u6210\u7b49\u65b0\u8bfe\u9898\u3002\u7f51\u7edc\u6d41\u7684\u5e94\u7528\u5df2\u904d\u53ca\u901a\u8baf\u3001\u8fd0\u8f93\u3001\u7535\u529b\u3001\u5de5\u7a0b\u89c4\u5212\u3001\u4efb\u52a1\u5206\u6d3e\u3001\u8bbe\u5907\u66f4\u65b0\u4ee5\u53ca\u8ba1\u7b97\u673a\u8f85\u52a9\u8bbe\u8ba1\u7b49\u4f17\u591a\u9886\u57df\u3002\n\n\uff082018.08.29 \u66f4\u65b0\u6b64\u6587\uff0c\u4f60\u6ca1\u6709\u9605\u8bfb\u8fc7\u7684\u8239\u65b0\u7248\u672c\uff09\n\n\u7f51\u7edc\u6d41\u662f\u4fe1\u606f\u5b66\u7ade\u8d5b\u4e2d\u7684\u5e38\u89c1\u9898\u578b\u4e86\u3002\n\u7f51\u7edc\u6d41\u7684\u5b9a\u4e49\n\u201c\u7f51\u7edc\u6d41\uff08network-flows\uff09\u662f\u4e00\u79cd\u7c7b\u6bd4\u6c34\u6d41\u7684\u89e3\u51b3\u95ee\u9898\u65b9\u6cd5\u3002\u201d\n\u5047\u8bbe\u73b0\u5728\u6709\u4e00\u5f20\u6709\u9650\u7684\u6709\u5411\u56fe G\uff0c\u8fd9\u5f20\u56fe\u4e0a\u6709\u4e00\u4e2a\u6e90\u70b9 $s$\uff0c\u4e00\u4e2a\u6c47\u70b9 $t$\uff0c\u6bcf\u6761\u8fb9\u90fd\u6709\u4e00\u4e2a\u6700\u5927\u6d41\u91cf\uff08\u5373\u5bb9\u91cf\uff09\uff0c\u5c31\u50cf\u590d\u6742\u7684\u6c34\u7ba1\u7f51\u7edc\u3002\u73b0\u5728\u6211\u4eec\u5b9a\u4e49\u51e0\u4e2a\u6982\u5ff5\uff1a\n\n\u6e90\u70b9\uff08Sources\uff09\uff1a\u4e00\u5207\u6d41\u91cf\u6d41\u5165\u7684\u70b9\u3002\n\u6c47\u70b9\uff08Sinks\uff09\uff1a\u6240\u6709\u6d41\u91cf\u6700\u7ec8\u6c47\u805a\u5230\u7684\u70b9\u3002\n\u5bb9\u91cf\uff08Capacity\uff09\uff1a\u4e00\u6761\u8fb9\u7684\u6700\u5927\u6d41\u91cf\u3002\n\u6b8b\u91cf\uff08Residual Capacity\uff09\uff1a\u5bb9\u91cf\u4e0e\u6d41\u91cf\u4e4b\u5dee\u3002\n\n\u7f51\u7edc\u6d41\u7684\u4e09\u5927\u57fa\u672c\u6027\u8d28\n\u7f51\u7edc\u6d41\u4efb\u4f55\u65f6\u523b\u603b\u6ee1\u8db3\u4ee5\u4e0b\u4e09\u6761\u6027\u8d28\uff1a\n1. \u5bb9\u91cf\u9650\u5236\uff08Capacity Constraints\uff09\uff1a$f(u,v)\u2264c(u,v)$\uff0c\u5373\u4e00\u6761\u8fb9\u7684\u6d41\u4e0d\u80fd\u8d85\u8fc7\u5b83\u7684\u5bb9\u91cf\u3002\uff08\u4e0d\u7136\u6c34\u7ba1\u5c31\u8981\u88ab\u6324\u7206\u4e86\u2026\u2026\uff09\n2. \u659c\u5bf9\u79f0\uff08Skew Symmetry\uff09\uff1a$f(u,v)=-f(v,u)$\uff0c\u5373\u7531 $u$ \u5230 $v$ \u7684\u51c0\u6d41\u5fc5\u987b\u662f\u7531 $v$ \u5230 $u$ \u7684\u51c0\u6d41\u7684\u76f8\u53cd\u3002\u5047\u8bbe\u6709 $x$ \u7684\u6d41\u91cf\u4ece $u$ \u6d41\u5230 $v$\uff0c\u90a3\u4e48\u5c31\u76f8\u5f53\u4e8e\u6709 $-x$ \u7684\u6d41\u91cf\u4ece $v$ \u6d41\u5230 $u$\u3002\n3. \u6d41\u5b88\u6052\uff08Flow Conservation\uff09\uff1a\u5bf9\u4e8e\u9664\u4e86\u6e90\u70b9 $s$ \u548c\u6c47\u70b9 $t$ \u4ee5\u5916\u7684\u6240\u6709\u70b9\uff0c\u90fd\u6ee1\u8db3\uff1a\n\\displaystyle \\sum_{p\\in G} f(p,u)= \\sum_{q\\in G} f(u,q)\n\u4e5f\u5c31\u662f\u8bf4\u4efb\u4f55\u4e00\u4e2a\u70b9\u7684\u5165\u6d41\u7b49\u4e8e\u5176\u51fa\u6d41\uff0c\u6e90\u70b9\u548c\u6c47\u70b9\u9664\u5916\u3002\n\u6700\u5927\u6d41\u95ee\u9898\n\u73b0\u5728\u5047\u8bbe\u6709\u65e0\u9650\u7684\u6d41\u91cf\u4ece\u6e90\u70b9 $s$ \u6d41\u5165\uff0c\u6211\u4eec\u8981\u6c42\u51fa\u6700\u540e\u6d41\u5230\u6c47\u70b9t\u7684\u6700\u5927\u6d41\u91cf\uff08\u6ce8\u610f\u4efb\u4f55\u65f6\u5019\u4e0a\u9762\u4e09\u4e2a\u6761\u4ef6\u90fd\u8981\u6ee1\u8db3\uff09\u3002\n\u5bf9\u4e8e\u6700\u5927\u6d41\u95ee\u9898\u53ef\u4ee5\u7528 Edmonds-Karp \u7b97\u6cd5\u6216 Dinic \u7b97\u6cd5\u89e3\u51b3\u3002\u540e\u8005\u662f\u524d\u8005\u7684\u4f18\u5316\uff0c\u4f46\u662f\u524d\u8005\u66f4\u6613\u4e8e\u7406\u89e3\uff0c\u6240\u4ee5\u6211\u4eec\u5148\u4e86\u89e3 Edmonds-Karp \u7b97\u6cd5\u3002\nEdmonds-Karp \u7b97\u6cd5\nEdmonds-Karp \u7b97\u6cd5\uff08\u7b80\u79f0EK\uff09\u7684\u4e3b\u8981\u6b65\u9aa4\u5982\u4e0b\uff1a\n\n\u627e\u5230\u4e00\u6761\u6e90\u70b9\u5230\u6c47\u70b9\u7684\u8def\u5f84\uff08\u5176\u4e2d\u6bcf\u6761\u8fb9\u6b8b\u91cf\u90fd\u8981\u5927\u4e8e0\uff09\uff08\u8fd9\u6837\u7684\u8def\u5f84\u5c31\u662f\u589e\u5e7f\u8def\uff08Augmenting Path\uff09\uff09\uff0c\u5e76\u627e\u51fa\u8fd9\u6761\u8def\u5f84\u4e0a\u6bcf\u6761\u8fb9\u6b8b\u91cf\u6700\u5c0f\u503c $min$\uff1b\n\u5c06\u8fd9\u6761\u8def\u5f84\u4e0a\u6bcf\u6761\u8fb9\u6b8b\u91cf\u51cf\u53bb min\uff0c\u5c06\u6bcf\u6761\u8fb9\u7684\u53cd\u5411\u8fb9\u52a0\u4e0a $min$\uff08\u56e0\u4e3a\u6211\u4eec\u8fd9\u6761\u589e\u5e7f\u8def\u662f\u201c\u968f\u4fbf\u627e\u201d\u7684\uff0c\u4e0d\u80fd\u4fdd\u8bc1\u89e3\u6700\u4f18\uff1b\u5c06\u53cd\u5411\u8fb9\u52a0\u4e0a $min$ \u76f8\u5f53\u4e8e\u63d0\u4f9b\u4e86\u201c\u53cd\u6094\u201d\u7684\u673a\u4f1a\uff09\uff0c\u5e76\u5c06\u7b54\u6848\u7d2f\u8ba1\u4e0a $min$\uff1b\n\u91cd\u590d\u4ee5\u4e0a\u8fc7\u7a0b\uff0c\u76f4\u5230\u4ece $s$ \u5230 $t$ \u6ca1\u6709\u589e\u5e7f\u8def\u4e3a\u6b62\u3002\n\n\uff08\u7531\u4e8e\u6211\u592a\u61d2EK\u7b97\u6cd5\u4f3c\u4e4e\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\u90fd\u6ca1\u6709\u4f18\u5316\u4e86\u7684 Dinic \u597d\uff0c\u8fd9\u91cc\u5c31\u4e0d\u7ed9\u51fa\u4ee3\u7801\u4e86\u2026\u2026\uff09\n\u5982\u4f55\u5b58\u50a8\u8fb9\n\u8981\u5feb\u901f\u53c8\u8282\u7701\u7a7a\u95f4\u5730\u6c42\u51fa\u4e00\u6761\u8fb9\u7684\u53cd\u5411\u8fb9\u5e76\u4e0d\u7b80\u5355\u3002\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u7528\u90bb\u63a5\u8868\u5b58\u50a8\uff1a\u5728\u8bfb\u53d6\u8fb9\u7684\u4fe1\u606f\u7684\u540c\u65f6\uff0cadd(x,y,z)\uff0cadd(y,x,0)\uff0c\u8fd9\u6837\u4e00\u6761\u8fb9\u4e0e\u5176\u76f8\u90bb\u8fb9\u7684\u8fb9\u53f7\u603b\u662f\u76f8\u90bb\u3002\u6211\u4eec\u5982\u679c\u4ece0\u5f00\u59cb\u5b58\u50a8\u8fb9\u53f7\uff0c\u90a3\u4e48i\u7684\u76f8\u90bb\u8fb9\u5c31\u662fi^1\uff0c\u5c31\u662f\u5b83\u7684\u53cd\u5411\u8fb9\uff01\uff08^\u8868\u793a\u5f02\u6216\uff09\nDinic \u7b97\u6cd5\nDinic \u7b97\u6cd5\u662f\u5bf9 Edmonds-Karp \u7684\u4f18\u5316\u3002\nEdmonds-Karp \u6162\u5728\u54ea\u91cc\n\u56e0\u4e3a EK \u7b97\u6cd5\u4e2d\u8d70\u5230\u5404\u4e2a\u70b9\u6ca1\u6709\u4e00\u5b9a\u7684\u987a\u5e8f\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u201c\u4efb\u610f\u201d\u7684\uff0c\u6240\u4ee5\u4f1a\u51fa\u73b0\u4e00\u5b9a\u7684\u95ee\u9898\u3002\u5047\u8bbe\u4ece $s$ \u6709\u4e24\u6761\u8def\u5f84\u8d70\u5230 $x$\uff08\u5047\u8bbe $x$ \u662f\u589e\u5e7f\u8def\u4e0a\u7684\u4e00\u4e2a\u70b9\uff09\uff0c\u5047\u8bbe\u8fd9\u4e24\u6761\u8def\u5f84\u4e2d\u6700\u5c0f\u7684\u6b8b\u91cf\u5206\u522b\u4e3a $min1$\u3001$min2$\uff0c\u5982\u679c $min2$ \u66f4\u5927\uff0c\u6211\u4eec\u5e94\u8be5\u9009\u62e9 $min2$ \u8fd9\u6761\u8def\u5f84\uff0c\u4f46\u662f\u6839\u636e EK \u7684\u5904\u7406\u65b9\u6cd5\u6211\u4eec\u4f1a\u9009\u62e9 $min1$\uff0c\u8fd9\u6837\u4f1a\u5bfc\u81f4\u91cd\u590d\u5904\u7406\u3002\u6240\u4ee5 EK \u7b97\u6cd5\u5c31\u4f1a\u6162\u3002\n\u5982\u4f55\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5462\uff1fDinic \u7b97\u6cd5\u5f15\u5165\u4e86\u201c\u5206\u5c42\u56fe\u201d\u8fd9\u4e2a\u4e1c\u897f\u3002\n\u5206\u5c42\u56fe\n\u5bf9\u4e8e $s$ \u5f00\u59cb\u901a\u8fc7 BFS \u6784\u9020\u5206\u5c42\u56fe\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u65e5\u540e DFS \u4f7f\u7528\u7684\u4ece $s$ \u5230\u8fbe $x$ \u7684\u8def\u5f84\u90fd\u662f\u201c\u6700\u77ed\u8def\u201d\uff08\u4e5f\u5c31\u662f\u6700\u4f18\u8def\u5f84\uff09\u3002\nDinic \u7b97\u6cd5\u6838\u5fc3\u4ee3\u7801\ninline bool BFS(){\/\/\u8fd9\u4e2a\u51fd\u6570\u7684\u4f5c\u7528\u662f\u6784\u9020\u5206\u5c42\u56fe\u540c\u65f6\u8fd4\u56de\u6709\u65e0\u589e\u5e7f\u8def \n    memset(deep,0,sizeof(deep));\n    deep[s]=1;\/\/\u6e90\u70b9\u7684\u6df1\u5ea6\u4e3a1 \n    int head=0,tail=1;que[tail]=s;\n    while (head!=tail){\n        head++;\n        for (int i=lnk[que[head]];i!=-1;i=nxt[i]) if (w[i]&gt;0&amp;&amp;deep[son[i]]==0) deep[son[i]]=deep[que[head]]+1,que[++tail]=son[i];\n    }\n    if (deep[t]==0) return 0;\/\/\u5982\u679c\u6c47\u70b9\u6df1\u5ea6\u4e3a0\u8bf4\u660e\u6ca1\u6709\u88ab\u4fee\u6b63\u5230\uff0c\u4e5f\u5c31\u662f\u8bf4\u6ca1\u6709\u589e\u5e7f\u8def \n    return 1;\n}\ninline int DFS(int x,int now){\/\/x\u4e3a\u5f53\u524d\u70b9\uff0cnow\u4e3a\u5f53\u524d\u6d41\u91cf \n    if (x==t) return now;\n    for (int i=cur[x];i!=-1;i=cur[x]=nxt[i]) if (deep[son[i]]==deep[x]+1&amp;&amp;w[i]!=0){\n        int nxtd=DFS(son[i],min(now,w[i]));\n        if (nxtd&gt;0){\n            w[i]-=nxtd;\n            w[i^1]+=nxtd;\/\/\u53cd\u5411\u8fb9\u52a0  \n            return nxtd;\/\/\u5411\u4e0a\u4f20\u9012 \n        }\n    }\n    return 0;\n}\ninline void Dinic(){\n    while (BFS()){\n        for (int i=1;i&lt;=n;i++) cur[i]=lnk[i];\n        while (int now=DFS(s,1&lt;&lt;30)) ans+=now;\/\/\u521d\u59cb\u6d41\u91cf\u4e3a\u6b63\u65e0\u7a77 \n    }\n}\n\u5f53\u524d\u5f27\u4f18\u5316\nDinic \u7b97\u6cd5\u4ecd\u7136\u53ef\u4ee5\u4f18\u5316\uff0c\u8fd9\u4e2a\u4f18\u5316\u79f0\u4e3a\u201c\u5f53\u524d\u5f27\u4f18\u5316\u201d\u3002\u57fa\u4e8e\u8fd9\u6837\u4e00\u4e2a\u4e8b\u5b9e\uff1a\u4efb\u4f55\u4e00\u6761\u589e\u5e7f\u8def\u4e2d\u4e00\u6761\u8fb9\u4e0d\u4f1a\u5b58\u5728\u4e24\u6b21\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u52a0\u4e00\u4e2a\u6570\u7ec4 cur[x] \u8868\u793a\u5f53\u524d $x$ \u8fd9\u4e2a\u70b9\u5faa\u73af\u5230\u7684\u8fb9\u3002\uff08\u5177\u4f53\u53c2\u89c1\u5b8c\u6574\u4ee3\u7801\uff09\n\u5b8c\u6574\u4ee3\u7801\uff08\u542b\u5f53\u524d\u5f27\u4f18\u5316\uff09\n\uff08\u6d1b\u8c37\u6a21\u7248\u9898\u201c\u6700\u5927\u7f51\u7edc\u6d41\u201d\uff08P3376\uff09\u6d4b\u8bc4\u901a\u8fc7\uff09\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\nconst int maxn=10005,maxe=200005;\nint n,m,s,t,tot=-1,ans=0,nxt[maxe],son[maxe],w[maxe],deep[maxn],lnk[maxn],que[maxn],cur[maxn];\ninline int read(){\n    int ret=0,f=1;char ch=getchar();\n    while (ch&lt;'0'||ch&gt;'9') {if (ch=='-') f=-1;ch=getchar();}\n    while (ch&gt;='0'&amp;&amp;ch&lt;='9') ret=ret*10+ch-'0',ch=getchar();\n    return ret*f;\n}\ninline void add(int x,int y,int z){\n    tot++;son[tot]=y;w[tot]=z;nxt[tot]=lnk[x];lnk[x]=tot;\n}\ninline bool BFS(){\/\/\u8fd9\u4e2a\u51fd\u6570\u7684\u4f5c\u7528\u662f\u6784\u9020\u5206\u5c42\u56fe\u540c\u65f6\u8fd4\u56de\u6709\u65e0\u589e\u5e7f\u8def \n    memset(deep,0,sizeof(deep));\n    deep[s]=1;\/\/\u6e90\u70b9\u7684\u6df1\u5ea6\u4e3a1 \n    int head=0,tail=1;que[tail]=s;\n    while (head!=tail){\n        head++;\n        for (int i=lnk[que[head]];i!=-1;i=nxt[i]) if (w[i]&gt;0&amp;&amp;deep[son[i]]==0) deep[son[i]]=deep[que[head]]+1,que[++tail]=son[i];\n    }\n    if (deep[t]==0) return 0;\/\/\u5982\u679c\u6c47\u70b9\u6df1\u5ea6\u4e3a0\u8bf4\u660e\u6ca1\u6709\u88ab\u4fee\u6b63\u5230\uff0c\u4e5f\u5c31\u662f\u8bf4\u6ca1\u6709\u589e\u5e7f\u8def \n    return 1;\n}\ninline int DFS(int x,int now){\/\/x\u4e3a\u5f53\u524d\u70b9\uff0cnow\u4e3a\u5f53\u524d\u6d41\u91cf \n    if (x==t) return now;\n    for (int i=cur[x];i!=-1;i=cur[x]=nxt[i]) if (deep[son[i]]==deep[x]+1&amp;&amp;w[i]!=0){\n        int nxtd=DFS(son[i],min(now,w[i]));\n        if (nxtd&gt;0){\n            w[i]-=nxtd;\n            w[i^1]+=nxtd;\/\/\u53cd\u5411\u8fb9\u52a0  \n            return nxtd;\/\/\u5411\u4e0a\u4f20\u9012 \n        }\n    }\n    return 0;\n}\ninline void Dinic(){\n    while (BFS()){\n        for (int i=1;i&lt;=n;i++) cur[i]=lnk[i];\n        while (int now=DFS(s,1&lt;&lt;30)) ans+=now;\/\/\u521d\u59cb\u6d41\u91cf\u4e3a\u6b63\u65e0\u7a77 \n    }\n}\nint main(){\n    memset(lnk,-1,sizeof(lnk));\/\/\u56e0\u4e3a\u8fb9\u53f7\u4ece0\u5f00\u59cb\u5b58\u50a8\uff0c\u6240\u4ee5-1\u8868\u793a\u6ca1\u6709\u8fb9 \n    memset(nxt,-1,sizeof(nxt));\n    n=read();m=read();s=read();t=read();\n    for (int i=1;i&lt;=m;i++){\n        int x=read(),y=read(),z=read();\n        add(x,y,z);add(y,x,0);\/\/\u6784\u9020\u53cd\u5411\u8fb9\u5e76\u4e14\u5176\u8fb9\u53f7\u4e0e\u6b63\u5411\u8fb9\u76f8\u90bb \n    }\n    Dinic();\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n\u6a21\u677f\u9898\n\u6d1b\u8c373376\nPOJ1273\n\n\u53c2\u8003\n\u7f51\u7edc\u6d41_\u767e\u5ea6\u767e\u79d1\n\u7f51\u7edc\u6d41 - \u7ef4\u57fa\u767e\u79d1\uff0c\u81ea\u7531\u7684\u767e\u79d1\u5168\u4e66\nDinic\u7b97\u6cd5\uff08\u7814\u7a76\u603b\u7ed3\uff0c\u7f51\u7edc\u6d41\uff09\n\u7f51\u7edc\u6d41\u7b97\u6cd5+\u4f8b\u9898\u6574\u7406 - CSDN\u535a\u5ba2\n\u7f51\u7edc\u6d41\u3010\u6700\u5927\u6d41&amp;&amp;\u6700\u5c0f\u5272\u3011\u2014\u2014\u4e00\u7bc7\u7b80\u5355\u6613\u61c2\u7684\u535a\u6587\n\u7f51\u7edc\u6d41\u548c\u68d2\u7403\u8d5b\u6dd8\u6c70\u95ee\u9898 | Matrix67: The Aha Moments","tags":[{"name":"OI\u5b66\u4e60","slug":"OI\u5b66\u4e60","permalink":"https:\/\/skywt.cn\/tag\/OI%E5%AD%A6%E4%B9%A0\/"},{"name":"OI\u7b97\u6cd5","slug":"OI\u7b97\u6cd5","permalink":"https:\/\/skywt.cn\/tag\/OI%E7%AE%97%E6%B3%95\/"},{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u56fe\u8bba\u7c7b\u578b\u9898","slug":"\u56fe\u8bba\u7c7b\u578b\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E5%9B%BE%E8%AE%BA%E7%B1%BB%E5%9E%8B%E9%A2%98\/"},{"name":"\u7f51\u7edc\u6d41","slug":"\u7f51\u7edc\u6d41","permalink":"https:\/\/skywt.cn\/tag\/%E7%BD%91%E7%BB%9C%E6%B5%81\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"Hello World!","date":"2017-11-12T17:05:09+08:00","path":"https:\/\/skywt.cn\/posts\/helloworld","text":"\nSay hello to the world!\n\n\u636e\u8bf4\u8fd9\u4e2a\u535a\u5ba2\u662f\u7528\u6765\u5199\u5b66 OI \u7684\u603b\u7ed3\u7684\uff1f\uff01","tags":[],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"Hello World again\uff01","date":"2018-03-24T09:43:18+08:00","path":"https:\/\/skywt.cn\/posts\/hello-world-again","text":"\u539f\u535a\u5ba2\u642d\u5efa\u4e8e\u963f\u91cc\u4e91\u4e3b\u673a\uff0c\u7a7a\u95f4\u592a\u5c0f\uff08\u624d200M\u2026\u2026\uff09\uff0c\u9650\u5236\u4e5f\u5f88\u591a\uff0c\u6545\u5f03\u7528\uff0c\u642c\u5230\u8fd9\u4e2aBandwagon\u4e3b\u673a\u4e0a\uff0c\u7136\u540e\u4e70\u4e86\u4e2a\u65b0\u57df\u540d\uff1askywt.cn\u2026\u2026 \u539f\u535a\u5ba2\u5df2\u5f03\u7528\u3002","tags":[{"name":"\u65e5\u5e38\u641e\u673a","slug":"\u65e5\u5e38\u641e\u673a","permalink":"https:\/\/skywt.cn\/tag\/%E6%97%A5%E5%B8%B8%E6%90%9E%E6%9C%BA\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"\uff08\u8f6c\uff09C++\u5185\u8054\u51fd\u6570\uff08inline\uff09","date":"2018-03-26T19:22:05+08:00","path":"https:\/\/skywt.cn\/posts\/cppinline","text":"\u5728C\u8bed\u8a00\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u5b8f\u5b9a\u4e49\u51fd\u6570\u8fd9\u79cd\u501f\u52a9\u7f16\u8bd1\u5668\u7684\u4f18\u5316\u6280\u672f\u6765\u51cf\u5c11\u7a0b\u5e8f\u7684\u6267\u884c\u65f6\u95f4\uff0c\u90a3\u4e48\u5728C++\u4e2d\u6709\u6ca1\u6709\u76f8\u540c\u7684\u6280\u672f\u6216\u8005\u66f4\u597d\u7684\u5b9e\u73b0\u65b9\u6cd5\u5462\uff1f\u7b54\u6848\u662f\u6709\u7684\uff0c\u90a3\u5c31\u662f\u5185\u8054\u51fd\u6570\u3002\u5185\u8054\u51fd\u6570\u4f5c\u4e3a\u7f16\u8bd1\u5668\u4f18\u5316\u624b\u6bb5\u7684\u4e00\u79cd\u6280\u672f\uff0c\u5728\u964d\u4f4e\u8fd0\u884c\u65f6\u95f4\u4e0a\u975e\u5e38\u6709\u7528\u3002\u6211\u4eec\u5c06\u4ece\uff1a\n\n\u4ec0\u4e48\u662f\u5185\u8054\u51fd\u6570\n\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528\u5185\u8054\u51fd\u6570\n\u5185\u8054\u51fd\u6570\u4f18\u7f3a\u70b9\u5206\u6790\n\u4f55\u65f6\u4f7f\u7528\u5185\u8054\u51fd\u6570\n\n\u8fd9\u56db\u4e2a\u65b9\u9762\u5bf9\u5185\u8054\u51fd\u6570\u8fdb\u884c\u4ecb\u7ecd\u3002\n\n\n\uff08\u8f6c\u8f7d\u81ea\uff1ahttp:\/\/www.cnblogs.com\/QG-whz\/p\/4641479.html\uff09\n\u4ec0\u4e48\u662f\u5185\u8054\u51fd\u6570\n\u5185\u8054\u51fd\u6570\u662fC++\u7684\u589e\u5f3a\u7279\u6027\u4e4b\u4e00\uff0c\u7528\u6765\u964d\u4f4e\u7a0b\u5e8f\u7684\u8fd0\u884c\u65f6\u95f4\u3002\u5f53\u5185\u8054\u51fd\u6570\u6536\u5230\u7f16\u8bd1\u5668\u7684\u6307\u793a\u65f6\uff0c\u5373\u53ef\u53d1\u751f\u5185\u8054\uff1a\u7f16\u8bd1\u5668\u5c06\u4f7f\u7528\u51fd\u6570\u7684\u5b9a\u4e49\u4f53\u6765\u66ff\u4ee3\u51fd\u6570\u8c03\u7528\u8bed\u53e5\uff0c\u8fd9\u79cd\u66ff\u4ee3\u884c\u4e3a\u53d1\u751f\u5728\u7f16\u8bd1\u9636\u6bb5\u800c\u975e\u7a0b\u5e8f\u8fd0\u884c\u9636\u6bb5\u3002\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5185\u8054\u51fd\u6570\u4ec5\u4ec5\u662f\u5bf9\u7f16\u8bd1\u5668\u7684\u5185\u8054\u5efa\u8bae\uff0c\u7f16\u8bd1\u5668\u662f\u5426\u89c9\u5f97\u91c7\u53d6\u4f60\u7684\u5efa\u8bae\u53d6\u51b3\u4e8e\u51fd\u6570\u662f\u5426\u7b26\u5408\u5185\u8054\u7684\u6709\u5229\u6761\u4ef6\u3002\u5982\u4f55\u51fd\u6570\u4f53\u975e\u5e38\u5927\uff0c\u90a3\u4e48\u7f16\u8bd1\u5668\u5c06\u5ffd\u7565\u51fd\u6570\u7684\u5185\u8054\u58f0\u660e\uff0c\u800c\u5c06\u5185\u8054\u51fd\u6570\u4f5c\u4e3a\u666e\u901a\u51fd\u6570\u5904\u7406\u3002\n\u5982\u4f55\u4f7f\u51fd\u6570\u5185\u8054\n\u5b9a\u4e49\u51fd\u6570\u65f6\uff0c\u5728\u51fd\u6570\u7684\u6700\u524d\u9762\u4ee5\u5173\u952e\u5b57\u201cinline\u201d\u58f0\u660e\u51fd\u6570\uff0c\u5373\u53ef\u4f7f\u51fd\u6570\u79f0\u4e3a\u5185\u8054\u58f0\u660e\u51fd\u6570\u3002\n\u4f8b\u5982\uff1a\nClass A{\n Public:\n    inline int add(int a, int b){\n    return (a + b);\n    };\n}\n\nClass A{\n Public:\n    int add(int a, int b);\n};\n\ninline int A::add(int a, int b){\n    return (a + b);\n}\n\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528\u5185\u8054\u51fd\u6570\n\u6709\u65f6\u5019\u6211\u4eec\u4f1a\u5199\u4e00\u4e9b\u529f\u80fd\u4e13\u4e00\u7684\u51fd\u6570\uff0c\u8fd9\u4e9b\u51fd\u6570\u7684\u51fd\u6570\u4f53\u4e0d\u5927\uff0c\u5305\u542b\u4e86\u5f88\u5c11\u7684\u6267\u884c\u8bed\u53e5\u3002\u4f8b\u5982\u5728\u8ba1\u7b971~1000\u4ee5\u5185\u7684\u7d20\u6570\u65f6\uff0c\u6211\u4eec\u7ecf\u5e38\u4f1a\u4f7f\u7528\u5f00\u65b9\u64cd\u4f5c\u4f7f\u8fd0\u7b97\u8303\u56f4\u7f29\u5c0f\uff0c\u8fd9\u65f6\u6211\u4eec\u4f1a\u5199\u4e00\u4e2a\u51fd\u6570\uff1a\nint root(int n){\n    return (int)sqrt((float)n);\n}\n\u7136\u540e\u6211\u4eec\u7684\u6c42\u8303\u56f4\u5185\u7d20\u6570\u7684\u51fd\u6570\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a\nint prime(int n){\n    int i;\n    for (i = 2; i &lt;= root(n); i++){\n        if (n%i == 0) return 0;\n        return 1;\n    }\n}\n\u5f53\u7136\uff0c\u628aroot\u51fd\u6570\u653e\u5728\u5faa\u73af\u4e2d\u4e0d\u662f\u4e2a\u4e0d\u660e\u667a\u7684\u9009\u62e9\uff0c\u4f46\u60f3\u8c61\u4e00\u4e0b\uff0c\u5728\u67d0\u4e2a\u7a0b\u5e8f\u4e0a\u4e0b\u6587\u5185\u5fc5\u987b\u9891\u7e41\u5730\u8c03\u7528\u67d0\u4e2a\u7c7b\u4f3croot\u7684\u51fd\u6570\uff0c\u5176\u8c03\u7528\u51fd\u6570\u7684\u82b1\u9500\u4f1a\u6709\u591a\u5927\uff1a\u5f53\u9047\u5230\u666e\u901a\u51fd\u6570\u7684\u8c03\u7528\u6307\u4ee4\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u4fdd\u5b58\u5f53\u524d\u51fd\u6570\u7684\u6267\u884c\u73b0\u573a\uff0c\u5c06\u51fd\u6570\u4e2d\u7684\u5c40\u90e8\u53d8\u91cf\u4ee5\u53ca\u51fd\u6570\u5730\u5740\u538b\u5165\u5806\u6808\uff0c\u7136\u540e\u518d\u5c06\u5373\u5c06\u8c03\u7528\u7684\u65b0\u51fd\u6570\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\uff0c\u8fd9\u8981\u7ecf\u5386\u590d\u5236\u53c2\u6570\u503c\u3001\u8df3\u8f6c\u5230\u6240\u8c03\u7528\u51fd\u6570\u7684\u5185\u5b58\u4f4d\u7f6e\u3001\u6267\u884c\u51fd\u6570\u4ee3\u7801\u3001\u5b58\u50a8\u51fd\u6570\u8fd4\u56de\u503c\u7b49\u8fc7\u7a0b\uff0c\u5f53\u51fd\u6570\u6267\u884c\u5b8c\u540e\uff0c\u518d\u83b7\u53d6\u4e4b\u524d\u6b63\u5728\u8c03\u7528\u7684\u51fd\u6570\u7684\u5730\u5740\uff0c\u56de\u53bb\u7ee7\u7eed\u6267\u884c\u90a3\u4e2a\u51fd\u6570\uff0c\u8fd0\u884c\u65f6\u95f4\u5f00\u9500\u7b80\u76f4\u592a\u591a\u4e86\u3002\nC++\u5185\u8054\u51fd\u6570\u63d0\u4f9b\u4e86\u66ff\u4ee3\u51fd\u6570\u8c03\u7528\u7684\u65b9\u6848\uff0c\u901a\u8fc7inline\u58f0\u660e\uff0c\u7f16\u8bd1\u5668\u9996\u5148\u5728\u51fd\u6570\u8c03\u7528\u5904\u4f7f\u7528\u51fd\u6570\u4f53\u672c\u8eab\u8bed\u53e5\u66ff\u6362\u4e86\u51fd\u6570\u8c03\u7528\u8bed\u53e5\uff0c\u7136\u540e\u7f16\u8bd1\u66ff\u6362\u540e\u7684\u4ee3\u7801\u3002\u56e0\u6b64\uff0c\u901a\u8fc7\u5185\u8054\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u4e0d\u9700\u8981\u8df3\u8f6c\u5230\u5185\u5b58\u5176\u4ed6\u5730\u5740\u53bb\u6267\u884c\u51fd\u6570\u8c03\u7528\uff0c\u4e5f\u4e0d\u9700\u8981\u4fdd\u7559\u51fd\u6570\u8c03\u7528\u65f6\u7684\u73b0\u573a\u6570\u636e\u3002\ninline \u51fd\u6570\u7684\u4f18\u7f3a\u70b9\u5206\u6790\n\u901a\u8fc7\u4e0b\u9762\u8fd9\u4e9b\u4f18\u7f3a\u70b9\u603b\u7ed3\u4f60\u5927\u6982\u4f1a\u66f4\u7406\u89e3\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528 inline \u51fd\u6570\uff1a\n\u4f18\u70b9\uff1a\n\n\u5b83\u901a\u8fc7\u907f\u514d\u51fd\u6570\u8c03\u7528\u6240\u5e26\u6765\u7684\u5f00\u9500\u6765\u63d0\u9ad8\u4f60\u7a0b\u5e8f\u7684\u8fd0\u884c\u901f\u5ea6\u3002\n\u5f53\u51fd\u6570\u8c03\u7528\u53d1\u751f\u65f6\uff0c\u5b83\u8282\u7701\u4e86\u53d8\u91cf\u5f39\u6808\u3001\u538b\u6808\u7684\u5f00\u9500\u3002\n\u5b83\u907f\u514d\u4e86\u4e00\u4e2a\u51fd\u6570\u6267\u884c\u5b8c\u8fd4\u56de\u539f\u73b0\u573a\u7684\u5f00\u9500\u3002\n\u901a\u8fc7\u5c06\u51fd\u6570\u58f0\u660e\u4e3a\u5185\u8054\uff0c\u4f60\u53ef\u4ee5\u628a\u51fd\u6570\u5b9a\u4e49\u653e\u5728\u5934\u6587\u4ef6\u5185\u3002\n\n\u7f3a\u70b9\uff1a\n\n\u56e0\u4e3a\u4ee3\u7801\u7684\u6269\u5c55\uff0c\u5185\u8054\u51fd\u6570\u589e\u5927\u4e86\u53ef\u6267\u884c\u7a0b\u5e8f\u7684\u4f53\u79ef\u3002\nC++\u5185\u8054\u51fd\u6570\u7684\u5c55\u5f00\u662f\u4e2d\u7f16\u8bd1\u9636\u6bb5\uff0c\u8fd9\u5c31\u610f\u5473\u7740\u5982\u679c\u4f60\u7684\u5185\u8054\u51fd\u6570\u53d1\u751f\u4e86\u6539\u52a8\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u91cd\u65b0\u7f16\u8bd1\u4ee3\u7801\u3002\n\u5f53\u4f60\u628a\u5185\u8054\u51fd\u6570\u653e\u5728\u5934\u6587\u4ef6\u4e2d\u65f6\uff0c\u5b83\u5c06\u4f1a\u4f7f\u4f60\u7684\u5934\u6587\u4ef6\u4fe1\u606f\u53d8\u591a\uff0c\u4e0d\u8fc7\u5934\u6587\u4ef6\u7684\u4f7f\u7528\u8005\u4e0d\u7528\u5728\u610f\u8fd9\u4e9b\u3002\n\u6709\u65f6\u5019\u5185\u8054\u51fd\u6570\u5e76\u4e0d\u53d7\u5230\u9752\u7750\uff0c\u6bd4\u5982\u5728\u5d4c\u5165\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u5d4c\u5165\u5f0f\u7cfb\u7edf\u7684\u5b58\u50a8\u7ea6\u675f\u53ef\u80fd\u4e0d\u5141\u8bb8\u4f53\u79ef\u5f88\u5927\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\u3002\n\n\u4ec0\u4e48\u65f6\u5019\u8be5\u4f7f\u7528\u5185\u8054\u51fd\u6570\n\u5f53\u7a0b\u5e8f\u8bbe\u8ba1\u9700\u8981\u65f6\uff0c\u6bcf\u4e2a\u51fd\u6570\u90fd\u53ef\u4ee5\u58f0\u660e\u4e3ainline\u3002\u4e0b\u9762\u5217\u4e3e\u4e00\u4e9b\u6709\u7528\u7684\u5efa\u8bae\uff1a\n\n\u5f53\u5bf9\u7a0b\u5e8f\u6267\u884c\u6027\u80fd\u6709\u8981\u6c42\u65f6\uff0c\u90a3\u4e48\u5c31\u4f7f\u7528\u5185\u8054\u51fd\u6570\u5427\u3002\n\u5f53\u4f60\u60f3\u5b8f\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u65f6\uff0c\u90a3\u5c31\u679c\u65ad\u4f7f\u7528\u5185\u8054\u51fd\u6570\u5427\u3002\n\u5728\u7c7b\u5185\u90e8\u5b9a\u4e49\u7684\u51fd\u6570\u4f1a\u9ed8\u8ba4\u58f0\u660e\u4e3ainline\u51fd\u6570\uff0c\u8fd9\u6709\u5229\u4e8e\u7c7b\u5b9e\u73b0\u7ec6\u8282\u7684\u9690\u85cf\u3002\n\n\u5173\u952e\u70b9\n\n\u5185\u8054\u58f0\u660e\u53ea\u662f\u4e00\u79cd\u5bf9\u7f16\u8bd1\u5668\u7684\u5efa\u8bae\uff0c\u7f16\u8bd1\u5668\u662f\u5426\u91c7\u7528\u5185\u8054\u63aa\u65bd\u7531\u7f16\u8bd1\u5668\u81ea\u5df1\u6765\u51b3\u5b9a\u3002\u751a\u81f3\u5728\u6c47\u7f16\u9636\u6bb5\u6216\u94fe\u63a5\u9636\u6bb5\uff0c\u4e00\u4e9b\u6ca1\u6709inline\u58f0\u660e\u7684\u51fd\u6570\u7f16\u8bd1\u5668\u4e5f\u4f1a\u5c06\u5b83\u5185\u8054\u5c55\u5f00\u3002\n\u7f16\u8bd1\u5668\u7684\u5185\u8054\u770b\u8d77\u6765\u5c31\u50cf\u662f\u4ee3\u7801\u7684\u590d\u5236\u4e0e\u7c98\u8d34\uff0c\u8fd9\u4e0e\u9884\u5904\u7406\u5b8f\u662f\u5f88\u4e0d\u540c\u7684\uff1a\u5b8f\u662f\u5f3a\u5236\u7684\u5185\u8054\u5c55\u5f00\uff0c\u53ef\u80fd\u5c06\u4f1a\u6c61\u67d3\u6240\u6709\u7684\u547d\u540d\u7a7a\u95f4\u4e0e\u4ee3\u7801\uff0c\u5c06\u4e3a\u7a0b\u5e8f\u7684\u8c03\u8bd5\u5e26\u6765\u56f0\u96be\u3002\n\u6240\u6709\u4e2d\u7c7b\u4e2d\u5b9a\u4e49\u7684\u51fd\u6570\u90fd\u9ed8\u8ba4\u58f0\u660e\u4e3ainline\u51fd\u6570\uff0c\u6240\u6709\u6211\u4eec\u4e0d\u7528\u663e\u793a\u5730\u53bb\u58f0\u660einline\u3002\n\u865a\u51fd\u6570\u4e0d\u5141\u8bb8\u5185\u8054\u3002\n\u867d\u7136\u8bf4\u6a21\u677f\u51fd\u6570\u653e\u4e2d\u5934\u6587\u4ef6\u4e2d\uff0c\u4f46\u5b83\u4eec\u4e0d\u4e00\u5b9a\u662f\u5185\u8054\u7684\u3002\uff08\u4e0d\u662f\u8bf4\u5b9a\u4e49\u5728\u5934\u6587\u4ef6\u4e2d\u7684\u51fd\u6570\u90fd\u662f\u5185\u8054\u51fd\u6570\uff09\u3002\n\n\u8f6c\u8f7d\u81ea\uff1ahttp:\/\/www.cnblogs.com\/QG-whz\/p\/4641479.html","tags":[{"name":"C++\u8bed\u8a00","slug":"C-\u8bed\u8a00","permalink":"https:\/\/skywt.cn\/tag\/C-%E8%AF%AD%E8%A8%80\/"},{"name":"OI\u5b66\u4e60","slug":"OI\u5b66\u4e60","permalink":"https:\/\/skywt.cn\/tag\/OI%E5%AD%A6%E4%B9%A0\/"}],"categories":[]},{"title":"Markdown\u4e2dTeX\/LaTeX\u6570\u5b66\u516c\u5f0f\u7684\u7528\u6cd5","date":"2018-03-28T19:41:06+08:00","path":"https:\/\/skywt.cn\/posts\/latex","text":"\u4f5c\u4e3aOIer\uff0c\u5199\u535a\u5ba2\u7684\u65f6\u5019\u7ecf\u5e38\u4f1a\u9047\u5230\u9700\u8981\u6570\u5b66\u516c\u5f0f\u7684\u60c5\u51b5\uff0c\u7279\u522b\u662f\u03a3\u3001\u2208\u7b49\u7b26\u53f7\uff0c\u5728markdown\u91cc\u7528\u8d77\u6765\u5341\u5206\u4e0d\u53cb\u597d\uff08\u767e\u5ea6\u767e\u79d1\u7f51\u7edc\u6d41\u90a3\u4e00\u7bc7\u5c31\u51fa\u73b0\u4e86\uff1a\u03a3\uff08w\u2208V\uff09f(u,w)=0\u3002\u597d\u5728markdown\u4e2d\u6709\u63d2\u4ef6\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u5f3a\u5927\u7684\u6570\u5b66\u516c\u5f0f\u663e\u793a\u652f\u6301\u3002\u73b0\u5728\u6211\u4eec\u5c31\u53ef\u4ee5\u8fd9\u6837\u6d6a\uff1a\n$ \\displaystyle \\sum_{w\\in V} f(u,w)=0 $\n\n\u6211\u4eec\u751a\u81f3\u53ef\u4ee5\u2026\u2026\n$ \\displaystyle \\frac{1}{\\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{\\frac25 \\pi}} = 1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {1+\\frac{e^{-6\\pi}} {1+\\frac{e^{-8\\pi}} {1+\\cdots} } } } $\n$ \\displaystyle \\left( \\sum_{k=1}^n a_k b_k \\right)^2 \\leq \\left( \\sum_{k=1}^n a_k^2 \\right) \\left( \\sum_{k=1}^n b_k^2 \\right) $\n\u662f\u4e0d\u662f\u5f88\u6d6a\uff1f\uff01\n\u5b9e\u73b0\u63d2\u4ef6\n\u76ee\u524d\u4f3c\u4e4e\u6709\u4e24\u4e2a\u6bd4\u8f83\u6d41\u884c\u7684\u65b9\u6848\uff0c\u4e00\u4e2a\u662f$\\KaTeX$\uff0c\u4e00\u4e2a\u662fMathJax\u3002\nMathJax\n\u8fd9\u662f\u76ee\u524d\u6700\u6d41\u884c\u7684\u65b9\u6848\uff0cMathJax\u652f\u6301\u7684\u516c\u5f0f\u5f88\u5b8c\u6574\uff0c\u57fa\u4e8eTeX\/LaTeX\u7684\u8bed\u6cd5\uff0c\u4f46\u662f\u7f3a\u70b9\u662f\uff08\u636e\u8bf4\uff09\u52a0\u8f7d\u901f\u5ea6\u5341\u5206\u7f13\u6162\u3002\uff08\u7531\u4e8e\u6211WordPress\u4e2d\u4f7f\u7528\u7684MarkDown\u63d2\u4ef6\u662f\u56fd\u4eba\u5f00\u53d1\u7684Editor.md\uff0c\u5176\u4e2d\u5185\u7f6e\u7684\u53ea\u6709KaTeX\uff0c\u6240\u4ee5\u6211\u6ca1\u6709\u5c1d\u8bd5\u8fc7MathJax\u2026\u2026\uff09\n\u5b98\u7f51\uff1ahttps:\/\/www.mathjax.org\/\nKaTeX\n$\\KaTeX $\u4e5f\u662f\u57fa\u4e8eTeX\/LaTeX\u7684\u8bed\u6cd5\u3002\uff08\u636e\u8bf4\uff09KaTeX\u76f8\u6bd4MathJax\u52a0\u8f7d\u901f\u5ea6\u5feb\u5f97\u591a\uff0c\u4f46\u662f\uff08\u636e\u8bf4\uff09KaTeX\u652f\u6301\u6ca1\u6709MathJax\u5b8c\u6574\u3002\u603b\u4e4b\u5bf9\u4e8e\u6211\u4eec\u65e5\u5e38\u4f7f\u7528\uff0c\u4e0a\u9762\u4e24\u4e2a\u90fd\u4e0d\u9519\u3002\n\u5b98\u7f51\uff1ahttps:\/\/khan.github.io\/KaTeX\/\n\uff08\u5728\u8fd9\u4e2a\u7ba1\u7f51\u4e0aKaTeX\u76f4\u63a5\u653e\u51fa\u52a0\u8f7d\u901f\u5ea6\u5bf9\u6bd4\u56fe\u624b\u6495MathJax\u2026\u2026\uff09\n\u5e38\u7528\u8bed\u6cd5\n\u7531\u4e8e\u6211\u6b63\u5728\u4f7f\u7528KaTeX\uff0c\u6240\u4ee5\u672c\u6587\u4e2d\u516c\u5f0f\u663e\u793a\u5747\u4ee5KaTeX\u4e3a\u51c6\u3002\n\u9996\u5148\u6570\u5b66\u516c\u5f0f\u90fd\u662f\u8981\u7528\u4e24\u4e2a\u201c$\u201d\u7b26\u53f7\u5305\u8d77\u6765\u7684\u3002\u4efb\u4ecd\u7136\u62ff\u521a\u624d\u7684\u201c\u03a3\uff08w\u2208V\uff09f(u,w)=0\u201d\u4e3e\u4f8b\uff0c\u5728\u7f16\u8f91\u5668\u91cc\u5e94\u8be5\u5199\u6210\u8fd9\u6837\uff1a\n\\displaystyle \\sum_{win V} f(u,w)=0\n\u884c\u95f4\u516c\u5f0f\u4e0e\u884c\u5185\u516c\u5f0f\n\u8fd9\u4e2adisplaystyle\u8868\u793a\u8fd9\u662f\u884c\u95f4\u516c\u5f0f\u3002\u4e0e\u4e4b\u5bf9\u5e94\u7684\u5c31\u662f\u884c\u5185\u516c\u5f0f\uff08\u4e0d\u52a0displaystyle\uff09\u3002\u4e0b\u9762\u4e24\u4e2a\u516c\u5f0f\u4e00\u4e2a\u662f\u884c\u95f4\u516c\u5f0f\uff0c\u4e00\u4e2a\u662f\u884c\u5185\uff0c\u53ef\u4ee5\u770b\u51fa\u533a\u522b\uff08\u4e3b\u8981\u662fSigma\u4e0a\u4e0b\u6570\u5b57\u5199\u6cd5\u533a\u522b\uff09\uff1a\n$ \\displaystyle \\sum_{w\\in V} f(u,w)=0 $\n$ \\sum_{w\\in V} f(u,w)=0 $\n\u4e0a\u6807\u4e0e\u4e0b\u6807\n\u4e0b\u6807\u7528\u201c_\u201d\u7b26\u53f7\uff0c\u4e0a\u6807\u7528\u201c^\u201d\u7b26\u53f7\u3002\u8fd9\u4e9b\u7b26\u53f7\u7528\u5728Sigma\u4e4b\u540e\u5c31\u53ef\u4ee5\u8ba9Sigma\u4e0a\u4e0b\u663e\u793a\u6570\u5b57\u4e86\u3002\u6bd4\u5982\uff1a\n$ \\displaystyle \\sum_{i=1}^{i\\leq n} $\n\\displaystyle \\sum_{i=1}^{i\\leq n}\n\u8fd9\u4e2aleq\u662f\u5565\uff1f\u8fd9\u5c31\u8981\u5f15\u51fa\u4ee5\u4e0b\u7684\uff1a\n\u5173\u7cfb\u8fd0\u7b97\u7b26\n\u56de\u5230\u4e00\u5f00\u59cb\u7684\u516c\u5f0f\uff0c\u8fd9\u4e2asum\u5c31\u662fSigma\u7684\u610f\u601d\u4e86\uff0c\u5c31\u662f\u52a0\u548c\u3002in\u8868\u793a\u5c5e\u4e8e\u3002\u800cleq\u5219\u662f\u5c0f\u4e8e\u7b49\u4e8e\u3002\n\u5b8c\u6574\u7684\u5173\u7cfb\u8fd0\u7b97\u7b26\u53ef\u4ee5\u53bb\u770b\uff1ahttps:\/\/khan.github.io\/KaTeX\/\u3002\u56e0\u4e3a\u6709\u5f88\u591a\uff0c\u8fd9\u91cc\u4e0d\u4e00\u4e00\u5217\u4e3e\u4e86\u3002\n\u5206\u6570\n\u4f7f\u7528\\frac {\u5206\u5b50} {\u5206\u6bcd}\u53ef\u4ee5\u663e\u793a\u4e00\u4e2a\u5206\u6570\u3002\u4fbf\u6377\u60c5\u51b5\u53ef\u76f4\u63a5\u8f93\u5165\\frac ab\u6765\u5feb\u901f\u751f\u6210\u4e00\u4e2a$\\frac ab $\u3002\n\u5982\u679c\u5206\u5f0f\u5f88\u590d\u6742\uff0c\u4ea6\u53ef\u4f7f\u7528 \u5206\u5b50 \\over \u5206\u6bcd \u547d\u4ee4\uff0c\u6b64\u65f6\u5206\u6570\u4ec5\u6709\u4e00\u5c42\u3002\n\u4e3e\u4f8b\uff1a\n$ \\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {1+\\frac{e^{-6\\pi}} {1+\\frac{e^{-8\\pi}} {1+\\cdots} } } } $\n\u62ec\u53f7\u548c\u5206\u9694\u7b26\n\u4f7f\u7528{}\u6765\u8868\u793a{}\u3002\u666e\u901a\u7684\u62ec\u53f7\u3001\u5206\u9694\u7b26\uff08\u6bd4\u5982\u201c()\u201d\u3001\u201c|\u201d\u3001\u201c[]\u201d\uff09\u5219\u7528\u5176\u672c\u8eab\u8868\u793a\u3002\u5f53\u8981\u663e\u793a\u5927\u53f7\u7684\u62ec\u53f7\u6216\u5206\u9694\u7b26\u65f6\uff0c\u8981\u7528\\left\u548c\\right\u547d\u4ee4\u3002\n\u4e3e\u4f8b\uff1a\n$ \\displaystyle f(x,y,z) = 3y^2z \\left( 3+\\frac{7x+5}{1+y^2} \\right) $\nf(x,y,z) = 3y^2z \\left( 3+\\frac{7x+5}{1+y^2} \\right)\n\n\u53c2\u8003\nhttps:\/\/khan.github.io\/KaTeX\/\nhttps:\/\/www.zybuluo.com\/codeep\/note\/163962","tags":[{"name":"\u65e5\u5e38\u641e\u673a","slug":"\u65e5\u5e38\u641e\u673a","permalink":"https:\/\/skywt.cn\/tag\/%E6%97%A5%E5%B8%B8%E6%90%9E%E6%9C%BA\/"},{"name":"\u7f51\u7edc","slug":"\u7f51\u7edc","permalink":"https:\/\/skywt.cn\/tag\/%E7%BD%91%E7%BB%9C\/"},{"name":"\u9ed1\u79d1\u6280","slug":"\u9ed1\u79d1\u6280","permalink":"https:\/\/skywt.cn\/tag\/%E9%BB%91%E7%A7%91%E6%8A%80\/"}],"categories":[]},{"title":"\u4f7f\u7528KodExplorer\u642d\u5efa\u5f3a\u5927\u7684\u79c1\u6709\u4e91\u76d8","date":"2018-04-11T20:18:18+08:00","path":"https:\/\/skywt.cn\/posts\/kodexplorer","text":"\u81ea\u4ece360\u4e91\u76d8\u7b49\u4e00\u5927\u5806\u4e91\u76d8\u5173\u505c\uff0c\u767e\u5ea6\u4e91\u76d8\u9650\u901f\uff0c\u6211\u5c31\u5f00\u59cb\u60f3\u80fd\u4e0d\u80fd\u81ea\u5df1\u641e\u4e2a\u4e91\u76d8\u4e4b\u7c7b\u7684\u4e1c\u897f\u3002\u5f53\u7136\u53ef\u4ee5\u76f4\u63a5\u7528FTP\uff0c\u4f46\u662f\u7528\u8d77\u6765\u592a\u4e0d\u65b9\u4fbf\uff08\u8c01\u8bb0\u5f97\u4f4f\u90a3\u4e00\u5927\u4e32IP\u5730\u5740\u554a\u2026\u2026\uff09\u2026\u2026\u76f4\u5230\u6211\u627e\u5230\u4e86\u8fd9\u4e2a\u795e\u5668\u2026\u2026\n\n\u539f\u6765\u6211\u7528\u7684\u4e00\u76f4\u662f360\u4e91\u76d8\uff0c\u6bcf\u5929\u7b7e\u5230+\u4e00\u5927\u5806\u83ab\u540d\u5176\u5999\u7684\u6d3b\u52a8\uff0c\u7a7a\u95f4\u6512\u5230\u4e8650T+\uff08\u65e0\u6cd5\u60f3\u8c61\u5f53\u65f6\u7684\u5e78\u798f\u751f\u6d3b\uff01\uff09\u2026\u2026\u540e\u6765\u2026\u2026\u5b83\u5c31\u5012\u4e0b\u4e86\u2026\u2026\n\u4e8e\u662f\u6211\u8003\u8651\u4e86\u767e\u5ea6\u4e91\u76d8\uff0c\u5b9e\u9645\u4f7f\u7528\u53d1\u73b0\u4f53\u9a8c\u6781\u5dee\uff0c\u4e0b\u8f7d\u9650\u901f\uff08\u539f\u6765\u5c71\u5be8\u4e91\u8fd9\u4e2a\u795e\u5668\u53ef\u4ee5\u63d0\u53d6\u76f4\u94fe\u7a81\u7834\u9650\u901f\uff0c\u540e\u6765\u767e\u5ea6\u4e00\u5b9a\u66f4\u65b0\u4e86\u7b97\u6cd5\uff0c\u76f4\u94fe\u63d0\u53d6\u4e0d\u4e86\u4e86\u2026\u2026\uff09\uff0c\u4e0d\u5f00\u4f1a\u5458\u5c31\u53ea\u6709\u5927\u6982100K\/s\u2026\uff0c\u5b9e\u5728\u53d7\u4e0d\u4e86\u4e86\u2026\u2026\n\u540e\u6765\u4e5f\u8003\u8651\u4e86\u5de8\u786c\u7684OneDrive\u548c\u8c37\u6b4c\u7684\u4e91\u7aef\u786c\u76d8\uff0c\u56e0\u4e3a\u5728\u5899\u5916\uff0c\u6548\u679c\u90fd\u4e0d\u5c3d\u7406\u60f3\uff08\u7a7a\u95f4\u5c0f\u3001\u7f51\u901f\u6162\uff09\u3002\u6240\u4ee5\uff0c\u6211\u624d\u60f3\u5230\u81ea\u5df1\u642d\u5efa\u79c1\u6709\u4e91\u76d8\u3002\nKodExplorer - \u53ef\u9053\u4e91\u5728\u7ebf\u6587\u6863\u7ba1\u7406\u5668\n\u8f6f\u4ef6\u5b98\u7f51\uff1a\u53ef\u9053\u4e91\n\u4e00\u5f00\u59cb\u7528\u8fd9\u4e1c\u897f\u7684\u65f6\u5019\uff0c\u5b83\u4eff\u4f5b\u8fd8\u662f\u4e2a\u4e2a\u4eba\u5f00\u53d1\u8005\u5f00\u53d1\u7684\u5e94\u7528\uff0c\u73b0\u5728\u5df2\u5df2\u7ecf\u521d\u5177\u5546\u4e1a\u5316\u89c4\u6a21\u3002\u5f53\u7136\u5bf9\u4e8e\u6211\u4eec\u666e\u901a\u7528\u6237\u7528\u514d\u8d39\u7248\u7684\u5c31\u53ef\u4ee5\u4e86\u2026\u2026\n\u7ba1\u7f51\u4e0a\u5199\u660e\u4e86\u8fd9\u4e2a\u8f6f\u4ef6\u7684\u7279\u70b9\uff1a\n\n\u51e0\u5206\u949f\u5185\u642d\u5efa\u60a8\u7684\u4e13\u5c5e\u79c1\u6709\u4e91\u76d8\n\u8f7b\u677e\u5411\u5ba2\u6237\/\u516c\u53f8\u5185\u90e8\u5458\u5de5\u5206\u4eab\u6587\u4ef6\n\u5b8c\u5168\u652f\u6301\u79c1\u6709\u5316\u90e8\u7f72\uff0c\u81ea\u4e3b\u53ef\u63a7\n\u6709\u6d4f\u89c8\u5668\uff0c\u5c31\u53ef\u4ee5\u8f7b\u677e\u767b\u5f55\u548c\u7ba1\u7406\u6587\u6863\n\u6570\u767e\u79cd\u6587\u4ef6\u683c\u5f0f\u7684\u5728\u7ebf\u9884\u89c8\u3001\u7f16\u8f91\u548c\u64ad\u653e\n\n\u5bf9\u4e8e\u6211\u6765\u8bf4\u8fd9\u4e2a\u8f6f\u4ef6\u6700\u5927\u7684\u4f18\u52bf\u5c31\u662f\uff1a\u975e\u5e38\u7eaf\u51c0\uff0c\u751a\u81f3\u4e0d\u9700\u8981\u4f9d\u8d56MySQL\u6570\u636e\u5e93\uff0c\u800c\u4e14\u754c\u9762\u53cb\u597d\u3002\nKODCLOUD\u5176\u5b9e\u6709\u4e00\u79cdwebos\u7684\u611f\u89c9\uff0c\u5728\u4e0a\u9762\u7684\u6587\u4ef6\u7ba1\u7406\u5c31\u50cfWindows\u8d44\u6e90\u7ba1\u7406\u5668\u4e00\u6837\uff0c\u4fdd\u7559\u4e86\u6211\u4eec\u5e73\u5e38\u4f7f\u7528\u7684\u5404\u79cd\u4e60\u60ef\uff08\u5305\u62ec\u5feb\u6377\u952e\u7b49\u7b49\uff09\uff08\u6700\u8ba9\u6211\u4e0d\u723d\u7684\u5c31\u662f\u4e0d\u80fd\u7528alt+F4\u5173\u95ed\u7a97\u53e3\uff01\uff09\uff0c\u6240\u4ee5\u5728\u4e0a\u9762\u6211\u4eec\u7684\u64cd\u4f5c\u53ef\u4ee5\u5982\u4e1d\u6ed1\u822c\u6d41\u7545\u3002\u800c\u4e14Word\u6587\u6863\u3001Excel\u8868\u683c\u3001PDF\uff08\uff1f\uff09\u8fd8\u53ef\u4ee5\u5728\u7ebf\u9884\u89c8\u3002\u5185\u7f6e\u8fd8\u6709\u5f88\u591a\u7c7b\u4f3c\u5c0f\u7a0b\u5e8f\u7684\u4e1c\u897f\u2026\u2026\u5b9b\u5982\u4e00\u4e2a\u7f51\u9875\u7248\u7684Windows\u2026\u2026\n\u5b89\u88c5\u90e8\u7f72\n\u5b89\u88c5\u73af\u5883\u662fPHP 5.3\u4ee5\u4e0a\u3002\u5bf9\u4e8eLinux\u53d1\u884c\u7248\u7528\u6237\u53ef\u4ee5\u76f4\u63a5\u6267\u884c\u8fd9\u4e2a\u547d\u4ee4\uff1a\n`\nwget http:\/\/static.kodcloud.com\/update\/download\/kodexplorer4.25.zip\nunzip kodexplorer4.25.zip\nchmod -Rf 777 .\/*\n\u5982\u679c\u61d2\u5f97\u53bb\u6267\u884c\u547d\u4ee4\uff0c\u4e5f\u53ef\u4ee5\u4e0b\u8f7d\u7a0b\u5e8f\uff0c\u7528FTP\u4f20\u5230\u7f51\u7ad9\u3002\u5982\u679c\u4f60\u50cf\u6211\u4e00\u6837\u6bd4\u8f83\u61d2\uff0c\u4e5f\u53ef\u4ee5\u7528\u67d0\u4e9b\u9762\u677f\uff08\u63a8\u8350APPNODE\uff09\u91cc\u9762\u7684\u4e00\u952e\u5b89\u88c5\u3002\n\u4ee5\u4e0a\u90e8\u7f72\u5b8c\u6210\u540e\u8bbf\u95ee\u7f51\u7ad9\uff0c\u4f1a\u8ba9\u4f60\u8bbe\u7f6eadmin\u7684\u5bc6\u7801\u3002\u8bbe\u7f6e\u5b8c\u6210\u540e\u5c31\u53ef\u4ee5\u767b\u5f55\uff0c\u4eab\u53d7\u81ea\u5df1\u7684\u79c1\u6709\u4e91\u76d8\u4e86\uff5e\uff5e\uff5e","tags":[{"name":"\u65e5\u5e38\u641e\u673a","slug":"\u65e5\u5e38\u641e\u673a","permalink":"https:\/\/skywt.cn\/tag\/%E6%97%A5%E5%B8%B8%E6%90%9E%E6%9C%BA\/"},{"name":"\u7f51\u7edc","slug":"\u7f51\u7edc","permalink":"https:\/\/skywt.cn\/tag\/%E7%BD%91%E7%BB%9C\/"},{"name":"\u9ed1\u79d1\u6280","slug":"\u9ed1\u79d1\u6280","permalink":"https:\/\/skywt.cn\/tag\/%E9%BB%91%E7%A7%91%E6%8A%80\/"}],"categories":[]},{"title":"\u7ebf\u6bb5\u6811\uff08\u61d2\u6807\u8bb0\uff09\u603b\u7ed3","date":"2018-04-11T20:25:58+08:00","path":"https:\/\/skywt.cn\/posts\/segment-tree","text":"\u7ebf\u6bb5\u6811\u662f\u975e\u5e38\u57fa\u7840\u7684\u7b97\u6cd5\u4e86\u2026\u2026\n\u7ebf\u6bb5\u6811\u662f\u4e00\u79cd\u4e8c\u53c9\u6811\uff0c\u53ef\u89c6\u4e3a\u6811\u72b6\u6570\u7ec4\u7684\u53d8\u79cd\uff0c\u6700\u65e9\u51fa\u73b0\u57282001\u5e74\uff0c\u7531\u7a0b\u5e8f\u7ade\u8d5b\u9009\u624b\u53d1\u660e\u3002\u6211\u4eecZS\u8001\u5e08\u8bf4\u8fc7\uff1a\u201c\u6240\u6709\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u89e3\u51b3\u7684\u9898\u76ee\u90fd\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u89e3\u51b3\uff0c\u4f46\u662f\u90e8\u5206\u7ebf\u6bb5\u6570\u53ef\u4ee5\u89e3\u51b3\u7684\u9898\u76ee\u5374\u65e0\u6cd5\u7528\u6811\u72b6\u6570\u7ec4\u89e3\u51b3\u3002\u201d\u7531\u6b64\u53ef\u89c1\u7ebf\u6bb5\u6811\u5341\u5206\u5f3a\u5927\u2026\u2026\n\n\n\u6b64\u8d44\u6599\u7ed3\u6784\u5b9e\u9645\u5e94\u7528\u7528\u9014\u4e0d\u5927\uff0c\u4f46\u7531\u4e8e\u5176\u7a0b\u5f0f\u6613\u4e8e\u5b9e\u4f5c\u800c\u88ab\u5e7f\u6cdb\u5e94\u7528\u4e8e\u7a0b\u5f0f\u7ade\u8d5b\u5f53\u4e2d\u3002\u5176\u7528\u9014\u662f\u5728$O(\\log N)$\u67e5\u8be2\u4e00\u4e2a\u6307\u5b9a\u533a\u95f4\u5185\u7684\u8d44\u8baf\uff0c\u5e76\u53ef\u5728\u540c\u6837\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u652f\u63f4\u66f4\u65b0\u7b49\u64cd\u4f5c\u3002\n\u2014\u2014\u7ef4\u57fa\u767e\u79d1\n\n\u4f8b\u9898\n\u5148\u6765\u770b\u770b\u6d1b\u8c37\u4e0a\u7684\u7ebf\u6bb5\u6811\u6a21\u7248\u9898\uff1a\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1\n\u9898\u76ee\u63cf\u8ff0\n\u5982\u9898\uff0c\u5df2\u77e5\u4e00\u4e2a\u6570\u5217\uff0c\u4f60\u9700\u8981\u8fdb\u884c\u4e0b\u9762\u4e24\u79cd\u64cd\u4f5c\uff1a\n1.\u5c06\u67d0\u533a\u95f4\u6bcf\u4e00\u4e2a\u6570\u52a0\u4e0ax\n2.\u6c42\u51fa\u67d0\u533a\u95f4\u6bcf\u4e00\u4e2a\u6570\u7684\u548c\n\u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n\u8f93\u5165\u683c\u5f0f\uff1a\n\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570N\u3001M\uff0c\u5206\u522b\u8868\u793a\u8be5\u6570\u5217\u6570\u5b57\u7684\u4e2a\u6570\u548c\u64cd\u4f5c\u7684\u603b\u4e2a\u6570\u3002\n\u7b2c\u4e8c\u884c\u5305\u542bN\u4e2a\u7528\u7a7a\u683c\u5206\u9694\u7684\u6574\u6570\uff0c\u5176\u4e2d\u7b2ci\u4e2a\u6570\u5b57\u8868\u793a\u6570\u5217\u7b2ci\u9879\u7684\u521d\u59cb\u503c\u3002\n\u63a5\u4e0b\u6765M\u884c\u6bcf\u884c\u5305\u542b3\u62164\u4e2a\u6574\u6570\uff0c\u8868\u793a\u4e00\u4e2a\u64cd\u4f5c\uff0c\u5177\u4f53\u5982\u4e0b\uff1a\n\u64cd\u4f5c1\uff1a \u683c\u5f0f\uff1a1 x y k \u542b\u4e49\uff1a\u5c06\u533a\u95f4[x,y]\u5185\u6bcf\u4e2a\u6570\u52a0\u4e0ak\n\u64cd\u4f5c2\uff1a \u683c\u5f0f\uff1a2 x y \u542b\u4e49\uff1a\u8f93\u51fa\u533a\u95f4[x,y]\u5185\u6bcf\u4e2a\u6570\u7684\u548c\n\u8f93\u51fa\u683c\u5f0f\uff1a\n\u8f93\u51fa\u5305\u542b\u82e5\u5e72\u884c\u6574\u6570\uff0c\u5373\u4e3a\u6240\u6709\u64cd\u4f5c2\u7684\u7ed3\u679c\u3002\n\u8f93\u5165\u8f93\u51fa\u6837\u4f8b\n\u8f93\u5165\u6837\u4f8b\n5 5\n1 5 4 2 3\n2 2 4\n1 2 3 2\n2 3 4\n1 1 5 1\n2 1 4\n\u8f93\u51fa\u6837\u4f8b\n11\n8\n20\n\u8bf4\u660e\n\u65f6\u7a7a\u9650\u5236\uff1a1000ms,128M\n\u6570\u636e\u89c4\u6a21\uff1a\n\u5bf9\u4e8e30%\u7684\u6570\u636e\uff1aN&lt;=8\uff0cM&lt;=10\n\u5bf9\u4e8e70%\u7684\u6570\u636e\uff1aN&lt;=1000\uff0cM&lt;=10000\n\u5bf9\u4e8e100%\u7684\u6570\u636e\uff1aN&lt;=100000\uff0cM&lt;=100000\n\uff08\u6570\u636e\u5df2\u7ecf\u8fc7\u52a0\u5f3a^_^\uff0c\u4fdd\u8bc1\u5728int64\/long long\u6570\u636e\u8303\u56f4\u5185\uff09\n\u6837\u4f8b\u8bf4\u660e\uff1a\n\n\u7ebf\u6bb5\u6811\u7684\u5b9a\u4e49\u548c\u6784\u9020\n\u7ebf\u6bb5\u6811\uff08Segment Tree\uff09\u662f\u4e00\u4e2a\u5e73\u8861\u7684\u4e8c\u53c9\u6811\uff0c\u6240\u6709\u53f6\u5b50\u5230\u6839\u7684\u8ddd\u79bb\u6700\u591a\u53ea\u5dee1\u3002\u4ee4\u6574\u4e2a\u533a\u95f4\u7684\u957f\u5ea6\u4e3aN\uff0c\u5219\u5176\u6709N\u4e2a\u53f6\u8282\u70b9\uff0c\u6bcf\u4e2a\u53f6\u8282\u70b9\u4ee3\u8868\u4e00\u4e2a\u5355\u4f4d\u533a\u95f4\uff0c\u6bcf\u4e2a\u5185\u90e8\u7ed3\u70b9\u4ee3\u8868\u7684\u533a\u95f4\u4e3a\u5176\u4e24\u4e2a\u513f\u5b50\u4ee3\u8868\u533a\u95f4\u7684\u8054\u96c6\u3002\n\u7ffb\u8bd1\u6210\u4eba\u8bdd\u5c31\u662f\uff1a\u7ebf\u6bb5\u6811\u662f\u4e2a\u4e8c\u53c9\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u8868\u793a\u4e00\u4e2a\u533a\u95f4\uff08\u6216\u8bb8\u5e94\u8be5\u53eb\u533a\u95f4\u6811\u2026\u2026\uff09\uff0c\u53f6\u8282\u70b9\u4ee3\u8868\u7684\u533a\u95f4\u5927\u5c0f\u662f1\uff08\u5373\u5355\u4f4d\u533a\u95f4\uff09\u3002\uff08\u4ee5\u4e0a\u9762\u7684\u4f8b\u9898\u4e3a\u4f8b\uff09\u5f88\u5bb9\u6613\u7406\u89e3\uff0c\u6839\u636e\u53f6\u8282\u70b9\u6211\u4eec\u53ef\u4ee5\u5411\u4e0a\u7d2f\u8ba1\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u975e\u53f6\u8282\u70b9\uff0c\u5f88\u5bb9\u6613\u6784\u9020\u51fa\u5176\u4ee3\u8868\u7684\u533a\u95f4\u5185\u6240\u6709\u6570\u5b57\u52a0\u548c\uff08\u4ee5\u4e0b\u79f0\u4e3a\u201c\u7ba1\u8f96\u533a\u95f4\u548c\u201d\uff08\u6211\u81ea\u5df1\u8d77\u7684\u540d\u5b57\u2026\u2026\u56e0\u4e3a\u6211\u89c9\u5f97\u201c\u7ba1\u8f96\u201d\u8fd9\u4e2a\u8bcd\u5f88\u9ad8\u7aef\u2026\u2026\uff09\uff0c\u7528tree[x]\u8868\u793ax\u8282\u70b9\u7ba1\u8f96\u533a\u95f4\u548c\uff09\uff08\u5373\u6bcf\u4e2a\u70b9\u5de6\u53f3\u513f\u5b50\u4ee3\u8868\u533a\u95f4\u548c\u7684\u52a0\u548c\uff09\u3002\u8fd9\u6837\u5411\u4e0a\u6784\u9020\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u9020\u51fa\u4e00\u9897\u7ebf\u6bb5\u6811\u3002\u8fd9\u5c31\u662fbuild\u51fd\u6570\u6784\u9020\u7ebf\u6bb5\u6811\u7684\u8fc7\u7a0b\uff1a\ninline void build(int p,int tl,int tr){\n    tag[p]=0;\n    if (tl==tr) {tree[p]=a[tl];return;}\n    int mid=((tr-tl)&gt;&gt;1)+tl;\n    build((p&lt;&lt;1)  ,tl,mid  );\n    build((p&lt;&lt;1)+1,mid+1,tr);\n    tree[p]=tree[p&lt;&lt;1]+tree[(p&lt;&lt;1)+1];\n}\n\u533a\u95f4\u66f4\u65b0\u4e0e\u61d2\u6807\u8bb0\n\u5982\u679c\u6ca1\u6709\u533a\u95f4\u66f4\u65b0\uff0c\u6211\u4eec\u5c31\u7528\u4e0d\u5230\u61d2\u6807\u8bb0\u4e86\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u5355\u70b9\u66f4\u65b0\uff0c\u76f4\u63a5\u5411\u4e0a\u63a8\uff0c$O(\\log_2 N)$\u7684\u65f6\u95f4\u5185\u5c31\u53ef\u4ee5\u5f97\u51fa\u7ed3\u679c\u3002\u4f46\u662f\u533a\u95f4\u66f4\u65b0\u5c31\u5341\u5206\u9ebb\u70e6\uff1a\u5982\u679c\u4e00\u4e2a\u4e2a\u5355\u70b9\u8fdb\u884c\u66f4\u65b0\uff0c\u6700\u9ad8\u9700\u8981$O(N* \\log_2 N)$\uff01\u663e\u7136\u5f88\u5bb9\u6613\u8d85\u65f6\u3002\u61d2\u6807\u8bb0\uff08Lazy Tag\uff09\u5176\u5b9e\u662f\u5bf9\u6734\u7d20\u7684\u7ebf\u6bb5\u6811\u7684\u4e00\u4e2a\u4f18\u5316\uff0c\u53ef\u4ee5\u8ba9\u533a\u95f4\u66f4\u65b0\u4e5f\u8fbe\u5230$O(\\log_2 N)$\u7ea7\u522b\u3002\u6240\u4ee5\u9996\u5148\u6211\u4eec\u6765\u8ba4\u8bc6\u4e00\u4e0b\u61d2\u6807\u8bb0\uff1a\n\u61d2\u6807\u8bb0\n\u61d2\u6807\u8bb0\uff08Lazy Tag\uff09\uff0c\u4e5f\u6709\u7684\u5730\u65b9\u7ffb\u8bd1\u6210\u201c\u5ef6\u8fdf\u6807\u8bb0\u201d\uff08\u542c\u8d77\u6765\u9ad8\u7aef\u2026\u2026\uff09\uff0c\u5c31\u662f\u6307\u5728\u66f4\u65b0\u4e00\u90e8\u5206\u533a\u95f4\u7684\u65f6\u5019\uff0c\u4e0d\u66f4\u65b0\u8fd9\u4e2a\u533a\u95f4\u91cc\u9762\u7684\u6bcf\u4e2a\u70b9\uff0c\u800c\u662f\uff08\u61d2\u60f0\u5730\uff09\u628a\u8fd9\u4e2a\u533a\u95f4\u5206\u5272\u6210\u5f88\u591a\u4e2a\u80fd\u7528\u7ebf\u6bb5\u6811\u4e0a\u7684\u70b9\u8868\u793a\u7684\u533a\u95f4\uff08\u5f53\u7136\u662f\u5206\u7684\u533a\u95f4\u8d8a\u5c11\u8d8a\u597d\uff0c\u4e5f\u5c31\u662f\u8bf4\u6bcf\u4e2a\u533a\u95f4\u8d8a\u5927\u8d8a\u597d\uff09\uff0c\u53ea\u4fee\u6b63\u4ee3\u8868\u8fd9\u4e2a\u533a\u95f4\u7684\u70b9\uff0c\u518d\u628a\u8fd9\u4e9b\u533a\u95f4\u6807\u8bb0\u4e0b\uff0c\u4e0b\u6b21\u5982\u679c\u8981\u67e5\u8be2\u7684\u533a\u95f4\u4e0e\u8fd9\u4e2a\u533a\u95f4\u6709\u4ea4\u96c6\u5e76\u4e14\u6ca1\u6709\u5305\u542b\u8fd9\u4e2a\u533a\u95f4\uff0c\u5c31\u8bf4\u660e\u9700\u8981\u201c\u5206\u5272\u201d\u8fd9\u4e2a\u533a\u95f4\uff0c\u518d\u5c06\u8fd9\u4e2a\u533a\u95f4\u5411\u4e0b\u4fee\u6b63\u3002\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u53ef\u4ee5\u4f18\u5316\u5f88\u591a\u3002\n\u5982\u4f55\u8fdb\u884c\u533a\u95f4\u66f4\u65b0\n\u521a\u624d\u5df2\u7ecf\u63d0\u5230\uff0c\u5982\u679c\u8981\u628a\u533a\u95f4[L,R]\u4e2d\u6240\u6709\u5143\u7d20\u52a0\u4e0adelta\uff0c\u5219\u53ea\u9700\u8981\u4ece\u7ebf\u6bb5\u6811\u7684\u6839\u8282\u70b9\u5f00\u59cb\u5411\u4e0b\u5bfb\u627e\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u88ab[L,R]\u5305\u542b\u7684\u533a\u95f4\uff0c\u5c31\u4fee\u6b63\u8fd9\u4e2a\u533a\u95f4\uff08\u6ce8\u610f\u201c\u4fee\u6b63\u8fd9\u4e2a\u533a\u95f4\u201d\u53ea\u662f\u589e\u52a0\u8fd9\u4e2a\u533a\u95f4\u548c\u7684\u6807\u8bb0\u548c\u61d2\u6807\u8bb0\uff0c\u4e0d\u662f\u628a\u8fd9\u4e2a\u533a\u95f4\u5411\u4e0b\u4fee\u6b63\uff09\uff0c\u7136\u540e\u7ee7\u7eed\u5411\u4e0b\u627e\uff0c\u76f4\u5230\u627e\u51fa\u6765\u7684\u4e00\u6bb5\u6bb5\u533a\u95f4\u628a[L,R]\u90fd\u8986\u76d6\u4e86\u3002\n\u533a\u95f4\u67e5\u8be2\n\u533a\u95f4\u67e5\u8be2\u548c\u533a\u95f4\u66f4\u65b0\u6709\u70b9\u7c7b\u4f3c\uff0c\u5047\u8bbe\u8981\u67e5\u8be2[L,R]\uff0c\u540c\u6837\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u4e61\u5411\u4e0b\u201c\u5206\u5272\u201d\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff1a\u53ef\u80fd\u9700\u8981\u5c06\u521a\u624d\u7684\u61d2\u6807\u8bb0\u7528\u4e8e\u5411\u4e0b\u4fee\u6b63\u3002\uff08\u5177\u4f53\u89c1\u4ee3\u7801\uff5e\uff09\n\u5b8c\u6574\u4ee3\u7801\uff08\u6ce8\u91ca\u7248\uff09\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\nusing namespace std;\nconst int maxn=2000005;\nint n,m;\nlong long a[maxn],tree[maxn],tag[maxn];\ninline int read(){\n    int ret=0,f=1;char ch=getchar();\n    while (ch&lt;'0'||ch&gt;'9') {if (ch=='-') f=-1;ch=getchar();}\n    while (ch&gt;='0'&amp;&amp;ch&lt;='9') ret=ret*10+ch-'0',ch=getchar();\n    return ret*f;\n}\ninline long long llread(){\n    long long ret=0,f=1;char ch=getchar();\n    while (ch&lt;'0'||ch&gt;'9') {if (ch=='-') f=(long long)-1;ch=getchar();}\n    while (ch&gt;='0'&amp;&amp;ch&lt;='9') ret=ret*(long long)10+(long long)(ch-'0'),ch=getchar();\n    return (long long)ret*f;\n}\ninline void build(int p,int tl,int tr){  \/\/\u6784\u9020Segment Tree \n    tag[p]=0;\n    if (tl==tr) {tree[p]=a[tl];return;}\n    int mid=((tr-tl)&gt;&gt;1)+tl;\n    build((p&lt;&lt;1)  ,tl,mid  );\n    build((p&lt;&lt;1)+1,mid+1,tr);\n    tree[p]=tree[p&lt;&lt;1]+tree[(p&lt;&lt;1)+1];\n}\ninline void push_down(int tl,int tr,int p){  \/\/push_down\u51fd\u6570\u8d1f\u8d23\u5411\u4e0b\u4f20\u9012\uff0c\u5c06\u5b58\u50a8\u7684tag\u6570\u7ec4\u7528\u4e8e\u4fee\u6b63 \n    int mid=((tr-tl)&gt;&gt;1)+tl;\n    tree[p&lt;&lt;1]+=(long long)tag[p]*(mid-tl+1);  \/\/\u53ea\u9700\u8981\u4fee\u6b63\u4e00\u5bf9\u5de6\u53f3\u513f\u5b50\uff0c\u4e0d\u9700\u8981\u4e00\u76f4\u4f20\u9012\u5230\u53f6\u8282\u70b9 \n    tag[p&lt;&lt;1]+=tag[p];  \/\/\u56e0\u4e3a\u6ca1\u6709\u5f80\u4e0b\u4fee\u6b63\uff0c\u6240\u4ee5\u8981\u628a\u513f\u5b50\u7684tag\u7d2f\u8ba1\u4e0a \n    tree[(p&lt;&lt;1)+1]+=(long long)tag[p]*(tr-mid);\n    tag[(p&lt;&lt;1)+1]+=tag[p];\n    tag[p]=0;\n}\ninline void update(int sl,int sr,int tl,int tr,long long delta,int p){\n    if (sl&lt;=tl&amp;&amp;sr&gt;=tr){  \/\/p\u7ba1\u8f96\u7684\u533a\u95f4\u5728\u4fee\u6539\u8303\u56f4\u5185 \n        tree[p]+=delta*(long long)(tr-tl+1);\n        tag[p]+=delta;  \/\/tag\u6570\u7ec4\u8bb0\u5f55\u5269\u4e0b\u7684\u672a\u5411\u4e0b\u4f20\u9012\u7684\uff0c\u5b9e\u73b0\u201clazy tag\u201d\n        return;\n    }\n    push_down(tl,tr,p);  \/\/\u5982\u679c\u6ca1\u6709\u5b8c\u5168\u5305\u542bp\u7ba1\u8f96\u7684\u533a\u95f4\uff0c\u5219\u8bf4\u660e\u5e94\u8be5\u5411\u4e0b\u201c\u5206\u5272\u201d\uff0c\u6240\u4ee5\u5e94\u8be5\u7528tag\u6570\u7ec4\u5148\u4fee\u6b63\u4e0b\u9762\u7684tree[] \n    int mid=((tr-tl)&gt;&gt;1)+tl;  \/\/\u5206\u5272[tl,tr]\u533a\u95f4 \n    if (sl&lt;=mid) update(sl,sr,tl,mid,delta,p&lt;&lt;1);\n    if (mid&lt;sr)  update(sl,sr,mid+1,tr,delta,(p&lt;&lt;1)+1);\n    tree[p]=tree[p&lt;&lt;1]+tree[(p&lt;&lt;1)+1];  \/\/\u5411\u4e0a\u7d2f\u8ba1 \n}\ninline long long query(int sl,int sr,int tl,int tr,int p){  \/\/\u67e5\u8be2\u64cd\u4f5c \n    if (sl&lt;=tl&amp;&amp;sr&gt;=tr) return tree[p];  \/\/\u5982\u679c\u5b8c\u5168\u5305\u542bp\u6240\u7ba1\u8f96\u7684\u533a\u95f4\u5219\u76f4\u63a5\u8fd4\u56detree[p] \n    long long ret=0;  \/\/\u5426\u5219\u5c31\u201c\u5206\u5272\u201d \n    push_down(tl,tr,p);  \/\/\u5148\u8981\u628a\u5f53\u524d\u7684tag\u7528\u4e8e\u4fee\u6b63\u4e0b\u9762\u4e24\u4e2a\u513f\u5b50\uff0c\u8fd9\u6837\u624d\u80fd\u4fdd\u8bc1\u4e0b\u9762query\u7528\u5230\u7684tree[]\u662f\u6b63\u786e\u7684 \n    int mid=((tr-tl)&gt;&gt;1)+tl;\n    if (sl&lt;=mid) ret+=(long long)query(sl,sr,tl,mid,p&lt;&lt;1);\n    if (mid&lt;sr)  ret+=(long long)query(sl,sr,mid+1,tr,(p&lt;&lt;1)+1);\n    return ret;\n}\nint main(){\n    freopen(\"tree.in\",\"r\",stdin);\n    freopen(\"tree.out\",\"w\",stdout);\n    n=read();m=read();\n    for (int i=1;i&lt;=n;i++) a[i]=llread();\n    build(1,1,n);\n    for (int i=1;i&lt;=m;i++){\n        int c=read();\n        if (c==1){\n            int x=read(),y=read();\n            long long z=llread();\n            update(x,y,1,n,z,1);\n        } else\n        if (c==2){\n            int x=read(),y=read();\n            printf(\"%lld\\n\",query(x,y,1,n,1));\n        }\n    }\n    return 0;\n}\n\n\u53c2\u8003\nhttps:\/\/www.luogu.org\/blog\/pks-LOVING\/senior-data-structure-qian-tan-xian-duan-shu-segment-tree\nhttps:\/\/baike.baidu.com\/item\/%E7%BA%BF%E6%AE%B5%E6%A0%91\/10983506\nhttps:\/\/zh.wikipedia.org\/zh\/%E7%B7%9A%E6%AE%B5%E6%A8%B9_(%E5%84%B2%E5%AD%98%E5%8D%80%E9%96%93)","tags":[{"name":"OI\u5b66\u4e60","slug":"OI\u5b66\u4e60","permalink":"https:\/\/skywt.cn\/tag\/OI%E5%AD%A6%E4%B9%A0\/"},{"name":"OI\u7b97\u6cd5","slug":"OI\u7b97\u6cd5","permalink":"https:\/\/skywt.cn\/tag\/OI%E7%AE%97%E6%B3%95\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"\u5eb7\u6258\u5c55\u5f00\uff08Cantor Expansion\uff09\u4f8b\u9898 + \u7565\u89e3","date":"2018-06-01T23:05:00+08:00","path":"https:\/\/skywt.cn\/posts\/cantor-expansion","text":"\u73b0\u5728\u6709N\u4e2a\u6570\uff0c\u5206\u522b\u4e3a1\u5230N\uff0c\u5982\u679c\u8981\u95ee\u4f60\u8fd9\u4e9b\u6570\u7684\u6240\u6709\u6392\u5217\u4e2d\uff0c\u4ece\u5c0f\u5230\u5927\u6570\u7684\u7b2cN\u4e2a\u662f\u591a\u5c11\uff0c\u5982\u4f55\u6c42\u89e3\uff1f\n\u663e\u7136\u5f53N\u5f88\u5c0f\u65f6\u76f4\u63a5\u5199\u4e2a\u6a21\u62df\u5c31\u53ef\u4ee5\u4e86\u3002\u4f46\u662f\u8fd9\u6837\u5199\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u81f3\u5c11\u662f$A_N^N$\uff0c\u4e5f\u5c31\u662f$N!$\uff0c\u5f88\u5bb9\u6613\u8d85\u65f6\u3002\u60f3\u60f3$13!$\u5df2\u7ecf\u662f6227020800\u4e86\u2026\u2026\u6709\u6ca1\u6709\u66f4\u5feb\u7684\u65b9\u6cd5\u5462\uff1f\n\n\u9898\u5916\u8bdd\n\u8fd9\u53c8\u8ba9\u6211\u56de\u60f3\u8d77\u5728 ZS \u90a3\u91cc\u4e0a\u8bfe\u7684\u65e5\u5b50\u2026\u2026\u5f53\u65f6\u505a\u8fc7\u4e00\u9053\u9898\u53eb\u505a\u201cJam\u7684\u8ba1\u6570\u6cd5\u201d\uff08\u6d1b\u8c37\u4f20\u9001\u95e8\uff1aJam\u7684\u8ba1\u6570\u6cd5\uff09\uff0c\u5f53\u65f6ZS\u5e76\u6ca1\u6709\u4ecb\u7ecd\u5eb7\u6258\u5c55\u5f00\u8fd9\u79cd\u9ad8\u7ea7\u7684\u65b9\u6cd5\uff0c\u53ea\u662f\u544a\u8bc9\u6211\u4eec\uff1a\u77e5\u9053\u4e86\u4e00\u4e2a1~N\u7684\u6392\u5217\uff0c\u5982\u4f55\u6c42\u7b2c\u4e00\u4e2a\u6bd4\u5b83\u5927\u7684\u6392\u5217\u3002\u60f3\u6cd5\u5f88\u7b80\u5355\uff1a\u4ece\u8fd9\u4e2a\u6392\u5217\u7684\u6700\u540e\uff08\u5373\u7b2cN\u4e2a\u6570\u5b57\uff09\u5411\u524d\u5bfb\u627e\uff0c\u76f4\u5230\u627e\u5230\u4e00\u4e2a\u4e0b\u964d\u7684\u5730\u65b9\uff0c\u628a\u4e0b\u964d\u7684\u6570\u5b57\u66ff\u6362\u6389\uff08\u5f53\u7136\u8fd9\u6709\u5f88\u591a\u65b9\u6cd5\uff09\u3002\u7528\u8fd9\u79cd\u60f3\u6cd5\u53ef\u4ee5\u5199\u66b4\u529b\uff0c\u5bf9\u4e8e\u6d1b\u8c37\u4e0a\u8fd9\u9898\u53ef\u4ee5\u62ff40\u5206\u3002\n\u5eb7\u6258\u5c55\u5f00\u7684\u5b9a\u4e49&amp;\u516c\u5f0f\n\n\u5eb7\u6258\u5c55\u5f00\u662f\u4e00\u4e2a\u5168\u6392\u5217\u5230\u4e00\u4e2a\u81ea\u7136\u6570\u7684\u53cc\u5c04\uff0c\u5e38\u7528\u4e8e\u6784\u5efa\u54c8\u5e0c\u8868\u65f6\u7684\u7a7a\u95f4\u538b\u7f29\u3002 \u5eb7\u6258\u5c55\u5f00\u7684\u5b9e\u8d28\u662f\u8ba1\u7b97\u5f53\u524d\u6392\u5217\u5728\u6240\u6709\u7531\u5c0f\u5230\u5927\u5168\u6392\u5217\u4e2d\u7684\u987a\u5e8f\uff0c\u56e0\u6b64\u662f\u53ef\u9006\u7684\u3002\n\u2014\u2014\u7ef4\u57fa\u767e\u79d1\n\n\u4e0d\u591a\u8bf4\u4e86\uff0c\u76f4\u63a5\u653e\u516c\u5f0f\uff1a\n\\displaystyle X = A_n * (n-1)! + A_{n-1} * (n-2)! + \\dots + A_i * (i-1)! + \\dots + A_2 * 1! + A_1 * 0!\n\u5176\u4e2d $A_i$ \u8868\u793a\u8fd9\u4e2a\u6392\u5217\u91cc\uff08\u4ece\u5de6\u5230\u53f3\uff09\u7b2c $i$ \u4e2a\u6570\u5b57\u4e4b\u540e\u6709\u591a\u5c11\u6bd4\u8fd9\u4e2a\u6570\u5b57\u5c0f\u7684\u6570\u5b57\uff08\u770b\u770b\u4e0b\u9762\u7684\u4f8b\u5b50\u5c31\u660e\u767d\u4e86\uff5e\uff09\u3002\n\u8fd9\u4e2a\u516c\u5f0f\u53ef\u4ee5\u6c42\u51fa\u67d0\u4e2a\u5177\u4f53\u7684 $1\uff5eN$ \u6392\u5217\u5728\u6240\u6709 $1\uff5eN$ \u6392\u5217\u4e2d\u6392\u7b2c\u51e0\u4e2a\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff1a1\uff5e5\u7684\u6392\u5217\uff0c1 3 2 5 4 \u6392\u5728\u7b2c\u51e0\u4e2a\u5462\uff1f\u9996\u5148\u770b\u770b\uff1a\u7b2c\u4e00\u4e2a\u6570\u5b57 1 \u4e4b\u540e\u6ca1\u6709\u6bd4 1 \u5c0f\u7684\u6570\u5b57\uff0c\u6240\u4ee5 $A_n = 0$ \uff1b\u57283\u4e4b\u540e\u6709\u4e00\u4e2a\u6bd4\u5b83\u5c0f\u7684\uff082\uff09\uff0c\u6240\u4ee5 $A_{n-1} = 1$ \u3002\u4f9d\u6b64\u7c7b\u63a8\uff1a\n$ \\displaystyle 0 * (5-1)! + 1 * (4-1)! + 0 * (3-1)! + 1 * (2-1)! + 0 * (1-1)! = 7 $\n\u6bd4\u8fd9\u4e2a\u6392\u5217\u8fd8\u8981\u5c0f\u7684\u6392\u5217\u6709 7 \u4e2a\uff0c\u6240\u4ee5\u5b83\u6392\u5728\u7b2c 8 \u4e2a\u3002\u4e0b\u9762\u6211\u4eec\u679a\u4e3e\u9a8c\u8bc1\uff1a\n1 2 3 4 5\n1 2 3 5 4\n1 2 4 3 5\n1 2 4 5 3\n1 2 5 3 4\n1 2 5 4 3\n1 3 2 4 5\n1 3 2 5 4\n\u7684\u786e\u662f\uff5e\n\u8bdd\u8bf4\u5eb7\u6258\u5c14\uff08Cantor\uff09\u8fd9\u4f4d\u6570\u5b66\u5bb6\u4f3c\u4e4e\u4e5f\u662f\u4e2a\u5927\u4f6c\uff0c\u539f\u6765\u6211\u4eec\u8fd8\u505a\u8fc7\u4e00\u9053\u9898\u53eb\u505a\u201cCantor\u8868\u201d\uff0c\u5c31\u662f\u4ed6\u7684\u6770\u4f5c\uff08\u867d\u7136\u90a3\u9898\u5f88\u7b80\u5355\uff09\u3002\u5c31\u662f\u4e0b\u9762\u8fd9\u4f4d\u5927\u4f6c\uff01\n \u6570\u5b66\u5bb6\u7684\u51dd\u89c6\n\u5eb7\u6258\u5c55\u5f00\u7684\u9006\n\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u6c42\u4e00\u4e2a 1~N \u7684\u6392\u5217\u5728\u6240\u6709 1~N \u7684\u6392\u5217\u91cc\u4ece\u5c0f\u5230\u5927\u662f\u7b2c\u51e0\u4e2a\u4e86\uff0c\u90a3\u4e48\u5982\u679c\u6211\u4eec\u77e5\u9053\u4e00\u4e2a\u6570\u5b57 k\uff0c\u60f3\u77e5\u9053 1~N \u7684\u6392\u5217\u91cc\u7b2c k \u4e2a\u6392\u5217\u662f\u4ec0\u4e48\uff0c\u600e\u4e48\u529e\u5462\uff1f\n\u5f53\u7136\u53ef\u4ee5\u7528\u4e8c\u5206\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5927\u6982 $log_2 (N!)$\u3002\u4f46\u662f\u65e2\u7136\u524d\u9762\u8bf4\u4e86\u201c\u5eb7\u6258\u5c55\u5f00\u662f\u4e00\u4e2a\u5168\u6392\u5217\u5230\u4e00\u4e2a\u81ea\u7136\u6570\u7684\u53cc\u5c04\u201d\uff0c\u201c\u662f\u53ef\u9006\u7684\u201d\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u59a8\u8bd5\u8bd5\u6c42\u5eb7\u6258\u5c55\u5f00\u7684\u9006\uff0c\u53ef\u4ee5\u505a\u5230 $O(N)$ ~\n\u5eb7\u6258\u5c55\u5f00\u7684\u9006\u5e76\u4e0d\u590d\u6742\uff0c\u76f8\u5f53\u4e8e\u628a\u521a\u521a\u7684\u90a3\u4e2a\u7b49\u5f0f\u5012\u8fc7\u6765\u505a\u3002\u6bd4\u5982\u6211\u4eec\u8981\u6c42 $1~N$ \u7684\u6392\u5217\u91cc\u7b2c $k$ \u5927\u7684\uff0c\u6b65\u9aa4\u5982\u4e0b\uff1a\n\n\n\u5c06 $k$ \u51cf\u53bb 1\uff0c\u6b64\u65f6 $k$ \u5c31\u4ee3\u8868\u4e86\u6bd4\u6211\u4eec\u8981\u6c42\u7684\u6392\u5217\u5c0f\u7684\u6392\u5217\u6709\u51e0\u4e2a\uff08\u53c2\u8003\u524d\u9762\uff0c\u6211\u4eec\u6700\u540e\u628a\u6c42\u51fa\u7684\u7b54\u6848+1\u4e86\uff09\uff1b\n\n\n$k$ \u9664\u4ee5 $(N-1)!$\uff0c\u5f97\u5230 $A_n$\n\n\n$k$ \u9664\u4ee5 $(N-2)!$\uff0c\u5f97\u5230 $A_{n-1}$\n\n...\n\n\u4ee5\u6b64\u7c7b\u63a8\uff0c\u6700\u7ec8\u53ef\u4ee5\u6c42\u51fa\u6574\u4e2a $A$ \u6570\u7ec4\uff0c\u4ece\u800c\u63a8\u51fa\u8fd9\u4e2a\u6392\u5217\u3002\n\u4f8b\u9898\n\u6d1b\u8c37 P3014 [USACO11FEB]\u725b\u7ebf Cow Line\n\u9898\u76ee\u63cf\u8ff0\nThe N (1 &lt;= N &lt;= 20) cows conveniently numbered 1...N are playing yet another one of their crazy games with Farmer John. The cows will arrange themselves in a line and ask Farmer John what their line number is. In return, Farmer John can give them a line number and the cows must rearrange themselves into that line.\nA line number is assigned by numbering all the permutations of the line in lexicographic order.\nConsider this example:\nFarmer John has 5 cows and gives them the line number of 3.\nThe permutations of the line in ascending lexicographic order: 1st: 1 2 3 4 5\n2nd: 1 2 3 5 4\n3rd: 1 2 4 3 5\nTherefore, the cows will line themselves in the cow line 1 2 4 3 5.\nThe cows, in return, line themselves in the configuration '1 2 5 3 4' and ask Farmer John what their line number is.\nContinuing with the list:\n4th : 1 2 4 5 3\n5th : 1 2 5 3 4\nFarmer John can see the answer here is 5\nFarmer John and the cows would like your help to play their game. They have K (1 &lt;= K &lt;= 10,000) queries that they need help with. Query i has two parts: C_i will be the command, which is either 'P' or 'Q'.\nIf C_i is 'P', then the second part of the query will be one integer A_i (1 &lt;= A_i &lt;= N!), which is a line number. This is Farmer John challenging the cows to line up in the correct cow line.\nIf C_i is 'Q', then the second part of the query will be N distinct integers B_ij (1 &lt;= B_ij &lt;= N). This will denote a cow line. These are the cows challenging Farmer John to find their line number.\n\u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n\u8f93\u5165\u683c\u5f0f\uff1a\n\n\nLine 1: Two space-separated integers: N and K\n\nLines 2..2K+1: Line 2i and 2*i+1 will contain a single query.\n\nLine 2*i will contain just one character: 'Q' if the cows are lining up and asking Farmer John for their line number or 'P' if Farmer John gives the cows a line number.\nIf the line 2&#42;i is 'Q', then line 2&#42;i+1 will contain N space-separated integers B_ij which represent the cow line. If the line 2&#42;i is 'P', then line 2*i+1 will contain a single integer A_i which is the line number to solve for.\n\u8f93\u51fa\u683c\u5f0f\uff1a\n\nLines 1..K: Line i will contain the answer to query i.\n\nIf line 2&#42;i of the input was 'Q', then this line will contain a single integer, which is the line number of the cow line in line 2*i+1.\nIf line 2&#42;i of the input was 'P', then this line will contain N space separated integers giving the cow line of the number in line 2*i+1.\n\u8f93\u5165\u8f93\u51fa\u6837\u4f8b\n\u8f93\u5165\u6837\u4f8b#1\uff1a\n5 2 \nP \n3 \nQ \n1 2 5 3 4 \n\u8f93\u51fa\u6837\u4f8b#1\uff1a\n1 2 4 3 5 \n5 \n\u53c2\u8003\u4ee3\u7801\n\u8fd9\u91cc\u8d34\u7684\u5c31\u662f\u521a\u521a\u90a3\u9898AC\u7684\u4ee3\u7801\u3002\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\nusing namespace std;\nconst int maxn=25;\nint n,m,a[maxn],b[maxn];\nbool vis[maxn];\ninline int read(){\n    int ret=0,f=1;char ch=getchar();\n    while (ch&lt;'0'||ch&gt;'9') {if (ch=='-') f=-1;ch=getchar();}\n    while (ch&gt;='0'&amp;&amp;ch&lt;='9') ret=ret*10+ch-'0',ch=getchar();\n    return ret*f;\n}\ninline long long llread(){\n    long long ret=0,f=1;char ch=getchar();\n    while (ch&lt;'0'||ch&gt;'9') {if (ch=='-') f=-1;ch=getchar();}\n    while (ch&gt;='0'&amp;&amp;ch&lt;='9') ret=ret*(long long)10+(long long)(ch-'0'),ch=getchar();\n    return (long long)ret*f;\n}\ninline char read_ch(){\n    char ch=getchar();\n    while (ch!='P'&amp;&amp;ch!='Q') ch=getchar();\n    return ch;\n}\ninline bool check(int L,int R){\n    for (int i=L;i&lt;=R;i++) if (vis[i]) return 1;\n    return false;\n}\nint main(){\n    n=read();m=read();\n    for (int k=1;k&lt;=m;k++){\n        char ch=read_ch();\n        if (ch=='Q'){\n            long long fac=1;\n            for (int i=1;i&lt;=n;i++) a[i]=read(),fac=fac*(long long)i;\n            fac=(long long)fac\/(long long)n;\n            long long x=0;int cnt=n-1;\n            for (int i=1;i&lt;=n;i++){\n                int now=0; \/\/now\u8868\u793a\u8fd9\u4e2a\u6392\u5217\u91cc\uff08\u4ece\u5de6\u5230\u53f3\uff09\u7b2ci\u4e2a\u6570\u5b57\u4e4b\u540e\u6709\u591a\u5c11\u6bd4\u8fd9\u4e2a\u6570\u5b57\u5c0f\u7684\u6570\u5b57\n                for (int j=i+1;j&lt;=n;j++) if (a[i]&gt;a[j]) now++;\n                x=(long long)x+(long long)now*(long long)fac;\n                if (cnt) fac=(long long)fac\/(long long)cnt--;\n            }\n            printf(\"%lld\\n\",++x);\n        } else if (ch=='P'){\n            long long x=llread();x--;long long fac=1;\n            for (int i=2;i&lt;n;i++) fac=fac*(long long)i;\n            for (int i=n;i&gt;=1;i--){\n                a[n-i+1]=(long long)x\/fac;\n                x%=fac;\n                if (i-1) fac=fac\/(long long)(i-1); else fac=1;\n            }\n            memset(vis,0,sizeof(vis));\n            for (int i=1;i&lt;=n;i++){ \/\/B[i]\u5373i\u4f4d\u4e0a\u7684\u6570\u5b57 \n                int cnt=0;b[i]=-1;\n                for (int j=0;j&lt;=n;j++){\n                    if (vis[j]) cnt++;\n                    if ((!vis[cnt+a[i]+1])&amp;&amp;(!check(j+1,cnt+a[i]))){\n                        vis[cnt+a[i]+1]=1;b[i]=cnt+a[i]+1;break;\n                    }\n                }\n            }\n            for (int i=1;i&lt;n;i++) printf(\"%d \",b[i]);printf(\"%d\\n\",b[n]);\n        }\n    }\n    return 0;\n}\n\n\u53c2\u8003\n\u5eb7\u6258\u5c55\u5f00 - \u7ef4\u57fa\u767e\u79d1\uff0c\u81ea\u7531\u7684\u767e\u79d1\u5168\u4e66\n\u5eb7\u6258\u5c55\u5f00_\u767e\u5ea6\u767e\u79d1\n\u5eb7\u6258\u5c55\u5f00\u8be6\u89e3 | Comzyh\u7684\u535a\u5ba2\n\u9898\u89e3 P3014 \u3010[USACO11FEB]\u725b\u7ebfCow Line\u3011 - YoungNeal\u7684Blog - \u6d1b\u8c37\u535a\u5ba2\n\u60f3\u4e0d\u5230\u5427\uff0c\u9694\u4e86\u8fd9\u4e48\u957f\u65f6\u95f4\u6211\u5c45\u7136\u66f4\u65b0\u535a\u5ba2\u4e86~","tags":[{"name":"OI\u5b66\u4e60","slug":"OI\u5b66\u4e60","permalink":"https:\/\/skywt.cn\/tag\/OI%E5%AD%A6%E4%B9%A0\/"},{"name":"OI\u7b97\u6cd5","slug":"OI\u7b97\u6cd5","permalink":"https:\/\/skywt.cn\/tag\/OI%E7%AE%97%E6%B3%95\/"},{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u6570\u5b66\u9898","slug":"\u6570\u5b66\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E6%95%B0%E5%AD%A6%E9%A2%98\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"\uff08\u8f6c\uff09\u7535\u5f71TS\u3001TC\u3001SCR\u3001R5\u3001BD\u3001HD\u7b49\u7248\u672c\u662f\u4ec0\u4e48\u610f\u601d","date":"2018-06-01T20:00:03+08:00","path":"https:\/\/skywt.cn\/posts\/whatsmovie","text":"\u56e0\u4e3a\u6211\u81ea\u5df1\u4e5f\u7ecf\u5e38\u5206\u4e0d\u6e05\u8fd9\u4e9b\u662f\u5565\u610f\u601d\uff0c\u6bcf\u6b21\u90fd\u8981\u53bb\u767e\u5ea6\u5341\u5206\u9ebb\u70e6\uff0c\u6240\u4ee5\u8f6c\u8f7d\u6b64\u7bc7\u3002\n\u5728\u5f88\u591a\u7535\u5f71\u4e0b\u8f7d\u7f51\u7ad9\u7684\u5f71\u7247\u6807\u9898\u4e2d\u6211\u4eec\u90fd\u80fd\u770b\u5230\uff0c\u6bd4\u5982\u300a\u523a\u6740\u5e0c\u7279\u52d2BD\u7248\u300b\u3001\u300a\u6e38\u9f99\u620f\u51e4TS\u7248\u300b\u7b49\uff0c\u8fd9\u4e9b\u82f1\u6587\u7f29\u5199\u90fd\u662f\u4ec0\u4e48\u610f\u601d\u5462\uff1f\u90fd\u4ee3\u8868\u4ec0\u4e48\u753b\u8d28\uff1f\u4ee5\u4e0b\u5c31\u662f\u5404\u4e2a\u7248\u672c\u7684\u5177\u4f53\u542b\u4e49\u3002\n\n1\u3001CAM\uff08\u67aa\u7248\uff09\nCAM\u901a\u5e38\u662f\u7528\u6570\u7801\u6444\u50cf\u673a\u4ece\u7535\u5f71\u9662\u76d7\u5f55\u3002\u6709\u65f6\u4f1a\u4f7f\u7528\u5c0f\u4e09\u89d2\u67b6\uff0c\u4f46\u5927\u591a\u6570\u65f6\u5019\u4e0d\u53ef\u80fd\u4f7f\u7528\uff0c\u6240\u4ee5\u6444\u50cf\u673a\u4f1a\u6296\u52a8\u3002\u56e0\u6b64\u6211\u4eec\u770b\u5230\u753b\u9762\u901a\u5e38\u504f\u6697\u4eba\u7269\u5e38\u5e38\u4f1a\u5931\u771f\uff0c\u4e0b\u65b9\u7684 \u5b57\u5e55\u65f6\u5e38\u4f1a\u51fa\u73b0\u503e\u659c\u3002 \u7531\u4e8e\u58f0\u97f3\u662f\u4ece\u6444\u50cf\u673a\u81ea\u5e26\u7684\u8bdd\u7b52\u5f55\u5236\uff0c\u6240\u4ee5\u7ecf\u5e38\u4f1a\u5f55\u5230\u89c2\u4f17\u7684\u7b11\u58f0\u7b49\u58f0\u97f3\u3002\u56e0\u4e3a\u8fd9\u4e9b\u56e0\u7d20\uff0c\u56fe\u8c61\u548c\u58f0\u97f3\u8d28\u91cf\u901a\u5e38\u90fd\u5f88\u5dee\u3002\n2\u3001TS\uff08\u51c6\u67aa\u7248\uff09\nTS\u662fTELESYNC\u7684\u7f29\u5199\u3002TS\u4e0eCAM\u7248\u7684\u6807\u51c6\u662f\u76f8\u540c\u7684\u3002\u4f46\u5b83\u4f7f\u7528\u7684\u662f\u5916\u7f6e\u97f3\u6e90\uff08\u4e00\u822c\u662f\u5f71\u9662\u5ea7\u6905\u4e0a\u4e3a\u542c\u529b\u4e0d\u597d\u7684\u4eba\u8bbe\u7684\u8033\u673a\u5b54\uff09\u8fd9\u4e2a\u97f3\u6e90\u4e0d\u80fd\u4fdd\u8bc1\u662f\u597d\u7684\u97f3\u6e90\uff0c\u56e0\u4e3a\u53d7\u5230\u5f88\u591a\u80cc\u666f\u566a\u97f3\u7684\u5e72\u6270\u3002TS\u662f\u5728\u7a7a\u7684\u5f71\u9662\u6216\u662f\u7528\u4e13\u4e1a\u6444\u50cf\u673a\u5728\u6295\u5f71\u5ba4\u5f55\u5236\uff0c\u6240\u4ee5\u56fe\u8c61\u8d28\u91cf\u53ef\u80fd\u6bd4CAM\u597d\u3002\u4f46\u753b\u9762\u7684\u8d77\u4f0f\u5f88\u5927\u3002\u8bba\u575b\u4e0a\u5e38\u51fa\u73b0\u7684\u6709\u4e00\u822cTS\u7248\u548c\u7ecf\u8fc7\u4fee\u590d\u6e05\u6670TS\u7248\u3002\n3\u3001TC\uff08\u80f6\u7247\u7248\uff09\nTC\u662fTELECINE\u7684\u7f29\u5199\u3002TC\u4f7f\u7528\u7535\u89c6\u7535\u5f71\u673a\u4ece\u80f6\u7247\u76f4\u63a5\u6570\u5b57\u62f7\u8d1d\u3002\u753b\u9762\u8d28\u91cf\u8fd8\u4e0d\u9519,\u4f46\u4eae\u5ea6\u4e0d\u8db3\uff0c\u6709\u4e9b\u660f\u6697\u3002\u5f88\u591a\u65f6\u5019\u5236\u4f5cTC\u4f7f\u7528\u7684\u97f3\u6e90\u6765\u81eaTS\uff0c\u56e0\u6b64\u97f3\u8d28\u5f88\u5dee\uff0c\u4f46\u753b\u9762\u8d28\u91cf\u8fdc\u597d\u8fc7TS\u3002\u5982\u679c\u4e0d\u662f\u592a\u8bb2\u7a76\u7684\u8bddTC\u7248\u8fd8\u662f\u4e0d\u9519\u7684\u9009\u62e9\u3002\n4\u3001DVDSCR\uff08\u9884\u552e\u7248\uff09\nSCR\u662fSCREENER\u7684\u7f29\u5199\u3002DVDSCR\u9884\u89c8\u7248\u7684\u6216\u8005\u662f\u6d4b\u8bd5\u7248\u7684DVD\uff0c\u975e\u6b63\u5f0f\u51fa\u7248\u7684\u7248\u672c\u3002\u4ece\u9884\u89c8\u7248 DVD \u4e2d\u83b7\u53d6\uff0c\u901a\u8fc7mpeg-4\u6280\u672f\u8fdb\u884c\u9ad8\u8d28\u91cf\u538b\u7f29\u7684\u89c6\u9891\u683c\u5f0f\u3002\u80fd\u6bd4DVDRip\u65e9\u53d1\u5e03\uff0c\u4f46\u753b\u8d28\u7a0d\u5dee\u3002\uff08\u7ecf\u5e38\u6709\u4e00\u4e9b\u4e0d\u5728\u9ed1\u8fb9\u91cc\u5728\u5c4f\u5e55\u4e0b\u65b9\u6eda\u52a8\u7684\u6d88\u606f\uff0c\u5305\u542b\u7248\u6743\u548c\u53cd\u76d7\u7248\u7535\u8bdd\u53f7\u7801\uff0c\u4f1a\u5f71\u54cd\u89c2\u770b\uff09\u5982\u679c\u6ca1\u6709\u4e25\u683c\u7684\u5212\u5206\u5b83\u7684\u753b\u8d28\u5e94\u4e0eTC\u7248\u5dee\u4e0d\u591a\u3002\n5\u3001R5\uff08\u4fc4\u7f57\u65af5\u533a\u7248\uff09\n\u4fc4\u7f57\u65af5\u533a\u7248\u7684DVD\uff0c\u56e0\u4e3a\u914d\u97f3\u4e3a\u4fc4\u8bed\uff0c\u6240\u4ee5\u9700\u8981\u53bb\u5bfb\u627e\u82f1\u8bed\u97f3\u8f68\uff0cR5\u7248\u672c\u5c31\u662f\u4e00\u79cd\u5408\u6210\u7248\u672c\uff08\u4fc45\u533aDVD\u89c6\u9891\uff0b\u901a\u8fc7\u5176\u5b83\u6e20\u9053\u83b7\u5f97\u7684\u82f1\u8bed\u97f3\u8f68\uff09\uff0cR5\u7248\u672c\u7684\u753b\u8d28\u4e00\u822c\u90fd\u4e0d\u9519\uff0c\u97f3\u9891\u90e8\u5206\u7531\u4e8e\u97f3\u8f68\u7684\u6765\u6e90\u4e0d\u540c\uff0c\u6548\u679c\u6709\u597d\u6709\u5dee\u3002\n6\u3001HD RIP\uff08\u9ad8\u6e05\u7248\uff09\nHDRip\u662fHDTVRip\uff08\u9ad8\u6e05\u7535\u89c6\u8d44\u6e90\u538b\u7f29\uff09\u7684\u7f29\u5199\uff0c\u662f\u7528DivX\/XviD\/x264\u7b49MPEG4\u538b\u7f29\u6280\u672f\u5bf9HDTV\u7684\u89c6\u9891\u56fe\u50cf\u8fdb\u884c\u9ad8\u8d28\u91cf\u538b\u7f29\uff0c\u7136\u540e\u5c06\u89c6\u9891\u3001\u97f3\u9891\u90e8\u5206\u5c01\u88c5\u6210\u4e00\u4e2a.avi\u6216.mkv\u6587\u4ef6\uff0c\u6700\u540e\u518d\u52a0\u4e0a\u5916\u6302\u7684\u5b57\u5e55\u6587\u4ef6\u800c\u5f62\u6210\u7684\u89c6\u9891\u683c\u5f0f\u3002\u753b\u9762\u6e05\u6670\u5ea6\u66f4\u9ad8\u3002\n7\u3001BD\uff08\u84dd\u5149\u7248\uff09\nBD\u662fBlue Disk\u7684\u7b80\u79f0\uff0c\u7ffb\u8bd1\u6210\u4e2d\u6587\u662f\u201c\u84dd\u5149\u5f71\u789f\u201d\u7684\u610f\u601d\u3002\u5c31\u662f\u4ece\u84dd\u5149\u5f71\u789f\u8f6c\u5f55\u7684\u89c6\u9891\u548c\u97f3\u9891\uff0c\u753b\u9762\u6e05\u6670\u5ea6\u5f88\u9ad8\u3002\n8\u3001DVD,HDVD,DVD5,DVD9\nDVD\u7684\u82f1\u6587\u5168\u540d\u662fDigital Video Disk\uff0c\u5373\u6570\u5b57\u89c6\u9891\u5149\u76d8\u6216\u6570\u5b57\u5f71\u76d8\uff0c\u5b83\u5229\u7528MPEG2\u7684\u538b\u7f29\u6280\u672f\u6765\u50a8\u5b58\u5f71\u50cf\u3002\n9\u3001HDVD\uff08\u538b\u7f29\u789f\u6216\u8005\u7ecf\u6d4e\u7248DVD\uff09\nHDVD\u4fd7\u79f0\u538b\u7f29\u789f\u6216\u8005\u7ecf\u6d4e\u7248DVD\uff0c\u4ecb\u8d28\u901a\u5e38\u4e3aDVD-5\uff08\u5bb9\u91cf4.7G\uff09\u4e5f\u6709DVD-9\u7684\uff08\u5bb9\u91cf8.5G\uff09\uff0c\u91c7\u7528MPEG-1\u6216MPEG-2\u7f16\u7801\uff0c\u7531\u4e8e\u7801\u6d41\u8f83\u4f4e\uff0c\u6240\u4ee5\u6bcf\u5f20\u76d8\u53ef\u5bb9\u7eb3\u957f\u8fbe7\u4e2a\u5c0f\u65f6\u7684\u89c6\u9891\u8282\u76ee\uff0c\u753b\u8d28\u6c34\u5e73\u7565\u9ad8\u4e8e\u6216\u7b49\u540c\u4e8eVCD\u3002\u7528\u4e8e\u770b\u8fde\u7eed\u5267\u6700\u7701\u94b1\u3002\n10\u3001VHSRip\nVHSRip\u662f\u4ece\u96f6\u552e\u7248VHS\u5f55\u8c61\u5e26\u8f6c\u5236\uff0c\u4e3b\u8981\u662f\u6ed1\u51b0\/\u4f53\u80b2\u5185\u5bb9\u7684\u53d1\u5e03\u3002\n11\u3001TVRip\n\u4ece\u7535\u89c6\uff08\u6700\u597d\u662f\u4ece\u6570\u7801\u6709\u7ebf\u7535\u89c6\/\u536b\u661f\u7535\u89c6\u6355\u6349\uff09\u8f6c\u5236\u7684\u7535\u89c6\u5267\uff0c\u6216\u63a5\u6536\u7531\u536b\u661f\u63d0\u524d\u51e0\u5929\u5411\u7535\u89c6\u7f51\u4f20\u9001\u7684\u9884\u64ad\u8282\u76ee\uff08\u4e0d\u5305\u542b\u52a0\u5bc6\u4f46\u6709\u65f6\u6709\u96ea\u82b1\uff09\u3002\u6709\u4e9b\u8282\u76ee\uff0c\u6bd4\u5982WWF RAW IS WAR\u5305\u542b\u591a\u4f59\u7684\u90e8\u5206\uff1b&quot;DARK MATCHES&quot;\u548cCAMERA\/COMMENTARY\u6d4b\u8bd5\u88ab\u5305\u542b\u5728TVRip\u91cc\u3002PDTV\u662f\u4ecePCI\u6570\u7801\u7535\u89c6\u5361\u6355\u6349\uff0c\u901a\u5e38\u6548\u679c\u6700\u597d\uff1b\u7834\u89e3\u7ec4\u7ec7\u503e\u5411\u4e8e\u4f7f\u7528SVCD\u6765\u53d1\u5e03\u3002VCD\/SVCD\/DivX\/XviD rips\u4e5f\u90fd\u88ab\u7528\u4e8e\u53d1\u5e03TVRip\u3002\n12\u3001WORKPRINT\uff08WP\uff09\nWORKPRITN\uff08WP\uff09\u662f\u4ece\u672a\u5b8c\u6210\u7684\u7535\u5f71\u62f7\u8d1d\u8f6c\u5236\u800c\u6210\uff0c\u53ef\u80fd\u4f1a\u7f3a\u5931\u955c\u5934\u548c\u97f3\u4e50\u3002\u8d28\u91cf\u53ef\u80fd\u4ece\u6700\u597d\u5230\u5f88\u5dee\u3002\u6709\u4e9bWP\u53ef\u80fd\u548c\u6700\u7ec8\u7248\u672c\u76f8\u5dee\u5f88\u8fdc\u3002\uff08MEN IN BLACK\u7684WP\u4e22\u5931\u4e86\u6240\u6709\u7684\u5916\u661f\u4eba\uff0c\u4ee3\u4e4b\u4ee5\u6f14\u5458\uff09\uff1b\u53e6\u4e00\u4e9b\u5219\u5305\u62ec\u591a\u4f59\u7684\u955c\u5934\uff08Jay and Silent Bob\uff09\u3002WPs\u53ef\u4ee5\u4f5c\u4e3a\u6709\u4e86\u597d\u8d28\u91cf\u7684\u6700\u7ec8\u7248\u672c\u540e\u7684\u9644\u52a0\u6536\u85cf\u3002\n13\u3001DivX Re-Enc\nDivXRe-Enc\u662f\u4ece\u539f\u59cbVCD\u53d1\u5e03\u7528DivX\u7f16\u7801\u6210\u7684\u5c0f\u4e00\u4e9b\u7684\u6587\u4ef6\u3002\u901a\u5e38\u53ef\u5728\u6587\u4ef6\u5171\u4eab\u7f51\u7edc\u627e\u5230\u3002\u5b83\u4eec\u901a\u5e38\u4ee5 Film.Name.Group(1of2)\u7b49\u5f62\u5f0f\u547d\u540d\u3002\u5e38\u89c1\u7684\u53d1\u5e03\u7ec4\u7ec7\u6709SMR\u548cTND\u3002\u8fd9\u4e9b\u7248\u672c\u901a\u5e38\u4e0d\u503c\u5f97\u4e0b\u8f7d\uff0c\u9664\u975e\u4f60\u4e0d\u6e05\u695a\u67d0\u90e8\u7535\u5f71\uff0c\u53ea\u60f3\u8981200MB\u7684\u7248\u672c\u3002\u4e00\u822c\u5e94\u907f\u514d\u3002\n14\u3001Watermarks\n\u5f88\u591a\u4eceAsian Silvers\/PDVD (\u53c2\u770b\u4e0b\u9762)\u6765\u7684\u7535\u5f71\u5e26\u6709\u5236\u4f5c\u4eba\u7684\u6807\u8bb0\u3002\u901a\u5e38\u662f\u4e00\u4e2a\u5b57\u6bcd\uff0c\u540d\u5b57\u7f29\u5199\u6216\u56fe\u6807\uff0c\u4f4d\u4e8e\u5c4f\u5e55\u4e00\u89d2\u3002\u6700\u6709\u540d\u7684\u662f&quot;Z&quot;,&quot;A&quot;\u548c&quot;Globe&quot;\u3002\n15\u3001Asian Silvers \/ PDVD\nAsian Silvers \/ PDVD\u662f\u4e9a\u6d32\u76d7\u7248\u5546\u53d1\u884c\u5f71\u7247\u7684\uff0c\u901a\u5e38\u88ab\u4e00\u4e9b\u53d1\u5e03\u7ec4\u7ec7\u8d2d\u4e70\u6765\u5f53\u505a\u4ed6\u4eec\u81ea\u5df1\u7684\u53d1\u5e03\u3002Silvers\u5f88\u4fbf\u5b9c\uff0c\u5728\u5f88\u591a\u56fd\u5bb6\u90fd\u5f88\u5bb9\u6613\u627e\u5230\u3002\u53d1\u5e03Silvers\u5f88\u5bb9\u6613\uff0c\u6240\u4ee5\u73b0\u5728\u6709\u5f88\u591a\u53d1\u5e03\uff0c\u4e3b\u8981\u662f\u7531\u4e00\u4e9b\u5c0f\u7684\u7ec4\u7ec7\u53d1\u5e03\uff1b\u8fd9\u4e9b\u7ec4\u7ec7\u901a\u5e38\u53d1\u5e03\u51e0\u4e2aRELEASE\u540e\u5c31\u4e0d\u89c1\u4e86\u3002PDVD\u548cSilver\u4e00\u6837\uff0c\u4e0d\u8fc7\u662f\u538b\u5728DVD\u4e0a\u3002 PDVD\u901a\u5e38\u6709\u5916\u6302\u5b57\u5e55\uff0c\u8d28\u91cf\u4e5f\u6bd4Silver\u597d\u3002PDVD\u8c61\u666e\u901a\u7684DVD\u4e00\u6837\u8f6c\u5236\uff0c\u4f46\u901a\u5e38\u7528VCD\u7684\u683c\u5f0f\u53d1\u5e03Scene Tags\u53d1\u5e03\u6587\u4ef6\u7684\u6807\u5fd7\u3002\n16\u3001PROPER\n\u6839\u636e\u53d1\u5e03\u89c4\u5219\uff0c\u6700\u5148\u53d1\u5e03Telesync (TS)\u7684\u7ec4\u7ec7\u8d62\u5f97(TS\u53d1\u5e03\u7684)\u6bd4\u8d5b\u3002\u4f46\u662f\uff0c\u5982\u679c\u8fd9\u4e2a\u53d1\u5e03\u7248\u672c\u8d28\u91cf\u5f88\u5dee\uff0c\u540c\u65f6\u53e6\u4e00\u7ec4\u7ec7\u6709\u53e6\u4e00TS\u7248\u672c(\u6216\u8d28\u91cf\u66f4\u597d\u7684\u540c\u4e00\u7247\u6e90)\uff0c\u90a3\u4e48\u6807\u8bb0PROPER\u88ab\u52a0\u5230\u76ee\u5f55\u4e0a\u4ee5\u907f\u514d\u91cd\u590d\u3002PROPER\u662f\u4e00\u4e2a\u6700\u4e3b\u89c2\u7684\u6807\u8bb0\uff0c\u5f88\u591a\u4eba\u4f1a\u4e89\u8bba\u662f\u5426PROPER\u6bd4\u539f\u59cb\u53d1\u5e03\u7248\u672c\u597d\u3002\u5f88\u591a\u53d1\u5e03\u7ec4\u7ec7\u53ea\u4e0d\u8fc7\u56e0\u4e3a\u8f93\u6389\u4e86\u53d1\u5e03\u6bd4\u8d5b\u800c\u53d1\u5e03 PROPER\u3002\u53d1\u5e03PROPER\u7684\u539f\u56e0\u56e0\u8be5\u603b\u662f\u5305\u542b\u5728NFO\u6587\u4ef6\u91cc\u3002\n17\u3001SUBBED\n\u5bf9\u4e8eVCD\u53d1\u5e03\u800c\u8a00\uff0cSUBBED\u901a\u5e38\u8868\u793a\u5b57\u5e55\u88ab\u538b\u8fdb\u4e86\u7535\u5f71\u3002\u5b83\u4eec\u901a\u5e38\u662f\u9a6c\u6765\u8bed\/\u4e2d\u6587\/\u6cf0\u6587\u7b49\uff0c\u6709\u65f6\u6709\u4e24\u79cd\u8bed\u8a00\u3002\u5b83\u4eec\u53ef\u80fd\u5360\u636e\u4e86\u5f88\u5927\u4e00\u90e8\u5206\u5c4f\u5e55\u3002SVCD\u652f\u6301\u5916\u6302\u5b57\u5e55\uff0c\u6240\u4ee5DVDRip\u7528\u5916\u6302\u5b57\u5e55\u53d1\u5e03\u3002\u8fd9\u4e9b\u4fe1\u606f\u53ef\u4ee5\u5728NFO\u6587\u4ef6\u4e2d\u627e\u5230\u3002\n18\u3001UNSUBBED\n\u5f53\u4e00\u90e8\u7535\u5f71\u66fe\u7ecf\u53d1\u5e03\u8fc7\u6709\u5b57\u5e55\u7684SUBBED\u7248\u672c\uff0c\u6ca1\u5b57\u5e55\u7684UNSUBBED\u7248\u672c\u4e5f\u53ef\u80fd\u53d1\u5e03\u3002\n19\u3001LIMITED\nLIMITED\u7535\u5f71\u6307\u8be5\u7535\u5f71\u53ea\u5728\u6709\u9650\u7684\u7535\u5f71\u9662\u653e\u6620\uff0c\u901a\u5e38\u5c11\u4e8e250\u5bb6\u3002\u901a\u5e38\u8f83\u5c0f\u7684\u7535\u5f71\uff08\u6bd4\u5982\u827a\u672f\u7535\u5f71\uff09\u7684\u53d1\u884c\u662fLIMETED\u3002\n20\u3001INTERNAL\nINTERNAL\u53d1\u5e03\u6709\u51e0\u4e2a\u539f\u56e0\u3002\u7ecf\u5178\u7684DVD\u7ec4\u7ec7\u6709\u5f88\u591a.INTERNAL.\u53d1\u5e03\u7248\u672c\uff0c\u8fd9\u6837\u4e0d\u4f1a\u5f15\u8d77\u6df7\u6dc6\u3002\u540c\u65f6\uff0c\u4f4e\u8d28\u91cf\u7684\u53d1\u5e03\u4f1a\u52a0\u4ee5 INTERNAL\u6807\u8bb0\uff0c\u8fd9\u6837\u4e0d\u4f1a\u964d\u4f4e\u53d1\u5e03\u7ec4\u7ec7\u7684\u58f0\u8a89\uff0c\u6216\u7531\u4e8e\u5df2\u7ecf\u53d1\u5e03\u7684\u6570\u91cf\u3002\nINTERNAL\u53d1\u5e03\u53ef\u4ee5\u6b63\u5e38\u7684\u5728\u7ec4\u7ec7\u7684\u4f1a\u5458\u7f51\u7ad9\u4e0a\u83b7\u53d6\uff0c\u4f46\u6ca1\u6709\u5176\u4ed6\u7f51\u7ad9\u7ba1\u7406\u5458\u7684\u8981\u6c42\u5b83\u4eec\u4e0d\u53ef\u4ee5\u88ab\u4ea4\u6362\u5230\u5176\u4ed6\u7f51\u7ad9\u3002\u4e00\u4e9bTERNAL\u53d1\u5e03\u4ecd\u7136\u6d41\u5230IRC\/NEWSGROUP\uff0c\u8fd9\u901a\u5e38\u53d6\u51b3\u4e8e\u7535\u5f71\u53ca\u5176\u6d41\u884c\u5ea6\u3002\u4eca\u5e74\u65e9\u4e9b\u65f6\u5019\uff0c\u4eba\u4eec\u628a CENTROPY\u505a\u4e3aINTERNAL\u3002\u8fd9\u8868\u793a\u53d1\u5e03\u7ec4\u7ec7\u53ea\u5411\u5176\u4f1a\u5458\u548c\u7f51\u7ad9\u7ba1\u7406\u5458\u53d1\u5e03\u3002\u8fd9\u548c\u5176\u901a\u5e38\u610f\u601d\u4e0d\u540c\u3002\n21\u3001STV\nSTV\u8868\u793a\u7535\u5f71\u4ece\u672a\u5728\u7535\u5f71\u9662\u653e\u6620\u8fc7\u5c31\u88ab\u53d1\u5e03\uff0c\u56e0\u6b64\u5f88\u591a\u671b\u7f51\u7ad9\u4e0d\u5141\u8bb8STV\u3002\n22\u3001ASPECT RATIO TAGS\nws\u8868\u793a\u5bbd\u94f6\u5e55\uff0cFS\u8868\u793a\u5168\u5c4f\u5e55\u3002\n23\u3001RECODE\nRECODE\u662f\u4ee5\u524d\u5df2\u7ecf\u53d1\u5e03\u8fc7\u7684\u7248\u672c\uff0c\u901a\u5e38\u7528TMPGenc\u7f16\u7801\u8fc7\u6ee4\u4ee5\u53bb\u9664\u5b57\u5e55\uff0c\u7ea0\u6b63\u989c\u8272\u7b49\u3002\u867d\u7136\u5b83\u4eec\u770b\u8d77\u6765\u597d\u4e00\u4e9b\uff0c\u4f46\u901a\u5e38\u4e0d\u8ba4\u4e3a\u8fd9\u662f\u597d\u7684\u884c\u4e3a\u56e0\u4e3a\u53d1\u5e03\u7ec4\u7ec7\u5e94\u8be5\u53bb\u627e\u4ed6\u4eec\u81ea\u5df1\u7684\u7247\u6e90\u3002\n24\u3001REPACK\n\u5982\u679c\u53d1\u5e03\u7ec4\u7ec7\u53d1\u5e03\u4e86\u4e00\u4e2a\u574f\u7684\u7248\u672c\uff0c\u4ed6\u4eec\u4f1a\u53d1\u5e03REPACK\u6765\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u3002\n25\u3001NUKED\n\u4e00\u4e2a\u53d1\u5e03\u53ef\u80fd\u56e0\u4e3a\u591a\u79cd\u539f\u56e0\u88abNUKE\u6389\u3002\u6709\u4e9b\u7f51\u7ad9\u4f1a\u56e0\u4e3a\u8fdd\u72af\u4ed6\u4eec\u7684\u89c4\u5219\u800cNUKE\u53d1\u5e03(\u6bd4\u5982\u4e0d\u5141\u8bb8\u53d1\u5e03TS\u7248\u672c)\u3002\u4f46\u5982\u679c\u53d1\u5e03\u7684\u7248\u672c\u6709\u5f88\u5927\u7684\u95ee\u9898 (\u598220\u5206\u949f\u6ca1\u6709\u58f0\u97f3\uff0cCD2\u662f\u9519\u8bef\u7684\u7535\u5f71\u6216\u6e38\u620f)\uff0c\u90a3\u4e48\u6240\u6709\u7684\u7f51\u7ad9\u90fd\u4f1aNUKE\u8fd9\u4e2a\u53d1\u5e03\u3002\u5728\u8fd9\u4e9b\u7f51\u7ad9\u4e0a\u4ea4\u6362NUKED\u7248\u672c\u7684\u4eba\u4f1a\u5931\u6389\u4ed6\u4eec\u7684\u4fe1\u8a89\u3002\u4f46 NUKED\u53d1\u5e03\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7P2P\/USENET\u4f20\u64ad\uff0c\u6240\u4ee5\u5e94\u8be5\u603b\u662f\u9996\u5148\u627e\u5230\u5176\u88abNUKE\u7684\u539f\u56e0\u4ee5\u9632\u4e07\u4e00\u3002\u5982\u679c\u53d1\u5e03\u7ec4\u7ec7\u53d1\u89c9\u4ed6\u4eec\u7684\u53d1\u5e03\u6709\u95ee\u9898\uff0c\u4ed6\u4eec\u53ef\u4ee5\u8981\u6c42NUKE\u3002","tags":[{"name":"\u751f\u6d3b","slug":"\u751f\u6d3b","permalink":"https:\/\/skywt.cn\/tag\/%E7%94%9F%E6%B4%BB\/"}],"categories":[]},{"title":"\u6b27\u51e0\u91cc\u5fb7\u7b97\u6cd5\u4e0e\u62d3\u5c55\u6b27\u51e0\u91cc\u5fb7\u7b97\u6cd5\u7565\u89e3","date":"2018-06-21T15:35:53+08:00","path":"https:\/\/skywt.cn\/posts\/euclidean-algorithm","text":"\u6b27\u51e0\u91cc\u5fb7\u7b97\u6cd5\uff08Euclidean algorithm\uff09\u53c8\u53eb\u505a\u8f97\u8f6c\u76f8\u9664\u6cd5\uff0c\u7528\u4e8e\u6c42\u6700\u5927\u516c\u7ea6\u6570\u3002\u8fd9\u4e2a\u7b97\u6cd5\u5df2\u7ecf\u5341\u5206\u5e38\u89c1\u4e86\u3002\u6269\u5c55\u6b27\u51e0\u91cc\u5fb7\u7b97\u6cd5\uff08Extended Euclidean algorithm\uff09\u662f\u6b27\u51e0\u91cc\u5fb7\u7b97\u6cd5\u7684\u6269\u5c55\uff08\u5e9f\u8bdd\u2026\u2026\uff09\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u5728\u89e3\u4e0d\u5b9a\u65b9\u7a0b\u7684\u65f6\u5019\u5341\u5206\u5e38\u89c1\u3002\n\n\u672c\u6587\u4e2d (a,b) \u6216\u8005 gcd(a,b) \u8868\u793a a\u3001b \u7684\u6700\u5927\u516c\u7ea6\u6570\uff1b a|b \u8868\u793a a \u6574\u9664 b\u3002\n\u672c\u6587\u96b6\u5c5e\u2308 \u6570\u8bba\u5b66\u4e60\u7cfb\u5217 \u230b\u3002\n\u6b27\u51e0\u91cc\u5fb7\u7b97\u6cd5\/\u8f97\u8f6c\u76f8\u9664\u6cd5\n\n\u5728\u6570\u5b66\u4e2d\uff0c\u8f97\u8f6c\u76f8\u9664\u6cd5\uff0c\u53c8\u79f0\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\uff08\u82f1\u8bed\uff1aEuclidean algorithm\uff09\uff0c\u662f\u6c42\u6700\u5927\u516c\u7ea6\u6570\u7684\u7b97\u6cd5\u3002\u8f97\u8f6c\u76f8\u9664\u6cd5\u9996\u6b21\u51fa\u73b0\u4e8e\u6b27\u51e0\u91cc\u5f97\u7684\u300a\u51e0\u4f55\u539f\u672c\u300b\uff08\u7b2cVII\u5377\uff0c\u547d\u9898i\u548cii\uff09\u4e2d\uff0c\u800c\u5728\u4e2d\u56fd\u5219\u53ef\u4ee5\u8ffd\u6eaf\u81f3\u4e1c\u6c49\u51fa\u73b0\u7684\u300a\u4e5d\u7ae0\u7b97\u672f\u300b\u3002\u3001\n\u2014\u2014\u7ef4\u57fa\u767e\u79d1\n\n\u4ee3\u7801\n\u5728\u6211\u4eec\u65e5\u5e38\u7684\u9898\u76ee\u91cc\u8f97\u8f6c\u76f8\u9664\u6cd5\u5df2\u7ecf\u5341\u5206\u5e38\u89c1\u4e86\uff0c\u6700\u5927\u516c\u7ea6\u6570\uff08Greatest Common Divisor\uff09\u7f29\u5199\u4e3aGCD,\u6240\u4ee5\u51fd\u6570\u540d\u5c31\u662fgcd\uff08\u5f53\u7136\u6269\u6b27\u7684\u51fd\u6570\u540d\u5c31\u662fexgcd\uff09\u3002\u5176\u4e3b\u8981\u4ee3\u7801\u6bb5\u662f\u8fd9\u6837\u7684\uff1a\nint gcd(int a,int b){\n    if (b==0) return a;\n    return gcd(b,a%b);\n}\n\u4ee5\u4e0a\u4ee3\u7801\u5176\u5b9e\u53ef\u4ee5\u5199\u6210\u4ee5\u4e0b\u8fd9\u6837\uff1a\nint gcd(int a,int b){\n    return b?gcd(b,a%b):a;\n}\n\u539f\u7406\u548c\u8bc1\u660e\n\u8f97\u8f6c\u76f8\u9664\u6cd5\u7684\u539f\u7406\u662f\u4ec0\u4e48\u5462\uff1f\u663e\u7136gcd(a,b)\u7684\u4f5c\u7528\u662f\u6c42\u51faa\u3001b\u7684\u6700\u5927\u516c\u7ea6\u6570\uff08\u5728\u6570\u5b66\u8bed\u8a00\u91cc\u76f4\u63a5\u7528(a,b)\u8868\u793aa\u3001b\u7684\u6700\u5927\u516c\u7ea6\u6570\uff09\u3002\u5982\u679cb\u4e3a0\u5c31\u8fd4\u56dea\u7684\u503c\u4e0d\u96be\u7406\u89e3\uff0c\u8fd9\u8bf4\u660e\u5df2\u7ecf\u627e\u5230\u4e86\u6700\u5927\u516c\u7ea6\u6570a\u3002\u5173\u952e\u5728\u4e8e\uff1a\n$$(a,b) = (b,a \\bmod b)$$\n\u5173\u4e8e\u8fd9\u4e2a\u7b49\u5f0f\u8bc1\u660e\u5982\u4e0b\uff1a\n\u9996\u5148\u6839\u636e\uff1a\n$$a=kb+r (a,b,k,r \\in N^+,r < b)$$\n\u53ef\u4ee5\u5316\u4e3a\uff1a\n$$r=a-kb=a \\bmod b$$\n\u5047\u8bbe $d$ \u662f $a,b$ \u7684\u4e00\u4e2a\u516c\u7ea6\u6570\uff0c\u5219 $d \\mid a , d \\mid b$\u3002\u6240\u4ee5\uff1a\n$$d \\mid a-kb \\iff d \\mid a \\bmod b$$\n\u5373\uff1a\n$$(a,b) \\iff (b,a \\bmod b)$$\n\u901a\u4fd7\u70b9\u8bf4\uff0c$d$ \u662f $a,b$ \u4e24\u4e2a\u6570\u7684\u516c\u7ea6\u6570\uff0c\u53c8\u662f $b,a \\bmod b$ \u7684\u516c\u7ea6\u6570\uff0c\u6240\u4ee5 $a,b$ \u7684\u516c\u7ea6\u6570\u96c6\u4e0e $b,a \\bmod b$ \u7684\u516c\u7ea6\u6570\u96c6\u76f8\u540c\uff0c\u5b83\u4eec\u7684\u6700\u5927\u516c\u7ea6\u6570\u5fc5\u7136\u4e5f\u76f8\u540c\u3002\n\u6269\u5c55\u6b27\u51e0\u91cc\u5fb7\u7b97\u6cd5\n\u6269\u5c55\u6b27\u51e0\u91cc\u5fb7\u7b97\u6cd5\uff08Extended Euclidean algorithm\uff09\u5c31\u50cf\u662f\u6b27\u51e0\u91cc\u5fb7\u7b97\u6cd5\u7684\u9006\u8fd0\u7b97\u3002\n\u7528\u9014\n\u4e3b\u8981\u6709\u4ee5\u4e0b\u51e0\u79cd\u7528\u9014\uff1a\n\n\u6c42\u89e3\u4e0d\u5b9a\u65b9\u7a0b\uff1b\n\u6c42\u89e3\u6a21\u7ebf\u6027\u65b9\u7a0b\uff08\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\uff09\uff1b\n\u6c42\u89e3\u6a21\u7684\u9006\u5143\u3002\n\n\u6c42\u89e3\u4e0d\u5b9a\u65b9\u7a0b\u7684\u65b9\u6cd5\n\u4e2a\u4eba\u89c9\u5f97\u6c42\u89e3\u4e0d\u5b9a\u65b9\u7a0b\u8fd9\u4e2a\u7528\u9014\u6bd4\u8f83\u5e38\u89c1\u3002\u53ef\u4ee5\u65b9\u4fbf\u5730\u7528\u6765\u89e3\u8fd9\u6837\u7684\u4e0d\u5b9a\u65b9\u7a0b\uff08\u4f20\u8bf4\u4e2d\u7684\u88f4\u8700\u7b49\u5f0f\uff09\uff1a\n$$ax+by=c$$\n\u5176\u5b9e\u6211\u4eec\u8981\u89e3\u8fd9\u4e2a\u8865\u4e0d\u5b9a\u65b9\u7a0b\uff0c\u5c31\u8981\u5148\u89e3\u51fa $ax+by=gcd(a,b)$\u3002\u57fa\u4e8e\u8fd9\u4e24\u4e2a\u4e8b\u5b9e\uff1a\n\n\n\u7ed9\u4e88\u4e8c\u4e2a\u6574\u6570 $a,b$\uff0c\u5fc5\u5b58\u5728\u6574\u6570 $x,y$\uff0c\u4f7f\u5f97 $ax+by=gcd(a,b)$\u3002\n\n\u5bf9\u4e8e\u65b9\u7a0b $ax+by=c$\uff0c\u5f53\u4e14\u4ec5\u5f53 $(a,b)|c$ \u65f6\u8fd9\u4e2a\u65b9\u7a0b\u6709\u89e3\u3002\n\n\u5bb9\u6613\u8bc1\u660e\uff0c\u5982\u679c\u6211\u4eec\u6c42\u51fa\u65b9\u7a0b $ax+by=(a,b)$ \u7684\u4e00\u7ec4\u7279\u6b8a\u89e3 $x_0,y_0$\uff0c\u5219\u6700\u540e\u65b9\u7a0b\u89e3\u4e3a\uff1a\n$$\n\\begin{cases}\nx= x_0 +k \\ast \\frac b {(a,b)} \\\\\ny= y_0 -k \\ast \\frac a {(a,b)}\n\\end{cases}\n$$\n\u90a3\u4e48\u5982\u4f55\u201c\u6c42\u51fa\u65b9\u7a0b $ax+by=(a,b)$ \u7684\u4e00\u7ec4\u7279\u6b8a\u89e3\u201d\uff1f\u8fd9\u65f6\u5019\u62d3\u5c55\u6b27\u51e0\u91cc\u5fb7\u7b97\u6cd5\u5c31\u6d3e\u4e0a\u7528\u573a\u4e86\u3002\n\u6c42\u89e3\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\u7684\u65b9\u6cd5\n\u5bf9\u4e8e\u4ee5\u4e0b\u65b9\u7a0b\uff1a\n$$ax\u2261b \\pmod n$$\n\u5982\u4f55\u6c42\u89e3\u8fd9\u6837\u7684\u65b9\u7a0b\u5462\uff1f\u5176\u5b9e\u8fd9\u4e2a\u65b9\u7a0b\u53ef\u4ee5\u770b\u6210\uff1a\n$$ax+ny=b (x,y \\in Z)$$\n\uff08\u6ce8\u610f $n$ \u4e00\u822c\u662f\u8d1f\u6570\uff09\u8fd9\u6837\u5c31\u53ef\u4ee5\u7528\u4e0d\u5b9a\u65b9\u7a0b\u7684\u65b9\u6cd5\u6c42\u89e3\u4e86\uff01\n\u4ee3\u7801\nint exgcd(int a,int b,int &amp;x,int &amp;y){ \/\/x\u3001y\u53d8\u91cf\u7528\u6765\u4f20\u9012\u6c42\u5f97\u7684\u7279\u6b8a\u89e3\n    if(b==0){ \/\/\u5224\u65ad\u9012\u5f52\u8fb9\u754c\uff0cb=0\u8bf4\u660e\u5230\u5e95\u4e86\n        x=1;y=0;\n        return a;\n    }\n    int r=exgcd(b,a%b,x,y),t=x; \/\/\u5148\u9012\u5f52\u628a\u4e4b\u524d\u7684\u90fd\u505a\u5b8c\n    x=y;y=t-a\/b*y;\n    return r;\n}\n\u539f\u7406\n\u5148\u4e3e\u4e2a\u4f8b\u5b50\u5427\uff0c\u6c42\u4e0d\u5b9a\u65b9\u7a0b $1234x+4321y=1$ \u7684\u6574\u6570\u89e3\u3002\n\u9996\u5148\u6c42 $(1234,4321)$\uff0c\u8fc7\u7a0b\u5982\u4e0b\uff1a\n$$(1234,4321)=(1234,619)=(615,619)=(615,4)=(3,4)=(3,1)=(0,1)=1$$\n\u6211\u4eec\u5f97\u5230\u4e86 $(1234,4321)=1$\u3002\u63a5\u4e0b\u6765\u7528\u6269\u5c55\u6b27\u51e0\u91cc\u5fb7\u7b97\u6cd5\u53ef\u4ee5\u5012\u7740\u63a8\u56de\u53bb\uff1a\n$$\n\\begin{aligned}\n1&=1- \\underline 0 \\\\\n&= 1-(3-3 \\ast 1) = -3-2 \\ast \\underline 1 \\\\\n&= (4-2 \\ast 3)-3 = 4-3 \\ast \\underline 3 \\\\\n&= 4 - (615-153 \\ast 4) = 154 \\ast \\underline 4 - 615 \\\\\n&= 154 \\ast (619 - 615) - 615 = 154 \\ast 619 - 155 \\ast \\underline {615} \\\\\n&= 154 \\ast 619 - 155 \\ast (1234 - 619) = 309 \\ast \\underline {619} - 155 \\ast 1234 \\\\\n&= 309 \\ast (4321-3 \\ast 1234) -155 \\ast 1234 = 309 \\ast \\underline {4321} -1082 \\ast \\underline {1234}\n\\end{aligned}\n$$\n\u6240\u4ee5\u8fd9\u4e00\u7ec4\u7279\u89e3\u5c31\u662f\uff1a$x=-1082, y=309$\u3002\u6309\u7167\u8fd9\u6837\u7684\u601d\u8def\uff0c\u524d\u9762\u7684\u7a0b\u5e8f\u5c31\u4e0d\u96be\u7406\u89e3\u4e86\u3002\u5148\u9012\u5f52\u6c42 $x$ \u548c $y$\uff0c\u518d\u628a $x$ \u201c\u590d\u539f\u201d\u3002\n\u8bc1\u660e\u4e0d\u4f1a","tags":[{"name":"OI\u5b66\u4e60","slug":"OI\u5b66\u4e60","permalink":"https:\/\/skywt.cn\/tag\/OI%E5%AD%A6%E4%B9%A0\/"},{"name":"\u6570\u8bba","slug":"\u6570\u8bba","permalink":"https:\/\/skywt.cn\/tag\/%E6%95%B0%E8%AE%BA\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"\u6b27\u62c9\u51fd\u6570\u3001\u8d39\u9a6c\u5c0f\u5b9a\u7406\u4e0e\u6b27\u62c9\u5b9a\u7406\u7565\u89e3","date":"2018-06-24T19:49:33+08:00","path":"https:\/\/skywt.cn\/posts\/euler-and-fermat","text":"\u5728\u6570\u8bba\u4e2d\uff0c\u5bf9\u6b63\u6574\u6570 n\uff0c\u6b27\u62c9\u51fd\u6570 $\\varphi (n)$ \u662f\u5c0f\u4e8e\u6216\u7b49\u4e8e n \u7684\u6b63\u6574\u6570\u4e2d\u4e0e n \u4e92\u8d28\u7684\u6570\u7684\u6570\u76ee\u3002\u6b64\u51fd\u6570\u4ee5\u5176\u9996\u540d\u7814\u7a76\u8005\u6b27\u62c9\u547d\u540d\uff0c\u5b83\u53c8\u79f0\u4e3a \u03c6 \u51fd\u6570\uff08\u7531\u9ad8\u65af\u6240\u547d\u540d\uff09\u6216\u662f\u6b27\u62c9\u603b\u8ba1\u51fd\u6570\uff08totient function\uff0c\u7531\u897f\u5c14\u7ef4\u65af\u7279\u6240\u547d\u540d\uff09\u3002\uff08\u6765\u81ea\u7ef4\u57fa\u767e\u79d1\uff09\n\n\u6e29\u99a8\u63d0\u793a\uff1a\n\u672c\u6587\u4e2d\u6709\u5927\u91cf KaTeX \u516c\u5f0f\uff0c\u8bf7\u786e\u4fdd\u6d4f\u89c8\u5668\u652f\u6301\uff0c\u5426\u5219\u5361\u5230\u8d85\u4e4e\u4f60\u60f3\u8c61\u3002\nWindows \u53ef\u4ee5\u5728\u63a7\u5236\u9762\u677f-\u7a0b\u5e8f-\u5378\u8f7d\u7a0b\u5e8f-\u5378\u8f7d\\\u66f4\u65b0 Windows \u7ec4\u4ef6\u4e2d\u5378\u8f7dIE\u6d4f\u89c8\u5668\u3002\n\u672c\u6587\u4e2d (a,b) \u6216\u8005 gcd(a,b) \u8868\u793aa\u3001b\u7684\u6700\u5927\u516c\u56e0\u6570\u3002\n\u672c\u6587\u96b6\u5c5e\u2308 \u6570\u8bba\u5b66\u4e60\u7cfb\u5217 \u230b\u3002\n\u6b27\u62c9\u51fd\u6570\n\u5b9a\u4e49\n\u6b27\u62c9\u51fd\u6570 $\\varphi(n)$ \u662f\u5c0f\u4e8e\u6216\u7b49\u4e8e n \u7684\u6b63\u6574\u6570\u4e2d\u4e0e n \u4e92\u8d28\u7684\u6570\u7684\u6570\u76ee\u3002\u4f8b\u5982\uff1a$\\varphi(10)$=4\uff0c\u56e0\u4e3a\u57281\u523010\u4e2d1\u30013\u30017\u30019 \u8fd94\u4e2a\u6570\u5b57\u4e0e 10 \u4e92\u8d28\u3002\n\uff08\u6ce8\uff1a$\\varphi (n)$\u7684\u53e6\u4e00\u79cd\u5199\u6cd5\u662f$\\phi(n)$\uff0c\u4f46\u662f\u6211\u66f4\u559c\u6b22\u524d\u8005\u2026\u2026\uff09\n\u51e0\u4e2a\u6027\u8d28\n\u8fd9\u4e24\u4e2a\u6027\u8d28\u4e0b\u9762\u8bc1\u660e\u7684\u65f6\u5019\u8981\u7528\u3002\n\u5f53x\u4e3a\u8d28\u6570p\u7684k\u6b21\u5e42\u65f6\n\u5982\u679c$\\varphi(x)$\u4e2d\u7684x\u662f\u8d28\u6570 p \u7684 k \u6b21\u5e42\uff0c\u90a3\u4e48\u53ef\u4ee5\u7528\u8fd9\u4e2a\u516c\u5f0f\u6c42\uff1a\n\\displaystyle \\varphi (x)=\\varphi (p^k)=p^k-p^{k-1}=(p-1)p^{k-1}=p^k\\cdot (1-\\frac 1 p)\n\u5f88\u597d\u7406\u89e3\uff0c\u9664\u4e86 p \u7684\u500d\u6570\u5916\uff0c\u5176\u4ed6\u6570\u90fd\u4e0e x \u4e92\u8d28\u3002\uff08\u4e3a\u4ec0\u4e48\u8981\u5316\u6210\u8fd9\u6837\uff1f\u56e0\u4e3a\u540e\u9762\u6211\u4eec\u8bc1\u660e $\\varphi (x)$ \u7684\u516c\u5f0f\u8981\u7528~\uff09\n\u6b27\u62c9\u51fd\u6570\u662f\u79ef\u6027\u51fd\u6570\n\u6b27\u62c9\u51fd\u6570\u662f\u79ef\u6027\u51fd\u6570\uff0c\u5c31\u662f\u8bf4\u5982\u679c x \u548c y \u4e92\u8d28\uff0c\u5219\n\\displaystyle \\varphi(xy)=\\varphi(x) \\varphi(y)=(x-1)(y-1)\n\uff08\u5269\u4e0b\u7684\u4e24\u4e2a\u6027\u8d28\u5c31\u662f\u4e0b\u9762\u8981\u8bb2\u7684\u8d39\u9a6c\u5c0f\u5b9a\u7406\u548c\u6b27\u62c9\u5b9a\u7406\u4e86\uff09\n\u8ba1\u7b97\u65b9\u6cd5\uff08\u516c\u5f0f\uff09\n$\\varphi(x)$\u7684\u8ba1\u7b97\u516c\u5f0f\u662f\uff1a\n\\displaystyle \\varphi(x)=x(1-\\frac 1 {P_1})(1-\\frac 1 {P_2})\\cdots(1-\\frac 1 {P_x})\n\u5199\u5f97\u9ad8\u7aef\u70b9\uff1a\n\\displaystyle \\varphi (x)=x\\prod_{i=1}^n (1-\\frac 1 {P_i})\n\u5176\u4e2d$P_i$\u8868\u793a $x$ \u7684\u7b2c $i$ \u4e2a\u8d28\u56e0\u5b50\uff0c\u4e0a\u5f0f\u6761\u4ef6\u4e3a $x \\geqslant 2$ \u4e14 $x \\in Z$ \u3002\n\u7279\u6b8a\u5730\uff0c$\\varphi(1)=1$\u3002\u56e0\u4e3a\u5c0f\u4e8e\u7b49\u4e8e 1 \u7684\u6b63\u6574\u6570\u4e2d\u552f\u4e00\u548c1\u4e92\u8d28\u7684\u6570\u5c31\u662f 1 \u672c\u8eab\u3002\n\u4e3e\u4f8b\n\u6bd4\u5982\u8bf4\u8ba1\u7b97 $\\varphi(10)$\uff1a10 \u7684\u8d28\u56e0\u5b50\u6709 2 \u548c 5\u3002\u90a3\u4e48\uff1a\n\\displaystyle \\varphi(10)=10(1-\\frac 1 2)(1-\\frac 1 5)=4\n\u4e0e\u524d\u9762\u9a8c\u8bc1\u7684\u7b54\u6848\u4e00\u81f4~\n\u516c\u5f0f\u8bc1\u660e\n\u6211\u4eec\u5148\u628a $x$ \u6807\u51c6\u5206\u89e3\uff1a\n\\displaystyle x=P_1^{k_1} \\cdot P_2^{k_2} \\cdots P_n^{k_n}\n\u5176\u4e2d $P_i$ \u8868\u793a $x$ \u7684\u7b2c $i$ \u4e2a\u8d28\u56e0\u5b50\uff0c$k_i$ \u5219\u8868\u793ax\u4e2d\u542b\u6709\u8d28\u56e0\u5b50 $P_i$ \u7684\u6570\u91cf\u3002\u63a5\u4e0b\u6765\u6839\u636e\u201c\u6b27\u62c9\u51fd\u6570\u662f\u79ef\u6027\u51fd\u6570\u201d\u8fd9\u4e00\u6027\u8d28\u53ef\u4ee5\u5f97\u51fa\uff1a\n\\displaystyle \\varphi(x)=\\varphi(P_1^{k_1})\\cdot \\varphi(P_2^{k_2})\\cdots \\varphi(P_n^{k_n})\n\u53c8\u6839\u636e\u524d\u9762\u63a8\u51fa\u7684 $\\varphi (p^k)=p^k\\cdot (1-\\frac 1 p)$\uff0c\u5f97\u5230\uff1a\n\\displaystyle \\varphi(x) = x(1-\\frac 1 {P_1})(1-\\frac 1 {P_2})\\cdots(1-\\frac 1 {P_x}) = x\\prod_{i=1}^n (1-\\frac 1 {P_i})\n\u5c31\u5f97\u5230\u4e86\u521a\u521a\u7684\u7b49\u5f0f\uff01\uff01\uff01\n\u8d39\u9a6c\u5c0f\u5b9a\u7406\n\u8d39\u9a6c\u5c0f\u5b9a\u7406\uff08Fermat's Little Theorem\uff09\u662f\u6570\u8bba\u4e2d\u7684\u4e00\u4e2a\u91cd\u8981\u5b9a\u7406\uff0c\u57281636\u5e74\u7531\u8d39\u9a6c\u63d0\u51fa\u3002\u57fa\u672c\u5185\u5bb9\u662f\uff1a\u5982\u679c p \u662f\u8d28\u6570\u5e76\u4e14 $(a,p)=1$\uff0c\u5219\u6709\uff1a\n\\displaystyle a^{p-1}\\equiv 1 \\pmod p\n\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5bf9\u4e8e\u8d28\u6570 p=3\uff0ca=8\uff0c\u90a3\u4e48\uff1a\n8^{3-1}\\equiv 64\\equiv 1 \\pmod 3\n\u5b8c\u5168\u5269\u4f59\u7cfb\n\u4e3a\u4e86\u65b9\u4fbf\u8bc1\u660e\uff0c\u5148\u8981\u666e\u53ca\u4e0b\u5b8c\u5168\u5269\u4f59\u7cfb\u7684\u6982\u5ff5\uff1a\n\n\u5b8c\u5168\u5269\u4f59\u7cfb\uff08\u7b80\u79f0\u5b8c\u7cfb\uff09\uff0c\u5373\u662f\u901a\u8fc7\u5bf9\u4e00\u7cfb\u5217\u6b63\u6574\u6570\u6a21 m \u540e\u4ea7\u751f\u7684\u4ece 0 \u81f3\uff08m-1\uff09\u7684\u5b8c\u5168\u6570\u7cfb\u3002\u901a\u5e38\u5730\uff0c\u5b8c\u5168\u5269\u4f59\u7cfb\u5728\u7814\u7a76\u6570\u8bba\u65f6\u5f88\u6709\u7528\u3002\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff1a{0, 1, 2, 3} \u5c31\u662f\u6a21 4 \u7684\u5b8c\u7cfb\u3002\n\u77e5\u9053\u4e86\u5b8c\u5168\u5269\u4f59\u7cfb\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u65b9\u4fbf\u5730\u5f00\u59cb\u8bc1\u660e\u4e86\u2026\u2026\n\u8bc1\u660e\n\u8bc1\u660e\u5176\u5b9e\u5e76\u4e0d\u96be\u3002\n\u5047\u8bbe $\\lbrace 1,2,\\dots,p-1,p \\rbrace$ \u662f\u6a21 $p$ \u7684\u5b8c\u5168\u5269\u4f59\u7cfb\uff0c\u90a3\u4e48\u663e\u7136\uff0c$\\displaystyle \\lbrace a-1,a-2,\\dots,a-p \\rbrace $ \u4e5f\u662f\u6a21 $p$ \u7684\u5b8c\u5168\u5269\u4f59\u7cfb\u3002\u5f97\u5230\uff1a\n(a-1)(a-2)\\cdots(a-(p-1)) \\equiv 1 \\cdot 2 \\cdots (p-1) \\pmod p\n\u7b49\u4ef7\u4e8e\uff1a\na^{p-1}\\cdot (p-1)! \\equiv (p-1)! \\pmod p\n\u53c8 $((p-1)!,p)=1$\uff0c\u6240\u4ee5\na^{p-1} \\equiv 1 \\pmod p\n\u6b27\u62c9\u5b9a\u7406\n\u6b27\u62c9\u5b9a\u7406\uff08Euler's Theorem\uff09\u53ef\u4ee5\u770b\u4f5c\u8d39\u9a6c\u5c0f\u5b9a\u7406\u7684\u4e00\u822c\u60c5\u51b5\uff0c\u5373\u5982\u679c $(a,n)=1$ \uff0c\u5219 $a,n$ \u6ee1\u8db3\uff1a\na^{\\varphi (n)}\\equiv 1 \\pmod n\n\u4e3e\u4f8b\uff1a$n=6,a=5$\uff1a$\\varphi(6)=2$ \uff1b\n\\displaystyle 5^2 \\equiv 25 \\equiv 1 \\pmod 6\n\u663e\u7136\u5f53 $n$ \u662f\u8d28\u6570\u7684\u65f6\u5019 $\\varphi(n)=n-1$ \uff0c\u5c31\u6210\u4e86\u8d39\u9a6c\u5c0f\u5b9a\u7406\u4e86\u2026\u2026\n\u51cf\u7f29\u5269\u4f59\u7cfb\n\u5728\u8bc1\u660e\u4e4b\u524d\u53c8\u8981\u666e\u53ca\u4e00\u4e0b\u51cf\u7f29\u5269\u4f59\u7cfb\u7684\u6982\u5ff5\u4e86\u2026\u2026\n\u7b80\u7f29\u5269\u4f59\u7cfb\uff08\u4e5f\u53eb\u7b80\u5316\u5269\u4f59\u7cfb\uff0c\u7b80\u79f0\u51cf\u7cfb\u6216\u8005\u7f29\u7cfb\uff09\uff1a\u5728\u6bcf\u4e2a\u5269\u4f59\u7c7b\u9009\u53d6\u81f3 1 \u4e2a\u4e0e m \u4e92\u7d20\u4ee3\u8868\u5143\u6784\u6210\u7b80\u7f29\u5269\u4f59\u7cfb\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff1a\n10 \u7684\u5b8c\u7cfb\u662f\uff1a{0,1,2,3,4,5,6,7,8,9}\uff1b\n\u5219 {1,2,5,6} \u662f 10 \u7684\u4e00\u4e2a\u51cf\u7cfb\u3002\u4e5f\u5c31\u662f\u8bf4\u4ece\u5b8c\u7cfb\u91cc\u9009\u51e0\u4e2a\u6570\u3002\u8981\u6ce8\u610f\u4e0d\u4e00\u5b9a\u662f\u4ece\u8fd9\u4e2a\u56fa\u5b9a\u7684\u5b8c\u7cfb\u91cc\u9009\uff0c\u4f8b\u5982 {10,14,15} \u4e5f\u662f 10 \u7684\u4e00\u4e2a\u51cf\u7cfb\u3002\n\u8bc1\u660e\n\u8fd9\u4e2a\u5b9a\u7406\u8bc1\u660e\u548c\u8d39\u9a6c\u5c0f\u5b9a\u7406\u7c7b\u4f3c\uff1a\n\u5047\u8bbe $\\lbrace x_1,x_2,\\dots,x_{\\varphi (n)} \\rbrace$ \u662f\u6a21 $p$ \u7684\u51cf\u7f29\u5269\u4f59\u7cfb\uff0c\u90a3\u4e48\uff1a\n\\displaystyle x_i \\not \u2261 x_j \\pmod n\n\u53c8 $(a,n)=1$\uff0c\u6240\u4ee5\nax_i \\not \u2261 ax_j \\pmod n\n\u6240\u4ee5 $\\displaystyle \\lbrace ax_1,ax_2,\\dots,ax_{\\varphi (n)} \\rbrace$ \u4e5f\u662f\u6a21 $p$ \u7684\u51cf\u7f29\u5269\u4f59\u7cfb\u3002\u6240\u4ee5\uff1a\n(ax_1)(ax_2)\\cdots(ax_{\\varphi (n)}) \\equiv x_1 \\cdot x_2 \\cdots x_{\\varphi (n)} \\pmod n\n\u4e0a\u5f0f\u7b49\u4ef7\u4e8e\uff1a\na^{\\varphi(n)}(x_1 \\cdot x_2 \\cdots x_{\\varphi (n)}) \\equiv x_1 \\cdot x_2 \\cdots x_{\\varphi (n)} \\pmod n\n\u5373\uff1a\na^{\\varphi(n)} \\equiv 1 \\pmod n\n\n\u53c2\u8003\n\u6b27\u62c9\u51fd\u6570 - \u7ef4\u57fa\u767e\u79d1\uff0c\u81ea\u7531\u7684\u767e\u79d1\u5168\u4e66\n\u8d39\u9a6c\u5c0f\u5b9a\u7406 - \u7ef4\u57fa\u767e\u79d1\uff0c\u81ea\u7531\u7684\u767e\u79d1\u5168\u4e66\n\u5b8c\u5168\u5269\u4f59\u7cfb - \u7ef4\u57fa\u767e\u79d1\uff0c\u81ea\u7531\u7684\u767e\u79d1\u5168\u4e66\n\u6b27\u62c9\u5b9a\u7406 (\u6570\u8bba) - \u7ef4\u57fa\u767e\u79d1\uff0c\u81ea\u7531\u7684\u767e\u79d1\u5168\u4e66\n\u8d39\u9a6c\u5c0f\u5b9a\u7406_\u767e\u5ea6\u767e\u79d1\n\u6b27\u62c9\u51fd\u6570 - handsomecui - \u535a\u5ba2\u56ed","tags":[{"name":"OI\u5b66\u4e60","slug":"OI\u5b66\u4e60","permalink":"https:\/\/skywt.cn\/tag\/OI%E5%AD%A6%E4%B9%A0\/"},{"name":"\u6570\u8bba","slug":"\u6570\u8bba","permalink":"https:\/\/skywt.cn\/tag\/%E6%95%B0%E8%AE%BA\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"\u4e58\u6cd5\u9006\u5143\u4e09\u79cd\u6c42\u6cd5\u603b\u7ed3","date":"2018-07-02T08:33:33+08:00","path":"https:\/\/skywt.cn\/posts\/inverse","text":"\u5f53\u6211\u4eec\u53d6\u6a21\u7684\u65f6\u5019\uff0c\u88ab\u6a21\u6570\u5f88\u5927\uff0c\u65e0\u6cd5\u76f4\u63a5\u8ba1\u7b97\u5176\u503c\uff0c\u6211\u4eec\u5c31\u4f1a\u7528\u53d6\u6a21\u8fd0\u7b97\u7684\u4e0b\u9762\u4e24\u4e2a\u6027\u8d28\uff1a\n\\displaystyle (a+b) \\bmod x=((a \\bmod x)+(b \\bmod x))\\bmod x \\\\\n\\displaystyle (a\\ast b) \\bmod x=((a \\bmod x)\\ast (b \\bmod x))\\bmod x\n\u90a3\u4e48\u5bf9\u4e8e\u9664\u6cd5\uff0c\u662f\u5426\u4e5f\u6ee1\u8db3\u8fd9\u4e2a\u5f0f\u5b50\u5462\uff1f\n\\displaystyle (a \\div b) \\bmod x=((a \\bmod x)\\div (b \\bmod x))\\bmod x\n\n\u5f88\u663e\u7136\u4e5f\u5f88\u9057\u61be\uff0c\u4e0d\u6ee1\u8db3\u3002\u5f88\u5bb9\u6613\u627e\u5230\u53cd\u4f8b\uff1a\n\\displaystyle (15 \\div 5)\\bmod 3=0 \\not = ((15 \\bmod 3)\\div(5 \\bmod 3))\n\u90a3\u4e48\u5f53\u9664\u6570\u5f88\u5927\u7684\u65f6\u5019\u600e\u4e48\u7b97\u5462\uff1f\u8fd9\u5c31\u8981\u7528\u5230\u4e58\u6cd5\u9006\u5143\u4e86\u3002\n\u6e29\u99a8\u63d0\u793a\uff1a\n\u5728\u9605\u8bfb\u672c\u6587\u4e4b\u524d\u5efa\u8bae\u5148\u9605\u8bfb\uff1a\u6b27\u51e0\u91cc\u5fb7\u7b97\u6cd5\u4e0e\u62d3\u5c55\u6b27\u51e0\u91cc\u5fb7\u7b97\u6cd5\u8be6\u89e3 \u4e0e \u6b27\u62c9\u51fd\u6570\u3001\u8d39\u9a6c\u5c0f\u5b9a\u7406\u4e0e\u6b27\u62c9\u5b9a\u7406\u8be6\u89e3\u3002\n\u672c\u6587\u4e2d\u6709\u5927\u91cf KaTeX \u516c\u5f0f\uff0c\u8bf7\u786e\u4fdd\u6d4f\u89c8\u5668\u652f\u6301\uff0c\u5426\u5219\u5361\u5230\u8d85\u4e4e\u4f60\u60f3\u8c61\u3002\nWindows \u53ef\u4ee5\u5728\u63a7\u5236\u9762\u677f-\u7a0b\u5e8f-\u5378\u8f7d\u7a0b\u5e8f-\u5378\u8f7d\\\u66f4\u65b0 Windows \u7ec4\u4ef6\u4e2d\u5378\u8f7dIE\u6d4f\u89c8\u5668\u3002\n\u672c\u6587\u4e2d (a,b) \u6216\u8005 gcd(a,b) \u8868\u793aa\u3001b\u7684\u6700\u5927\u516c\u56e0\u6570\u3002\n\u672c\u6587\u96b6\u5c5e&lceil; \u6570\u8bba\u5b66\u4e60\u7cfb\u5217 &rfloor;\u3002\n\u4e58\u6cd5\u9006\u5143\u7684\u5b9a\u4e49\n\u8bbe $a,p \\in Z$\uff0c\u6ee1\u8db3 $(a,p)=1$\uff0c\u5e76\u4e14\n\\displaystyle ax \\equiv 1 \\pmod p\n\u90a3\u4e48\u5c31\u79f0 x \u662f a \u6a21 p \u7684\u9006\u5143\u3002\u5f88\u50cf\u5012\u6570\uff0c\u5c31\u662f\u6a21\u4e86\u4e2a p\u3002\uff08\u7ef4\u57fa\u767e\u79d1\u641c\u7d22\u201c\u4e58\u6cd5\u9006\u5143\u201d\u76f4\u63a5\u91cd\u5b9a\u5411\u5230\u201c\u5012\u6570\u201d\u2026\u2026\uff09\n\u5176\u5b9e\u6709\u53e6\u4e00\u79cd\u8868\u793a\u65b9\u5f0f\u79f0 x \u662f a \u6a21 p \u7684\u9636\uff0c\u8bb0\u4f5c $ord_p a$ .\n\u4e58\u6cd5\u9006\u5143\u7684\u4f5c\u7528\u548c\u8bc1\u660e\n\u524d\u9762\u5df2\u7ecf\u8bf4\u4e86\uff0c\u4e58\u6cd5\u9006\u5143\u53ef\u4ee5\u5728\u8fdb\u884c\u9664\u6cd5\u65f6\u8ba9\u7b49\u5f0f\u6ee1\u8db3\u201c\u5206\u914d\u5f8b\u201d\u3002\u4e0b\u9762\u7ed9\u51fa\u8bc1\u660e\uff1a\n\\displaystyle bx \\equiv 1 \\pmod p \\iff bx = kp+1 \\iff x=\\frac {kp+1} b\n\u4ee3\u5165 $ax \\bmod p$\uff0c\u5f97\u5230\n\\frac {a \\cdot (kp+1)} b \\bmod p = (\\frac {kp+1} b + \\frac a b )\\bmod p = (a \\div b) \\bmod p\n\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u5148\u6c42\u51fa b \u6a21 p \u7684\u9006\u5143 x\uff0c\u8fd9\u65f6 $ax \\bmod p$ \u5c31\u662f $(a \\div b) \\bmod p$ \u7684\u503c\u3002\n\u4e58\u6cd5\u9006\u5143\u7684\u6c42\u6cd5\n\u7ebf\u6027\u6c42\u9006\u5143\n\u4ece\u7b80\u5355\u800c\u66b4\u529b\u7684\u65b9\u6cd5\u5f00\u59cb~ \u5f53 p \u5f88\u5c0f\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e 1 \u5230 p-1\uff0c\u5224\u65ad\u8fd9\u4e2a\u5f0f\u5b50\u662f\u5426\u6210\u7acb\uff1a\nax \\equiv 1 \\pmod p\n\u53ef\u4ee5\u8bc1\u660e\u5982\u679c\u5b58\u5728\u9006\u5143\uff0c\u90a3\u4e48 $&#91;1,p-1 &#93;$ \u7684\u8303\u56f4\u5185\u4e00\u5b9a\u5b58\u5728\u9006\u5143\u3002\u8bc1\u660e\u5982\u4e0b\uff1a\n\u663e\u7136\uff0c\u4efb\u4f55\u5927\u4e8e $p$ \u7684\u9006\u5143\u90fd\u53ef\u4ee5\u5199\u6210\uff1a$kp+x \\bmod p$\n\\displaystyle ax \\equiv akp+a \\cdot (x \\bmod p) \\equiv a \\cdot (x \\bmod p) \\equiv 1 \\pmod p\n\u7efc\u4e0a\uff0c\u5982\u679c\u5b58\u5728\u5927\u4e8e $p$ \u7684\u9006\u5143 $x$\uff0c\u5219\u5fc5\u5b9a\u5b58\u5728 $x \\bmod p$ \u4e5f\u4e3a\u5176\u9006\u5143\u3002\n\uff08\u5728\u8fd9\u91cc\u6211\u8981\u628a DYT \u540c\u5b66\u6279\u5224\u4e00\u756a\uff0c\u5728\u4ed6\u7684\u535a\u5ba2 \u6570\u8bba\u521d\u6b65\uff1a\u4e58\u6cd5\u9006\u5143\u4e0e\u51e0\u79cd\u6c42\u6cd5 - CSDN\u535a\u5ba2 \u91cc\u5c45\u7136\u5199\u9053\uff1a\u201c\u5bf9\u4e8e\u7ed9\u5b9a\u7684 a \u548c p\uff0c\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u6570\u662f\u5b83\u7684\u9006\u5143\u201d\u8fd9\u4e00\u663e\u7136\u9519\u8bef\u7684\u7ed3\u8bba\u2026\u2026\uff09\n\u6269\u5c55\u6b27\u51e0\u91cc\u5fb7\u6c42\u9006\u5143\n\u5173\u4e8e\u6269\u5c55\u6b27\u51e0\u91cc\u5fb7\u6b27\u51e0\u91cc\u5fb7\u7684\u4ecb\u7ecd\u53c2\u89c1\uff1a\u6b27\u51e0\u91cc\u5fb7\u7b97\u6cd5\u4e0e\u62d3\u5c55\u6b27\u51e0\u91cc\u5fb7\u7b97\u6cd5\u8be6\u89e3\u3002\n\u5bf9\u4e8e\u521a\u624d\u7684\u540c\u4f59\u65b9\u7a0b\uff0c\u53ef\u4ee5\u53d8\u5f62\u4e3a\u4ee5\u4e0b\u8fd9\u4e2a\u201c\u88f4\u8700\u7b49\u5f0f\u201d\uff1a\nax+py=1\n\u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u7528\u6269\u5c55\u6b27\u51e0\u91cc\u5fb7\u89e3\u4e86\u3002\u5177\u4f53\u89e3\u6cd5\u5728\u6b27\u51e0\u91cc\u5fb7\u7b97\u6cd5\u4e0e\u62d3\u5c55\u6b27\u51e0\u91cc\u5fb7\u7b97\u6cd5\u8be6\u89e3\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u5df2\u7ecf\u8be6\u7ec6\u4ecb\u7ecd\uff0c\u8fd9\u91cc\u4e0d\u8d58\u8ff0\u3002\u8d34\u4ee3\u7801\uff1a\nint exgcd(int a,int b,int &amp;x,int &amp;y){ \/\/x\u3001y\u53d8\u91cf\u7528\u6765\u4f20\u9012\u6c42\u5f97\u7684\u7279\u6b8a\u89e3\n    if(b==0){ \/\/\u5224\u65ad\u9012\u5f52\u8fb9\u754c\uff0cb=0\u8bf4\u660e\u5230\u5e95\u4e86\n        x=1;y=0;\n        return a;\n    }\n    int r=exgcd(b,a%b,x,y),t=x; \/\/\u5148\u9012\u5f52\u628a\u4e4b\u524d\u7684\u90fd\u505a\u5b8c\n    x=y;y=t-a\/b*y;\n    return r;\n}\n\n\u8d39\u9a6c\u5c0f\u5b9a\u7406\/\u6b27\u62c9\u5b9a\u7406\u6c42\u9006\u5143\n\u8d39\u9a6c\u5c0f\u5b9a\u7406\u548c\u6b27\u62c9\u5b9a\u7406\u5728 \u6b27\u62c9\u51fd\u6570\u3001\u8d39\u9a6c\u5c0f\u5b9a\u7406\u4e0e\u6b27\u62c9\u5b9a\u7406\u8be6\u89e3 \u8fd9\u4e00\u7bc7\u91cc\u5df2\u7ecf\u6709\u8be6\u7ec6\u7684\u4ecb\u7ecd\u3002\u7531\u4e8e\u8d39\u9a6c\u5c0f\u5b9a\u7406\u662f\u6b27\u62c9\u5b9a\u7406\u7684\u4e00\u822c\u60c5\u51b5\uff0c\u6211\u4eec\u4e0b\u9762\u5c31\u53ea\u4ecb\u7ecd\u6b27\u62c9\u5b9a\u7406\u6c42\u9006\u5143\u3002\n\u5f53 $(a,n)=1$ \u65f6\uff0c\u6839\u636e\u6b27\u62c9\u5b9a\u7406\u6709\n\\displaystyle a^{\\varphi(n)} \\equiv 1 \\pmod n\n\u53ef\u4ee5\u5316\u6210\uff1a\n\\displaystyle a \\ast a^{\\varphi(n)-1} \\equiv 1 \\pmod n\n\u663e\u7136\uff0c\u8fd9\u65f6\u5019 $a^{\\varphi(n)-1}$ \u5c31\u662f $x$ \u6a21 $p$ \u7684\u9006\u5143\u3002\n\u53ef\u4ee5\u6839\u636e\u6b27\u62c9\u51fd\u6570\u516c\u5f0f\u6c42 $\\varphi (n)$\uff1a\n\\displaystyle \\varphi (n)=n\\prod_{i=1}^r (1-\\frac 1 {P_i})\n\u503c\u5f97\u4e00\u63d0\u7684\u662f\u5f53 $n$ \u4f4d\u8d28\u6570\u65f6\uff0c$\\varphi (n)=n-1$\u3002\u8fd9\u65f6\u5019\u7528\u6b27\u62c9\u51fd\u6570\u6c42\u9006\u5143\u5c31\u683c\u5916\u65b9\u4fbf\u3002\n\u8865\u5145\n\u4ee5 O(N) \u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u9012\u63a8\u9006\u5143\u7684\u65b9\u6cd5\n\n\u53c2\u8003\n\u62d6\u5ef6\u75c7\u53c8\u72af\u4e86\u2026\u2026\u8fd9\u7bc7\u6587\u7ae0\u5199\u4e86N\u5929\u2026\u2026\n\u4e58\u6cd5\u9006\u5143\u3001\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u3001\u4e8c\u5143\u4e00\u6b21\u65b9\u7a0b\u3001a\u7684n\u6b21\u65b9\u53d6\u4f59 - CSDN\u535a\u5ba2\n\u4e58\u6cd5\u9006\u5143(\u9664\u6cd5\u53d6\u6a21) - CSDN\u535a\u5ba2\n\u9006\u5143\u76f8\u5173\u77e5\u8bc6 - CSDN\u535a\u5ba2\n\u6570\u8bba\u521d\u6b65\uff1a\u4e58\u6cd5\u9006\u5143\u4e0e\u51e0\u79cd\u6c42\u6cd5 - CSDN\u535a\u5ba2","tags":[{"name":"OI\u5b66\u4e60","slug":"OI\u5b66\u4e60","permalink":"https:\/\/skywt.cn\/tag\/OI%E5%AD%A6%E4%B9%A0\/"},{"name":"\u6570\u8bba","slug":"\u6570\u8bba","permalink":"https:\/\/skywt.cn\/tag\/%E6%95%B0%E8%AE%BA\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"\u4e3b\u5b9a\u7406\u4e0e\u9012\u5f52\u7a0b\u5e8f\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u8ba1\u7b97","date":"2018-09-16T16:35:36+08:00","path":"https:\/\/skywt.cn\/posts\/master-theorem","text":"\u4e3b\u5b9a\u7406\u53ef\u4ee5\u7528\u6765\u5206\u6790\u9012\u5f52\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff08\u4e5f\u53eb\u6e10\u8fdb\u590d\u6742\u5ea6\uff09\u3002\u5728\u4ee5\u524d\uff0c\u6211\u4eec\u77e5\u9053\u5feb\u901f\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $  \\Theta (N \\ast \\log_2 N )$ \uff0c\u6211\u4eec\u4e5f\u77e5\u9053\u5b83\u4e0d\u7a33\u5b9a\uff0c\u4f46\u662f\u6211\u4eec\u4eff\u4f5b\u4e0d\u77e5\u9053\u8fd9\u4e2a $ \\Theta (N \\ast \\log_2 N )$ \u662f\u600e\u4e48\u6765\u7684\u2026\u2026\u5b66\u4e60\u4e86\u4e3b\u5b9a\u7406\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8bc1\u660e\u4e86\uff5e\n\u8fd9\u4e2a\u201c\u4e3b\u5b9a\u7406\u201d\u540d\u5b57\u771f\u7684\u5341\u5206\u9738\u6c14\uff1aMaster Theorem\u2026\u2026\n\n\n\n\u5728\u7b97\u6cd5\u5206\u6790\u4e2d\uff0c\u4e3b\u5b9a\u7406\uff08Master Theorem\uff09\u63d0\u4f9b\u4e86\u7528\u6e10\u8fd1\u7b26\u53f7\uff08\u5927O\u7b26\u53f7\uff09\u8868\u793a\u8bb8\u591a\u7531\u5206\u6cbb\u6cd5\u5f97\u5230\u7684\u9012\u63a8\u5173\u7cfb\u5f0f\u7684\u65b9\u6cd5\u3002\n\u2014\u2014\u7ef4\u57fa\u767e\u79d1\n\n[v_warn]\u672c\u6587\u4e2d\u6709\u5927\u91cf KaTeX \u516c\u5f0f\uff0c\u8bf7\u786e\u4fdd\u6d4f\u89c8\u5668\u652f\u6301\uff0c\u5426\u5219\u5361\u5230\u8d85\u4e4e\u4f60\u60f3\u8c61\u3002[\/v_warn]\n\u4e3b\u5b9a\u7406\u7684\u5185\u5bb9\n\u5982\u679c\u6709\u4e00\u4e2a\u95ee\u9898\u89c4\u6a21\u4e3a $n$\uff0c\u9012\u63a8\u7684\u5b50\u95ee\u9898\u6570\u91cf\u4e3a $a$\uff0c\u6bcf\u4e2a\u5b50\u95ee\u9898\u7684\u89c4\u6a21\u4e3a $\\frac n b$\uff08\u5047\u8bbe\u6bcf\u4e2a\u5b50\u95ee\u9898\u7684\u89c4\u6a21\u57fa\u672c\u4e00\u6837\uff09\uff0c\u9012\u63a8\u4ee5\u5916\u8fdb\u884c\u7684\u8ba1\u7b97\u5de5\u4f5c\u4e3a $f(n)$\uff08\u6bd4\u5982\u5f52\u5e76\u6392\u5e8f\uff0c\u9700\u8981\u5408\u5e76\u5e8f\u5217\uff0c\u5219 $f(n)$ \u5c31\u662f\u5408\u5e76\u5e8f\u5217\u9700\u8981\u7684\u8fd0\u7b97\u91cf\uff09\uff0c\u90a3\u4e48\u5bf9\u4e8e\u8fd9\u4e2a\u95ee\u9898\u6709\u5982\u4e0b\u9012\u63a8\u5173\u7cfb\u5f0f\uff1a\n$$T(n)=aT \\Big (\\frac n b \\Big) +c(n^d)$$\n\u5176\u4e2d $a \\geqslant 1, b>1$\u3002\n\u62ff\u6700\u7b80\u5355\u7684\u5f52\u5e76\u6392\u5e8f\u6765\u8bf4\uff0c\u6bcf\u6b21\u5bf9 $(1,n)$ \u4e00\u6bb5\u6392\u5e8f\uff0c\u5c31\u5206\u6210\u4e24\u534a\uff0c\u5de6\u53f3\u5206\u522b\u5904\u7406\uff0c\u7136\u540e\u8fdb\u884c\u5408\u5e76\u3002\u95ee\u9898\u89c4\u6a21\u5c31\u662f\u6392\u5e8f\u5e8f\u5217\u957f\u5ea6\uff0c\u5373 $n$\uff1b\u6bcf\u6b21\u6211\u4eec\u628a\u6570\u7ec4\u5206\u6210\u4e24\u90e8\u5206\uff0c\u5219 $b=2,a=2$\uff1b\u663e\u7136\u5408\u5e76\u64cd\u4f5c\u91cc $d=1$\u3002\n\u90a3\u4e48\u6839\u636e\u4e3b\u5b9a\u7406\uff0c\u53ef\u4ee5\u5f97\u5230\u95ee\u9898\u7684\u590d\u6742\u5ea6\u662f\uff1a\n$$ \\begin{cases}\nT(n) = \\Theta (n^d log_2(n)) & \\text{if } (a = b^d)  \\\\\nT(n) = \\Theta (n^d ) & \\text{if } (a < b^d)  \\\\\nT(n) = \\Theta (n^{log_b(a)}) & \\text{if } (a > b^d)\n\\end{cases} $$\n\u5e94\u7528\u4e3e\u4f8b\n\u5feb\u901f\u6392\u5e8f\n\u663e\u7136\u6bcf\u6b21\u95ee\u9898\u89c4\u6a21\u51cf\u534a\uff0c\u90a3\u4e48 $a=2,b=2,d=1$\u3002$a=b^d$\uff0c\u7b26\u5408\u7b2c\u4e00\u79cd\u60c5\u51b5\uff1a\n$$ T(n)=\\Theta (n \\log_2(n)) $$\n\u795e\u5947\uff01\n\u5f52\u5e76\u6392\u5e8f\n\u548c\u5feb\u901f\u6392\u5e8f\u5dee\u4e0d\u591a\uff0c$a=2,b=2,d=1$\uff0c\u7b26\u5408\u7b2c\u4e00\u79cd\u60c5\u51b5\uff1a\n$$ T(n)=\\Theta (n \\log_2(n)) $$\n\u4e8c\u5206\u67e5\u627e\n\u6bcf\u6b21\u95ee\u9898\u89c4\u6a21\u51cf\u534a\uff0c\u5dee\u522b\u5728\u4e8e\u6ca1\u6709\u201c\u6570\u7ec4\u5408\u5e76\u201d\u8fd9\u6837\u7684\u64cd\u4f5c\uff0c\u5e76\u4e14\u6bcf\u6b21\u90fd\u4f1a\u9009\u51fa\u4e00\u66f4\u4f18\uff0c\u5b50\u95ee\u9898\u6570\u91cf\u4e3a 1\u3002$a=1,b=2,d=0$\u3002$a=b^d$\uff0c\u7b2c\u4e00\u79cd\u60c5\u51b5\uff1a\n$$ T(n)=\\Theta(\\log_2(n)) $$\n\u4e8c\u53c9\u6811\u904d\u5386\n\u8fd9\u91cc\u6307\u7684\u662f\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u8fdb\u884c\u904d\u5386\u4e8c\u53c9\u6811\u3002\n\u6bcf\u6b21\u95ee\u9898\u89c4\u6a21\u51cf\u534a\uff0c\u5b50\u95ee\u9898\u6570\u91cf\u4e3a 2\uff0c\u4e0d\u9700\u8981\u8fdb\u884c\u4ec0\u4e48\u989d\u5916\u64cd\u4f5c\uff0c$a=2,b=2,d=0$\uff0c\u90a3\u4e48\u662f $a> b_d$\u3002\u5219\n$$ T(n)=\\Theta(n) $$\n\u8bc1\u660e\n\u672c juruo \u8868\u793a\u4e0d\u4f1a\u3002\u56de\u53bb\u770b\u770b\u300a\u7b97\u6cd5\u5bfc\u8bba\u300b\uff0c\u5b66\u4e60\u4e00\u4e2a\u3002\n\u53ef\u4ee5\u53c2\u8003\u8fd9\u7bc7\u6587\u7ae0\u3002\n\n\u9898\u5916\u8bdd\uff1a\u5173\u4e8e\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u8868\u793a\n\u5173\u4e8e\u7ef4\u57fa\u767e\u79d1\u4e0a\u7684\u4e3b\u5b9a\u7406\u7684\u5b9a\u4e49\u7528\u5230\u4e86\u4e00\u5927\u5806 $\\Theta$\uff08Theta\uff09, $\\Omega$\uff08Omega\uff09, $O$\uff08Omicron\uff09\u8fd9\u6837\u7684\u7b26\u53f7\uff0c\u5728\u7f51\u4e0a\u67e5\u4e86\u534a\u5929\u5b8c\u5168\u6ca1\u7406\u89e3\u662f\u4ec0\u4e48\u610f\u601d\uff08\u5305\u62ec\u77e5\u4e4e\u4e0a\u4e00\u7fa4\u5927\u4f6c\u6fc0\u70c8\u7684\u8ba8\u8bba\uff0c\u6240\u6709\u4eba\u90fd\u8bf4\uff1a\u201c\u4ee5\u4e0a\u7b54\u6848\u57fa\u672c\u90fd\u662f\u9519\u7684\u201d\uff01\uff01\uff01\uff09\u2026\u2026\n\u7ef4\u57fa\u767e\u79d1\u4e0a\u7684\u610f\u601d\u662f\uff1a\n\n$O$\uff1a\u591a\u9879\u5f0f\u5730\u5c0f\u4e8e\n$\\Omega$\uff1a\u591a\u9879\u5f0f\u5730\u5927\u4e8e\n\n\u5728\u65f6\u95f4\u590d\u6742\u5ea6\u8bcd\u6761\u91cc\u8fd8\u8bf4\u4e86\uff1a\n\n\u76f8\u540c\u5927\u5c0f\u7684\u4e0d\u540c\u8f93\u5165\u503c\u4ecd\u53ef\u80fd\u9020\u6210\u7b97\u6cd5\u7684\u8fd0\u884c\u65f6\u95f4\u4e0d\u540c\uff0c\u56e0\u6b64\u6211\u4eec\u901a\u5e38\u4f7f\u7528\u7b97\u6cd5\u7684\u6700\u574f\u60c5\u51b5\u590d\u6742\u5ea6\uff0c\u8bb0\u4e3a $T(n)$\uff0c\u5b9a\u4e49\u4e3a\u4efb\u4f55\u5927\u5c0f\u7684\u8f93\u5165 $n$ \u6240\u9700\u7684\u6700\u5927\u8fd0\u884c\u65f6\u95f4\u3002\u53e6\u4e00\u79cd\u8f83\u5c11\u4f7f\u7528\u7684\u65b9\u6cd5\u662f\u5e73\u5747\u60c5\u51b5\u590d\u6742\u5ea6\uff0c\u901a\u5e38\u6709\u7279\u522b\u6307\u5b9a\u624d\u4f1a\u4f7f\u7528\u3002\n\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u4ee5\u7528\u51fd\u6570 $T(n)$ \u7684\u81ea\u7136\u7279\u6027\u52a0\u4ee5\u5206\u7c7b\uff0c\u4e3e\u4f8b\u6765\u8bf4\uff0c\u6709\u7740 $T(n) = O(n)$ \u7684\u7b97\u6cd5\u88ab\u79f0\u4f5c\u201c\u7ebf\u6027\u65f6\u95f4\u7b97\u6cd5\u201d\uff1b\u800c $T(n) = O(Mn)$ \u548c $Mn= O(T(n))$ \uff0c\u5176\u4e2d $M \u2265 n > 1$ \u7684\u7b97\u6cd5\u88ab\u79f0\u4f5c\u201c\u6307\u6570\u65f6\u95f4\u7b97\u6cd5\u201d\u3002\n\n\u53ef\u80fd\u610f\u601d\u662f\u6211\u4eec\u5e73\u5e38\u7528\u7684 $\\Theta$ \u6216\u8005 $O$ \u5927\u591a\u6307\u7684\u662f\u6700\u574f\u60c5\u51b5\u590d\u6742\u5ea6\u5427\uff0c\u8fd9\u4e2a\u7528\u5f97\u6bd4\u8f83\u591a\u4e00\u70b9 :new_moon_with_face:\n\u5f15\u7528\u4e00\u7bc7\u6d1b\u8c37\u4e0a\u6587\u7ae0\u7684\u8bf4\u660e\uff1a\n\n$T(n)$\u8868\u793a\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u8868\u793a\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\n$T(n)=$ \u4e0b\u9762\u7684\u4efb\u610f\u4e00\u4e2a\u7b26\u53f7\uff08\u4e00\u4e2a\u5355\u9879\u5f0f\uff09\uff1a\n$\\Theta$\uff0c\u8bfb\u97f3\uff1atheta\uff0c\u7b49\u4e8e\u7684\u610f\u601d\u3002\n$O$\uff0c\u8bfb\u97f3\uff1abig-oh\uff0c\u5c0f\u4e8e\u7b49\u4e8e\u7684\u610f\u601d\u3002\n$\\omicron$\uff0c\u8bfb\u97f3\uff1asmall-oh\uff0c\u5c0f\u4e8e\u7684\u610f\u601d\u3002\n$\\Omega$\uff0c\u8bfb\u97f3\uff1abig omega\uff0c\u5927\u4e8e\u7b49\u4e8e\u7684\u610f\u601d\u3002\n$\\omega$\uff0c\u8bfb\u97f3\uff1asmall omega\uff0c\u5927\u4e8e\u7684\u610f\u601d\u3002\n\u5982\u679c\u4f60\u4e0d\u80fd\u5b8c\u5168\u7406\u89e3\u7684\u8bdd\uff0c\u5728\u76ee\u524d\u6211\u4eec\u53c2\u52a0\u7684NOIP\u4e2d\uff0c\u4f60\u53ef\u4ee5\u628a\u5b83\u4eec\u90fd\u7406\u89e3\u4e3a\u6210 $O$\u3002\uff08\u9003\uff09\n\n\u55ef\uff0c\u90a3\u4e48\u6309\u7167\u8fd9\u4f4d\u5927\u4f6c\u7684\u601d\u8def\uff0c\u6211\u4eec\u90fd\u7406\u89e3\u6210 $O$ \u5427 :new_moon_with_face:\n\n\u53c2\u8003\n\u4e3b\u5b9a\u7406 - \u7ef4\u57fa\u767e\u79d1\uff0c\u81ea\u7531\u7684\u767e\u79d1\u5168\u4e66\n\u4e3b\u5b9a\u7406\u7684\u8bc1\u660e\u53ca\u5e94\u7528\u4e3e\u4f8b - CSDN\u535a\u5ba2\n\u65f6\u7a7a\u590d\u6742\u5ea6\u5206\u6790\u53camaster\u5b9a\u7406 - Chanis - \u6d1b\u8c37\u535a\u5ba2\n\u65f6\u95f4\u590d\u6742\u5ea6 - \u7ef4\u57fa\u767e\u79d1\uff0c\u81ea\u7531\u7684\u767e\u79d1\u5168\u4e66","tags":[{"name":"OI\u5b66\u4e60","slug":"OI\u5b66\u4e60","permalink":"https:\/\/skywt.cn\/tag\/OI%E5%AD%A6%E4%B9%A0\/"},{"name":"OI\u7b97\u6cd5","slug":"OI\u7b97\u6cd5","permalink":"https:\/\/skywt.cn\/tag\/OI%E7%AE%97%E6%B3%95\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"\u6d1b\u8c37 P1577 \u5207\u7ef3\u5b50 \uff1a\u5751\u7239\u7684 printf \u81ea\u52a8\u56db\u820d\u4e94\u5165","date":"2018-07-04T11:41:00+08:00","path":"https:\/\/skywt.cn\/posts\/luogu1577","text":"\u6d1b\u8c37\u94fe\u63a5\uff1aP1577 \u5207\u7ef3\u5b50\n\u770b\u5230\u6211\u5199\u8fd9\u4e48\u7b80\u5355\u7684\u9898\u7684\u9898\u89e3\u4e0d\u8981\u5947\u602a\uff0c\u56e0\u4e3a\u8fd9\u9898\u5f88\u5751\u2026\u2026XJ\u4e00\u5927\u5806dalao\u90fd\u5df2\u7ecf\u88ab\u5751\u5bb3\u4e86\u2026\u2026\n\n\u9898\u76ee\u63cf\u8ff0\n\u6709N\u6761\u7ef3\u5b50\uff0c\u5b83\u4eec\u7684\u957f\u5ea6\u5206\u522b\u4e3aLi\u3002\u5982\u679c\u4ece\u5b83\u4eec\u4e2d\u5207\u5272\u51faK\u6761\u957f\u5ea6\u76f8\u540c\u7684\n\u7ef3\u5b50\uff0c\u8fd9K\u6761\u7ef3\u5b50\u6bcf\u6761\u6700\u957f\u80fd\u6709\u591a\u957f\uff1f\u7b54\u6848\u4fdd\u7559\u5230\u5c0f\u6570\u70b9\u540e2\u4f4d\u3002\n\u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n\u8f93\u5165\u683c\u5f0f\uff1a\n\u7b2c\u4e00\u884c\u4e24\u4e2a\u6574\u6570N\u548cK\uff0c\u63a5\u4e0b\u6765N\u884c\uff0c\u63cf\u8ff0\u4e86\u6bcf\u6761\u7ef3\u5b50\u7684\u957f\u5ea6Li\u3002\n\u8f93\u51fa\u683c\u5f0f\uff1a\n\u5207\u5272\u540e\u6bcf\u6761\u7ef3\u5b50\u7684\u6700\u5927\u957f\u5ea6\u3002\n\u8f93\u5165\u8f93\u51fa\u6837\u4f8b\n\u8f93\u5165\u6837\u4f8b#1\uff1a\n4 11\n8.02\n7.43\n4.57\n5.39\n\u8f93\u51fa\u6837\u4f8b#1\uff1a\n2.00\n\u8bf4\u660e\n\u5bf9\u4e8e100%\u7684\u6570\u636e 0&lt;Li&lt;=100000.00 0&lt;n&lt;=10000 0&lt;k&lt;=10000\n\u9898\u89e3\n\u672c\u6765\u8fd9\u662f\u5165\u95e8\u7684\u4e8c\u5206\u9898\u76ee\uff0c\u4f46\u662f\uff01\uff01\uff01\u4f1a\u6709\u7cbe\u5ea6\u95ee\u9898\uff01\n\u9898\u76ee\u8981\u6c42\u6211\u4eec\u53d6\u5c0f\u6570\u70b9\u540e\u4e24\u4f4d\uff0c\u610f\u601d\u662f\u5411\u4e0b\u53d6\uff0c\u4f46\u662f printf(\"%.2f\",ans); \u8fd9\u4e2a\u8bed\u53e5\u81ea\u5e26\u56db\u820d\u4e94\u5165\uff01\u5982\u679c\u6309\u8fd9\u6837\u5199\u5b83\u4f1a\u81ea\u52a8\u628a\u5c0f\u6570\u70b9\u540e\u7b2c\u4e09\u4f4d\u56db\u820d\u4e94\u5165\u7d2f\u52a0\u5230\u7b2c\u4e8c\u4f4d\u4e0a\u2026\u2026\n\u6240\u4ee5\u4e00\u79cd\u5904\u7406\u65b9\u6cd5\u662f\u628a\u6240\u6709\u6570\u636e\u4e58\u4ee5100\uff0c\u518d\u6309\u6574\u6570\u505a\uff0c\u6700\u540e\u7b54\u6848\u9664\u4ee5100\u6309\u5c0f\u6570\u8f93\u51fa\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u7cbe\u5ea6\u95ee\u9898\u3002\n\u53e6\u5916\u4e00\u79cd\u505a\u6cd5\u5c31\u662f\u628a\u7b54\u6848\u8fde\u5c0f\u6570\u70b9\u4e4b\u540e\u4e09\u4f4d\u8f93\u51fa\u5230\u4e00\u4e2a\u5b57\u7b26\u6570\u7ec4\u91cc\uff08\u6211\u73b0\u5728\u624d\u77e5\u9053\u6709sprintf\u8fd9\u79cd\u9ed1\u79d1\u6280\u2026\u2026\uff09\uff0c\u518d\u76f4\u63a5\u66b4\u529b\u5730\u628a\u5c0f\u6570\u70b9\u4e4b\u540e\u7b2c\u4e09\u4f4d\u622a\u6389\u2026\u2026\u4ee3\u7801\u5982\u4e0b\uff1a\nsprintf(s+1,\"%.3f\",ans);\ns[strlen(s+1)]='\\0';\nprintf(\"%s\",s+1);\n\uff08\u6211\u4e5f\u5f88\u5947\u602a\u4e3a\u4ec0\u4e48\u6211\u4e4b\u524d\u4e00\u76f4\u6ca1\u6ce8\u610f\u5230\u7cbe\u5ea6\u7684\u4e8b\u60c5\u2026\u2026\uff09\n\u53c2\u8003\u4ee3\u7801\n\u8d34\u4e0a\u8fd9\u9898\u7684\u5b8c\u6574\u4ee3\u7801\uff1a\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;cmath&gt;\nusing namespace std;\nconst int maxn=10005;\nint n,m;\nchar s[100];\ndouble a[maxn],sum=0.0,ans=0.0;\ninline bool check(double x){\n    int cnt=0;\n    for (int i=1;i&lt;=n;i++) cnt+=trunc(a[i]\/x);\n    return cnt&gt;=m;\n}\nint main(){\n    scanf(\"%d%d\",&amp;n,&amp;m);\n    for (int i=1;i&lt;=n;i++){scanf(\"%lf\",&amp;a[i]);sum+=a[i];}\n    double L=0.0,R=sum+1.0,mid;\n    while (R-L&gt;1e-4){\n        double mid=(L+R)\/2.0;\n        if (mid==0.0) break;\n        if (check(mid)){\n            ans=mid;\n            L=mid;\n        } else R=mid;\n    }\n    sprintf(s+1,\"%.3f\",ans);\n    s[strlen(s+1)]='\\0';\n    printf(\"%s\",s+1);\n    return 0;\n}","tags":[{"name":"C++\u8bed\u8a00","slug":"C-\u8bed\u8a00","permalink":"https:\/\/skywt.cn\/tag\/C-%E8%AF%AD%E8%A8%80\/"},{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u641c\u7d22","slug":"\u641c\u7d22","permalink":"https:\/\/skywt.cn\/tag\/%E6%90%9C%E7%B4%A2\/"},{"name":"\u4e8c\u5206\u67e5\u627e","slug":"\u4e8c\u5206\u67e5\u627e","permalink":"https:\/\/skywt.cn\/tag\/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"\u6298\u7ebf\u5206\u5272\u5e73\u9762 \u9898\u89e3","date":"2018-07-05T10:06:56+08:00","path":"https:\/\/skywt.cn\/posts\/xjoi3273","text":"\u8fd9\u9898\u662fXJOI\u4e0a\u770b\u5230\u7684\u2026\u2026\u4e0d\u8fc7HDU\u4e0a\u4e5f\u6709\uff1a\u6298\u7ebf\u5206\u5272\u5e73\u9762\n\n\u9898\u76ee\u63cf\u8ff0\n\u4e00\u6761\u6298\u7ebf\u6700\u591a\u5c06\u5e73\u9762\u5212\u5206\u62102\u4e2a\u90e8\u5206\n\u4e24\u6761\u6298\u7ebf\u6700\u591a\u5c06\u5e73\u9762\u5212\u5206\u62107\u4e2a\u90e8\u5206\n\nn \u6761\u6298\u7ebf\u6700\u591a\u5c06\u5e73\u9762\u5212\u5206\u6210\u51e0\u4e2a\u90e8\u5206 \uff1f\n\u8f93\u5165\u683c\u5f0f\n\u8f93\u5165\u4e00\u4e2a\u6574\u6570 n\u3002\n\u8f93\u51fa\u683c\u5f0f\n\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\u3002\n\u8f93\u5165\u8f93\u51fa\u6837\u4f8b\n\u8f93\u5165\u6837\u4f8b\n2\n\u8f93\u51fa\u6837\u4f8b\n7\n\u7ea6\u5b9a\n1&lt;=n&lt;=10000\n\u9898\u89e3\n\u7b2c\u4e00\u6b65\u6211\u4eec\u6709\u4e2a\u8d2a\u5fc3\u60f3\u6cd5\uff1a\u8981\u4f7f\u52a0\u4e0a\u7b2ci\u4e2a\u6298\u7ebf\u5206\u5272\u51fa\u7684\u533a\u57df\u6700\u591a\uff0c\u5219\u8981\u4f7f\u52a0\u4e0a\u7b2ci-1\u6761\u6298\u73b0\u5206\u5272\u51fa\u533a\u57df\u6700\u591a\u3002\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u53d1\u73b0\uff1a\u5bf9\u4e8e\u5df2\u7ecf\u6709 i-1 \u6761\u6298\u73b0\u201c\u6700\u4f18\u5206\u5272\u201d\u4e86\u4e00\u4e2a\u5e73\u9762\uff08\u5c31\u662f\u8bf4\u628a\u8fd9\u4e2a\u5e73\u9762\u5206\u6210\u5c3d\u91cf\u591a\u7684\u533a\u57df\uff09\uff0c\u90a3\u4e48\u5982\u679c\u52a0\u4e0a\u4e00\u6761\u76f4\u7ebf\uff0c\u8fd9\u6761\u76f4\u7ebf\u4e00\u5b9a\u6700\u591a\u53ea\u80fd\u4e0e $2(i-1)$ \u6761\u76f4\u7ebf\u76f8\u4ea4\u3002\uff08\u56e0\u4e3a\u6298\u7ebf\u53ef\u4ee5\u5206\u6210\u4e24\u6761\u76f4\u7ebf\uff0c\u6211\u4eec\u8fd9\u91cc\u76f4\u63a5\u8ba8\u8bba\u76f4\u7ebf\uff09\n\u4e3a\u4e86\u4f7f\u8fd9\u6761\u76f4\u7ebf\u52a0\u4e0a\u540e\u80fd\u6709\u66f4\u591a\u533a\u57df\u53d8\u591a\uff0c\u6211\u4eec\u8981\u8ba9\u8fd9\u6761\u76f4\u7ebf\u4e0e\u5c3d\u91cf\u591a\u76f4\u7ebf\u76f8\u4ea4\u3002\u5982\u679c\u5b83\u4e0e 2i-2 \u6761\u76f4\u7ebf\u76f8\u4ea4\uff0c\u90a3\u4e48\u5b83\u7ecf\u8fc7\u4e86 2i-1 \u4e2a\u533a\u57df\uff0c\u5219\u5b83\u4e00\u5b9a\u628a\u8fd9\u4e9b\u5e73\u9762\u90fd\u4e00\u5206\u4e3a\u4e8c\u4e86\u3002\n\u7531\u6b64\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff1a\u4e00\u6761\u76f4\u7ebf\u5728\u539f\u6765 i-1 \u6761\u6298\u7ebf\u7684\u57fa\u7840\u4e0a\u53ef\u4ee5\u4e3a\u5176\u589e\u52a0 2i-1 \u4e2a\u533a\u57df\u3002\u90a3\u4e48\u7b2ci\u4e2a\u6298\u7ebf\u7531\u4e24\u6761\u76f4\u7ebf\u6784\u6210\uff0c\u6700\u591a\u53ef\u4ee5\u589e\u52a0 4i-2 \u4e2a\u6298\u7ebf\u3002\n\u4f46\u662f\uff01\uff01\uff01\u4e00\u6761\u6298\u7ebf\u548c\u4e24\u6761\u76f4\u7ebf\u5176\u5b9e\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u56e0\u4e3a X \u5f62\u7684\u4e24\u6761\u76f8\u4ea4\u76f4\u7ebf\u53ef\u4ee5\u628a\u5e73\u9762\u5206\u6210\u56db\u4e2a\u533a\u57df\uff0c\u4f46\u662f V \u5f62\u7684\u6298\u7ebf\u53ea\u80fd\u5206\u6210\u4e24\u4e2a\u533a\u57df\uff01\u4ed4\u7ec6\u601d\u8003\u53ef\u4ee5\u53d1\u73b0\uff0c\u5176\u5b9e\u603b\u5171\u591a\u7b97\u4e86\u4e00\u4e2a\u533a\u57df\u3002X\u548cV\u76f8\u5dee\u7684\u660e\u660e\u662f\u4e24\u4e2a\u533a\u57df\uff0c\u4e3a\u4ec0\u4e48\u8bf4\u53ea\u591a\u7b97\u4e86\u4e00\u4e2a\u5462\uff1f\u539f\u56e0\u662f\uff0c\u5728 V \u7684\u5c16\u5c16\u5934\u4e0a\u9762\u6709\u4e00\u9762\u5757\u533a\u57df\u662f\u91cd\u590d\u7b97\u7684\uff01\n\u6240\u4ee5\u9012\u63a8\u5f0f\u5c31\u662f\uff1a\n$\\displaystyle F(i)=F(i-1)+4i-1$\n\u8fd9\u6837\u6c42\u89e3\u5c31\u5f88\u7b80\u5355\u4e86\uff5e\n\u53c2\u8003\u4ee3\u7801\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\nusing namespace std;\nconst int maxn=10005;\nint n,ans=0;\nint main(){\n    scanf(\"%d\",&amp;n);\n    ans=2;\n    for (int i=2;i&lt;=n;i++) ans+=4*i-3;\n    printf(\"%d\\n\",ans);\n    return 0;\n}","tags":[{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u6570\u5b66\u9898","slug":"\u6570\u5b66\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E6%95%B0%E5%AD%A6%E9%A2%98\/"}],"categories":[]},{"title":"CodeForces 555B Case of Fugitive\uff1a\u6392\u5e8f+\u8d2a\u5fc3","date":"2018-07-09T20:38:08+08:00","path":"https:\/\/skywt.cn\/posts\/cf555b","text":"\u505aCF\u4e0a\u7684\u82f1\u6587\u9898\u771f\u662f\u4e0d\u5bb9\u6613\u2026\u2026\n\u9898\u76ee\u94fe\u63a5\nCodeForces 555B\uff1aCase of Fugitive\n\nProblem\nAndrewid the Android is a galaxy-famous detective. He is now chasing a criminal hiding on the planet Oxa-5, the planet almost fully covered with water.\nThe only dry land there is an archipelago of n narrow islands located in a row. For more comfort let's represent them as non-intersecting segments on a straight line: island i has coordinates $ &#91;l_i,\u2009r_i&#93;$ , besides,$ r_i\u2009","tags":[{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u8d2a\u5fc3","slug":"\u8d2a\u5fc3","permalink":"https:\/\/skywt.cn\/tag\/%E8%B4%AA%E5%BF%83\/"}],"categories":[]},{"title":"0\/1 \u5206\u6570\u89c4\u5212\u4e0e Dinkelbach \u8fed\u4ee3\u6cd5","date":"2018-07-10T18:11:37+08:00","path":"https:\/\/skywt.cn\/posts\/dinkelbach","text":"0\/1 \u5206\u6570\u89c4\u5212\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u6a21\u578b\uff1a\u7ed9\u4f60 n \u4e2a\u4ef7\u503c $a_i$ \u4e0e n \u4e2a\u4ee3\u4ef7 $b_i$\uff0c\u8ba9\u4f60\u9009\u51fa m \u4e2a\u6570\u5b57\uff0c\u4f7f\u5f97 $ \\sum \\frac {a_i} {b_i} $ \u6700\u5927\u3002\u663e\u7136\u8fd9\u79cd\u9898\u76ee\u53ef\u4ee5\u7528\u4e8c\u5206\uff0c\u4f46\u662f\u6709\u4e00\u79cd\u66f4\u4f18\u79c0\u7684\u65b9\u6cd5\uff1aDinkelbach \u8fed\u4ee3\u6cd5\u3002\n\n\u5148\u6765\u770b\u4e00\u9053\u88f8\u7684\u4f8b\u9898\uff1a\n\u4f8b\u9898\uff1a\u6700\u5927\u5316\u5e73\u5747\u503c\n\u9898\u76ee\u63cf\u8ff0\n\u6709 n \u4e2a\u7269\u54c1\u7684\u91cd\u91cf\u548c\u4ef7\u503c\u5206\u522b\u662f $ w_i $ \u548c $ v_i$\u3002\u4ece\u4e2d\u9009\u51fa k \u4e2a\u7269\u54c1\u4f7f\u5f97\u5355\u4f4d\u91cd\u91cf\u7684\u4ef7\u503c\u6700\u5927\u3002\n\u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n\u8f93\u5165\u683c\u5f0f\n\u7b2c\u4e00\u884c\u8f93\u5165\u4e24\u4e2a\u6574\u6570 n\uff0ck \uff1b\n\u7b2c\u4e8c\u884c\u8f93\u5165 n \u4e2a\u6574\u6570 $w_i$ \uff1b\n\u7b2c\u4e09\u884c\u8f93\u5165 n \u4e2a\u6574\u6570 $v_i$\uff1b\n\u8f93\u51fa\u683c\u5f0f\n\u8f93\u51fa\u4e00\u4e2a\u6d6e\u70b9\u6570\uff0c\u4fdd\u7559\u4e24\u4f4d\u5c0f\u6570\u3002\n\u6837\u4f8b\u8f93\u5165\u8f93\u51fa\n\u6837\u4f8b\u8f93\u5165\n3 2\n2 5 2\n2 3 1\n\u6837\u4f8b\u8f93\u51fa\n0.75\n\u7ea6\u5b9a\n$ 1","tags":[{"name":"OI\u5b66\u4e60","slug":"OI\u5b66\u4e60","permalink":"https:\/\/skywt.cn\/tag\/OI%E5%AD%A6%E4%B9%A0\/"},{"name":"OI\u7b97\u6cd5","slug":"OI\u7b97\u6cd5","permalink":"https:\/\/skywt.cn\/tag\/OI%E7%AE%97%E6%B3%95\/"},{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u641c\u7d22","slug":"\u641c\u7d22","permalink":"https:\/\/skywt.cn\/tag\/%E6%90%9C%E7%B4%A2\/"},{"name":"\u4e8c\u5206\u67e5\u627e","slug":"\u4e8c\u5206\u67e5\u627e","permalink":"https:\/\/skywt.cn\/tag\/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"CodeForces 510D Fox And Jumping\uff1aDP + \u6570\u8bba + \u79bb\u6563","date":"2018-07-10T21:19:00+08:00","path":"https:\/\/skywt.cn\/posts\/cf510d","text":"\u5f88\u4f24\u5fc3\uff0c\u4e3a\u4ec0\u4e48NOIP\u4e0d\u80fd\u7528 C++11\u2026\u2026\nCodeForces 510D Fox And Jumping\uff1a510D\n\nProblem\nFox Ciel is playing a game. In this game there is an infinite long tape with cells indexed by integers (positive, negative and zero). At the beginning she is standing at the cell 0.\nThere are also n cards, each card has 2 attributes: length $l_i$ and cost $c_i$. If she pays $c_i$ dollars then she can apply i-th card. After applying i-th card she becomes able to make jumps of length $l_i$, i. e. from cell $x$ to cell $(x\u2009-\u2009l_i)$ or cell $(x\u2009+\u2009l_i)$.\nShe wants to be able to jump to any cell on the tape (possibly, visiting some intermediate cells). For achieving this goal, she wants to buy some cards, paying as little money as possible.\nIf this is possible, calculate the minimal cost.\nInput\nThe first line contains an integer n $(1\u2009\u2264\u2009n\u2009\u2264\u2009300)$, number of cards.\nThe second line contains n numbers $l_i$ $(1\u2009\u2264\u2009l_i\u2009\u2264\u200910^9)$, the jump lengths of cards.\nThe third line contains n numbers $c_i$ $(1\u2009\u2264\u2009c_i\u2009\u2264\u2009105)$, the costs of cards.\nOutput\nIf it is impossible to buy some cards and become able to jump to any cell, output -1. Otherwise output the minimal cost of buying such set of cards.\nExamples\ninput #1\n3\n100 99 9900\n1 1 1\nOutput #1\n2\nInput #2\n5\n10 20 30 40 50\n1 1 1 1 1\nOutput #2\n-1\nInput #3\n8\n4264 4921 6321 6984 2316 8432 6120 1026\n4264 4921 6321 6984 2316 8432 6120 1026\nOutput #3\n7237\nTranslation\n\u9898\u76ee\u5927\u610f\u662f\uff1aFox \u73b0\u5728\u5728\u4e00\u4e2a\u4e00\u7ef4\u6570\u8f74\u4e0a\uff0c\u7ed9\u5b9a N \u5f20\u5361\u7247\uff0c\u9009\u6bcf\u5f20\u5361\u5206\u522b\u8981\u4ed8 $P_i$ \u7684\u94b1\uff0c\u53ef\u4ee5\u8ba9 Fox \u6709\u8d70 $L_i$ \u957f\u5ea6\u7684\u6280\u80fd\u3002\u95ee\u4f60\u6700\u5c11\u8981\u591a\u5c11\u94b1\u4e70\u5361\u7247\u53ef\u4ee5\u8ba9 Fox \u62b5\u8fbe\u6570\u8f74\u4e0a\u6bcf\u4e2a\u5730\u65b9\u3002\nSolution\n\u663e\u7136\u8981\u901a\u8fc7\u201c\u67d0\u79cd\u64cd\u4f5c\u201d\u7ec4\u5408\u51fa 1\uff0c\u6709 1 \u5c31\u53ef\u4ee5\u94fa\u6ee1\u6570\u8f74\u4e86\uff0c\u56e0\u4e3a 1 \u662f\u6240\u6709\u6b63\u6574\u6570\u7684\u56e0\u5b50\u3002\u90a3\u4e48\u5bf9\u4e8e\u4e24\u5f20\u5361 i \u548c j \uff0c\u90fd\u8d2d\u4e70\u4ee5\u540e\u53ef\u4ee5\u7ec4\u5408\u51fa\u7684\u6700\u5c0f\u5355\u4f4d\u5c31\u662f $gcd(L_i,L_j)$ \u3002\u6240\u4ee5\u8fd9\u9898\u5c31\u8f6c\u5316\u6210\uff1a\n\u4ece N \u4e2a\u6570\u5b57\u91cc\u9009\u62e9\u4e00\u90e8\u5206\uff0c\u4f7f\u5f97\u5b83\u4eec\u7684 $L_i$ \u6700\u5927\u516c\u56e0\u6570\u4e3a 1\uff0c\u5e76\u4e14 $\\sum P_i$ \u6700\u5c0f\u3002\n\u8fd9\u6837\u7684\u9898\u76ee\u6211\u4eec\u5f88\u5bb9\u6613\u4ee4\u6211\u4eec\u60f3\u5230DP\uff1aF[i][j][k] \u8868\u793a\u524d i \u4e2a\u6570\u5b57\u91cc\u9009\u62e9\u4e86 j \u4e2a\uff0c\u5e76\u4e14\u5b83\u4eec\u7684\u6700\u5927\u516c\u56e0\u6570\u662f k\u3002\u5f88\u5feb\u6211\u4eec\u5c31\u53d1\u73b0\u4e86\u95ee\u9898\uff1a\u9898\u76ee\u91cc\u8bf4 $(1\u2009\u2264\u2009l_i\u2009\u2264\u200910^9)$ \u2026\u2026\u8fd9\u6837\u6570\u7ec4\u65e0\u8bba\u5982\u4f55\u5b58\u4e0d\u4e0b\u7684\u2026\u2026\u4f46\u662f\uff01\uff01\uff01\u53ef\u4ee5\u8bc1\u660e\u6700\u591a\u53ea\u6709 $N^2$ \u4e2a\u6700\u5927\u516c\u56e0\u6570\uff01\u90a3\u4e48\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u7528 map \u8fdb\u884c\u79bb\u6563\u3002\u4f46\u662f\u8fd9\u6837\u5185\u5b58\u597d\u50cf\u8fd8\u662f\u4f1a\u7206\u70b8\u2026\u2026\u63a8\u51fa\u8f6c\u79fb\u65b9\u7a0b\u4ee5\u540e\u53d1\u73b0\uff1a\u5f53\u524d\u72b6\u6001\u53ea\u4e0e i-1 \u7684\u72b6\u6001\u6709\u5173\uff01\u90a3\u4e48\u53ef\u4ee5\u7528\u6eda\u52a8\u6570\u7ec4\u3002\u5185\u5b58\u5c31\u4f18\u5316\u4e0b\u6765\u4e86\uff5e\uff5e\n\u601d\u8003\u4e00\u4e0b\uff0c\u5f88\u5bb9\u6613\u5f97\u51fa\u8f6c\u79fb\u65b9\u7a0b\u3002\u53ea\u8981\u6ce8\u610f\u51e0\u4e2a\u7ec6\u8282\u5c31\u53ef\u4ee5\u4e86\u3002\uff08\u4ee3\u7801\u5982\u4e0b\uff09\nCode\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;map&gt;\nusing namespace std;\nconst int maxn=305;\nint n,a[maxn],p[maxn],to[maxn*maxn],f[2][maxn][maxn*maxn],cnt=0,ans,INF;\nmap &lt;int,int&gt; back; \/\/ \u4e3a\u4e86\u538b\u7f29\u5185\u5b58\uff0c\u5efa\u7acb\u6620\u5c04\u5173\u7cfb (\u79bb\u6563)\ninline int read(){\n    int ret=0,f=1;char ch=getchar();\n    while (ch&lt;'0'||ch&gt;'9'){if (ch=='-') f=-1;ch=getchar();}\n    while (ch&gt;='0'&amp;&amp;ch&lt;='9') ret=ret*10+ch-'0',ch=getchar();\n    return ret*f;\n}\ninline int gcd(int x,int y){\n    if (y==0) return x;\n    return gcd(y,x%y);\n}\nint main(){\n    n=read();\n    for (int i=1;i&lt;=n;i++) a[i]=read();\n    for (int i=1;i&lt;=n;i++) p[i]=read();\n    memset(f,63,sizeof(f));INF=f[0][0][0];\n    cnt++;to[cnt]=0;back[0]=cnt; \/\/ \u5efa\u7acb\u57fa\u672c\u6620\u5c04\u5355\u4f4d\u7684\u8fc7\u7a0b\n    f[0][0][1]=0;\n    for (int i=1;i&lt;=n;i++)\n    for (int j=0;j&lt;=i;j++){\n        int oldcnt=cnt;\n        for (int k=1;k&lt;=oldcnt;k++){\n            if (f[1-(i&amp;1)][j][k]&lt;f[i&amp;1][j][k]) f[i&amp;1][j][k]=f[1-(i&amp;1)][j][k];\n\n            if (j==0||f[1-(i&amp;1)][j-1][k]==INF) continue;\n            int now=gcd(to[k],a[i]);\n            if (back[now]==0) {cnt++;to[cnt]=now;back[now]=cnt;}\n            int nowx=back[now];\n            if (f[1-(i&amp;1)][j-1][k]+p[i] &lt; f[i&amp;1][j][nowx]) f[i&amp;1][j][nowx]=f[1-(i&amp;1)][j-1][k]+p[i];\n        }\n    }\n    ans=INF;int st=back[1];\n    if (st) for (int i=1;i&lt;=n;i++) if (f[n&amp;1][i][st]&lt;ans) ans=f[n&amp;1][i][st];\n    if (ans-INF) printf(\"%d\\n\",ans); else printf(\"-1\\n\");\n    return 0;\n}\n\n\u81ea\u8c6a\u5730\uff0c\u5b8c\u5168\u81ea\u5df1\u60f3\u51fa\u6765\u7684\uff5e\uff5e\uff5e","tags":[{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u52a8\u6001\u89c4\u5212\u7c7b\u578b\u9898","slug":"\u52a8\u6001\u89c4\u5212\u7c7b\u578b\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB%E5%9E%8B%E9%A2%98\/"},{"name":"\u6570\u8bba","slug":"\u6570\u8bba","permalink":"https:\/\/skywt.cn\/tag\/%E6%95%B0%E8%AE%BA\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"\u6b27\u62c9\u51fd\u6570 \u03c6(n) \u7684\u51e0\u4e2a\u5e38\u7528\u6027\u8d28","date":"2018-07-11T18:29:25+08:00","path":"https:\/\/skywt.cn\/posts\/phinplus","text":"\u4e4b\u524d\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u6b27\u62c9\u51fd\u6570 $\\varphi(n)$ \u7684\u8ba1\u7b97\u516c\u5f0f\uff1a\n\\displaystyle \\varphi (n)=n \\ast \\prod_{i-1}^{r} (\\frac {p_i-1} {p_i})\n\u6211\u4eec\u8fd8\u77e5\u9053\u5b83\u7684\u4e24\u6761\u6027\u8d28\uff1a\n\u5982\u679c$\\varphi(x)$\u4e2d\u7684x\u662f\u8d28\u6570 p \u7684 k \u6b21\u5e42\uff0c\u90a3\u4e48 $\\displaystyle \\varphi (x)=\\varphi (p^k)=(p-1)p^{k-1}$ \uff1b\n\u6b27\u62c9\u51fd\u6570\u662f\u79ef\u6027\u51fd\u6570\uff0c\u5982\u679c x \u548c y \u4e92\u8d28\uff0c\u5219 $\\varphi(xy)=\\varphi(x) \\varphi(y)=(x-1)(y-1)$ \u3002\n\u4eca\u5929\u6211\u4eec\u8981\u8bc1\u660e\u4e0a\u8ff0\u6027\u8d28\uff0c\u518d\u4ecb\u7ecd\u51e0\u6761\u65b0\u7684\u6027\u8d28\u3002\n\n\u6e29\u99a8\u63d0\u793a\uff1a\n\u672c\u6587\u4e2d\u6709\u5927\u91cf KaTeX \u516c\u5f0f\uff0c\u8bf7\u786e\u4fdd\u6d4f\u89c8\u5668\u652f\u6301\uff0c\u5426\u5219\u5361\u5230\u8d85\u4e4e\u4f60\u60f3\u8c61\u3002\n\u672c\u6587\u4e2d (a,b) \u6216\u8005 gcd(a,b) \u8868\u793aa\u3001b\u7684\u6700\u5927\u516c\u56e0\u6570\u3002\n\u672c\u6587\u96b6\u5c5e&lceil; \u6570\u8bba\u5b66\u4e60\u7cfb\u5217 &rfloor;\u3002\n\u672c\u6587\u662f \u6b27\u62c9\u51fd\u6570\u3001\u8d39\u9a6c\u5c0f\u5b9a\u7406\u4e0e\u6b27\u62c9\u5b9a\u7406\u8be6\u89e3 \u4e00\u6587\u7684\u8865\u5145\u3002\u5efa\u8bae\u5148\u9605\u8bfb\u540e\u8005\u3002\n\u5f53 x \u4e3a\u8d28\u6570 p \u7684 k \u6b21\u5e42\u65f6\n$\\varphi(x)$ \u4e2d\u7684 x \u662f\u8d28\u6570 p \u7684 k \u6b21\u5e42\u65f6\uff1a\n\\displaystyle \\varphi (x)=\\varphi (p^k)=p^k-p^{k-1}=(p-1)p^{k-1}\n\u8bc1\u660e\uff1a\u5c0f\u4e8e\u7b49\u4e8e $p^k$ \u7684\u6b63\u6574\u6570\u4e2a\u6570\u4e3a $p^k$ \u4e2a\uff0c\n\u5176\u4e2d\u548c $p$ \u4e0d\u4e92\u8d28\u7684\u6b63\u6574\u6570\u6709\uff1a$1 \\ast p, 2 \\ast p, \\dots ,r \\ast p$\u3002\n\u663e\u7136\u53ef\u4ee5\u5f97\u5230\uff1a$r=\\frac {p^k} {p}-1 = p^{k-1}$\u3002\u5269\u4e0b\u7684\u5c31\u662f\u4e0e $p$ \u4e92\u8d28\u7684\u3002\n\u90a3\u4e48\u5c31\u5f97\u5230\u4e86\uff1a$\\varphi (n)=p^k-p^{k-1}$\u3002\n\u6b27\u62c9\u51fd\u6570\u662f\u79ef\u6027\u51fd\u6570\n\\displaystyle \\varphi(nm)=\\varphi (n) \\ast \\varphi (m),(n,m)=1\n\u8bc1\u660e\uff1a\u8981\u8bc1\u660e\u8fd9\u4e2a\u516c\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u753b\u5f20\u8868\uff1a\n\\displaystyle\n\\begin{matrix}\n1 &amp; 2 &amp; \\cdots &amp; r &amp; \\cdots &amp; m \\\\\nm+1 &amp; m+2 &amp; \\cdots &amp; m+r &amp; \\cdots &amp; 2m \\\\\n\\cdots &amp; \\cdots &amp; \\cdots &amp; \\cdots &amp; \\cdots &amp; \\cdots \\\\\n(n-t)m+1 &amp; (n-t)m+2 &amp; \\cdots &amp; (n-t)m+r &amp; \\cdots &amp; (n-t+1)m \\\\\n\\cdots &amp; \\cdots &amp; \\cdots &amp; \\cdots &amp; \\cdots &amp; \\cdots \\\\\n(n-1)m+1 &amp; (n-1)m+2 &amp; \\cdots &amp; (n-1)m+r &amp; \\cdots &amp; nm \\\\\n\\end{matrix}\n\u5728\u8fd9\u5f20\u8868\u91cc\uff0c\u6bcf\u884c\u90fd\u662f\u4e00\u4e2a\u6a21 n \u7684\u5b8c\u5168\u5269\u4f59\u7cfb\uff0c\u5176\u4e2d\u6709 $\\varphi(n)$ \u4e2a\u4e0e n \u4e92\u8d28\u7684\u6570\u5b57\uff1b\u6bcf\u5217\u90fd\u662f\u4e00\u4e2a\u6a21 m \u7684\u5b8c\u5168\u5269\u4f59\u7cfb\uff0c\u5176\u4e2d\u6709 $\\varphi (m)$ \u4e2a\u4e0e m \u4e92\u8d28\u7684\u6570\u5b57\u3002\u4e00\u4e2a\u6570\u5b57\u8981\u548c nm \u4e92\u8d28\uff0c\u90a3\u4e48\u5b83\u5c31\u8981\u548c n \u4e92\u8d28\u53c8\u548c m \u4e92\u8d28\u3002\u90a3\u4e48\u4e00\u5171\u5c31\u6709 $\\varphi(n)\\varphi(m)$ \u4e2a\u4e0e nm \u4e92\u8d28\u7684\u6570\u5b57\uff0c\u4e5f\u5c31\u662f\u8bf4 $\\varphi (nm)=\\varphi(n)\\varphi(m)$\u3002\n\u5f53 n \u4e3a\u5947\u6570\u65f6\n\u5f53 n \u4e3a\u5947\u6570\u65f6\uff0c$\\varphi (2 \\ast n)=\\varphi (n)$\u3002\n\u8bc1\u660e\uff1a\u5f88\u663e\u7136\uff0c$\\varphi(2\\ast n)=\\varphi(2) \\ast \\varphi(n)=\\varphi(n)$\u3002\np \u6574\u9664 n\/p \u65f6\n\\varphi(n)=\\varphi(n\/p)\\ast p \\text{\uff0c\u5f53 }p|(n\/p) \u3002\n\u8bc1\u660e\uff1a\u56e0\u4e3a $p|(n\/p)$ \uff0c\u6240\u4ee5 n \u548c n\/p \u6709\u76f8\u540c\u7684\u8d28\u56e0\u5b50\uff0c\u5373 $r_1=r_2$ \u5e76\u4e14 $\\forall p_i=p_j$ \u3002\u4e8e\u662f\uff1a\n\\displaystyle\n\\varphi (n\/p)=n\/p \\ast \\prod_{i-1}^{r} (\\frac {p_i-1} {p_i}) \\\\\n\\varphi (n)=n \\ast \\prod_{i-1}^{r} (\\frac {p_i-1} {p_i})= p \\ast n\/p \\ast \\prod_{i-1}^{r} (\\frac {p_i-1} {p_i}) = p\\ast \\varphi(n\/p)\n\u03c6(n)=\u03c6(n\/p)&#42;(p-1)\n\u5f53 $(p,n\/p)=1$\uff0c\u5e76\u4e14 $p$ \u662f\u8d28\u6570\u65f6\u3002\n\\varphi(n)=\\varphi(n\/p)\\ast(p-1)\n\u8bc1\u660e\uff1a\u56e0\u4e3a p \u662f\u8d28\u6570\uff0c\u6240\u4ee5 $\\varphi(p)=p-1$ \u3002\u5219\uff1a\n\\varphi(n\/p)\\ast(p-1) = \\varphi(n\/p)\\ast \\varphi(p) =\\varphi(n)\nn \u7684\u6240\u6709\u56e0\u5b50\u6b27\u62c9\u51fd\u6570\u4e4b\u548c\u4e3a n\n\\displaystyle \\sum_{d|n} \\varphi(d)=n\n\u8bc1\u660e\uff1a\u8bbe $\\displaystyle f(n) = \\sum_{d|n} \\varphi(d)$\uff0c\u5e76\u4e14 $(n,m)=1$\uff0c\u5219\u6709\uff1a\n\\displaystyle f(nm)=\\sum_{d|nm} \\varphi(d)=(\\sum_{d|n}\\varphi(d))\\ast(\\sum_{d|m}\\varphi(d)) = f(n)\\ast f(m)\n\u6240\u4ee5 $f(n)$ \u662f\u79ef\u6027\u51fd\u6570\u3002\n\\displaystyle f(p^m)=\\sum_{d|p^m} \\varphi(d)=\\varphi(1)+\\varphi(p)+\\varphi(p^2)+\\dots+\\varphi(p^m)=1+(p-1)+(p^2-p)+\\dots+(p^m-p^{m-1})=p^m\n\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5c06 n \u8fdb\u884c\u6807\u51c6\u5206\u89e3\uff0c\u53ef\u4ee5\u5f97\u5230\uff1a\n\\displaystyle f(n)=\\prod_{i=1}^{m} f(p_i^{c_i})=\\prod_{i=1}^{m} p_i^{c_i}=n \\text{\uff0c\u5373 } \\displaystyle \\sum_{d|n} \\varphi(d)=n\n\n\u53c2\u8003\n\u6b27\u62c9\u51fd\u6570\u516c\u5f0f\u53ca\u5176\u8bc1\u660e_\u767e\u5ea6\u6587\u5e93\n\u6b27\u62c9\u51fd\u6570 | GoAway's Blog","tags":[{"name":"OI\u5b66\u4e60","slug":"OI\u5b66\u4e60","permalink":"https:\/\/skywt.cn\/tag\/OI%E5%AD%A6%E4%B9%A0\/"},{"name":"\u6570\u8bba","slug":"\u6570\u8bba","permalink":"https:\/\/skywt.cn\/tag\/%E6%95%B0%E8%AE%BA\/"}],"categories":[]},{"title":"C++\u4e2d\u7684128\u4f4d\u6574\u578b __int128","date":"2018-07-11T15:06:50+08:00","path":"https:\/\/skywt.cn\/posts\/cppint128","text":"C++\u91cc\u6709\u666e\u901a\u7684 32 \u4f4d\u6574\u6570\u7c7b\u578b int \u548c 64 \u4f4d\u6574\u6570\u7c7b\u578b long long\uff0c\u4f46\u662f\u5982\u679c\u6211\u4eec\u8981\u5b58\u4e00\u4e2a128\u4f4d\u7684\u6574\u6570\uff0c\u524d\u4e24\u4e2a\u4f3c\u4e4e\u5c31\u65e0\u80fd\u4e3a\u529b\u4e86\u3002\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u8981\u7528\u5230 &#95;&#95;int128\u8fd9\u79cd\u7c7b\u578b\u4e86\u3002\n\n\u5927\u5c0f\n32 \u4f4d\u6574\u6570 int \u7c7b\u578b\u7684\u8303\u56f4\u662f -2147483648 \u5230 2147483647\uff0c\u4e5f\u5c31\u662f $-2^{31}$ \u5230 $2^{31}-1$\u3002\n64 \u4f4d\u6574\u6570 long long \u7c7b\u578b\u8303\u56f4\u662f $-2^{63}$ \u5230 $2^{63}-1$\u3002\n\u90a3\u4e48 &#95;&#95;iint128 \u7c7b\u578b\u7684\u8303\u56f4\u5f53\u7136\u5c31\u662f $-2^{127}$ \u5230 $2^{127}-1$\u3002\u5f53\u7136\u8fd9\u662f\u4e2a\u5f88\u5927\u7684\u6570\u5b57\u4e86\u3002\n\uff08\u6211\u4f9d\u7a00\u8bb0\u5f97\uff0c\u5728 Pascal \u4e0b 128 \u4f4d\u6574\u6570\uff08\u4e0d\u5e26\u7b26\u53f7\uff09\u662fqword\u2026\u2026\uff09\n\u5b9a\u4e49\n\u5bf9__int128 \u7c7b\u578b\u53d8\u91cf\u7684\u5b9a\u4e49\u4e0e\u666e\u901a\u7c7b\u578b\u6ca1\u6709\u5dee\u522b\uff1a\nconst __int128 x=312473910479474312;\n__int128 a,b;\n\u8bfb\u5165\u4e0e\u8f93\u51fa\n\u9ed8\u8ba4\u7684 cin \u548c cout \u90fd\u662f\u6ca1\u6cd5\u8bfb\u5165\u6216\u8005\u8f93\u51fa &#95;&#95;int128 \u7c7b\u578b\u7684\uff0c\u90fd\u4f1a\u62a5\u9519\u3002printf \u91cc\u9762\u4f3c\u4e4e\u4e5f\u6ca1\u6709 &#95;&#95;int128 \u7c7b\u578b\u5bf9\u5e94\u7684\u7f16\u7801\uff0c\u90a3\u4e48\u600e\u4e48\u529e\u5462\uff1f\u6700\u597d\u7684\u65b9\u6cd5\u662f\u81ea\u5df1\u5199\u8f93\u51fa\u51fd\u6570\uff1a\ninline void write(__int128 x){\n    if(x&gt;9) write(x\/10);\n    putchar(x%10+'0');\n}\n\u7528\u9012\u5f52\u7684\u65b9\u5f0f\uff0c\u4e0d\u9700\u8981\u53e6\u5f00\u7a7a\u95f4\u5b58\uff0c\u5f88\u65b9\u4fbf\u3002\n\u5173\u4e8e\u7f16\u8bd1\u9519\u8bef\n\u636e\u8bf4\u5728\u8bb8\u591a\u7248\u672c gcc\/g++ \u91cc\u76f4\u63a5\u5f00 &#95;&#95;int128 \u4f1a\u7f16\u8bd1\u9519\u8bef\uff08\u4f46\u662f\u6211\u5728 Linux \u4e0b\u5e76\u6ca1\u6709\u9047\u5230\uff09\uff0c\u4f46\u662f\u5728\u5404\u5927 OJ \u7684\u8bc4\u6d4b\u673a\u4e0a\u662f\u4e0d\u4f1a\u51fa\u95ee\u9898\u7684\u3002\u53ef\u4ee5\u7528\u6d1b\u8c37\u7684\u5728\u7ebf IDE \u5c1d\u8bd5\u7f16\u8bd1\u3002","tags":[{"name":"C++\u8bed\u8a00","slug":"C-\u8bed\u8a00","permalink":"https:\/\/skywt.cn\/tag\/C-%E8%AF%AD%E8%A8%80\/"}],"categories":[]},{"title":"\uff08\u8f6c\uff09C++ \u4e2d Vector \u7684\u4f7f\u7528\u603b\u7ed3","date":"2018-07-12T13:52:56+08:00","path":"https:\/\/skywt.cn\/posts\/cpp-vector","text":"\u5728c++\u4e2d\uff0cvector \u662f\u4e00\u4e2a\u5341\u5206\u6709\u7528\u7684\u5bb9\u5668\u3002\u5b83\u80fd\u591f\u50cf\u5bb9\u5668\u4e00\u6837\u5b58\u653e\u5404\u79cd\u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u7b80\u5355\u5730\u8bf4\uff0cvector\u662f\u4e00\u4e2a\u80fd\u591f\u5b58\u653e\u4efb\u610f\u7c7b\u578b\u7684\u52a8\u6001\u6570\u7ec4\uff0c\u80fd\u591f\u589e\u52a0\u548c\u538b\u7f29\u6570\u636e\u3002\nvector \u5728C++ \u6807\u51c6\u6a21\u677f\u5e93\u4e2d\u7684\u90e8\u5206\u5185\u5bb9\uff0c\u5b83\u662f\u4e00\u4e2a\u591a\u529f\u80fd\u7684\uff0c\u80fd\u591f\u64cd\u4f5c\u591a\u79cd\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u7684\u6a21\u677f\u7c7b\u548c\u51fd\u6570\u5e93\u3002\n\n\u7279\u522b\u6ce8\u610f\n\u4f7f\u7528vector\u9700\u8981\u6ce8\u610f\u4ee5\u4e0b\u51e0\u70b9\uff1a\n\n\n\u5982\u679c\u4f60\u8981\u8868\u793a\u7684\u5411\u91cf\u957f\u5ea6\u8f83\u957f\uff08\u9700\u8981\u4e3a\u5411\u91cf\u5185\u90e8\u4fdd\u5b58\u5f88\u591a\u6570\uff09\uff0c\u5bb9\u6613\u5bfc\u81f4\u5185\u5b58\u6cc4\u6f0f\uff0c\u800c\u4e14\u6548\u7387\u4f1a\u5f88\u4f4e\uff1b\n\nVector\u4f5c\u4e3a\u51fd\u6570\u7684\u53c2\u6570\u6216\u8005\u8fd4\u56de\u503c\u65f6\uff0c\u9700\u8981\u6ce8\u610f\u5b83\u7684\u5199\u6cd5\uff1a\n\ndouble Distance(vector&lt;int&gt;&amp;a, vector&lt;int&gt;&amp;b)\n\u5176\u4e2d\u7684\u201c&amp;\u201d\u7edd\u5bf9\u4e0d\u80fd\u5c11\uff01\uff01\uff01\n\u5b9e\u4f8b\n\u7b80\u5355\u7684\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b\uff1a\nvector&lt;int&gt;test;\uff1a\u5efa\u7acb\u4e00\u4e2a vector\uff0cint \u4e3a\u6570\u7ec4\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\uff0ctest \u4e3a\u52a8\u6001\u6570\u7ec4\u540d\ntest.push_back(1);\ntest.push_back(2); \/\/\u628a1\u548c2\u538b\u5165vector\uff0c\u8fd9\u6837test[0]\u5c31\u662f1,test[1]\u5c31\u662f2\n\u81ea\u5df1\u89c1\u5230\u7684\u5b9e\u4f8b\uff1a\nvector&lt;vector&lt;Point2f&gt; &gt; points;  \/\/\u5b9a\u4e49\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\npoints[0].size();   \/\/\u6307\u7b2c\u4e00\u884c\u7684\u5217\u6570\n\u57fa\u672c\u64cd\u4f5c\n\n\n\u5934\u6587\u4ef6\uff1a#include&lt;vector&gt;\n\n\n\u521b\u5efavector\u5bf9\u8c61\uff1avector&lt;int&gt; vec;\n\n\n\u5c3e\u90e8\u63d2\u5165\u6570\u5b57\uff1avec.push_back(a);\n\n\n\u4f7f\u7528\u4e0b\u6807\u8bbf\u95ee\u5143\u7d20\uff1acout&lt;&lt;vec[0]&lt;&lt;endl; \u8bb0\u4f4f\u4e0b\u6807\u662f\u4ece0\u5f00\u59cb\u7684\u3002\n\n\u4f7f\u7528\u8fed\u4ee3\u5668\u8bbf\u95ee\u5143\u7d20\n\nvector&lt;int&gt;::iterator it;\nfor(it=vec.begin();it!=vec.end();it++) cout&lt;&lt;*it&lt;&lt;endl;\n\n\n\n\u63d2\u5165\u5143\u7d20\uff1avec.insert(vec.begin()+i,a); \u5728\u7b2ci+1\u4e2a\u5143\u7d20\u524d\u9762\u63d2\u5165a;\n\n\u5220\u9664\u5143\u7d20\uff1avec.erase(vec.begin()+2); \u5220\u9664\u7b2c3\u4e2a\u5143\u7d20\n\nvec.erase(vec.begin()+i,vec.end()+j); \u5220\u9664\u533a\u95f4[i,j-1];\u533a\u95f4\u4ece0\u5f00\u59cb\n\n\n\u5411\u91cf\u5927\u5c0f\uff1avec.size();\n\n\u6e05\u7a7a\uff1avec.clear();\n\n\u7279\u522b\u63d0\u793a\uff1a\u8fd9\u91cc\u6709 begin() \u4e0e end() \u51fd\u6570\u3001front() \u4e0e back() \u7684\u5dee\u522b\n\u91cd\u8981\u8bf4\u660e\nvector\u7684\u5143\u7d20\u4e0d\u4ec5\u4ec5\u53ef\u4ee5\u662fint,double,string,\u8fd8\u53ef\u4ee5\u662f\u7ed3\u6784\u4f53\uff0c\u4f46\u662f\u8981\u6ce8\u610f\uff1a\u7ed3\u6784\u4f53\u8981\u5b9a\u4e49\u4e3a\u5168\u5c40\u7684\uff0c\u5426\u5219\u4f1a\u51fa\u9519\u3002\n#include&lt;stdio.h&gt;\n#include&lt;algorithm&gt;\n#include&lt;vector&gt;\n#include&lt;iostream&gt;\nusing namespace std;\n\ntypedef struct rect{\n    int id;\n    int length;\n    int width;\n\n\u3000\u3000\/\/\u5bf9\u4e8e\u5411\u91cf\u5143\u7d20\u662f\u7ed3\u6784\u4f53\u7684\uff0c\u53ef\u5728\u7ed3\u6784\u4f53\u5185\u90e8\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\uff0c\u4e0b\u9762\u6309\u7167id,length,width\u5347\u5e8f\u6392\u5e8f\u3002\n\u3000\u3000bool operator&lt; (const rect &amp;a)  const{\n        if(id!=a.id)\n            return id&lt;a.id;\n        else{\n            if(length!=a.length)\n                return length&lt;a.length;\n            else\n                return width&lt;a.width;\n        }\n    }\n}Rect;\n\nint main(){\n    vector&lt;Rect&gt; vec;\n    Rect rect;\n    rect.id=1;\n    rect.length=2;\n    rect.width=3;\n    vec.push_back(rect);\n    vector&lt;Rect&gt;::iterator it=vec.begin();\n    cout&lt;&lt;(*it).id&lt;&lt;' '&lt;&lt;(*it).length&lt;&lt;' '&lt;&lt;(*it).width&lt;&lt;endl;    \n\nreturn 0;\n\n}\n\n\u7b97\u6cd5\n\n\u4f7f\u7528reverse\u5c06\u5143\u7d20\u7ffb\u8f6c\uff1a\u9700\u8981\u5934\u6587\u4ef6 #include&lt;algorithm&gt;\n\nreverse(vec.begin(),vec.end());\u5c06\u5143\u7d20\u7ffb\u8f6c\uff0c\u5373\u9006\u5e8f\u6392\u5217\u3002\uff08\u5728vector\u4e2d\uff0c\u5982\u679c\u4e00\u4e2a\u51fd\u6570\u4e2d\u9700\u8981\u4e24\u4e2a\u8fed\u4ee3\u5668\uff0c\u4e00\u822c\u540e\u4e00\u4e2a\u90fd\u4e0d\u5305\u542b\uff09\n\n\u4f7f\u7528sort\u6392\u5e8f\uff1a\u9700\u8981\u5934\u6587\u4ef6 #include&lt;algorithm&gt;\uff0c\n\nsort(vec.begin(),vec.end()); \uff08\u9ed8\u8ba4\u662f\u6309\u5347\u5e8f\u6392\u5217,\u5373\u4ece\u5c0f\u5230\u5927\uff09\n\u53ef\u4ee5\u901a\u8fc7\u91cd\u5199\u6392\u5e8f\u6bd4\u8f83\u51fd\u6570\u6309\u7167\u964d\u5e8f\u6bd4\u8f83\uff0c\u5982\u4e0b\uff1a\n\u5b9a\u4e49\u6392\u5e8f\u6bd4\u8f83\u51fd\u6570\uff1a\nbool Comp(const int &amp;a,const int &amp;b){\n    return a&gt;b;\n}\n\n\u8c03\u7528\u65f6\uff1asort(vec.begin(),vec.end(),Comp)\uff0c\u8fd9\u6837\u5c31\u964d\u5e8f\u6392\u5e8f\u3002\n\n\u8f93\u51fa Vector \u4e2d\u7684\u5143\u7d20\n\nvector&lt;float&gt; vecClass; \nint nSize = vecClass.size();\n\n\u6253\u5370 vecClass \u65b9\u6cd5\u4e00\uff1a\nfor(int i=0;i&lt;nSize;i++) {\n   cout&lt;&lt;vecClass[i]&lt;&lt;\"     \";\n}\n   cout&lt;&lt;endl;\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff1a\u4ee5\u65b9\u6cd5\u4e00\u8fdb\u884c\u8f93\u51fa\u65f6\uff0c\u6570\u7ec4\u7684\u4e0b\u8868\u5fc5\u987b\u4fdd\u8bc1\u662f\u6574\u6570\u3002\n\u6253\u5370 vecClass \u65b9\u6cd5\u4e8c\uff1a\nfor(int i=0;i&lt;nSize;i++)  {\n   cout&lt;&lt;vecClass.at(i)&lt;&lt;\"     \";\n}\n   cout&lt;&lt;endl;\n\n\u6253\u5370 vecClass \u65b9\u6cd5\u4e09\uff1a\uff08\u8f93\u51fa\u67d0\u4e00\u6307\u5b9a\u7684\u6570\u503c\u65f6\u4e0d\u65b9\u4fbf\uff09\nfor(vector&lt;float&gt;::iterator it = vecClass.begin();it!=vecClass.end();it++) {\n    cout&lt;&lt;*it&lt;&lt;\"   \";\n}\n    cout&lt;&lt;endl;\n\n\u4e8c\u7ef4\u6570\u7ec4\u4f7f\u7528\uff1a\n#include \"stdafx.h\"\n#include &lt;cv.h&gt;\n#include &lt;vector&gt;\u00a0\n#include &lt;iostream&gt;\u00a0\nusing namespace std;\nint main(){\n    using namespace std;\n    int out[3][2] = { 1, 2, \n             3, 4,\n            5, 6 };\n    vector &lt;int*&gt; v1;\n\n    v1.push_back(out[0]);\n    v1.push_back(out[1]);\n    v1.push_back(out[2]);\n\n    cout &lt;&lt; v1[0][0] &lt;&lt; endl;\/\/1\n    cout &lt;&lt; v1[0][1] &lt;&lt; endl;\/\/2\n    cout &lt;&lt; v1[1][0] &lt;&lt; endl;\/\/3\n    cout &lt;&lt; v1[1][1] &lt;&lt; endl;\/\/4\n    cout &lt;&lt; v1[2][0] &lt;&lt; endl;\/\/5\n    cout &lt;&lt; v1[2][1] &lt;&lt; endl;\/\/6\n\n    return 0;\n}\n\nvector \u4e2d insert() \u7684\u7528\u6cd5\u8be6\u89e3\n\u8f6c\u8f7d\u81ea C++ \u4e2dvector\u7684\u4f7f\u7528\u65b9\u6cd5 - CSDN\u535a\u5ba2","tags":[{"name":"C++\u8bed\u8a00","slug":"C-\u8bed\u8a00","permalink":"https:\/\/skywt.cn\/tag\/C-%E8%AF%AD%E8%A8%80\/"},{"name":"STL","slug":"STL","permalink":"https:\/\/skywt.cn\/tag\/STL\/"}],"categories":[]},{"title":"\u77e9\u9635\u4e58\u6cd5\u4e0e\u77e9\u9635\u5feb\u901f\u5e42 \u6c42\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7b2c n \u9879","date":"2018-07-16T17:52:51+08:00","path":"https:\/\/skywt.cn\/posts\/matrix-multiply","text":"\u6590\u6ce2\u90a3\u5951\uff08Fibonacci\uff09\u6570\u5217\u7684\u9012\u63a8\u5f0f\u662f\uff1a$F_{i}=F_{i-1}+F_{i-2}$ \u3002\u6839\u636e\u8fd9\u4e2a\u9012\u63a8\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 $\\Theta (n)$ \u590d\u6742\u5ea6\u5185\u6c42\u51fa\u7b2c n \u9879\uff0c\u4f46\u662f\u5f53 n \u5f88\u5927\u65f6\uff0c\u8fd9\u79cd\u65b9\u6cd5\u5c31\u663e\u5f97\u5f88\u6162\u3002\u5176\u5b9e\u5229\u7528\u77e9\u9635\u5feb\u901f\u5e42\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 $\\Theta (\\log_2 n)$ \u5185\u6c42\u51fa\u7b2c n \u9879\u3002\n\n\u77e9\u9635\n\u5b9a\u4e49\n\u4e00\u4e2a m\u00d7n \u7684\u77e9\u9635\uff08matrix\uff09\u662f\u4e00\u4e2a\u7531 m \u884c\uff08row\uff09n \u5217\uff08column\uff09\u5143\u7d20\u6392\u5217\u6210\u7684\u77e9\u5f62\u9635\u5217\u3002\u77e9\u9635\u91cc\u7684\u5143\u7d20\u53ef\u4ee5\u662f\u6570\u5b57\u3001\u7b26\u53f7\u6216\u6570\u5b66\u5f0f\u3002\u4f8b\u5982\uff0c\u4ee5\u4e0b\u5c31\u662f\u4e00\u4e2a 2\u00d73 \u7684\u77e9\u9635\uff1a\n\\begin{bmatrix}\n   1 &amp; 2 &amp; 3 \\\\\\\\\n   4 &amp; 6 &amp;5\n\\end{bmatrix}\n\u77e9\u9635\u662f\u7ebf\u6027\u4ee3\u6570\u7684\u77e5\u8bc6\uff0c\u66f4\u591a\u8fd9\u91cc\u5c31\u4e0d\u4ecb\u7ecd\u4e86\u3002\n\u77e9\u9635\u7684\u52a0\u51cf\u6cd5\n\u77e9\u9635\u7684\u52a0\u6cd5\u51cf\u6cd5\u5f88\u7b80\u5355\uff1a\n\\begin{bmatrix}\n   1 &amp; 2 &amp; 3 \\\\\\\\\n   4 &amp; 6 &amp; 5\n\\end{bmatrix} +\n\\begin{bmatrix}\n   2 &amp; 1 &amp; 0 \\\\\\\\\n   2 &amp; 0 &amp; 1\n\\end{bmatrix} =\n\\begin{bmatrix}\n   3 &amp; 3 &amp; 3 \\\\\\\\\n   6 &amp; 6 &amp; 6\n\\end{bmatrix}\n\u51cf\u6cd5\u4e5f\u540c\u7406\u3002\n\u77e9\u9635\u4e58\u4ee5\u77e9\u9635\n\u77e9\u9635\u4e4b\u95f4\u7684\u76f8\u4e58\u5c31\u6bd4\u8f83\u590d (bian) \u6742 (tai) \u4e86\uff0c\u6839\u636e Wikipedia\uff1a\n\u77e9\u9635\u76f8\u4e58\u6700\u91cd\u8981\u7684\u65b9\u6cd5\u662f\u4e00\u822c\u77e9\u9635\u4e58\u79ef\u3002\u5b83\u53ea\u6709\u5728\u7b2c\u4e00\u4e2a\u77e9\u9635\u7684\u5217\u6570\uff08column\uff09\u548c\u7b2c\u4e8c\u4e2a\u77e9\u9635\u7684\u884c\u6570\uff08row\uff09\u76f8\u540c\u65f6\u624d\u6709\u5b9a\u4e49\u3002\u4e00\u822c\u5355\u6307\u77e9\u9635\u4e58\u79ef\u65f6\uff0c\u6307\u7684\u4fbf\u662f\u4e00\u822c\u77e9\u9635\u4e58\u79ef\u3002\u82e5 $A$ \u4e3a $ m\\times n $ \u77e9\u9635\uff0c$B$ \u4e3a $n\\times p$ \u77e9\u9635\uff0c\u5219\u4ed6\u4eec\u7684\u4e58\u79ef $AB$ (\u6709\u65f6\u8bb0\u505a $A \\cdot B$\uff09\u4f1a\u662f\u4e00\u4e2a $m\\times p$ \u77e9\u9635\u3002\u5176\u4e58\u79ef\u77e9\u9635\u7684\u5143\u7d20\u5982\u4e0b\u9762\u5f0f\u5b50\u5f97\u51fa\uff1a\n\\displaystyle AB_{ij} = \\sum_{r=1}^{n}a_{ir}b_{rj}= a_{i1}b_{1j}+a_{i2}b_{2j}+\\dots+a_{in}b_{nj}\n\u770b\u4e2a\u4f8b\u5b50\u5c31\u61c2\u4e86\uff1a\n\\begin{bmatrix}\n   1 &amp; 2 \\\\\\\\\n   4 &amp; 3\n\\end{bmatrix} +\n\\begin{bmatrix}\n   2 &amp; 1 \\\\\\\\\n   2 &amp; 0\n\\end{bmatrix} =\n\\begin{bmatrix}\n   3 &amp; 3 \\\\\\\\\n   6 &amp; 6\n\\end{bmatrix}\n\u7b2c\u4e00\u4e2a\u77e9\u9635\u7b2c\u4e00\u884c\u7684\u6bcf\u4e2a\u6570\u5b57\uff081 \u548c 2\uff09\u5404\u81ea\u4e58\u4ee5\u7b2c\u4e8c\u4e2a\u77e9\u9635\u7b2c\u4e00\u5217\u5bf9\u5e94\u4f4d\u7f6e\u7684\u6570\u5b57\uff082 \u548c 2\uff09\uff0c\u7136\u540e\u5c06\u4e58\u79ef\u76f8\u52a0\uff08 1 x 2 + 2 x 2\uff09\uff0c\u5f97\u5230\u7ed3\u679c\u77e9\u9635\u5de6\u4e0a\u89d2\u7684\u503c 6\u3002\u540c\u7406\uff0c\u5176\u4ed6\u7684\u51e0\u4e2a\u503c\u4e5f\u662f\u8fd9\u4e48\u7b97\u7684\u3002\u7ef4\u57fa\u767e\u79d1\u4e0a\u6709\u4e00\u5f20\u5f62\u8c61\u7684\u56fe\uff1a\n\n\u77e9\u9635\u5feb\u901f\u5e42\u6c42\u6590\u6ce2\u90a3\u5951\u6570\u5217\n\u5176\u5b9e POJ\u4e0a\u8fd9\u9053\u6a21\u677f\u9898 \u5df2\u7ecf\u544a\u8bc9\u4f60\u600e\u4e48\u505a\u4e86\uff1a\n\\displaystyle\n\\begin{bmatrix}\n   F_{n+1} &amp; F_n \\\\\\\\\n   F_n &amp; F_{n-1}\n\\end{bmatrix} =\n\\begin{bmatrix}\n   1 &amp; 1 \\\\\\\\\n   1 &amp; 0\n\\end{bmatrix}^n =\n\\underbrace{\n\\begin{bmatrix}\n   1 &amp; 1 \\\\\\\\\n   1 &amp; 0\n\\end{bmatrix}\n\\begin{bmatrix}\n   1 &amp; 1 \\\\\\\\\n   1 &amp; 0\n\\end{bmatrix}\\cdots\n\\begin{bmatrix}\n   1 &amp; 1 \\\\\\\\\n   1 &amp; 0\n\\end{bmatrix}\n}_ {\\text{n times}}\n\u4e5f\u5c31\u662f\u8bf4\u77e9\u9635$\n\\begin{bmatrix}\n1 & 1 \\\\\\\\\n1 & 0\n\\end{bmatrix} $ \u7684 n \u6b21\u5e42\u91cc\u9762\u56db\u4e2a\u6570\u5c31\u5206\u522b\u662f $F_{n+1}$\u3001$F_n$\u3001$F_n$\u3001$F_{n-1}$ \u3002\n\u4f8b\u9898\n\u6a21\u677f\u9898\n\u6d1b\u8c37 3390 \u3010\u6a21\u677f\u3011\u77e9\u9635\u5feb\u901f\u5e42\nPOJ3070 - Fibonacci\n\u7efc\u5408\nCodeForces 551D. GukiZ and Binary Operations\n\u4ee3\u7801\n\u4ee5\u4e0b\u662f\u6d1b\u8c37\u4e0a\u7684\u6a21\u677f\u9898\u4ee3\u7801\uff1a\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\nusing namespace std;\nconst int maxn=105,tt=1000000007;;\nint n;\nlong long m;\ninline int read(){\n    int ret=0,f=1;char ch=getchar();\n    while (ch&lt;'0'||ch&gt;'9') {if (ch=='-') f=-1;ch=getchar();}\n    while (ch&gt;='0'&amp;&amp;ch&lt;='9') ret=ret*10+ch-'0',ch=getchar();\n    return ret*f;\n}\nstruct Matrix{\n    int a[maxn][maxn];\n    void ReadMatrix(){\n        memset(a,0,sizeof(a));\n        for (int i=0;i&lt;n;i++)\n        for (int j=0;j&lt;n;j++) a[i][j]=read();\n    }\n    void Init(){\n        memset(a,0,sizeof(a));\n        for (int i=0;i&lt;n;i++) a[i][i]=1;\n    }\n    void Clear(){\n        memset(a,0,sizeof(a));\n    }\n    Matrix operator *(Matrix b){\n        Matrix c; c.Clear();\n        for (int i=0;i&lt;n;i++)\n        for (int j=0;j&lt;n;j++)\n        for (int k=0;k&lt;n;k++)\n            c.a[i][j]=((long long)c.a[i][j]+(long long)a[i][k]*b.a[k][j])%tt;\n        return c;\n    }\n    Matrix operator ^(long long b){\n        Matrix ret; ret.Init();\n        Matrix w;   w.Clear();\n        for (int i=0;i&lt;n;i++)\n        for (int j=0;j&lt;n;j++) w.a[i][j]=a[i][j];\n        while (b){\n            if (b%2) ret=ret*w;\n            b=b\/2;w=w*w;\n        }\n        return ret;\n    }\n    void Write(){\n        for (int i=0;i&lt;n;i++){\n            for (int j=0;j&lt;n;j++) printf(\"%d \",a[i][j]);\n            printf(\"\\n\");\n        }\n    }\n};\nint main(){\n    n=read();scanf(\"%lld\",&amp;m);\n    Matrix a; a.ReadMatrix();\n    \/\/ printf(\"Read part finished.\\n\");\n    a=a^m;\n    a.Write();\n    return 0;\n}\n\u4e0b\u9762\u662f POJ \u4e0a\u6a21\u677f\u9898\u4ee3\u7801\uff1a\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\nusing namespace std;\nconst int tt=10000;\nint n;\nstruct Matrix{\n    int a[3][3];\n    void Init(){\n        memset(a,0,sizeof(a));\n        a[0][0]=a[1][0]=a[0][1]=1;\n        a[1][1]=0;\n    }\n    void Clear(){\n        memset(a,0,sizeof(a));\n    }\n    Matrix operator *(Matrix b){\n        Matrix c; c.Clear();\n        for (int i=0;i&lt;2;i++)\n        for (int j=0;j&lt;2;j++)\n        for (int k=0;k&lt;2;k++)\n            c.a[i][j]=((long long)c.a[i][j]+(long long)a[i][k]*b.a[k][j])%tt;\n        return c;\n    }\n    Matrix operator ^(long long b){\n        Matrix ret; ret.Init();\n        Matrix w;   w.Clear();\n        for (int i=0;i&lt;2;i++)\n        for (int j=0;j&lt;2;j++) w.a[i][j]=a[i][j];\n        while (b){\n            if (b%2) ret=ret*w;\n            b=b\/2;w=w*w;\n        }\n        return ret;\n    }\n    void Write(){\n        for (int i=0;i&lt;2;i++){\n            for (int j=0;j&lt;2;j++) printf(\"%d \",a[i][j]);\n            printf(\"\\n\");\n        }\n    }\n};\nint main(){\n    scanf(\"%d\",&amp;n);n--;\n    while (n!=-2){\n        if (n==-1) printf(\"0\\n\"); else{\n            Matrix a; a.Init();\n            a=a^n;\n            printf(\"%d\\n\",a.a[1][0]);\n        }\n        scanf(\"%d\",&amp;n);n--;\n    }\n    return 0;\n}\n\u53c2\u8003\n\u77e9\u9635 - \u7ef4\u57fa\u767e\u79d1\uff0c\u81ea\u7531\u7684\u767e\u79d1\u5168\u4e66\n\u77e9\u9635\u4e58\u6cd5 - \u7ef4\u57fa\u767e\u79d1\uff0c\u81ea\u7531\u7684\u767e\u79d1\u5168\u4e66\n\u7406\u89e3\u77e9\u9635\u4e58\u6cd5 - \u962e\u4e00\u5cf0\u7684\u7f51\u7edc\u65e5\u5fd7","tags":[],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"CodeFoces 148D Bag of mice \u9898\u89e3\uff1a\u6982\u7387DP","date":"2018-07-22T19:11:30+08:00","path":"https:\/\/skywt.cn\/posts\/cf148d","text":"\u6982\u7387 DP \u6bd4\u8d77\u671f\u671b DP\uff0c\u53ef\u662f\u5bb9\u6613\u591a\u4e86\uff5e\nCodeFoces 148D Bag of mice \u9898\u76ee\u94fe\u63a5\n\nProblem\nThe dragon and the princess are arguing about what to do on the New Year's Eve. The dragon suggests flying to the mountains to watch fairies dancing in the moonlight, while the princess thinks they should just go to bed early. They are desperate to come to an amicable agreement, so they decide to leave this up to chance.\nThey take turns drawing a mouse from a bag which initially contains w white and b black mice. The person who is the first to draw a white mouse wins. After each mouse drawn by the dragon the rest of mice in the bag panic, and one of them jumps out of the bag itself (the princess draws her mice carefully and doesn't scare other mice). Princess draws first. What is the probability of the princess winning?\nIf there are no more mice in the bag and nobody has drawn a white mouse, the dragon wins. Mice which jump out of the bag themselves are not considered to be drawn (do not define the winner). Once a mouse has left the bag, it never returns to it. Every mouse is drawn from the bag with the same probability as every other one, and every mouse jumps out of the bag with the same probability as every other one.\nInput\nThe only line of input data contains two integers w and b (0\u2009\u2264\u2009w,\u2009b\u2009\u2264\u20091000).\nOutput\nOutput the probability of the princess winning. The answer is considered to be correct if its absolute or relative error does not exceed $10^{-\u20099}$\nExamples\nInput #1\n1 3\nOutput #1\n0.500000000\nInput #2\n5 5\nOutput #2\n0.658730159\nNote\nLet's go through the first sample. The probability of the princess drawing a white mouse on her first turn and winning right away is 1\/4. The probability of the dragon drawing a black mouse and not winning on his first turn is 3\/4  2\/3 = 1\/2. After this there are two mice left in the bag \u2014 one black and one white; one of them jumps out, and the other is drawn by the princess on her second turn. If the princess' mouse is white, she wins (probability is 1\/2  1\/2 = 1\/4), otherwise nobody gets the white mouse, so according to the rule the dragon wins.\nTranslation\n\u9898\u76ee\u5927\u610f\u662f\uff1a\u6709\u4e00\u4e2a\u516c\u4e3b\u548c\u4e00\u6761\u9f99\uff0c\u9f99\u60f3\u770b\u7f8e\u5973\u8df3\u821e\u4f46\u662f\u516c\u4e3b\u60f3\u53bb\u7761\u89c9\uff0c\u4ed6\u4eec\u8981\u201c\u8fbe\u6210\u4e00\u9879\u53cb\u597d\u534f\u8bae\u201d\uff0c\u6240\u4ee5\u4ed6\u4eec\u8981\u73a9\u4e2a\u6e38\u620f\u6765\u51b3\u5b9a\u2026\u2026\uff08OI\u9898\u76ee\u7684\u5957\u8def\uff09\u6709\u4e00\u4e2a\u6709 w \u53ea\u767d\u9f20\u548c b \u53ea\u9ed1\u9f20\u7684\u888b\u5b50\uff0c\u4ed6\u4eec\u8981\u968f\u673a\u62ff\u51fa\u8001\u9f20\uff0c\u516c\u4e3b\u5148\u62ff\uff0c\u5148\u62ff\u51fa\u767d\u9f20\u7684\u83b7\u80dc\u3002\u6bcf\u62ff\u51fa\u4e00\u53ea\u8001\u9f20\uff0c\u888b\u5b50\u91cc\u8001\u9f20\u5c31\u4f1a\u60ca\u614c\u5931\u63aa\uff0c\u5c31\u4f1a\u6709\u968f\u673a\u4e00\u53ea\u8001\u9f20\u7a9c\u51fa\u6765\u3002\u5982\u679c\u4ed6\u4eec\u90fd\u6ca1\u62ff\u5230\u767d\u9f20\uff0c\u5c31\u9f99\u8d62\u3002\u95ee\u4f60\u6700\u540e\u516c\u4e3b\u8d62\u7684\u6982\u7387\u3002\nSolution\n\u53ef\u4ee5\u60f3\u5230\u4e00\u4e2a DP\uff1a$F_{i,j}$ \u8868\u793a\u888b\u5b50\u91cc\u8fd8\u5269\u4e0b i \u53ea\u767d\u9f20\u548c j \u53ea\u9ed1\u9f20\uff0c\u73b0\u5728\u8f6e\u5230\u516c\u4e3b\u62ff\uff0c\u516c\u4e3b\u8d62\u7684\u6982\u7387\u3002\u679a\u4e3e\u5f53\u524d\u72b6\u6001\uff0c\u6211\u4eec\u8981\u8003\u8651\u4e24\u79cd\u60c5\u51b5\uff1a\n\n\u516c\u4e3b\u62ff\u7684\u65f6\u5019\uff0c\u4e00\u62ff\u5c31\u62ff\u5230\u767d\u9f20\u4e86\uff0c\u6982\u7387\uff1ai \/ (i+j)\uff1b\n\u516c\u4e3b\u6ca1\u62ff\u5230\u767d\u9f20\uff0c\u9f99\u4e5f\u6ca1\u62ff\u5230\u767d\u9f20\u3002\u7565\u5fae\u590d\u6742\uff0c\u8003\u8651\u8dd1\u51fa\u7684\u8001\u9f20\u7684\u989c\u8272\u3002\n\nCode\n\u4e0b\u9762\u662f\u6211\u8d85\u7ea7\u8be6\u7ec6\u6ce8\u91ca\uff08\u5e9f\u8bdd\u8fde\u7bc7\uff09\u7684\u4ee3\u7801\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\nusing namespace std;\nconst int maxn=1005;\nint n,m;\ndouble f[maxn][maxn];\nint main(){\n    scanf(\"%d%d\",&amp;n,&amp;m);\n    for (int i=1;i&lt;=n;i++) f[i][0]=1.0; \/\/ \u5982\u679c\u7b49\u5230\u516c\u4e3b\u62ff\uff0c\u53ea\u5269\u767d\u9f20\uff0c\u90a3\u516c\u4e3b\u80af\u5b9a\u8d62\n    for (int i=0;i&lt;=n;i++){ \/\/ F[i][j]: \u7b49\u5230\u516c\u4e3b\u62ff\uff0c\u888b\u5b50\u91cc\u8fd8\u5269\u4e0bi\u53ea\u767d\u9f20j\u53ea\u9ed1\u9f20\uff0c\u516c\u4e3b\u8d62\u7684\u6982\u7387\n        for (int j=1;j&lt;=m;j++){ \/\/ \u679a\u4e3e\u9ed1\u9f20  drg(Dragon):\u5f53\u65f6\u9f99\u8d62\u7684\u51e0\u7387\n            f[i][j]=(double)i\/(i+j); \/\/ \u8003\u8651\u516c\u4e3b\u76f4\u63a5\u8d62\u7684\u60c5\u51b5\n            double drg=(double)j*(double)(j-1)\/(i+j)\/(i+j-1); \/\/ \u516c\u4e3b\u6ca1\u6709\u8d62\uff0c\u9f99\u7ee7\u7eed\u62ff\u4e5f\u6ca1\u6709\u8d62\u7684\u60c5\u51b5\n            if (j&gt;=3) f[i][j]+=drg*(double)(j-2)\/(i+j-2)*f[i][j-3]; \/\/ \u8dd1\u51fa\u6765\u7684\u4e24\u53ea\u90fd\u662f\u9ed1\u9f20\uff0c\u516c\u4e3b\u7ee7\u7eed\u62ff\uff0c\u8d62\u4e86\u7684\u6982\u7387\n            if (i&gt;=1&amp;&amp;j&gt;=2) f[i][j]+=drg*(double)i\/(i+j-2)*f[i-1][j-2]; \/\/ \u8dd1\u51fa\u6765\u4e00\u53ea\u9ed1\u4e00\u53ea\u767d\uff0c...\n        }\n    }\n    printf(\"%.10f\\n\",f[n][m]);\n    return 0;\n}\n","tags":[{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u52a8\u6001\u89c4\u5212\u7c7b\u578b\u9898","slug":"\u52a8\u6001\u89c4\u5212\u7c7b\u578b\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB%E5%9E%8B%E9%A2%98\/"},{"name":"\u6982\u7387DP","slug":"\u6982\u7387DP","permalink":"https:\/\/skywt.cn\/tag\/%E6%A6%82%E7%8E%87DP\/"}],"categories":[]},{"title":"\u8bb0\u4e00\u6b21\u670d\u52a1\u5668 MySQL \u670d\u52a1\u5d29\u574f\u7ecf\u5386\u2026","date":"2018-07-22T19:56:56+08:00","path":"https:\/\/skywt.cn\/posts\/beng","text":"\u4eca\u5929\u6253\u5f00\u6211\u535a\u5ba2\u7a81\u7136\u518d\u6b21\u51fa\u73b0\u4e86 database error \u7684\u4fe1\u606f\u2026\u2026\u663e\u7136 MySQL \u670d\u52a1\u518d\u6b21\u5d29\u574f\u4e86\u3002\u4e0a\u6b21\u5d29\u574f\u5df2\u7ecf\u5c1d\u8bd5\u8fc7\u8df3\u5927\u7cfb\u7edf\u6808\u7684\u65b9\u6cd5\uff0c\u8fd9\u6b21\u7684\u5d29\u574f\u4eff\u4f5b\u662f\u53e6\u4e00\u79cd\u9519\u8bef\uff08\u5410\u8840\u2026\u2026\uff09\u3002\n\n\u8c03\u6574\u7cfb\u7edf\u6808\u5927\u5c0f\n\u4e4b\u524d\u670d\u52a1\u5668\u7684\u5d29\u574f\u4e5f\u662f MySQL \u670d\u52a1\u505c\u6b62\u8fd0\u884c\uff0c\u6253\u5f00 \/var\/log\/mysqld.log\uff0c\u53d1\u73b0\u4e0b\u9762\u4e00\u884c\u9519\u8bef\u4fe1\u606f\uff1a\nInnoDB: Error: pthread_create returned 11\n\u53bb Google \u4e86\u4e00\u756a\uff0c\u770b\u5230\u5927\u90e8\u5206\u4eba\u90fd\u8bf4\u5927\u6982\u662f\u7cfb\u7edf\u6808\u5927\u5c0f\u7684\u95ee\u9898\u3002\uff08\u8fd9\u91cc\u6709\u4e2a\u5751\uff0c\u7f51\u4e0a\u5f88\u591a\u4eba\u8bf4\u7684\u6267\u884c ulimit -s unlimited \u547d\u4ee4\u662f\u6ca1\u6709\u7528\u7684\uff01\u56e0\u4e3a ulimit \u8fd9\u4e2a\u547d\u4ee4\u53ea\u5728\u5f53\u524d shell \u4f1a\u8bdd\u6709\u6548\uff0c\u4e5f\u5c31\u662f\u8bf4\u5f53\u4f60\u5173\u95ed SSH \u8fde\u63a5\u7684\u7ec8\u7aef\uff0c\u5b83\u5c31\u4f1a\u6539\u56de\u53bb\u2026\u2026\uff08\u4e0d\u4fe1\u53ef\u4ee5\u8bd5\u8bd5\uff09\uff09\n\u6700\u540e\u7684\u89e3\u51b3\u529e\u6cd5\u662f\uff1a\u4fee\u6539 \/etc\/security\/limits.conf \u8fd9\u4e2a\u6587\u4ef6\u3002\u5728\u91cc\u9762\uff08\u6839\u636e\u6587\u4ef6\u5185\u7684\u6307\u5bfc\uff09\u52a0\u4e0a\uff1a\n*                soft    stack           28000\n*                hard    stack           32768\n\u8fd9\u6837\u5c31\u80fd\u6210\u529f\u3001\u6c38\u4e45\u8c03\u6574\u7cfb\u7edf\u6808\u5927\u5c0f\u4e86\uff5e\n\u8c03\u6574 InnoDB \u5f15\u64ce\u7684\u7f13\u51b2\u533a\u5927\u5c0f\n\u4eca\u5929\u7684\u8239\u65b0\u5d29\u574f\u53d1\u751f\u5728 2:30 \u5de6\u53f3\uff08\u5f53\u65f6\u6211\u53ef\u80fd\u8fd8\u5728\u5916\u9762\u6d6a\u2026\u2026\uff09\uff0c\u56de\u6765\u4e00\u770b\u535a\u5ba2\u4e0a\u4e0d\u4e86\u4e86\u3002\u9a6c\u4e0a\u53bb\u770b MySQL \u65e5\u5fd7\uff08\/var\/log\/mysqld.log\uff09\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u770b\u5230\u660e\u663e\u7684 Error \u4fe1\u606f\uff0c\u53ea\u770b\u5230\u4e00\u884c\u884c Note \u4fe1\u606f\uff0c\u7136\u540e\u5c31\u83ab\u540d\u5176\u5999\u505c\u4f4f\u4e86\u2026\u2026\n\u4ed4\u7ec6\u770b\u53d1\u73b0\u8fd9\u6837\u4e00\u884c\u4fe1\u606f\uff1a\n2018-07-22 14:35:27 11124 [Note] InnoDB: The log sequence numbers 146002231 and 146002231 in ibdata files do not match the log sequence number 246597872 in the ib_logfiles!\n2018-07-22 14:35:27 11124 [Note] InnoDB: Database was not shutdown normally!\n2018-07-22 14:35:27 11124 [Note] InnoDB: Starting crash recovery.\n2018-07-22 14:35:27 11124 [Note] InnoDB: Reading tablespace information from the .ibd files...\n\u4e5f\u5c31\u662f\u8bf4 MySQL \u670d\u52a1\u6ca1\u6709\u6b63\u5e38\u5173\u95ed\u2026\u2026\u4e0a\u7f51 Google \u4e86\u4e00\u4e0b\uff0c\u636e\u8bf4\u662f MySQL \u56e0\u4e3a\u5360\u7528\u5185\u5b58\u8fc7\u5927\uff08\u8c01\u8ba9\u4e00\u7fa4\u5c0f\u4f19\u4f34\u7684\u7f51\u7ad9\u90fd\u653e\u5728\u6211\u670d\u52a1\u5668\u4e0a\uff09\uff0c\u88ab\u7cfb\u7edf\u6740\u6389\u4e86\u2026\u2026\u7136\u540e\u5b83\u5c31\u9891\u7e41\u81ea\u5df1\u91cd\u542f\u3002\u67e5\u770b\u4e86 kernel \u65e5\u5fd7\uff08\/var\/log\/messages-20180722\uff09\u540e\u53d1\u73b0\u6700\u540e\u6709\u4e24\u884c\uff1a\nJul 19 09:11:40 host kernel: Out of memory: Kill process 25818 (mysqld) score 249 or sacrifice child\nJul 19 09:11:40 host kernel: Killed process 25818 (mysqld) total-vm:912520kB, anon-rss:106360kB, file-rss:1876kB, shmem-rss:0kB\nJul 19 09:11:40 host kernel: oom_reaper: reaped process 25818 (mysqld), now anon-rss:4kB, file-rss:20kB, shmem-rss:0kB\n\u679c\u7136\u662f\u88ab\u7cfb\u7edf\u6740\u6389\u4e86\u2026\u2026\n\u6211\u91c7\u7528\u7684\u89e3\u51b3\u529e\u6cd5\u662f\u8c03\u6574 InnoDB \u5f15\u64ce\u7684\u7f13\u51b2\u533a\u5927\u5c0f\uff0c\u56e0\u4e3a\u5728 appnode \u7684 MySQL \u670d\u52a1\u7ba1\u7406\u4e2d\u5e76\u6ca1\u6709\u63d0\u4f9b\u8c03\u6574\u8fd9\u4e2a\u7684\u9009\u9879\uff0c\u5173\u4e8e MySQL \u7684\u5176\u4ed6\u53c2\u6570\u90fd\u8c03\u5f88\u5c0f\u4e86\u3002\u9996\u5148 vi \/etc\/my.cnf\uff0c\u6839\u636e\u6307\u5bfc\u52a0\u4e0a\uff1a\ninnodb_buffer_pool_size = 64M\n\u63a5\u4e0b\u6765\u5e94\u8be5 OK \u4e86\u2026\u2026\uff08\u5bb3\u6015\uff09","tags":[{"name":"\u65e5\u5e38\u641e\u673a","slug":"\u65e5\u5e38\u641e\u673a","permalink":"https:\/\/skywt.cn\/tag\/%E6%97%A5%E5%B8%B8%E6%90%9E%E6%9C%BA\/"},{"name":"\u7f51\u7edc","slug":"\u7f51\u7edc","permalink":"https:\/\/skywt.cn\/tag\/%E7%BD%91%E7%BB%9C\/"},{"name":"Linux","slug":"Linux","permalink":"https:\/\/skywt.cn\/tag\/Linux\/"},{"name":"\u751f\u6d3b","slug":"\u751f\u6d3b","permalink":"https:\/\/skywt.cn\/tag\/%E7%94%9F%E6%B4%BB\/"}],"categories":[]},{"title":"CodeForces 740D Alyona and a tree \u9898\u89e3\uff1aDFS + \u4e8c\u5206","date":"2018-07-24T19:14:00+08:00","path":"https:\/\/skywt.cn\/posts\/cf740d","text":"\u9898\u76ee\u94fe\u63a5\nvector \u771f\u7684\u597d\u7528\uff5e\n\nProblem\nAlyona has a tree with $n$ vertices. The root of the tree is the vertex 1. In each vertex Alyona wrote an positive integer, in the vertex $i$ she wrote $a_i$. Moreover, the girl wrote a positive integer to every edge of the tree (possibly, different integers on different edges).\nLet's define $dist(v,\u2009u)$ as the sum of the integers written on the edges of the simple path from $v$ to $u$.\nThe vertex $v$ controls the vertex $u$  $(v\u2009\u2260\u2009u)$ if and only if $u$ is in the subtree of $v$ and $dist(v,\u2009u)\u2009\u2264\u2009a_u$.\nAlyona wants to settle in some vertex. In order to do this, she wants to know for each vertex $v$ what is the number of vertices $u$ such that $v$ controls $u$.\nInput\nThe first line contains single integer $n$ $(1\u2009\u2264\u2009n\u2009\u2264\u20092\u00b7105)$.\nThe second line contains $n$ integers $a_1,\u2009a_2,\u2009...,\u2009a_n$ $(1\u2009\u2264\u2009a_i\u2009\u2264\u200910^9)$ \u2014 the integers written in the vertices.\nThe next $(n\u2009-\u20091)$ lines contain two integers each. The $i$-th of these lines contains integers $p_i$ and $w_i$ $(1\u2009\u2264\u2009p_i\u2009\u2264\u2009n, 1\u2009\u2264\u2009w_i\u2009\u2264\u200910^9)$ \u2014 the parent of the $(i\u2009+\u20091)$-th vertex in the tree and the number written on the edge between $p_i$ and $(i\u2009+\u20091)$.\nIt is guaranteed that the given graph is a tree.\nOutput\nPrint $n$ integers \u2014 the $i$-th of these numbers should be equal to the number of vertices that the $i$-th vertex controls.\nExamples\nInput #1\n5\n2 5 1 4 6\n1 7\n1 1\n3 5\n3 6\nOutput #1\n1 0 1 0 0\nInput #2\n5\n9 7 8 6 5\n1 1\n2 1\n3 1\n4 1\nOutput #2\n4 3 2 1 0\nNotes\nIn the example test case the vertex 1 controls the vertex 3, the vertex 3 controls the vertex 5 (note that is doesn't mean the vertex 1 controls the vertex 5).\nSolution\n\u6c34\u9898\uff0c\u5f88\u5bb9\u6613\u60f3\u5230 $\\Theta (N^2)$ \u7684\u60f3\u6cd5\uff0c\u5373\u4e24\u4e24\u679a\u4e3e\uff0c\u663e\u7136\u8d85\u65f6\u3002\n\u8003\u8651\u679a\u4e3e\u4e00\u4e2a\u70b9\uff0c\u53bb\u627e\u63a7\u5236\u5b83\u7684\u70b9\uff0c\u4ece\u5b83\u7684\u7236\u4eb2\u5f00\u59cb\u627e\uff0c\u4e00\u76f4\u5f80\u4e0a\u2026\u2026\u6211\u4eec\u8981\u627e\u7684\u662f $dist(i,j) \u2264 a_i$ \u7684\u70b9\u3002\u663e\u7136 j \u4e0d\u65ad\u5f80\u4e0a\uff0c$dist(i,j)$ \u5355\u8c03\u9012\u589e\u3002\u6240\u4ee5\u7528\u4e8c\u5206\u6216\u8005\u6811\u4e0a\u500d\u589e\u627e\u5c31\u53ef\u4ee5\u4e86\u3002\nCode\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;vector&gt;\nusing namespace std;\nconst int maxn=200005,maxe=400005;\nint n,tot=0,a[maxn],fa[maxn],sum[maxn],lnk[maxn],son[maxe],nxt[maxe],w[maxe];\nlong long dst[maxn];\nbool vis[maxn];\nvector &lt;int&gt; vec;\ninline int read(){\n    int ret=0,f=1;char ch=getchar();\n    while (ch&lt;'0'||ch&gt;'9') {if (ch=='-') f=-1;ch=getchar();}\n    while (ch&gt;='0'&amp;&amp;ch&lt;='9') ret=ret*10+ch-'0',ch=getchar();\n    return ret*f;\n}\ninline void add(int x,int y,int z){\n    tot++;son[tot]=y;w[tot]=z;nxt[tot]=lnk[x];lnk[x]=tot;\n}\ninline long long myabs(long long x){\n    return x&gt;0?x:-x;\n}\ninline void BuildDistance(int x){\n    vis[x]=1;\n    for (int i=lnk[x];i;i=nxt[i]) if (!vis[son[i]]){\n        fa[son[i]]=x;\n        dst[son[i]]=(long long)dst[x]+w[i];\n        BuildDistance(son[i]);\n    }\n}\ninline long long GetDistance(int x,int y){\n    return myabs((long long)dst[x]-dst[y]);\n}\ninline void BuildSum(int x){\n    vis[x]=1;\n    int L=0,R=vec.size()-1,mid,now=-1;\n    while (L&lt;=R){\n        mid=((R-L)&gt;&gt;1)+L;\n        if ((long long)GetDistance(x,vec[mid])&lt;=(long long)a[x]){\n            now=mid;\n            R=mid-1;\n        } else L=mid+1;\n    }\n    if (now!=-1){\n        now=vec[now];\n        if (now!=x||GetDistance(x,now)&lt;=a[x]) sum[fa[x]]++,sum[fa[now]]--;\n    }\n    vec.push_back(x);\n    for (int i=lnk[x];i;i=nxt[i]) if (!vis[son[i]]){\n        BuildSum(son[i]);\n    }\n    vec.erase(vec.end()-1);\n}\ninline void GetAnswer(int x){\n    vis[x]=1;\n    for (int i=lnk[x];i;i=nxt[i]) if (!vis[son[i]]){\n        GetAnswer(son[i]);\n        sum[x]+=sum[son[i]];\n    }\n}\nint main(){\n    n=read();\n    for (int i=1;i&lt;=n;i++) a[i]=read();\n    for (int i=2;i&lt;=n;i++){\n        int x=read(),y=read();\n        add(i,x,y);add(x,i,y);\n    }\n    BuildDistance(1);\n    memset(vis,0,sizeof(vis));\n    vec.clear();\n    vec.push_back(1);\n    BuildSum(1);\n    memset(vis,0,sizeof(vis));\n    GetAnswer(1);\n    for (int i=1;i&lt;=n;i++) printf(\"%d \",sum[i]);\n    printf(\"\\n\");\n    return 0;\n}\n","tags":[{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u56fe\u8bba\u7c7b\u578b\u9898","slug":"\u56fe\u8bba\u7c7b\u578b\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E5%9B%BE%E8%AE%BA%E7%B1%BB%E5%9E%8B%E9%A2%98\/"},{"name":"\u6700\u77ed\u8def","slug":"\u6700\u77ed\u8def","permalink":"https:\/\/skywt.cn\/tag\/%E6%9C%80%E7%9F%AD%E8%B7%AF\/"},{"name":"\u641c\u7d22","slug":"\u641c\u7d22","permalink":"https:\/\/skywt.cn\/tag\/%E6%90%9C%E7%B4%A2\/"},{"name":"\u4e8c\u5206\u67e5\u627e","slug":"\u4e8c\u5206\u67e5\u627e","permalink":"https:\/\/skywt.cn\/tag\/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"Linux \u670d\u52a1\u5668\u5982\u4f55\u66f4\u6539 swap \u5206\u533a\u5927\u5c0f\u3001\u4f18\u5316\u5185\u5b58","date":"2018-07-25T18:23:00+08:00","path":"https:\/\/skywt.cn\/posts\/changeswap","text":"\u7ee7\u5b89\u88c5\u4e86 WP Super Cache \u63d2\u4ef6\u540e\uff0c\u6211\u7684\u670d\u52a1\u5668\u53c8\u53cc\u53d2\u53d5\u5d29\u574f\u4e86\u2026\u2026\u4ecd\u7136\u4e00\u6837\u7684 MySQL \u505c\u6b62\u8fd0\u884c\uff0c\u770b\u65e5\u5fd7\u5c45\u7136\u524d\u4e00\u6b21\u5d29\u574f\u51fa\u73b0\u7684\u4e24\u4e2a\u75c7\u72b6\u540c\u65f6\u51fa\u73b0\u4e86\uff01\uff08\u53ef\u6015\uff09\u8fd9\u6b21\u6211\u51b3\u5b9a\u91c7\u53d6\u7ec8\u6781\u65b9\u6848\uff1a\u6539\u53d8 swap \u5206\u533a\u5927\u5c0f\uff01\uff08\u5176\u5b9e\u65e9\u5c31\u5e94\u8be5\u7528\u7684\u2026\u2026\uff09\n\nLinux \u4e2d Swap\uff08\u5373\uff1a\u4ea4\u6362\u5206\u533a\uff09\uff0c\u7c7b\u4f3c\u4e8eWindows\u7684\u865a\u62df\u5185\u5b58\uff0c\u5c31\u662f\u5f53\u5185\u5b58\u4e0d\u8db3\u7684\u65f6\u5019\uff0c\u628a\u4e00\u90e8\u5206\u786c\u76d8\u7a7a\u95f4\u865a\u62df\u6210\u5185\u5b58\u4f7f\u7528,\u4ece\u800c\u89e3\u51b3\u5185\u5b58\u5bb9\u91cf\u4e0d\u8db3\u7684\u60c5\u51b5\u3002\u4e5f\u5c31\u662f\u8bf4\u6539\u53d8 swap \u5206\u533a\u5185\u5b58\u5927\u5c0f\u5c31\u53ef\u4ee5\u5b8c\u7f8e\u89e3\u51b3\u6211\u670d\u52a1\u5668\u5185\u5b58\u592a\u5c0f\u95ee\u9898\u4e86\uff01\n\u9996\u5148\uff0c\u67e5\u770b\u5f53\u524d swap \u5206\u533a\u5927\u5c0f\uff0c\u53ef\u4ee5\u7528 free -h \u6216\u8005 free -m \u3002\u91cc\u9762\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5f53\u524d swap \u5206\u533a\u5927\u5c0f\u3002\u6211\u7684 Bangwagon \u670d\u52a1\u5668\u4e00\u5f00\u59cb\u7684 swap \u5206\u533a\u5c45\u7136\u53ea\u6709 128M\u2026\u2026\n\u56e0\u4e3a Bandwagon \u7684\u63a7\u5236\u9762\u677f\uff08Kiwivm\uff09\u91cc\u9762\u4f1a\u81ea\u52a8\u663e\u793a\u51fa\u865a\u62df\u5185\u5b58\u7684\u5360\u7528\u60c5\u51b5\u548c\u5927\u5c0f\uff0c\u6211\u4eec\u521b\u5efa\u591a\u4e2a swap \u5206\u533a\u5c31\u4e0d\u592a\u597d\u2026\u2026\u6240\u4ee5\u6211\u9009\u62e9\u76f4\u63a5\u628a\u8fd9\u4e2a swap \u5206\u533a\u6269\u5927\u3002\u5177\u4f53\u5b9e\u73b0\u662f\uff0c\u5148\u5220\u9664\u8fd9\u4e2a\u5206\u533a\uff0c\u518d\u91cd\u65b0\u521b\u5efa\u4e00\u4e2a swap \u5206\u533a\uff5e\uff5e\uff5e\n\u9996\u5148\u5220\u9664\u8fd9\u4e2a swap \u5206\u533a\uff08\u5176\u5b9e\u8fd9\u4e2a\u547d\u4ee4\u662f\u5220\u9664\u6240\u6709swap\u5206\u533a\uff09\uff1aswapoff -a\n\u6dfb\u52a0\u4e00\u4e2a swap \u5206\u533a\u6587\u4ef6\uff1add if=\/dev\/zero of=\/root\/swapfile bs=1M count=1024\n\u8fd9\u91cc\u521b\u5efa\u4e86\u4e00\u4e2a\u6709 1024 \u5757\u3001\u6bcf\u5757\u6709 1M \u7684 swap \u5206\u533a\u3002\u5176\u4e2d \/root\/swapfile \u5c31\u662f swap \u6587\u4ef6\u7684\u8def\u5f84\u3002\n\u63a5\u4e0b\u6765\u8981\u683c\u5f0f\u5316 swap \u5206\u533a\u6587\u4ef6\uff1amkswap \/root\/swapfile\n\u7136\u540e\u542f\u7528 swap \u5206\u533a\u6587\u4ef6\uff1aswapon \/root\/swapfile\n\u6700\u540e\u8bbe\u7f6e\u5f00\u673a\u542f\u52a8\uff1a\u53ef\u4ee5\u7f16\u8f91 \/etc\/fstab \u6587\u4ef6\uff0c\u628a\u6700\u540e\u4e00\u884c\u6539\u6210\uff1a\/root\/swapfile swap swap defaults 0 0\n\u8fd9\u6837\uff0cswap \u5206\u533a\u5c31\u5b8c\u7f8e\u8bbe\u7f6e\u5b8c\u6210\u4e86\uff5e\uff5e\u518d\u4e5f\u4e0d\u7528\u62c5\u5fc3\u5185\u5b58\u592a\u5c0f\u4e86\uff5e\uff5e\uff5e\n\uff08\u53c2\u8003\uff1ahttps:\/\/www.bandwagonhost.net\/1170.html\uff09","tags":[{"name":"\u65e5\u5e38\u641e\u673a","slug":"\u65e5\u5e38\u641e\u673a","permalink":"https:\/\/skywt.cn\/tag\/%E6%97%A5%E5%B8%B8%E6%90%9E%E6%9C%BA\/"},{"name":"Linux","slug":"Linux","permalink":"https:\/\/skywt.cn\/tag\/Linux\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"\u65af\u7279\u6797\u6570\u4e0e\u653e\u7403\u95ee\u9898","date":"2018-07-27T15:02:00+08:00","path":"https:\/\/skywt.cn\/posts\/stirling","text":"\n\u4f60\u6709 n \u4e2a\u4e0d\u540c\u7684\u5c0f\u7403\uff0c\u73b0\u5728\u4f60\u60f3\u7528\u8fd9\u4e9b\u5c0f\u7403\u62fc\u6210 k \u4e2a\u73af\uff0c\u4e00\u5171\u6709\u591a\u5c11\u79cd\u62fc\u6cd5\uff1f\n\u4f60\u6709 n \u4e2a\u4e0d\u540c\u7684\u5c0f\u7403\uff0c\u73b0\u5728\u4f60\u60f3\u5c06\u8fd9\u4e9b\u5c0f\u7403\u5206\u6210 k \u4e2a\u975e\u7a7a\u7684\u96c6\u5408\uff0c\u4e00\u5171\u6709\u591a\u5c11\u79cd\u5206\u6cd5\uff1f\n\n\u8fd9\u4e24\u4e2a\u95ee\u9898\u5c31\u662f\u6700\u5178\u578b\u7684\u65af\u7279\u6797\u6570\uff08Stirling Number\uff09\u4e86\u3002\n\n\u7b2c\u4e00\u7c7b\u65af\u7279\u6797\u6570\n\u7b2c\u4e00\u7c7b\u65af\u7279\u6797\u6570\u5c31\u5bf9\u5e94\u4e86\u521a\u624d\u7684\u7b2c\u4e00\u4e2a\u95ee\u9898\uff1a\n\n\u4f60\u6709 n \u4e2a\u4e0d\u540c\u7684\u5c0f\u7403\uff0c\u73b0\u5728\u4f60\u60f3\u7528\u8fd9\u4e9b\u5c0f\u7403\u62fc\u6210 k \u4e2a\u73af\uff0c\u4e00\u5171\u6709\u591a\u5c11\u79cd\u62fc\u6cd5\uff1f\n\n\u663e\u7136\uff0c\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u7528 DP \u89e3\u51b3\uff1a\u5b9a\u4e49 $s(i,j)$ \u8868\u793a\u524d i \u4e2a\u5c0f\u7403\u62fc\u6210\u4e86 j \u4e2a\u73af\uff0c\u90a3\u4e48\u5f53\u524d\u7684\u8fd9\u4e2a\u5c0f\u7403\u8981\u4e48\u5728\u4e4b\u524d\u627e\u4e2a\u73af\u52a0\u5165\uff0c\u4e5f\u5c31\u662f\u4e4b\u524d\u968f\u4fbf\u627e\u4e2a\u7269\u54c1\u5e76\u4e14\u63d2\u5165\u5176\u53f3\u8fb9\uff0c\u65b9\u6848\u6570\u4e3a $(i-1) \\ast s(i-1,j)$ \uff1b\u8981\u4e48\u81ea\u6210\u4e00\u73af\uff0c\u65b9\u6848\u6570\u662f $s(i-1,j-1)$ \u3002\u72b6\u6001\u8f6c\u79fb\u5c31\u662f\uff1a\n\\displaystyle s(i,j)=s(i-1,j-1)+(i-1)\\ast s(i-1,j)\n\u8fd9\u5c31\u662f\u7ecf\u5178\u7684\u65af\u7279\u6797\u6570\u6a21\u578b\u4e86\u3002\u901a\u5e38 $s(i,j)$ \u8868\u793a\u7b2c\u4e00\u7c7b\u65af\u7279\u6797\u6570\uff0c\u53e6\u4e00\u79cd\u8868\u793a\u65b9\u6cd5\u662f $\\begin{bmatrix}\ni \\\\\\\\\nj\n\\end{bmatrix}$ \u3002\n\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\n\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u4f3c\u4e4e\u66f4\u7b80\u5355\uff0c\u662f\u521a\u624d\u7684\u7b2c\u4e8c\u4e2a\u95ee\u9898\uff1a\n\n\u4f60\u6709 n \u4e2a\u4e0d\u540c\u7684\u5c0f\u7403\uff0c\u73b0\u5728\u4f60\u60f3\u5c06\u8fd9\u4e9b\u5c0f\u7403\u5206\u6210 k \u4e2a\u975e\u7a7a\u7684\u96c6\u5408\uff0c\u4e00\u5171\u6709\u591a\u5c11\u79cd\u5206\u6cd5\uff1f\n\n\u663e\u7136\u4e5f\u662f DP\uff0c$S(i,j)$ \u8868\u793a\u524d i \u4e2a\u5c0f\u7403\u5206\u6210\u4e86 j \u4e2a\u975e\u7a7a\u96c6\u5408\uff0c\u6bcf\u4e2a\u5c0f\u7403\u8981\u4e48\u5728\u4e4b\u524d\u968f\u4fbf\u9009\u4e00\u7ec4\u653e\u5165\uff08\u6ce8\u610f\u548c\u7b2c\u4e00\u7c7b\u65af\u7279\u6797\u6570\u7684\u4e0d\u540c\u70b9\uff09\uff0c\u65b9\u6848\u6570\uff1a$j\\ast S(i-1,j)$ \uff1b\u8981\u4e48\u5c31\u65b0\u5f62\u6210\u4e00\u7ec4\u3002\u65b9\u6848\u6570\uff1a$S(i-1,j-1)$ \u3002\u8f6c\u79fb\u65b9\u7a0b\uff1a\n\\displaystyle S(i,j)=S(i-1,j-1)+j\\ast S(i-1,j)\n$S(i,j)$ \u7684\u5176\u4ed6\u8868\u793a\u65b9\u6cd5\u662f $S_i^{(j)}$ \u6216\u8005 $\\begin{Bmatrix}\ni \\\\\\\\\nj\n\\end{Bmatrix}$ \u3002\n\u4f8b\u9898\uff1aHDU 4372\uff1aCount the Buildings\nProblem Description\nThere are N buildings standing in a straight line in the City, numbered from 1 to N. The heights of all the buildings are distinct and between 1 and N. You can see F buildings when you standing in front of the first building and looking forward, and B buildings when you are behind the last building and looking backward. A building can be seen if the building is higher than any building between you and it.\nNow, given N, F, B, your task is to figure out how many ways all the buildings can be.\nInput\nFirst line of the input is a single integer T (T&lt;=100000), indicating there are T test cases followed.\nNext T lines, each line consists of three integer N, F, B, (0&lt;N, F, B&lt;=2000) described above.\nOutput\nFor each case, you should output the number of ways mod 1000000007(1e9+7).\nSample Input\n2\n3 2 2\n3 2 1\nSample Output\n2\n1\nSolution\n\u8fd9\u9898\u4e00\u770b\u5230\u5f88\u96be\u4e0b\u624b\uff1a\u4ece\u5de6\u8fb9\u770b\u5230\u7684\u5efa\u7b51\u7269\u7684\u96c6\u5408\uff0c\u548c\u4ece\u53f3\u8fb9\u770b\u5230\u7684\u5efa\u7b51\u7269\u7684\u96c6\u5408\uff0c\u7a76\u7adf\u5b58\u5728\u4ec0\u4e48\u5173\u7cfb\u5462\uff1f\u4ed4\u7ec6\u601d\u8003\u53ef\u4ee5\u53d1\u73b0\uff1a\u5b58\u5728\u4e00\u5ea7\u6700\u9ad8\u7684\u5efa\u7b51\uff0c\u4ece\u5de6\u8fb9\u770b\u5230\u7684\u6700\u53f3\u8fb9\u7684\u5efa\u7b51\u662f\u5b83\uff0c\u4ece\u53f3\u8fb9\u770b\u5230\u7684\u6700\u5de6\u8fb9\u7684\u5efa\u7b51\u4e5f\u662f\u5b83\u3002\uff08\u56e0\u4e3a\u9898\u76ee\u91cc\u8bf4\u4e86\u5efa\u7b51\u9ad8\u5ea6\u6ca1\u6709\u91cd\u590d\uff08\u201cThe heights of all the buildings are distinct\u201d\uff09\uff0c\u4e3a\u6211\u4eec\u8003\u8651\u63d0\u4f9b\u4e86\u5f88\u591a\u65b9\u4fbf\uff09\u90a3\u4e48\u53ef\u4ee5\u770b\u6210\u8fd9\u5ea7\u6700\u9ad8\u7684\u5efa\u7b51\u7269\u628a\u6240\u6709\u5efa\u7b51\u4e00\u5206\u4e3a\u4e8c\u4e86\u3002\n\u63a5\u4e0b\u6765\u6211\u4eec\u53ef\u4ee5\u8003\u8651\uff1a\u9898\u76ee\u91cc\u95ee\u6211\u4eec\u7684\u662f\u5404\u79cd\u697c\u4e4b\u95f4\u9ad8\u5ea6\u7684\u65b9\u6848\u6570\uff0c\u5982\u679c\u6211\u4eec\u53ea\u770b\u6700\u9ad8\u7684\u697c\u5de6\u8fb9\uff0c\u4e0d\u96be\u53d1\u73b0\u9898\u76ee\u5176\u5b9e\u5c31\u662f\u8981\u6c42\u6211\u4eec\u628a\u6700\u9ad8\u7684\u697c\u5de6\u8fb9\u7684\u623f\u5c4b\u5206\u6210 a-1 \u7ec4\uff08 a \u662f\u9898\u4e2d\u7684 F \uff09\uff0c\u6bcf\u4e00\u7ec4\u90fd\u53ea\u6709\u4e00\u5ea7\u697c\u623f\u80fd\u770b\u89c1\uff0c\u90a3\u4e48\u6bcf\u4e00\u7ec4\u53ef\u4ee5\u770b\u6210\u73af\u6392\u5217\u3002\u8fd9\u5c31\u662f\u7b2c\u4e00\u7c7b\u65af\u7279\u6797\u6570\u4e86\u3002\u5269\u4e0b\u6211\u4eec\u8fd8\u8981\u5728\u6240\u6709\u7ec4\u91cc\u9762\u9009\u62e9 a-1 \u7ec4\u653e\u5230\u5de6\u8fb9\uff0c\u6240\u4ee5\u65b9\u6848\u6570\u8981\u4e58\u4ee5 $C_{a-1+b-1}^{a-1}$ \uff0c\u6700\u7ec8\u7b54\u6848\u5c31\u662f\uff1a\n\\displaystyle s(n-1,a-1+b-1)\\ast C_{a-1+b-1}^{a-1}\nCode\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\nusing namespace std;\nconst int maxn=2005,tt=1e9+7;\nint T,n,a,b,f[maxn][maxn],c[maxn][maxn];\ninline int read(){\n    int ret=0,f=1;char ch=getchar();\n    while (ch&lt;'0'||ch&gt;'9') {if (ch=='-') f=-1;ch=getchar();}\n    while (ch&gt;='0'&amp;&amp;ch&lt;='9') ret=ret*10+ch-'0',ch=getchar();\n    return ret*f;\n}\ninline void MakeDP(){\n    f[1][1]=1;\n    for (int i=2;i&lt;=2000;i++)\n        for (int j=1;j&lt;=i;j++)\n            f[i][j]=((long long)f[i-1][j-1]+(long long)(i-1)*f[i-1][j]%tt)%tt;\n    for (int i=0;i&lt;=2000;i++) c[i][0]=1;\n    for (int i=1;i&lt;=2000;i++){\n        c[i][0]=c[i][i]=1;\n        for (int j=1;j&lt;i;j++) c[i][j]=(c[i-1][j]+c[i-1][j-1])%tt;\n    }\n}\nint main(){\n    T=read();\n    MakeDP();\n    while (T--){\n        n=read();a=read();b=read();\n        if (a+b-2&gt;2000){printf(\"0\\n\");continue;}\n        printf(\"%lld\\n\",(long long)f[n-1][a-1+b-1]*c[a-1+b-1][a-1]%tt);\n    }\n    return 0;\n}\n","tags":[{"name":"OI\u5b66\u4e60","slug":"OI\u5b66\u4e60","permalink":"https:\/\/skywt.cn\/tag\/OI%E5%AD%A6%E4%B9%A0\/"},{"name":"\u52a8\u6001\u89c4\u5212\u7c7b\u578b\u9898","slug":"\u52a8\u6001\u89c4\u5212\u7c7b\u578b\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB%E5%9E%8B%E9%A2%98\/"},{"name":"\u7ec4\u5408\u6570\u5b66","slug":"\u7ec4\u5408\u6570\u5b66","permalink":"https:\/\/skywt.cn\/tag\/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6\/"},{"name":"\u6392\u5217\u7ec4\u5408","slug":"\u6392\u5217\u7ec4\u5408","permalink":"https:\/\/skywt.cn\/tag\/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"\u65af\u7279\u6797\u6570\u7684\u5e94\u7528\uff1aHDU 6143 \u4e0e HDU 3625 \u9898\u89e3","date":"2018-07-27T21:03:48+08:00","path":"https:\/\/skywt.cn\/posts\/stirling-problems","text":"\u65af\u7279\u6797\u6570\u7684\u5177\u4f53\u5e94\u7528\u4f8b\u9898\uff1a\nHDU 6143 Killer Names\nHDU 3625 Examining the Rooms\n\u6211\u53c8\u6765\u6c34\u535a\u5ba2\u4e86\uff5e\n\nHDU 6143 Killer Names\nTime Limit: 2000\/1000 MS (Java\/Others)\nMemory Limit: 65536\/65536 K (Java\/Others)\nProblem Description\n\nGalen Marek, codenamed Starkiller, was a male Human apprentice of the Sith Lord Darth Vader. A powerful Force-user who lived during the era of the Galactic Empire, Marek originated from the Wookiee home planet of Kashyyyk as the sole offspring of two Jedi Knights\u2014Mallie and Kento Marek\u2014who deserted the Jedi Order during the Clone Wars. Following the death of his mother, the young Marek's father was killed in battle by Darth Vader. Though only a child, Marek possessed an exceptionally strong connection to the Force that the Dark Lord of the Sith sought to exploit.\nWhen Marek died in 2 BBY, shortly after the formation of the Alliance, Vader endeavored to recreate his disciple by utilizing the cloning technologies of the planet Kamino. The accelerated cloning process\u2014an enhanced version of the Kaminoan method which allowed for a rapid growth rate within its subjects\u2014was initially imperfect and many clones were too unstable to take Marek's place as the Dark Lord's new apprentice. After months of failure, one particular clone impressed Vader enough for him to hope that this version might become the first success. But as with the others, he inherited Marek's power and skills at the cost of receiving his emotions as well, a side effect of memory flashes used in the training process.\n\u2014 Wookieepedia\n\nDarth Vader is finally able to stably clone the most powerful soilder in the galaxy: the Starkiller. It is the time of the final strike to destroy the Jedi remnants hidden in every corner of the galaxy.\nHowever, as the clone army is growing, giving them names becomes a trouble. A clone of Starkiller will be given a two-word name, a first name and a last name. Both the first name and the last name have exactly $n$ characters, while each character is chosen from an alphabet of size $m$. It appears that there are $m^{2n}$ possible names to be used.\nThough the clone process succeeded, the moods of Starkiller clones seem not quite stable. Once an unsatisfactory name is given, a clone will become unstable and will try to fight against his own master. A name is safe if and only if no character appears in both the first name and the last name.\nSince no two clones can share a name, Darth Vader would like to know the maximum number of clones he is able to create.\nInput\nThe First line of the input contains an integer $T (T\u226410)$, denoting the number of test cases. \nEach test case contains two integers $n$ and $m$ $(1\u2264n,m\u22642000)$.\nOutput\nFor each test case, output one line containing the maximum number of clones Vader can create.\nOutput the answer  mod $10^9+7$\nSample Input\n2\n3 2\n2 3\nSample Output\n2\n18\nTranslation\n\u9898\u76ee\u5927\u610f\u662f\uff0c\u6709 m \u4e2a\u5b57\u7b26\uff0c\u8981\u4f60\u7528\u8fd9 m \u4e2a\u5b57\u7b26\u8d77\u540d\u5b57\uff0c\u59d3\u548c\u540d\u90fd\u662f n \u4e2a\u5b57\u7b26\uff08\u6bcf\u4e2a\u5b57\u7b26\u4ece m \u4e2a\u5b57\u7b26\u91cc\u9009\u62e9\uff09\uff0c\u95ee\u4f60\u59d3\u548c\u540d\u91cc\u7684\u5b57\u6bcd\u4e0d\u80fd\u91cd\u590d\uff08\u4e5f\u5c31\u662f\u8bf4\u59d3\u91cc\u7528\u4e86 i \u5b57\u6bcd\uff0c\u5219\u540d\u91cc\u4e0d\u80fd\u7528\uff1b\u53cd\u4e4b\u4ea6\u7136\uff09\uff0c\u6709\u591a\u5c11\u79cd\u8d77\u540d\u65b9\u6848\u3002\nSolution\n\u770b\u5230\u8fd9\u79cd\u201c\u6709\u591a\u5c11\u79cd\u65b9\u6848\u201d\u7684\u9898\u76ee\uff0c\u663e\u7136\u662f\u6392\u5217\u7ec4\u5408\u3001\u65af\u7279\u6797\u6570\u6709\u5173\u7684\uff08\u81f3\u5c11\u662f\u7c7b\u4f3c\u201c\u653e\u7403DP\u201d\u76f8\u5173\u7684\uff09\u3002\n\u53ef\u4ee5\u679a\u4e3e\u5de6\u8fb9\uff08\u5373\u59d3\uff09\u9009\u4e86\u591a\u5c11\u79cd\u5b57\u7b26\uff0c\u5047\u8bbe\u9009\u4e86 i \u4e2a\u8fd9\u4e9b\u5b57\u7b26\u662f\u59d3\u91cc\u4e0d\u80fd\u7528\u7684\uff0c\u90a3\u4e48\u5269\u4e0b\u7684\u5c31\u662f M-i \u4e2a\u5b57\u7b26\u3002\n\u5148\u8003\u8651\u53f3\u8fb9\uff1a\u663e\u7136\uff0c\u53f3\u8fb9 n \u4e2a\u5b57\u7b26\uff0c\u6bcf\u4e2a\u5b57\u7b26\u90fd\u53ef\u4ee5\u53d6 M-i \u91cc\u7684\u4efb\u610f\u4e00\u4e2a\uff0c\u65b9\u6848\u6570\u662f\uff1a $(M-i)^N$\n\u518d\u8003\u8651\u5de6\u8fb9\uff1a\u5de6\u8fb9\u5176\u5b9e\u53ef\u4ee5\u770b\u6210\u6709 N \u4e2a\u4f4d\u7f6e\uff0c\u9700\u8981\u9009\u62e9 i \u4e2a\u5b57\u7b26\u2014\u2014\u8fd9\u5176\u5b9e\u5c31\u662f\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\uff01N \u4e2a\u4e0d\u540c\u7684\u5c0f\u7403\uff0c\u5206\u5230 i \u4e2a\u76f8\u540c\u7684\u76d2\u5b50\u91cc\uff0c\u76d2\u5b50\u53ef\u4ee5\u4e3a\u7a7a\u3002\u4f46\u662f\u5b9e\u9645\u4e0a\u76d2\u5b50\u662f\u4e0d\u540c\u7684\uff0c\u6240\u4ee5\u518d\u4e58\u4ee5 $i!$ \u5373\u53ef\u3002\n\u6700\u540e\u7684\u7b54\u6848\u5c31\u662f\uff1a\n\\displaystyle \\sum_{i=1}^{m-1} C_M^i\\ast i! \\ast s(N,i) \\ast (M-i)^N\nCode\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\nusing namespace std;\nconst int maxn=2005,tt=1e9+7;\nint T,n,m,c[maxn][maxn],fac[maxn],f[maxn][maxn];\ninline void Build(){\n    for (int i=0;i&lt;=2000;i++) c[i][0]=1;\n    for (int i=1;i&lt;=2000;i++){\n        c[i][0]=c[i][i]=1;\n        for (int j=1;j&lt;i;j++) c[i][j]=(c[i-1][j]+c[i-1][j-1])%tt;\n    }\n    for (int i=1;i&lt;=2000;i++) f[i][1]=1;\n    for (int i=2;i&lt;=2000;i++)\n        for (int j=1;j&lt;=i;j++)\n            f[i][j]=(f[i-1][j-1]+(long long)f[i-1][j]*j%tt)%tt;\n    fac[0]=1;\n    for (int i=1;i&lt;=2000;i++) fac[i]=(long long)fac[i-1]*i%tt;\n}\ninline int qsm(int a,int b){\n    int ret=1,w=a;\n    while (b){\n        if (b&amp;1) ret=(long long)ret*w%tt;\n        b&gt;&gt;=1;w=(long long)w*w%tt;\n    }\n    return ret;\n}\nint main(){\n    scanf(\"%d\",&amp;T);\n    Build();\n    while (T--){\n        scanf(\"%d%d\",&amp;n,&amp;m);\n        int ans=0;\n        for (int i=1;i&lt;m;i++) ans=((long long)ans+(long long)c[m][i]%tt*fac[i]%tt*f[n][i]%tt*qsm(m-i,n)%tt)%tt;\n        printf(\"%d\\n\",ans);\n    }\n    return 0;\n}\n\nHDU 3625 Examining the Rooms\nProblem Description\nA murder happened in the hotel. As the best detective in the town, you should examine all the N rooms of the hotel immediately. However, all the doors of the rooms are locked, and the keys are just locked in the rooms, what a trap! You know that there is exactly one key in each room, and all the possible distributions are of equal possibility. For example, if N = 3, there are 6 possible distributions, the possibility of each is 1\/6. For convenience, we number the rooms from 1 to N, and the key for Room 1 is numbered Key 1, the key for Room 2 is Key 2, etc.\nTo examine all the rooms, you have to destroy some doors by force. But you don\u2019t want to destroy too many, so you take the following strategy: At first, you have no keys in hand, so you randomly destroy a locked door, get into the room, examine it and fetch the key in it. Then maybe you can open another room with the new key, examine it and get the second key. Repeat this until you can\u2019t open any new rooms. If there are still rooms un-examined, you have to randomly pick another unopened door to destroy by force, then repeat the procedure above, until all the rooms are examined.\nNow you are only allowed to destroy at most K doors by force. What\u2019s more, there lives a Very Important Person in Room 1. You are not allowed to destroy the doors of Room 1, that is, the only way to examine Room 1 is opening it with the corresponding key. You want to know what is the possibility of that you can examine all the rooms finally.\nInput\nThe first line of the input contains an integer T (T \u2264 200), indicating the number of test cases. Then T cases follow. Each case contains a line with two numbers N and K. (1 &lt; N \u2264 20, 1 \u2264 K &lt; N)\nOutput\nOutput one line for each case, indicating the corresponding possibility. Four digits after decimal point are preserved by rounding.\nSample Input\n3\n3 1\n3 2\n4 2\nSample Output\n0.3333\n0.6667\n0.62500.3333 0.6667\nHint\nSample Explanation\n\nWhen N = 3, there are 6 possible distributions of keys:\n\n    Room 1  Room 2  Room 3  Destroy Times\n#1  Key 1   Key 2   Key 3   Impossible\n#2  Key 1   Key 3   Key 2   Impossible\n#3  Key 2   Key 1   Key 3   Two\n#4  Key 3   Key 2   Key 1   Two\n#5  Key 2   Key 3   Key 1   One\n#6  Key 3   Key 1   Key 2   One\n\nIn the first two distributions, because Key 1 is locked in Room 1 itself and you can\u2019t destroy Room 1, it is impossible to open Room 1. \nIn the third and forth distributions, you have to destroy Room 2 and 3 both. In the last two distributions, you only need to destroy one of Room 2 or Room \nTranslation\n\u9898\u76ee\u5927\u610f\uff1a\u6709 N \u4e2a\u623f\u95f4\uff0c\u73b0\u5728\u4f60\u8981\u68c0\u67e5\u6240\u6709\u623f\u95f4\u3002\u4f60\u53ef\u4ee5\u66b4\u529b\u6467\u6bc1 K \u6247\u95e8\uff0c\u4f46\u662f\u7b2c\u4e00\u4e2a\u623f\u95f4\u7684\u95e8\u4e0d\u80fd\u66b4\u529b\u7834\u3002\u6bcf\u4e2a\u623f\u95f4\u91cc\u53ef\u80fd\u6709\u5176\u4ed6\u623f\u95f4\u7684\u94a5\u5319\uff0c\u95ee\u4f60\u6700\u7ec8\u53ef\u4ee5\u68c0\u67e5\u6240\u6709\u623f\u95f4\u7684\u53ef\u80fd\u6027\uff08\u5373\u6982\u7387\uff09\u3002\nSolution\n\u5148\u4e0d\u8003\u8651 1 \u53f7\u623f\u95f4\u7684\u201c\u8d35\u5bbe\u201d\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u5176\u5b9e\u662f\u8981\u628a\u623f\u95f4\u5206\u6210 t \u4e2a\u73af\uff08t \u2264 k\uff09\u3002\u73af\uff01\u73af\uff01\u73af\uff01\u7b2c\u4e00\u7c7b\u65af\u7279\u6797\u6570\uff01\uff01\uff01\n\u63a5\u4e0b\u6765\u8003\u8651\u4e00\u4e0b\u7b2c\u4e00\u4f4d\u8d35\u5bbe\u7684\u4f18\u5f85\uff0c\u6211\u4eec\u53ea\u9700\u8981\u628a\u7834\u4e86\u7b2c\u4e00\u4f4d\u8d35\u5bbe\u7684\u95e8\u7684\u60c5\u51b5\u5168\u90fd\u51cf\u6389\u5c31\u53ef\u4ee5\u4e86\u3002\u603b\u65b9\u6848\u6570\u5c31\u662f\uff1a\n\\displaystyle \\sum_{i=1}^{n} s(n,i)-s(n-1,i-1)\n\u6700\u540e\u95ee\u6211\u4eec\u6982\u7387\uff0c\u53ea\u8981\u9664\u4ee5\u5168\u6392\u5217 $N!$ \u5c31\u53ef\u4ee5\u4e86\uff5e\nCode\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\nusing namespace std;\nconst int maxn=25;\nint T,n,m;\nlong long f[maxn][maxn],fac[maxn];\ninline void BuildFact(){\n    fac[0]=1;\n    for (int i=1;i&lt;=20;i++) fac[i]=fac[i-1]*i;\n}\ninline void BuildStirlingNumber(){\n    f[1][1]=1;\n    for (int i=2;i&lt;=20;i++)\n        for (int j=1;j&lt;=i;j++)\n            f[i][j]=f[i-1][j-1]+(i-1)*f[i-1][j];\n}\nint main(){\n    BuildFact();\n    BuildStirlingNumber();\n    scanf(\"%d\",&amp;T);\n    while (T--){\n        scanf(\"%d%d\",&amp;n,&amp;m);\n        long long now=0;\n        for (int i=1;i&lt;=m;i++) now=now+f[n][i]-f[n-1][i-1];\n        printf(\"%.4f\\n\",(double)now\/(double)fac[n]);\n    }\n    return 0;\n}\n","tags":[{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u52a8\u6001\u89c4\u5212\u7c7b\u578b\u9898","slug":"\u52a8\u6001\u89c4\u5212\u7c7b\u578b\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB%E5%9E%8B%E9%A2%98\/"},{"name":"\u6570\u5b66\u9898","slug":"\u6570\u5b66\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E6%95%B0%E5%AD%A6%E9%A2%98\/"},{"name":"\u6392\u5217\u7ec4\u5408","slug":"\u6392\u5217\u7ec4\u5408","permalink":"https:\/\/skywt.cn\/tag\/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88\/"}],"categories":[]},{"title":"HDU 4045 Machine scheduling \u9898\u89e3\uff1a\u7ec4\u5408\u6570+\u65af\u7279\u6797\u6570","date":"2018-07-29T15:32:55+08:00","path":"https:\/\/skywt.cn\/posts\/hdu4045","text":"HDU 4045 Machine scheduling\uff1a\u9898\u76ee\u94fe\u63a5\n\nTime Limit: 5000\/2000 MS (Java\/Others)    Memory Limit: 32768\/32768 K (Java\/Others)\nProblem Description\nA Baidu\u2019s engineer needs to analyze and process large amount of data on machines every day. The machines are labeled from 1 to n. On each day, the engineer chooses r machines to process data. He allocates the r machines to no more than m groups ,and if the difference of 2 machines' labels are less than k,they can not work in the same day. Otherwise the two machines will not work properly. That is to say, the machines labeled with 1 and k+1 can work in the same day while those labeled with 1 and k should not work in the same day. Due to some unknown reasons, the engineer should not choose the allocation scheme the same as that on some previous day. otherwise all the machines need to be initialized again. As you know, the initialization will take a long time and a lot of efforts. Can you tell the engineer the maximum days that he can use these machines continuously without re-initialization.\nInput\nInput end with EOF.\nInput will be four integers n,r,k,m.We assume that they are all between 1 and 1000.\nOutput\nOutput the maxmium days modulo 1000000007.\nSample Input\n5 2 3 2\nSample Output\n6\nHint\nSample input means you can choose 1 and 4,1 and 5,2 and 5 in the same day.\nAnd you can make the machines in the same group or in the different group.\nSo you got 6 schemes.\n1 and 4 in same group,1 and 4 in different groups.\n1 and 5 in same group,1 and 5 in different groups.\n2 and 5 in same group,2 and 5 in different groups.\nWe assume 1 in a group and 4 in b group is the same as 1 in b group and 4 in a group.\nTranslation\n\u6709 n \u53f0\u673a\u5668\uff0c\u4f60\u8981\u9009\u62e9\u5176\u4e2d\u7684 r \u53f0\u5904\u7406\u6570\u636e\uff0c\u4f7f\u5f97\u5176\u4e2d\u76f8\u90bb\u4e24\u53f0\u4e0b\u6807\u7684\u8ddd\u79bb\u4e0d\u5c0f\u4e8e k\uff0c\u5e76\u4e14\u9700\u8981\u4f60\u628a\u9009\u51fa\u7684 k \u53f0\u5206\u6210\u4e0d\u8d85\u8fc7 m \u7ec4\u3002\u95ee\u4f60\u6709\u591a\u5c11\u79cd\u65b9\u6848\u3002\nSolution\n\u5206\u89e3\u95ee\u9898\uff0c\u5148\u9009\u51fa\u76f8\u90bb\u4e24\u53f0\u4e0b\u6807\u8ddd\u79bb\u5747\u4e0d\u5c0f\u4e8e k \u7684 r \u53f0\u673a\u5668\uff0c\u7136\u540e\u518d\u8003\u8651\u5206\u6210\u4e0d\u8d85\u8fc7 m \u7ec4\u3002\n\u5bf9\u4e8e\u7b2c\u4e8c\u95ee\uff0c\u88f8\u7684\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u3002\n\u63a5\u4e0b\u6765\u8003\u8651\u7b2c\u4e00\u95ee\u3002\u5047\u8bbe\u6211\u4eec\u4ece\u7b2c\u4e00\u53f0\u673a\u5668\u5f00\u59cb\u6bcf\u9694 k-1 \u53f0\u673a\u5668\u5c31\u9009\u4e00\u53f0\uff0c\u9009\u5230\u6700\u540e\uff08 r \u53f0\uff09\u4f1a\u53d1\u73b0\u8fd8\u5269\u4f59\u4e00\u4e9b\u4f4d\u7f6e\u3002\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u628a\u8fd9\u4e9b\u4f4d\u7f6e\u63d2\u5165\u524d\u9762\u7684 r+1 \u4e2a\u7a7a\u9699\u91cc\u3002\u663e\u7136\u6700\u540e\u5269\u4f59\u7684\u4f4d\u7f6e\u662f\uff1a$n-((r-1)\\ast k+1)$\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u662f\u8981\u628a $n-((r-1)\\ast k+1)$ \u4e2a\u5143\u7d20\u5206\u6210 $r+1$ \u4e2a\u96c6\u5408\uff0c\u96c6\u5408\u53ef\u4ee5\u4e3a\u7a7a\u3002\u653e\u7403\u95ee\u9898\u7684\u4e00\u79cd\uff1a\u7403\u4e0d\u540c\uff0c\u76d2\u76f8\u540c\uff0c\u53ef\u4ee5\u4e3a\u7a7a\u3002\n\u505a\u6cd5\u662f\uff1a\u628a\u76d2\u5b50\u4e3a\u7a7a\u8f6c\u6362\u6210\u76d2\u5b50\u4e0d\u80fd\u4e3a\u7a7a\u7684\u505a\u6cd5\uff0c\u8ba9\u6bcf\u4e2a\u76d2\u5b50\u91cc\u90fd\u8981\u6709\u7403\uff0c\u5219\u8981\u591a\u653e $r+1$ \u4e2a\u7403\u3002\u73b0\u5728\u6211\u4eec\u5c31\u89e3\u51b3\u7403\u4e0d\u540c\u3001\u76d2\u76f8\u540c\u3001\u4e0d\u80fd\u4e3a\u7a7a\u7684\u653e\u7403\u95ee\u9898\uff0c\u663e\u7136\u53ef\u4ee5\u7528\u9694\u677f\u6cd5\u6765\u505a\uff0c\u6700\u540e\u7b54\u6848\uff1a\nC_{n-((r-1)]\\ast k+1+r+1-1)}^{r} \\ast \\sum_{i=1}^{min(r,m)}S(r,i)\nCode\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\nusing namespace std;\nconst int maxn=1005,tt=1e9+7;\nint n,r,k,m,c[maxn*2][maxn*2],s[maxn][maxn],lst[maxn];\ninline void Build(){\n    for (int i=0;i&lt;=1000;i++) s[i][i]=1;\n    for (int i=1;i&lt;=1000;i++)\n        for (int j=1;j&lt;i;j++)\n            s[i][j]=(s[i-1][j-1]+(long long)s[i-1][j]*j%tt)%tt;\n    c[0][0]=1;\n    for (int i=1;i&lt;=1000;i++){\n        c[i][0]=c[i][i]=1;\n        for (int j=1;j&lt;i;j++) c[i][j]=(c[i-1][j]+c[i-1][j-1])%tt;\n    }\n}\ninline int C(int x,int y){\n    return c[x][y];\n}\nint main(){\n    Build();\n    while (scanf(\"%d%d%d%d\",&amp;n,&amp;r,&amp;k,&amp;m)!=-1){\n        if (n-((r-1)*k+1)+r&lt;0) {printf(\"0\\n\");continue;}\n        int sum=0;\n        for (int i=1;i&lt;=min(r,m);i++) sum=(sum+s[r][i])%tt;\n        printf(\"%d\\n\",(long long)C(n-((r-1)*k+1)+r,r)*sum%tt);\n    }\n    return 0;\n}\n","tags":[{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u6570\u5b66\u9898","slug":"\u6570\u5b66\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E6%95%B0%E5%AD%A6%E9%A2%98\/"},{"name":"\u65af\u7279\u6797\u6570","slug":"\u65af\u7279\u6797\u6570","permalink":"https:\/\/skywt.cn\/tag\/%E6%96%AF%E7%89%B9%E6%9E%97%E6%95%B0\/"}],"categories":[]},{"title":"\u516b\u4e2a\u653e\u7403\u95ee\u9898\u65b9\u6cd5\u603b\u7ed3\uff08\u57fa\u7840\u7ec4\u5408\u95ee\u9898\uff09","date":"2018-07-30T15:27:58+08:00","path":"https:\/\/skywt.cn\/posts\/put-ball","text":"\u76ae\u4e00\u4e0b\uff0cN \u4e2a\u6c42\u653e\u5165 M \u4e2a\u76d2\u5b50\uff0c\u603b\u95ee\u9898\u6570\u91cf\u662f $C_2^1 \\ast C_2^1 \\ast C_2^1=8$ \u4e2a\uff5e\n\n\u516b\u4e2a\u95ee\u9898\u7d22\u5f15\uff1a\n\u672c\u9875\u9762\u542b\u6709\u5927\u91cf $\\KaTeX$ \u516c\u5f0f\uff0c\u8bf7\u786e\u4fdd\u6d4f\u89c8\u5668\u652f\u6301\u3002\n\u90e8\u5206\u9898\u76ee\u6709\u5f88\u591a\u89e3\u6cd5\uff0c\u8fd9\u91cc\u53ea\u63d0\u4f9b\u4e86\u4e00\u79cd\u3002\n\u7403\u76f8\u540c\uff0c\u76d2\u76f8\u540c\uff0c\u4e0d\u80fd\u4e3a\u7a7a\n\u53ef\u4ee5\u7528 DP \u89e3\uff1a$F(i,j)$ \u8868\u793a\u628a $i$ \u62c6\u5206\u6210\u5c0f\u4e8e\u7b49\u4e8e $j$ \u4e2a\u6574\u6570\u7684\u65b9\u6848\u6570\uff0c\u4e5f\u5c31\u662f\u628a $i$ \u4e2a\u5c0f\u7403\u5206\u5230 $j$ \u4e2a\u76d2\u5b50\u91cc\u7684\u65b9\u6848\u6570\u3002\u8003\u8651\u72b6\u6001\u8f6c\u79fb\uff0c\u65e2\u7136\u76d2\u5b50\u4e0d\u80fd\u662f\u7a7a\u7684\uff0c\u6211\u4eec\u5c31\u5148\u7ed9\u6bcf\u4e2a\u76d2\u5b50\u5206\u914d\u4e00\u4e2a\u7403\uff0c\u7136\u540e\u5269\u4f59\u7684\u968f\u610f\u5206\u914d\u3002\u8f6c\u79fb\u65b9\u7a0b\u662f\uff1a\nF(i,j)=F(i-j,j)\n\u7403\u76f8\u540c\uff0c\u76d2\u76f8\u540c\uff0c\u53ef\u4ee5\u4e3a\u7a7a\n\u8fd9\u4e2a\u95ee\u9898\u76f8\u5f53\u4e8e\u6574\u6570\u62c6\u5206\u3002\u5176\u5b9e\u548c\u524d\u9762\u4e00\u79cd\u7c7b\u4f3c\uff0c\u53ea\u662f\u589e\u52a0\u4e86\u6709\u76d2\u5b50\u4e3a\u7a7a\u7684\u60c5\u51b5\uff1a$F(i,j-1)$ \u3002\u8f6c\u79fb\u65b9\u7a0b\uff1a\nF(i,j)=F(i,j-1)+F(i-j,j)\n\u7403\u4e0d\u540c\uff0c\u76d2\u76f8\u540c\uff0c\u4e0d\u80fd\u4e3a\u7a7a\n\u8fd9\u79cd\u60c5\u51b5q\u5176\u5176\u5b9e\u5c31\u662f\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\uff0c\u5177\u4f53\u53ef\u4ee5\u53bb\u770b\u4e4b\u524d\u7684\u6587\u7ae0\uff0c$F(i,j)$ \u8868\u793a\u524d $i$ \u4e2a\u5c0f\u7403\u5206\u6210\u4e86 $j$ \u4e2a\u975e\u7a7a\u96c6\u5408\uff08\u653e\u5230\u4e86 $j$ \u4e2a\u76d2\u5b50\u91cc\uff09\uff0c\u8f6c\u79fb\u65b9\u7a0b\uff1a\nF(i,j)=F(i-1,j-1)+j \\ast F(i-1,j)\n\u7403\u4e0d\u540c\uff0c\u76d2\u76f8\u540c\uff0c\u53ef\u4ee5\u4e3a\u7a7a\n\u548c\u7403\u4e0d\u540c\uff0c\u76d2\u76f8\u540c\uff0c\u4e0d\u80fd\u4e3a\u7a7a\u7684\u60c5\u51b5\u7c7b\u4f3c\uff0c\u53ea\u8981\u6700\u540e\u7d2f\u8ba1\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\uff0c\u4e5f\u5c31\u662f\u8bf4\u7b54\u6848\u662f $\\displaystyle \\sum_{i=1}^{m} F(n,i)$ \u3002\n\u7403\u4e0d\u540c\uff0c\u76d2\u4e0d\u540c\uff0c\u4e0d\u80fd\u4e3a\u7a7a\n\u5148\u5047\u8bbe\u76d2\u5b50\u662f\u76f8\u540c\u7684\uff0c\u5c31\u8f6c\u6362\u6210\u4e86\u7403\u4e0d\u540c\uff0c\u76d2\u76f8\u540c\uff0c\u53ef\u4ee5\u4e3a\u7a7a\u7684\u95ee\u9898\u3002\u6700\u540e\u628a\u76d2\u5b50\u5168\u6392\u5217\u4e00\u4e0b\u5373\u53ef\u3002\u6700\u540e\u7684\u7b54\u6848\u4e5f\u5c31\u662f\uff1a$F(n,m)\\ast m!$ \u3002\n\u7403\u4e0d\u540c\uff0c\u76d2\u4e0d\u540c\uff0c\u53ef\u4ee5\u4e3a\u7a7a\n\u5f88\u663e\u7136\uff0c\u6bcf\u4e2a\u7403\u90fd\u6709 $m$ \u79cd\u9009\u62e9\uff0c\u7b54\u6848\u5c31\u662f\uff1a$n^m$ \u3002\n\u7403\u76f8\u540c\uff0c\u76d2\u4e0d\u540c\uff0c\u4e0d\u80fd\u4e3a\u7a7a\n\u8fd9\u79cd\u60c5\u51b5\u53ef\u4ee5\u7528\u9694\u677f\u6cd5\u3002\u7b54\u6848\u662f\uff1a$\\displaystyle C_{n-1}^{m-1}$ \u3002\n\u7403\u76f8\u540c\uff0c\u76d2\u4e0d\u540c\uff0c\u53ef\u4ee5\u4e3a\u7a7a\n\u9884\u5148\u628a\u6240\u6709\u76d2\u5b50\u91cc\u653e\u4e0a\u4e00\u4e2a\u7403\uff0c\u90a3\u4e48\u540e\u9762\u7684\u505a\u6cd5\u5c31\u7b49\u4ef7\u4e8e\u524d\u9762\u4e00\u4e2a\u7403\u76f8\u540c\uff0c\u76d2\u4e0d\u540c\uff0c\u4e0d\u80fd\u4e3a\u7a7a\u7684\u60c5\u51b5\u4e86\u3002\u7b54\u6848\u5c31\u662f\uff1a$\\displaystyle C_{n+m-1}^{n-1}$","tags":[{"name":"OI\u5b66\u4e60","slug":"OI\u5b66\u4e60","permalink":"https:\/\/skywt.cn\/tag\/OI%E5%AD%A6%E4%B9%A0\/"},{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u6570\u5b66\u9898","slug":"\u6570\u5b66\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E6%95%B0%E5%AD%A6%E9%A2%98\/"},{"name":"\u7ec4\u5408\u6570\u5b66","slug":"\u7ec4\u5408\u6570\u5b66","permalink":"https:\/\/skywt.cn\/tag\/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6\/"},{"name":"\u6392\u5217\u7ec4\u5408","slug":"\u6392\u5217\u7ec4\u5408","permalink":"https:\/\/skywt.cn\/tag\/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88\/"},{"name":"\u65af\u7279\u6797\u6570","slug":"\u65af\u7279\u6797\u6570","permalink":"https:\/\/skywt.cn\/tag\/%E6%96%AF%E7%89%B9%E6%9E%97%E6%95%B0\/"}],"categories":[]},{"title":"Kruskal \u7b97\u6cd5\u6c42\u6700\u5c0f\u751f\u6210\u6811\u4e0e\u6b21\u5c0f\u751f\u6210\u6811","date":"2018-07-30T21:06:30+08:00","path":"https:\/\/skywt.cn\/posts\/kruscal","text":"Kruscal \u7b97\u6cd5\u662f\u6c42\u6700\u5c0f\u751f\u6210\u6811\u7684\u57fa\u7840\u7b97\u6cd5\uff0c\u5f88\u5bb9\u6613\u6c42\u5f97\u6700\u5c0f\u751f\u6210\u6811\uff0c\u4f46\u662f\u600e\u4e48\u5229\u7528\u8fd9\u4e2a\u7b97\u6cd5\u6c42\u975e\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u4e0e\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u5462\uff1f\n\nKruskal \u7b97\u6cd5\n\u505a\u6cd5\n\u8fd9\u4e2a\u7b97\u6cd5\u5f88\u57fa\u7840\uff0c\u4e5f\u5f88\u597d\u7406\u89e3\uff0c\u9996\u5148\u5bf9\u6240\u6709\u8fb9\u7684\u6743\u503c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff08\u65e2\u7136\u662f\u8981\u6c42\u6700\u5c0f\u751f\u6210\u6811\uff09\uff0c\u4ece\u8fb9\u6743\u6700\u5c0f\u7684\u8fb9\u5f00\u59cb\u679a\u4e3e\uff0c\u5bf9\u4e8e\u6bcf\u6761\u8fb9\uff0c\u5982\u679c\u5176\u4e24\u4e2a\u7aef\u70b9\u76ee\u524d\u4e0d\u8054\u901a\uff0c\u5219\u52a0\u5165\u8fd9\u6761\u8fb9\uff0c\u5426\u5219\u8bf4\u660e\u52a0\u5165\u8fd9\u6761\u8fb9\u4f1a\u6210\u73af\uff0c\u5c31\u4e0d\u52a0\u3002\u201c\u52a0\u5165\u8fd9\u6761\u8fb9\u201d\u7684\u64cd\u4f5c\uff08\u4e5f\u5c31\u662f\u5408\u5e76\u8054\u901a\u5757\uff09\u7528\u5e76\u67e5\u96c6\u89e3\u51b3\u3002\n\u8bc1\u660e\n\uff08\u5176\u5b9e\u8fd9\u4e2a\u7b97\u6cd5 yy \u4e00\u4e0b\u5c31\u5927\u6982\u77e5\u9053\u4e86\u2026\u2026\uff09\nWikipedia \u4e0a\u8bf4\uff1a\n\n\u53ef\u4ee5\u7528\u53cd\u8bc1\u6cd5\uff1a\u5982\u679c\u8fd9\u6761\u8fb9\u4e0d\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e2d\uff0c\u5b83\u8fde\u63a5\u7684\u4e24\u4e2a\u8fde\u901a\u5206\u91cf\u6700\u7ec8\u8fd8\u662f\u8981\u8fde\u8d77\u6765\u7684\uff0c\u901a\u8fc7\u5176\u4ed6\u7684\u8fde\u6cd5\uff0c\u90a3\u4e48\u53e6\u4e00\u79cd\u8fde\u6cd5\u4e0e\u8fd9\u6761\u8fb9\u4e00\u5b9a\u6784\u6210\u4e86\u73af\uff0c\u800c\u73af\u4e2d\u4e00\u5b9a\u6709\u4e00\u6761\u6743\u503c\u5927\u4e8e\u8fd9\u6761\u8fb9\u7684\u8fb9\uff0c\u7528\u8fd9\u6761\u8fb9\u5c06\u5176\u66ff\u6362\u6389\uff0c\u56fe\u4ecd\u65e7\u4fdd\u6301\u8fde\u901a\uff0c\u4f46\u603b\u6743\u503c\u51cf\u5c0f\u4e86\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u4e0d\u9009\u53d6\u8fd9\u6761\u8fb9\uff0c\u6700\u540e\u6784\u6210\u7684\u751f\u6210\u6811\u7684\u603b\u6743\u503c\u4e00\u5b9a\u4e0d\u4f1a\u662f\u6700\u5c0f\u7684\u3002\n\n\u8bb2\u5f97\u8be6\u7ec6\u70b9\uff1a\n\u5047\u8bbe\u6309\u7167 Kruskal \u7b97\u6cd5\u52a0\u5165\u7684\u8fb9\u96c6\u4e3a $e_1,e_2,e_3,\\dots,e_{m-1},e_m$ \uff0c\u5f62\u6210\u4e86\u6811 $T_1$\uff1b\n\uff08\u7528\u53cd\u8bc1\u6cd5\uff09\u5047\u8bbe\u8fd9\u65f6\u5019\u6c42\u5f97\u7684 $T_1$ \u4e0d\u662f\u8be5\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5219\u5b58\u5728\u6700\u5c0f\u751f\u6210\u6811 $T_2$\uff1b\u5047\u8bbe\u5176\u8fb9\u96c6\u4e3a $p_1,p_2,p_3,\\dots,p_{m-1},p_m$\uff1b\n\u90a3\u4e48\u8fd9\u4e24\u4e2a\u96c6\u5408\u6709\u4e00\u4e2a\u524d\u7f00\u662f\u76f8\u540c\u7684\uff08\u53ef\u80fd\u524d\u7f00\u957f\u5ea6\u4e3a0\uff09\uff0c\u5373 $e_1=p_1,e_2=p_2,\\dots,e_{k-1}=p_{k-1}$\uff0c\u76f4\u5230 $p_k > e_k$\u3002\n\u5047\u8bbe\u73b0\u5728\u6211\u4eec\u5f3a\u5236\u628a $e_k$ \u4e5f\u52a0\u5165 $T_2$\uff0c\u90a3\u4e48\u73b0\u5728\u4e00\u5b9a\u4f1a\u5f62\u6210\u4e00\u4e2a\u73af\uff0c\u8fd9\u4e2a\u73af\u91cc $p_k > e_k$\uff0c\u4e5f\u5c31\u662f\u8bf4\u628a $p_k$ \u53bb\u6389\u4f1a\u5f62\u6210\u4e00\u68f5\u66f4\u5c0f\u7684\u751f\u6210\u6811\u3002\n\u8bf4\u660e\u524d\u9762\u7684\u5047\u8bbe\u9519\u8bef\uff0c\u8bc1\u5f97\u8fd9\u65f6 $T_1$ \u662f\u6700\u5c0f\u751f\u6210\u6811\u3002\n\u6b21\u5c0f\u751f\u6210\u6811\n\u5148\u4ecb\u7ecd\u4e00\u79cd\u8d85\u7ea7\u66b4\u529b\u7684\u505a\u6cd5\uff0c\u679a\u4e3e\u6700\u5c0f\u751f\u6210\u6811\uff08MST\uff09\u4e0a\u7684\u8fb9\uff0c\u628a\u8fd9\u6761\u8fb9\u53bb\u6389\u91cd\u65b0\u8dd1 MST\u2026\u2026\n\u73b0\u5728\u600e\u4e48\u7528 Kruskal \u6c42\u6b21\u5c0f\u751f\u6210\u6811\u5462\uff1f\u9996\u5148\u8bf4\u8bf4\u975e\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u7684\u505a\u6cd5\uff08\u6240\u8c13\u975e\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\uff0c\u5c31\u662f\u53ef\u80fd\u6709\u591a\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u7684\u60c5\u51b5\u4e0b\u6b21\u5c0f\u751f\u6210\u6811\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u6700\u5c0f\u751f\u6210\u6811\uff09\u3002\n\u5728 Kruskal \u7b97\u6cd5\u91cc\u6211\u4eec\u53ef\u4ee5\u6807\u8bb0\u54ea\u4e9b\u8fb9\u5728 MST \u91cc\uff0c\u90a3\u4e48\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u6bcf\u6761\u4e0d\u5728 MST \u4e0a\u7684\u8fb9\uff0c\u8003\u8651\u628a\u8fd9\u6761\u8fb9\u52a0\u5165\u7684\u60c5\u51b5\u3002\n\u663e\u7136\uff0c\u52a0\u5165\u8fd9\u6761\u8fb9\u4f1a\u5f62\u6210\u73af\u3002\u6211\u4eec\u8981\u6c42\u7684\u53ef\u662f\u6b21\u5c0f\u751f\u6210\u6811\uff0c\u53ef\u4ecd\u7136\u662f\u4e00\u68f5\u6811\u3002\u90a3\u4e48\u5728\u52a0\u5165\u8fd9\u6761\u8fb9\u540e\u5f62\u6210\u7684\u73af\u91cc\uff0c\u6211\u4eec\u80af\u5b9a\u8981\u53bb\u6389\u4e00\u6761\u8fb9\u3002\u53bb\u6389\u90a3\u6761\u8fb9\u5462\uff1f\n\u5047\u8bbe\u53bb\u6389\u8fb9 $e_k$ \uff0c\u52a0\u5165 $p_k$ \uff0c\u4e3a\u4e86\u786e\u4fdd\u6211\u4eec\u5f97\u5230\u7684\u662f\u6b21\u5c0f\u751f\u6210\u6811\uff0c\u6211\u4eec\u8981\u4f7f $p_k-e_k$ \u6700\u5c0f\uff08\u663e\u7136 $p_k \\geqslant e_k$\uff09\u3002\u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a $p_k$\uff0c\u8ba9 $e_k$ \u5c3d\u91cf\u5927\u5c31\u53ef\u4ee5\u4e86\uff0c\u6362\u53e5\u8bdd\u8bf4\u6211\u4eec\u8981\u627e\u5230\u52a0\u5165 $p_k$ \u6240\u5728\u7684\u73af\u91cc\u7684\u6700\u5927\u8fb9\uff0c\u66ff\u6362\u4e4b\uff0c\u770b\u770b\u7b54\u6848\u3002\u6700\u540e\u627e\u5230\u6700\u63a5\u8fd1\u6700\u5c0f\u751f\u6210\u6811\u7684\u7b54\u6848\u5c31\u53ef\u4ee5\u4e86\u3002\n\u5982\u4f55\u5b9e\u73b0\u201c\u52a0\u5165 $p_k$ \u6240\u5728\u7684\u73af\u91cc\u7684\u6700\u5927\u8fb9\u201d\u8fd9\u4e00\u795e\u5947\u7684\u64cd\u4f5c\u5462\uff1f\u7528\u6811\u4e0a\u500d\u589e\uff08\u7c7b\u4f3c LCA \u7684\u505a\u6cd5\uff09\u5c31\u53ef\u4ee5\u4e86\u3002\n\u518d\u8003\u8651\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u7684\u505a\u6cd5\u3002\u6211\u4eec\u9700\u8981\u786e\u4fdd \u201c\u52a0\u5165 $p_k$ \u6240\u5728\u7684\u73af\u91cc\u7684\u6700\u5927\u8fb9\u201d \u4e0d\u4e0e $p_k$ \u76f8\u540c\uff0c\u591a\u5199\u4e00\u4e2a\u7279\u6b8a\u5224\u65ad\u7684 DFS \u5c31\u53ef\u4ee5\u5b9e\u73b0\u4e86\u3002\n\u53c2\u8003\u4ee3\u7801\n\u6d1b\u8c37\u6a21\u677f\u9898\uff1aP4180 \u3010\u6a21\u677f\u3011\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811[BJWC2010]\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\nconst int maxn=100005,maxe=300005;\nint n,m,fa[maxn],f[maxn][18],to[maxn][18],deep[maxn];\nint tot=0,lnk[maxn],nxt[maxe*2],son[maxe*2],w[maxe*2];\nbool vis[maxn];\nlong long ans=(long long)1&lt;&lt;60,sum=0;\nstruct SideData{\n    int x,y,w;\n    bool used;\n}a[maxe];\ninline int read(){\n    int ret=0,f=1;char ch=getchar();\n    while (ch&lt;'0'||ch&gt;'9') {if (ch=='-') f=-1;ch=getchar();}\n    while (ch&gt;='0'&amp;&amp;ch&lt;='9') ret=ret*10+ch-'0',ch=getchar();\n    return ret*f;\n}\ninline bool cmp(SideData aa,SideData bb){\n    return aa.w&lt;bb.w;\n}\ninline void add(int x,int y,int z){\n    tot++;son[tot]=y;w[tot]=z;nxt[tot]=lnk[x];lnk[x]=tot;\n}\ninline int getfa(int x){\n    if (fa[x]==x) return x;\n    fa[x]=getfa(fa[x]);\n    return fa[x];\n}\ninline void Kruscal(){\n    for (int i=1;i&lt;=n;i++) fa[i]=i;\n    int cnt=0;\n    for (int i=1;i&lt;=m&amp;&amp;cnt&lt;n-1;i++){\n        int fx=getfa(a[i].x),fy=getfa(a[i].y);\n        if (fx==fy) continue;\n        cnt++;a[i].used=1;sum+=(long long)a[i].w;\n        fa[fx]=fy;\n        add(a[i].x,a[i].y,a[i].w);\n        add(a[i].y,a[i].x,a[i].w);\n    }\n}\ninline void Build(int x,int id,int lst){\n    vis[x]=1;\n    f[x][0]=w[id];to[x][0]=lst;\n    for (int i=1;i&lt;18;i++) f[x][i]=max(f[x][i-1],f[to[x][i-1]][i-1]),to[x][i]=to[to[x][i-1]][i-1];\n    for (int i=lnk[x];i;i=nxt[i]) if (!vis[son[i]]) deep[son[i]]=deep[x]+1,Build(son[i],i,x);\n}\ninline int Query(int x,int y){\n    \/\/printf(\"Query: %d %d =&gt; \",x,y);\n    int ret=0;\n    if (deep[x]&lt;deep[y]) swap(x,y);\n    for (int i=17;i&gt;=0;i--) if (deep[to[x][i]]&gt;=deep[y]) ret=max(ret,f[x][i]),x=to[x][i];\n    for (int i=17;i&gt;=0;i--) if (to[x][i]!=to[y][i]) ret=max(ret,max(f[x][i],f[y][i])),x=to[x][i],y=to[y][i];\n    ret=max(ret,max(f[x][0],f[y][0]));\n    \/\/printf(\"%d %d\\n\",x,y);\n    return ret;\n}\ninline int ExQuery(int x,int y,int z){\n    int ret=0;\n    if (deep[x]&lt;deep[y]) swap(x,y);\n    for (int i=17;i&gt;=0;i--) if (deep[to[x][i]]&gt;=deep[y]){\n        if (f[x][i]!=z) ret=max(ret,f[x][i]);\n        x=to[x][i];\n    }\n    for (int i=17;i&gt;=0;i--) if (to[x][i]!=to[y][i]){\n        if (f[x][i]!=z) ret=max(ret,f[x][i]);\n        if (f[y][i]!=z) ret=max(ret,f[y][i]);\n        x=to[x][i];y=to[y][i];\n    }\n    if (f[x][0]!=z) ret=max(ret,f[x][0]);\n    if (f[y][0]!=z) ret=max(ret,f[y][0]);\n    return ret;\n}\nint main(){\n    n=read();m=read();\n    for (int i=1;i&lt;=m;i++) a[i].x=read(),a[i].y=read(),a[i].w=read();\n    sort(a+1,a+1+m,cmp);\n    Kruscal();\n    deep[1]=1;\n    Build(1,0,0);\n    for (int i=1;i&lt;=m;i++) if (!a[i].used){\n        int qry=Query(a[i].x,a[i].y);\n        if (qry==a[i].w) qry=ExQuery(a[i].x,a[i].y,qry);\n        long long now=sum-(long long)qry+(long long)a[i].w;\n        if (now&gt;sum) ans=min(ans,now);\n    }\n    printf(\"%lld\\n\",ans);\n    return 0;\n}\n\n\u53c2\u8003\nKruskal's algorithm - Wikipedia\n\uff08\u7ef4\u57fa\u767e\u79d1\u82f1\u6587\u7248\u89e3\u7981\u4e86\u5417\uff1f\uff01\u4e0d\u7528\u9b54\u6cd5\u5c45\u7136\u53ef\u4ee5\u8bbf\u95ee\u2026\u2026\uff09\n\u514b\u9c81\u65af\u514b\u5c14\u7b97\u6cd5 - \u7ef4\u57fa\u767e\u79d1\uff0c\u81ea\u7531\u7684\u767e\u79d1\u5168\u4e66","tags":[{"name":"OI\u5b66\u4e60","slug":"OI\u5b66\u4e60","permalink":"https:\/\/skywt.cn\/tag\/OI%E5%AD%A6%E4%B9%A0\/"},{"name":"OI\u7b97\u6cd5","slug":"OI\u7b97\u6cd5","permalink":"https:\/\/skywt.cn\/tag\/OI%E7%AE%97%E6%B3%95\/"},{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u56fe\u8bba\u7c7b\u578b\u9898","slug":"\u56fe\u8bba\u7c7b\u578b\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E5%9B%BE%E8%AE%BA%E7%B1%BB%E5%9E%8B%E9%A2%98\/"},{"name":"\u751f\u6210\u6811","slug":"\u751f\u6210\u6811","permalink":"https:\/\/skywt.cn\/tag\/%E7%94%9F%E6%88%90%E6%A0%91\/"}],"categories":[]},{"title":"Markdown \u7ed8\u56fe\u6d4b\u8bd5","date":"2018-07-31T14:59:44+08:00","path":"https:\/\/skywt.cn\/posts\/markdown-draw-test","text":"\u4eca\u5929\u53d1\u73b0\u6211\u7684 Markdown \u63d2\u4ef6\u5c45\u7136\u8d44\u78c1\u753b\u56fe\u8bba\u7684\u56fe\uff08Graph\uff09\u7684\u64cd\u4f5c\uff5e\u7528 Editor.md \u63d2\u4ef6\uff0c\u5f00\u53d1\u8005\u8d85\u7ea7\u70ed\u5fc3\uff0c\u4e4b\u524d\u516c\u5f0f\u4e0d\u751f\u6548\u6211\u5728 Github \u4e0a\u63d0 issue \u5c45\u7136\u5f97\u5230\u79d2\u56de\uff01\uff01\u8d85\u7ea7\u6fc0\u52a8\u5730\u6d4b\u8bd5\u4e00\u6ce2\u3002\n\nMermaid \u7ed8\u56fe\n\u6211\u4f1a\u544a\u8bc9\u4f60\u8fd9\u662f CodeForces 379F \u7684\u6837\u4f8b\uff1f\ngraph TD;\n1--&gt;2\n1--&gt;3\n1--&gt;4\n2--&gt;5\n2--&gt;6\n3--&gt;7\n3--&gt;8\n4--&gt;9\n4--&gt;10\n8--&gt;11\n8--&gt;12\n5--&gt;13\n5--&gt;14\n```mermaid\ngraph TD;\n1--&gt;2\n1--&gt;3\n1--&gt;4\n2--&gt;5\n2--&gt;6\n3--&gt;7\n3--&gt;8\n4--&gt;9\n4--&gt;10\n8--&gt;11\n8--&gt;12\n5--&gt;13\n5--&gt;14\n```\n\n\u5b98\u65b9\u6587\u6863\u6f14\u793a\uff08\u8fd9\u4e9b\u64cd\u4f5c\u592a\u5389\u5bb3\u4e86\u2026\u2026\u90fd\u662f\u4ee3\u7801\u751f\u6210\u7684\u2026\u2026\uff09\ngraph TD;\n    A--&gt;B;\n    A--&gt;C;\n    B--&gt;D;\n    C--&gt;D;\nsequenceDiagram\n    participant Alice\n    participant Bob\n    Alice-&gt;John: Hello John, how are you?\n    loop Healthcheck\n        John-&gt;John: Fight against hypochondria\n    end\n    Note right of John: Rational thoughts &lt;br\/&gt;prevail...\n    John--&gt;Alice: Great!\n    John-&gt;Bob: How about you?\n    Bob--&gt;John: Jolly good!\ngantt\n        dateFormat  YYYY-MM-DD\n        title Adding GANTT diagram functionality to mermaid\n        section A section\n        Completed task            :done,    des1, 2014-01-06,2014-01-08\n        Active task               :active,  des2, 2014-01-09, 3d\n        Future task               :         des3, after des2, 5d\n        Future task2               :         des4, after des3, 5d\n        section Critical tasks\n        Completed task in the critical line :crit, done, 2014-01-06,24h\n        Implement parser and jison          :crit, done, after des1, 2d\n        Create tests for parser             :crit, active, 3d\n        Future task in critical line        :crit, 5d\n        Create tests for renderer           :2d\n        Add to mermaid                      :1d\ngraph LR\n    A[Hard edge] --&gt;|Link text| B(Round edge)\n    B --&gt; C{Decision}\n    C --&gt;|One| D[Result one]\n    C --&gt;|Two| E[Result two]\nsequenceDiagram\n    Alice-&gt;&gt;Bob: Hello Bob, how are you?\n    alt is sick\n        Bob-&gt;&gt;Alice: Not so good :(\n    else is well\n        Bob-&gt;&gt;Alice: Feeling fresh like a daisy\n    end\n    opt Extra response\n        Bob-&gt;&gt;Alice: Thanks for asking\n    end\n\ngantt\n       dateFormat  YYYY-MM-DD\n       title Adding GANTT diagram functionality to mermaid\n\n       section A section\n       Completed task            :done,    des1, 2014-01-06,2014-01-08\n       Active task               :active,  des2, 2014-01-09, 3d\n       Future task               :         des3, after des2, 5d\n       Future task2              :         des4, after des3, 5d\n\n       section Critical tasks\n       Completed task in the critical line :crit, done, 2014-01-06,24h\n       Implement parser and jison          :crit, done, after des1, 2d\n       Create tests for parser             :crit, active, 3d\n       Future task in critical line        :crit, 5d\n       Create tests for renderer           :2d\n       Add to mermaid                      :1d\n\n       section Documentation\n       Describe gantt syntax               :active, a1, after des1, 3d\n       Add gantt diagram to demo page      :after a1  , 20h\n       Add another diagram to demo page    :doc1, after a1  , 48h\n\n       section Last section\n       Describe gantt syntax               :after doc1, 3d\n       Add gantt diagram to demo page      :20h\n       Add another diagram to demo page    :48h","tags":[{"name":"\u65e5\u5e38\u641e\u673a","slug":"\u65e5\u5e38\u641e\u673a","permalink":"https:\/\/skywt.cn\/tag\/%E6%97%A5%E5%B8%B8%E6%90%9E%E6%9C%BA\/"},{"name":"\u7f51\u7edc","slug":"\u7f51\u7edc","permalink":"https:\/\/skywt.cn\/tag\/%E7%BD%91%E7%BB%9C\/"},{"name":"\u9ed1\u79d1\u6280","slug":"\u9ed1\u79d1\u6280","permalink":"https:\/\/skywt.cn\/tag\/%E9%BB%91%E7%A7%91%E6%8A%80\/"}],"categories":[]},{"title":"CodeForces 294E Shaass the Great\uff1a\u6781\u5176\u53d8\u6001\u7684\u6811\u5f62 DP \u4e0e\u601d\u7ef4\u9898","date":"2018-08-03T09:28:07+08:00","path":"https:\/\/skywt.cn\/posts\/cf294e","text":"\u9898\u76ee\u94fe\u63a5\uff1aCodeForces 294E Shaass the Great\n\u8fd9\u9898\u771f\u7684\u592a\u9ebb\u70e6\u4e86\u2026\u2026\n\nProblem\nThe great Shaass is the new king of the Drakht empire. The empire has $n$ cities which are connected by $n\u2009-\u20091$ bidirectional roads. Each road has an specific length and connects a pair of cities. There's a unique simple path connecting each pair of cities.\nHis majesty the great Shaass has decided to tear down one of the roads and build another road with the same length between some pair of cities. He should build such road that it's still possible to travel from each city to any other city. He might build the same road again.\nYou as his advisor should help him to find a way to make the described action. You should find the way that minimize the total sum of pairwise distances between cities after the action. So calculate the minimum sum.\nInput\nThe first line of the input contains an integer $n$ denoting the number of cities in the empire, $(2\u2009\u2264\u2009n\u2009\u2264\u20095000)$. The next $n\u2009-\u20091$ lines each contains three integers $a_i, b_i$ and $w_i$ showing that two cities $a_i$ and $b_i$ are connected using a road of length $w_i$, $(1\u2009\u2264\u2009a_i,\u2009b_i\u2009\u2264\u2009n,\u2009a_i\u2009\u2260\u2009b_i,\u20091\u2009\u2264\u2009w_i\u2009\u2264\u200910^6)$.\nOutput\nOn the only line of the output print the minimum pairwise sum of distances between the cities.\nPlease do not use the %lld specificator to read or write 64-bit integers in C++. It is preferred to use the cin, cout streams or the %I64d specificator.\nExamples\nInput #1\n3\n1 2 2\n1 3 4\nOutput #1\n12\nInput #2\n6\n1 2 1\n2 3 1\n3 4 1\n4 5 1\n5 6 1\nOutput #2\n29\nInput #3\n6\n1 3 1\n2 3 1\n3 4 100\n4 5 2\n4 6 1\nOutput #3\n825\nTranslation\n\u7ed9\u4f60\u4e00\u9897\u6811\uff0c\u73b0\u5728\u4f60\u8981\u79fb\u9664\u5176\u4e2d\u4e00\u6761\u8fb9\uff0c\u9009\u4e24\u4e2a\u70b9\uff0c\u5728\u5176\u4e4b\u95f4\u52a0\u4e0a\u4e00\u6761\u8fb9\u6743\u76f8\u7b49\u7684\u8fb9\uff0c\u5e76\u4e14\u4e0d\u80fd\u6210\u73af\uff0c\u4f7f\u5f97\u65b0\u7684\u6811\u4e2d\u4e24\u4e24\u70b9\u4e4b\u95f4\u8ddd\u79bb\u4e4b\u548c\u6700\u5c0f\u3002\uff08\u4e5f\u5c31\u662f $\\displaystyle \\frac {\\sum_{i=1,j=1}^{i=n,j=n,i \\not = j} dist(i,j)} 2$ \u6700\u5c0f\uff09\nAnalysis\n\u8fd9\u9898\u89c4\u5b9a\u4e86\u6570\u636e\u8303\u56f4\uff1a$(2\u2009\u2264\u2009n\u2009\u2264\u20095000)$\u2026\u2026\u8bf4\u660e\u5fc5\u987b $N^2$ \u641e\u51fa\u6765\uff0c\u4e0d\u80fd\u4e71\u641e\u4e86\u3002\u9996\u5148\u6211\u4eec\u8981\u679a\u4e3e\u5220\u9664\u7684\u8fb9\uff0c\u5047\u8bbe\u679a\u4e3e\u5230\u7684\u5220\u9664\u7684\u8fb9\u662f $e_k$\uff0c\u90a3\u4e48\u5220\u9664\u8fd9\u6761\u8fb9\u4ee5\u540e\u5f62\u6210\u4e86\u4e24\u68f5\u6811\uff0c\u5982\u4f55\u5efa\u7acb\u65b0\u7684\u8fb9\uff08\u4e0e\u539f\u6765\u8fb9\u6743\u76f8\u7b49\uff09\u8fde\u63a5\u8fd9\u4e24\u68f5\u6811\uff0c\u4f7f\u5f97\u8fde\u63a5\u540e\u4e24\u4e24\u70b9\u4e4b\u95f4\u8ddd\u79bb\u6700\u5c0f\u5462\uff1f\n\u4ed4\u7ec6\u601d\u8003\u53ef\u4ee5\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4e24\u68f5\u5206\u5f00\u7684\u6811\u4e2d\u4efb\u610f\u4e00\u68f5\uff0c\u6211\u4eec\u8981\u627e\u5230\u70b9 $p_i$ \u4f7f\u5f97\u6811\u4e0a\u6240\u6709\u70b9\u5230\u8fd9\u4e2a\u70b9\u7684\u8ddd\u79bb\u4e4b\u548c\u6700\u5c0f\u3002\u663e\u7136\uff0c$p_i$ \u662f\u91cd\u5fc3\uff01\u8bf4\u660e\u53ea\u8981\u8fde\u63a5\u4e24\u68f5\u6811\u7684\u91cd\u5fc3\u5c31\u53ef\u4ee5\u4e86\uff01\n\u63a5\u4e0b\u6765\u6211\u4eec\u9700\u8981\u8ba1\u7b97\u51fa\u4e24\u68f5\u6811\u91cc\u4e24\u4e24\u70b9\u5bf9\u8ddd\u79bb\u4e4b\u548c\uff0c\u53ef\u4ee5\u7528 DFS\uff0c\u5341\u5206\u9ebb\u70e6\uff0c\u76f8\u5f53\u4e8e\u4e00\u4e2a\u6811\u5f62 DP \u53bb\u7ef4\u62a4\u2026\u2026\uff08\u8be6\u89c1\u4ee3\u7801\uff09\u5047\u8bbe\u7b97\u51fa\u7684\u4e24\u6811\u7ed3\u679c\u662f $total \\\\_ sum \\\\_ left$ \u4e0e $total\\\\_ sum\\\\_ right$ \uff1b\n\u6211\u4eec\u8fd8\u8981\u5f97\u5230\u8fd9\u4e24\u68f5\u6811\u7ed3\u70b9\u6570\u91cf\uff08\u4e0d\u7136\u91cd\u5fc3\u6ca1\u6cd5\u6c42\uff09\uff0c\u8bbe\u4e3a\uff1a$num\\\\_ left$ \u4e0e $num\\\\_ right$\uff1b\u4e24\u68f5\u6811\u91cd\u5fc3\u8bbe\u4e3a $cen\\\\_ left$ \u4e0e $cen\\\\_ right$\uff0c\u73b0\u5728\u5220\u9664\u7684\u8fb9\u957f\u5ea6\u662f $len$\uff1b\n\u6211\u4eec\u6700\u540e\u8981\u6c42\u51fa\u5de6\u8fb9\u7684\u6811\u4e0a\u6240\u6709\u70b9\u5230\u91cd\u5fc3\u8ddd\u79bb\u4e4b\u548c\uff0c\u53f3\u8fb9\u6811\u4e0a\u6240\u6709\u70b9\u5230\u91cd\u5fc3\u8ddd\u79bb\u4e4b\u548c\uff0c\u8bb0\u4e3a\uff1a$sum\\\\_ left$ \u4e0e $sum\\\\_ right$\n\u5de6\u8fb9\u7684\u6811\u8bb0\u4e3a $Tree_{left}$\uff0c\u53f3\u8fb9\u7684\u6811\u8bb0\u4e3a $Tree_{right}$\uff1b\n\u91cd\u5934\u620f\u6765\u4e86\uff0c\u90a3\u4e48\u5f53\u524d\u7b54\u6848\u600e\u4e48\u6c42\u5462\uff1f\u9996\u5148\u5de6\u8fb9\u6240\u6709\u70b9\u8981\u7ecf\u8fc7\u6211\u4eec\u65b0\u52a0\u4e0a\u7684\u4e24\u91cd\u5fc3\u4e4b\u95f4\u7684\u8fb9\u5230\u8fbe\u53f3\u8fb9\u7684\u70b9\uff0c\u53f3\u8fb9\u7684\u6240\u6709\u70b9\u4ea6\u7136\uff1b\u4e0d\u96be\u5f97\u51fa\u7b54\u6848\uff1a\n\\sum_{i\\in Tree_{left}}^{} (\\sum_{j\\in Tree_{right}} dist(i,cen\\_ left)+len+dist(cen\\_right,j))\n\u5316\u7b80\u5f97\u5230\uff1a\nnum\\_left\\ast sum\\_right + num\\_right \\ast sum\\_left+num\\_left \\ast num\\_right \\ast len + total\\_ sum\\_left + total\\_sum\\_right\n\u6700\u540e\u6311\u51fa\u6700\u5c0f\u503c\u5c31\u662f\u7b54\u6848\u4e86\uff01\nCode\n\u731c\u731c\u8fd9\u9898\u6211\u6539\u4e86\u591a\u4e45\uff1f&#95;(\u00b4\u0f40`\u300d \u2220)&#95;\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\nusing namespace std;\nconst int maxn=5005,maxe=10005;\nint n,sum_son[maxn],max_sub[maxn],c[2],tmp[2],flag[maxn],num[2],sum_dfs=0;\nlong long ans=(long long)1&lt;&lt;60,total_sum[2],lst[maxn],lstw[maxn];\nint tot=0,lnk[maxn],nxt[maxe],son[maxe],w[maxe],dst[2][maxn];\nbool can_use[maxe],vis[maxn];\nstruct EdgeData{\n    int x,y,w;\n}e[maxn];\ninline void add(int x,int y,int z){\n    tot++;son[tot]=y;w[tot]=z;nxt[tot]=lnk[x];lnk[x]=tot;\n}\ninline int read(){\n    int ret=0,f=1;char ch=getchar();\n    while (ch&lt;'0'||ch&gt;'9'){if (ch=='-') f=-1;ch=getchar();}\n    while (ch&gt;='0'&amp;&amp;ch&lt;='9') ret=ret*10+ch-'0',ch=getchar();\n    return ret*f;\n}\ninline int BuildNumber(int x){ \/\/ \u5148\u8981\u6c42\u51fa\u4e24\u4e2a\u8054\u901a\u5757\u70b9\u7684\u4e2a\u6570\uff0c\u4e0d\u7136\u540e\u9762\u6c42\u91cd\u5fc3\u6ca1\u6cd5\u505a\u2026\u2026\n    \/\/ \u6211\u662f\u62d2\u7edd\u7684 qwq\n    vis[x]=true;\n    int ret=1;\n    for (int i=lnk[x];i;i=nxt[i]) if (!vis[son[i]]&amp;&amp;can_use[i]) ret+=BuildNumber(son[i]);\n    return ret;\n}\ninline void Build(int x,int k){ \/\/ \u6c42\u91cd\u5fc3\u2026\u2026\n    flag[x]=k;\n    vis[x]=true;\n    max_sub[x]=0;sum_son[x]=0;\n    for (int i=lnk[x];i;i=nxt[i]) if (!vis[son[i]]&amp;&amp;can_use[i]){\n        Build(son[i],k);\n        max_sub[x]=max(max_sub[x],max(max_sub[son[i]],sum_son[son[i]]+1));\n        sum_son[x]+=sum_son[son[i]]+1;\n    }\n    if (max(num[k]-sum_son[x],max_sub[x])&lt;tmp[k]) tmp[k]=max(num[k]-sum_son[x],max_sub[x]),c[k]=x;\n}\ninline void GetDist(int x,int k){\n    vis[x]=true; \n    for (int i=lnk[x];i;i=nxt[i]) if (!vis[son[i]]&amp;&amp;flag[son[i]]==k){\n        dst[k][son[i]]=dst[k][x]+w[i];\n        GetDist(son[i],k);\n    }\n}\ninline int GetSum(int x,int k){ \/\/ \u8fd8\u8981\u5199\u4e2a\u6784\u9020\u8054\u901a\u5757\u5185\u4e24\u4e24\u8282\u70b9\u8ddd\u79bb\u4e4b\u548c\u7684\u51fd\u6570 (\u5410\u8840)\n    sum_dfs++;\n    vis[x]=1;\n    total_sum[k]+=lst[x];\n    int van=0;\n    for (int i=lnk[x];i;i=nxt[i]) if (!vis[son[i]]&amp;&amp;can_use[i]){\n        lst[son[i]]=lst[x]+(long long)sum_dfs*w[i];\n        int nowvan=GetSum(son[i],k);\n        lst[x]+=lstw[son[i]]+(long long)(nowvan)*w[i];     \/\/ !!!!!!!!!!\n        lstw[x]+=lstw[son[i]]+(long long)(nowvan)*w[i];\n        van+=nowvan;\n    }\n    van++;\n    return van;\n}\nint main(){\n    n=read();\n    for (int i=1;i&lt;n;i++){\n        int x=read(),y=read(),z=read();\n        add(x,y,z);add(y,x,z);\n        e[i].x=x;e[i].y=y;e[i].w=z;\n    }\n    memset(can_use,true,sizeof(can_use));\n    for (int i=1;i&lt;n;i++){\n        memset(c,0,sizeof(c));\n        memset(tmp,63,sizeof(tmp));\n        memset(dst,0,sizeof(dst));\n        memset(flag,255,sizeof(flag));\n        memset(sum_son,0,sizeof(sum_son));\n        memset(max_sub,0,sizeof(max_sub));\n\n        long long cen_left=0,cen_right=0,sum_left=0,sum_right=0,num_left=0,num_right=0;\n        can_use[i*2]=can_use[i*2-1]=false;\n\n        memset(vis,0,sizeof(vis));\n        num_left=num[0]=BuildNumber(e[i].x);num_right=num[1]=BuildNumber(e[i].y);\n        memset(vis,0,sizeof(vis));\n        Build(e[i].x,0);\n        Build(e[i].y,1);\n        cen_left=c[0];cen_right=c[1];\n        \/\/printf(\"Cen_Left: %d  Cen_Right: %d  Num_Left: %d  Num_Right: %d\\n\",cen_left,cen_right,num_left,num_right);\n\n        memset(vis,0,sizeof(vis));\n        GetDist(cen_left,0);\n        GetDist(cen_right,1);\n        for (int j=1;j&lt;=n;j++){\n            if (flag[j]==0) sum_left +=dst[0][j]; else\n            if (flag[j]==1) sum_right+=dst[1][j];\n        }\n\n        memset(total_sum,0,sizeof(total_sum));\n        memset(vis,0,sizeof(vis));\n        memset(lst,0,sizeof(lst));\n        memset(lstw,0,sizeof(lstw));\n        sum_dfs=0;GetSum(e[i].x,0);\n        sum_dfs=0;GetSum(e[i].y,1);\n        \/\/printf(\"TOTSUM0: %d  TOTSUM1: %d\\n\",total_sum[0],total_sum[1]);\n        long long now=(long long)num_right*sum_left+(long long)num_left*sum_right+(long long)num_left*num_right*e[i].w+total_sum[0]+total_sum[1];\n        \/\/printf(\"Result: %d\\n\",now);\n        if (now&lt;ans) ans=now;\n        can_use[i*2]=can_use[i*2-1]=true;\n    }\n    printf(\"%lld\\n\",ans);\n    return 0;\n}\n","tags":[{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u52a8\u6001\u89c4\u5212\u7c7b\u578b\u9898","slug":"\u52a8\u6001\u89c4\u5212\u7c7b\u578b\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB%E5%9E%8B%E9%A2%98\/"},{"name":"\u56fe\u8bba\u7c7b\u578b\u9898","slug":"\u56fe\u8bba\u7c7b\u578b\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E5%9B%BE%E8%AE%BA%E7%B1%BB%E5%9E%8B%E9%A2%98\/"},{"name":"\u6570\u5b66\u9898","slug":"\u6570\u5b66\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E6%95%B0%E5%AD%A6%E9%A2%98\/"},{"name":"\u751f\u6210\u6811","slug":"\u751f\u6210\u6811","permalink":"https:\/\/skywt.cn\/tag\/%E7%94%9F%E6%88%90%E6%A0%91\/"},{"name":"\u641c\u7d22","slug":"\u641c\u7d22","permalink":"https:\/\/skywt.cn\/tag\/%E6%90%9C%E7%B4%A2\/"},{"name":"\u6811\u5f62DP","slug":"\u6811\u5f62DP","permalink":"https:\/\/skywt.cn\/tag\/%E6%A0%91%E5%BD%A2DP\/"}],"categories":[]},{"title":"ZOJ 3649 Social Net\uff1a\u6700\u5927\u751f\u6210\u6811+\u6811\u4e0a\u500d\u589e DP","date":"2018-08-03T20:53:23+08:00","path":"https:\/\/skywt.cn\/posts\/zoj3649","text":"\u9898\u76ee\u94fe\u63a5\uff1aZOJ 3649 Social Net\n\nProblem\nThere are $n$ individuals  $(2 ","tags":[{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u52a8\u6001\u89c4\u5212\u7c7b\u578b\u9898","slug":"\u52a8\u6001\u89c4\u5212\u7c7b\u578b\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB%E5%9E%8B%E9%A2%98\/"},{"name":"\u56fe\u8bba\u7c7b\u578b\u9898","slug":"\u56fe\u8bba\u7c7b\u578b\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E5%9B%BE%E8%AE%BA%E7%B1%BB%E5%9E%8B%E9%A2%98\/"},{"name":"\u751f\u6210\u6811","slug":"\u751f\u6210\u6811","permalink":"https:\/\/skywt.cn\/tag\/%E7%94%9F%E6%88%90%E6%A0%91\/"},{"name":"\u8d2a\u5fc3","slug":"\u8d2a\u5fc3","permalink":"https:\/\/skywt.cn\/tag\/%E8%B4%AA%E5%BF%83\/"}],"categories":[]},{"title":"Tarjan \u7b97\u6cd5\u6c42\u89e3\u65e0\u5411\u56fe\u7684\u5272\u70b9\u4e0e\u5272\u8fb9","date":"2018-08-05T17:47:49+08:00","path":"https:\/\/skywt.cn\/posts\/tarjan-cut-vertex-cut-edge","text":"\u5728\u4e00\u5e45\u65e0\u5411\u56fe\u4e2d\uff0c\u5982\u679c\u5220\u9664\u4e86\u4e00\u4e2a\u70b9\uff0c\u5bfc\u81f4\u56fe\u5206\u6210\u4e86\u4e24\u4e2a\u6216\u591a\u4e2a\u8054\u901a\u5757\uff08\u5f3a\u8fde\u901a\u5206\u91cf\uff09\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u5c31\u662f\u5272\u70b9\u3002\u600e\u4e48\u6c42\u8fd9\u6837\u7684\u70b9\u5462\uff1f\u6700\u539f\u59cb\u66b4\u529b\u7684\u65b9\u6cd5\u5c31\u662f\u6bcf\u6b21\u679a\u4e3e\u4e00\u4e2a\u70b9\uff0c\u5220\u9664\uff0c\u8dd1\u4e00\u904d\u6700\u77ed\u8def\u3002\u4eca\u5929\u6211\u4eec\u53ef\u4ee5\u7528\u66f4\u9ad8\u7ea7\u7684 Tarjan \u7b97\u6cd5 $ \\displaystyle \\Theta (N)$ \u6c42\u89e3\u3002\n\n\u5272\u70b9\u4e0e\u5272\u8fb9\n\u5272\u70b9\u7684\u5b9a\u4e49\n\n\u5728\u4e00\u4e2a\u65e0\u5411\u56fe\u4e2d\uff0c\u5982\u679c\u6709\u4e00\u4e2a\u9876\u70b9\u96c6\u5408\uff0c\u5220\u9664\u8fd9\u4e2a\u9876\u70b9\u96c6\u5408\u4ee5\u53ca\u8fd9\u4e2a\u96c6\u5408\u4e2d\u6240\u6709\u9876\u70b9\u76f8\u5173\u8054\u7684\u8fb9\u4ee5\u540e\uff0c\u56fe\u7684\u8fde\u901a\u5206\u91cf\u589e\u591a\uff0c\u5c31\u79f0\u8fd9\u4e2a\u70b9\u96c6\u4e3a\u5272\u70b9\u96c6\u5408\u3002\n\n\u4e5f\u5c31\u662f\u524d\u6587\u6240\u8ff0\uff1a\u5982\u679c\u5220\u9664\u4e86\u4e00\u4e2a\u70b9\uff0c\u5bfc\u81f4\u56fe\u5206\u6210\u4e86\u4e24\u4e2a\u6216\u591a\u4e2a\u8054\u901a\u5757\uff08\u5f3a\u8fde\u901a\u5206\u91cf\uff09\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u5c31\u662f\u5272\u70b9\uff08\u4e5f\u53eb\u4f5c\u5272\u9876\uff09\u3002\u8bf4\u5f97\u518d\u901a\u4fd7\u70b9\uff0c\u53bb\u6389\u5272\u70b9\uff0c\u56fe\u4f1a\u4e0d\u8fde\u901a\u3002\n\u5272\u8fb9\u7684\u5b9a\u4e49\n\u4e0e\u5272\u70b9\u7c7b\u4f3c\uff1a\n\n\u5047\u8bbe\u6709\u8fde\u901a\u56fe G\uff0ce \u662f\u5176\u4e2d\u4e00\u6761\u8fb9\uff0c\u5982\u679c G-e \u662f\u4e0d\u8fde\u901a\u7684\uff0c\u5219\u8fb9 e \u662f\u56fe G \u7684\u4e00\u6761\u5272\u8fb9\u3002\n\n\u5c31\u662f\u8bf4\u5982\u679c\u628a\u8fd9\u6761\u8fb9\u5220\u9664\uff0c\u56fe\u5206\u4e3a\u4e24\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u8fd9\u6761\u8fb9\u5c31\u79f0\u4e3a\u5272\u8fb9\uff08\u4e5f\u79f0\u4e3a\u6865\uff09\u3002\n\u66b4\u529b\u6c42\u89e3\n\u4ee5\u5272\u70b9\u4e3a\u4f8b\uff1a\u524d\u9762\u4e5f\u63d0\u5230\u4e86\uff0c\u6700\u539f\u59cb\u7684\u66b4\u529b\u65b9\u6cd5\uff1a\u5c31\u662f\u6bcf\u6b21\u679a\u4e3e\u4e00\u4e2a\u70b9\uff0c\u5220\u9664\uff0c\u8dd1\u4e00\u904d\u6700\u77ed\u8def\uff0c\u770b\u770b\u7ed3\u70b9 1 \u662f\u5426\u8fd8\u53ef\u4ee5\u5230\u8fbe\u9664\u4e86\u5220\u9664\u70b9\u4e4b\u5916\u7684\u6240\u6709\u70b9\uff0c\u5982\u679c\u4e0d\u80fd\u5219\u8bf4\u660e\u5220\u9664\u70b9\u662f\u5272\u70b9\u3002\u5982\u679c\u8dd1\u6700\u7a33\u7684 Dijkstra+Heap\uff0c\u590d\u6742\u5ea6\u4e5f\u8981 $\\Theta (N\\ast M \\ast log_2(M))$\u2026\u2026\nTarjan \u7b97\u6cd5\n\u6c42\u89e3\u5272\u70b9\u548c\u5272\u8fb9\uff0c\u7528 Tarjan \u7b97\u6cd5\u4f1a\u5341\u5206\u4f18\u79c0\u3002\u5728\u6b64\u4e4b\u524d\u6211\u4eec\u8981\u5148\u5b66\u4e60\u4e0b\u4ec0\u4e48\u662f DFS \u6811\u3002\nDFS \u6811\n\u6240\u8c13 DFS \u6811\uff0c\u5c31\u662f\u5bf9\u4e00\u5e45\u56fe\u8fdb\u884c DFS \u6309\u7167 DFS \u987a\u5e8f\u5f97\u5230\u7684\u4e00\u68f5\u751f\u6210\u6811\u3002\u53ef\u4ee5\u4ece\u4efb\u610f\u70b9\u5f00\u59cb DFS\uff08\u4e00\u822c\u4ece 1 \u5f00\u59cb\uff09\uff0c\u5e76\u4e0d\u5f71\u54cd\u7b54\u6848\u3002\u5728\u8fd9\u5e45\u56fe\u4e2d\uff0c\u5728 DFS \u6811\u4e2d\u7684\u8fb9\u79f0\u4e3a\u6811\u8fb9\uff0c\u4e0d\u5728 DFS \u6811\u4e2d\u7684\u8fb9\u79f0\u4e3a\u975e\u6811\u8fb9\u3002\n\u8fd4\u7956\u8fb9\n\u8fd9\u91cc\u6211\u4eec\u53ea\u7814\u7a76\u65e0\u5411\u56fe\u3002\u5728\u65e0\u5411\u56fe\u4e2d\uff0c\u975e\u6811\u8fb9\u53ea\u4f1a\u4ee5\u8fd4\u7956\u8fb9\u7684\u5f62\u5f0f\u5b58\u5728\u3002\u4e5f\u5c31\u662f\u8bf4\u975e\u6811\u8fb9\u4f1a\u4ece\u5f53\u524d\u70b9\u6307\u5411\u67d0\u4e2a\u7956\u5148\u3002\u4f8b\u5982\u4e0b\u56fe\u4e2d\uff0cD \u6307\u5411 A \u7684\u8fb9\u5c31\u662f\u8fd4\u7956\u8fb9\u3002\uff08\u8fd9\u5f20\u56fe\u5176\u5b9e\u662f\u65e0\u5411\u56fe\uff0c\u4e3a\u4e86\u4fbf\u4e8e\u7406\u89e3\uff0c\u6309\u7167 DFS \u7684\u987a\u5e8f\u6807\u51fa\u65b9\u5411\uff09\ngraph TB\n    A((A))--&gt;B((B))\n    B((B))--&gt;C((C))\n    B((B))--&gt;D((D))\n    D((D))--&gt;A\n\u7b97\u6cd5\u539f\u7406\n\u5272\u70b9\u7684\u6c42\u89e3\n\u53ef\u4ee5\u628a\u5272\u70b9\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5\uff1a\n\n\u6839\u8282\u70b9\u5728 DFS \u6811\u4e2d\u6709\u591a\u4e8e\u4e00\u4e2a\u5b50\u8282\u70b9\uff0c\u90a3\u4e48\u6839\u8282\u70b9\u5c31\u662f\u5272\u70b9\uff1b\n\u5bf9\u4e8e\u975e\u6839\u8282\u70b9 u\uff0c\u5b83\u81f3\u5c11\u6709\u4e00\u68f5\u5b50\u6811\u6ca1\u6709\u8fd4\u7956\u8fb9\u53ef\u4ee5\u5230\u8fbe u \u7684\u7956\u5148\u3002\n\n\u7b2c\u4e00\u79cd\u60c5\u51b5\u5f88\u597d\u7406\u89e3\uff1b\u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u5982\u679c u \u6709\u4e00\u4e2a\u5b50\u6811\u4e2d\u6709\u4e00\u4e2a\u7ed3\u70b9 x \u6709\u8fd4\u7956\u8fb9\u53ef\u4ee5\u5230\u8fbe u \u7684\u7956\u5148\uff0c\u90a3\u4e48\u628a u \u5220\u9664\u540e\uff0c\u7531\u4e8e\u539f\u6765\u7684\u6811\u662f\u8054\u901a\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u627e\u51fa\u7684 x \u4ecd\u7136\u6709\u8fb9\u53ef\u4ee5\u5230\u8fbe u \u4ee5\u4e0a\u7684\u6240\u6709\u70b9\uff0c\u53c8\u56e0\u4e3a\u90a3\u4e2a\u70b9\u5728 u \u7684\u4e00\u68f5\u5b50\u6811\u91cc\uff0c\u90a3\u4e48\u8fd9\u68f5\u5b50\u6811\u5c31\u53ef\u4ee5\u5230\u8fbe u \u4ee5\u4e0a\u7684\u6240\u6709\u70b9\uff01\n\u5272\u8fb9\u7684\u6c42\u89e3\n\u5272\u8fb9\u751a\u81f3\u66f4\u52a0\u7b80\u5355\uff0c\u5ffd\u7565\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u5982\u679c\u4e00\u6761\u8fb9\u662f\u5272\u8fb9\uff0c\u5f53\u4e14\u4ec5\u5f53\u5176\u5b50\u6811\u5747\u6ca1\u6709\u8de8\u8fc7\u8fd9\u6761\u8fb9\u3002\n\u5177\u4f53\u5b9e\u73b0\n\u4ee5\u6c42\u5272\u70b9\u4e3a\u4f8b\uff0c\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u51e0\u4e2a\u4fe1\u606f\uff1a\n\n\n$dfn(x)$ \u8868\u793a\u70b9 x \u7684\u6807\u53f7\uff0c\u5373\u5b83\u662f\u7b2c\u51e0\u4e2a\u88ab\u904d\u5386\u5230\u7684\u70b9\u3002\u7ef4\u62a4\u8fd9\u4e00\u4fe1\u606f\u5341\u5206\u6709\u7528\uff0c\u56e0\u4e3a\u5982\u679c\u70b9 a \u662f\u70b9 b \u7684\u7956\u5148\uff0c\u90a3\u4e48 $dfn(a) \\lt dfn(b)$ \u3002\n\n\n$low(x)$ \u8868\u793a x \u70b9\u4e0d\u7ecf\u8fc7\u5176\u7684\u7236\u8282\u70b9\uff0c\u80fd\u901a\u8fc7\u8fd4\u7956\u8fb9\u5230\u8fbe\u7684 $dfn$ \u6700\u5c0f\u7684\u7956\u5148\u7684 $dfn$ \u503c\u3002\u521d\u59cb\u503c\u4e3a $dfn(x)$ \u3002\n\n$fa(x)$ \u8868\u793a x \u7684\u7236\u8282\u70b9\u3002\u5728\u6c42\u5272\u8fb9\u65f6\uff0c\u6211\u4eec\u8bb0\u5f55\u7684 $fa(x)$ \u8868\u793a x \u4e0e\u5176\u7956\u5148\u4e4b\u95f4\u7684\u8fb9\u7684\u6807\u53f7\u3002\n\n\u5728 DFS \u7684\u540c\u65f6\u53ef\u4ee5\u7ef4\u62a4\u8fd9\u51e0\u4e2a\u4fe1\u606f\uff0c\u56de\u6eaf\u65f6\u5224\u65ad\u5982\u679c $low(v)>dfn(x)$ \uff08v \u662f x \u7684\u513f\u5b50\uff09\u8bf4\u660e x \u662f\u5272\u70b9\u3002\n\u6838\u5fc3\u4ee3\u7801\u5982\u4e0b\uff1a\ninline void DFS(int x){\n    vis[x]=1;dfn[x]=low[x]=++acnt;\n    int nowson=0;\n    for (int i=lnk[x];i;i=nxt[i]) if (!vis[son[i]]){\n        nowson++;\n        fa[son[i]]=x;\n        DFS(son[i]);\n        low[x]=min(low[x],low[son[i]]);\n        if (x!=1&amp;&amp;low[son[i]]&gt;dfn[x]) ans[x]=true;\n        if (x==1&amp;&amp;nowson&gt;=2) ans[x]=true;\n    } else if (son[i]!=fa[x]) low[x]=min(dfn[son[i]],low[x]);\n}\n\u4f8b\u9898\n\u5272\u70b9\u6a21\u677f\u9898\nPOJ1144 Network\n\u5272\u8fb9\u6a21\u677f\u9898\nZOJ2588 Burning Bridges\n\u53c2\u8003\u4ee3\u7801\n\u5272\u70b9\uff08POJ1144\uff09\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\nusing namespace std;\nconst int maxn=105,maxe=1000005;\nint n,fa[maxn];\nint tot=0,acnt=0,dfn[maxn],low[maxn];\nint lnk[maxn],nxt[maxe],son[maxe];\nbool vis[maxn],ans[maxn];\ninline void add(int x,int y){\n    tot++;son[tot]=y;nxt[tot]=lnk[x];lnk[x]=tot;\n}\ninline void Init(){\n    tot=0;acnt=0;\n    memset(fa,0,sizeof(fa));\n    memset(lnk,0,sizeof(lnk));\n    memset(nxt,0,sizeof(nxt));\n    memset(son,0,sizeof(son));\n    memset(vis,0,sizeof(vis));\n    memset(dfn,0,sizeof(dfn));\n    memset(ans,0,sizeof(ans));\n}\ninline void DFS(int x){\n    vis[x]=1;dfn[x]=low[x]=++acnt;\n    int nowson=0;\n    for (int i=lnk[x];i;i=nxt[i]) if (!vis[son[i]]){\n        nowson++;\n        fa[son[i]]=x;\n        DFS(son[i]);\n        low[x]=min(low[x],low[son[i]]);\n        if (x!=1&amp;&amp;low[son[i]]&gt;=dfn[x]) ans[x]=true;\n        if (x==1&amp;&amp;nowson&gt;=2) ans[x]=true;\n    } else if (son[i]!=fa[x]) low[x]=min(dfn[son[i]],low[x]);\n}\nint main(){\n    for (;;){\n        scanf(\"%d\",&amp;n);if (n==0) break;\n        Init();int ans_cnt=0;\n        int x;scanf(\"%d\",&amp;x);\n        while (x!=0){\n            int now=0;char ch=getchar();\n            while (ch!=10&amp;&amp;ch!=13){\n                while ((ch&lt;'0'||ch&gt;'9')&amp;&amp;ch!=10&amp;&amp;ch!=13) ch=getchar();\n                if (ch==10||ch==13) break;\n                while (ch&gt;='0'&amp;&amp;ch&lt;='9') now=now*10+ch-'0',ch=getchar();\n                add(x,now);add(now,x);\n                now=0;\n            }\n            scanf(\"%d\",&amp;x);\n        }\n        DFS(1);\n        for (int i=1;i&lt;=n;i++) ans_cnt+=ans[i];\n        printf(\"%d\\n\",ans_cnt);\n    }\n    return 0;\n}\n\u5272\u8fb9\uff08ZOJ2588\uff09\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;vector&gt;\nusing namespace std;\nconst int maxn=10005,maxe=200005;\nint T,n,m,fa[maxn];\nint tot=0,acnt=0,dfn[maxn],low[maxn];\nint lnk[maxn],nxt[maxe],son[maxe],id[maxe];\nbool vise[maxe],ans[maxe],vis[maxn];\nvector&lt;int&gt; que_ans;\ninline void add(int x,int y,int z){\n    tot++;son[tot]=y;id[tot]=z;nxt[tot]=lnk[x];lnk[x]=tot;\n}\ninline void Init(){\n    tot=0;acnt=0;que_ans.clear();\n    memset(fa,0,sizeof(fa));\n    memset(id,0,sizeof(id));\n    memset(lnk,0,sizeof(lnk));\n    memset(nxt,0,sizeof(nxt));\n    memset(son,0,sizeof(son));\n    memset(dfn,0,sizeof(dfn));\n    memset(low,0,sizeof(low));\n    memset(ans,1,sizeof(ans));\n    memset(vis,0,sizeof(vis));\n}\ninline void DFS(int x){\n    dfn[x]=low[x]=++acnt;\n    for (int i=lnk[x];i;i=nxt[i]) if (!vis[son[i]]){\n        fa[son[i]]=id[i];vis[son[i]]=true;\n        DFS(son[i]);\n        if (low[son[i]]&lt;=dfn[x]) ans[id[i]]=false;\n        low[x]=min(low[x],low[son[i]]);\n    } else if (id[i]!=fa[x]) low[x]=min(dfn[son[i]],low[x]),ans[id[i]]=false;\n}\nint main(){\n    scanf(\"%d\",&amp;T);\n    while (T--){\n        scanf(\"%d%d\",&amp;n,&amp;m);\n        Init();\n        for (int i=1;i&lt;=m;i++){\n            int x,y;scanf(\"%d%d\",&amp;x,&amp;y);\n            add(x,y,i);add(y,x,i);\n        }\n        vis[1]=true;DFS(1);\n\n        for (int i=1;i&lt;=m;i++) if (ans[i]) que_ans.push_back(i);\n        int nn=que_ans.size();printf(\"%d\\n\",nn);\n        for (int i=0;i&lt;nn-1;i++) printf(\"%d \",que_ans[i]);\n        if (nn!=0) printf(\"%d\\n\",que_ans[nn-1]);\n        \/\/ printf(\"LOW: \");for (int i=1;i&lt;=n;i++) printf(\"%d \",low[i]);printf(\"\\n\");\n        \/\/ printf(\"DFN: \");for (int i=1;i&lt;=n;i++) printf(\"%d \",dfn[i]);printf(\"\\n\");\n        if (T&gt;0) printf(\"\\n\");\n    }\n    return 0;\n}\n\u53c2\u8003\n\u5272\u70b9_\u767e\u5ea6\u767e\u79d1\n\u5272\u8fb9_\u767e\u5ea6\u767e\u79d1\n\u5410\u69fd\u4e00\u4e0b\uff0cPOJ1144 \u8c03\u4ee3\u7801\u4e00\u76f4\u8c03\u4e0d\u5bf9\uff0c\u7136\u540e\u53bb discuss \u533a\u641e\u4e86\u7ec4\u6570\u636e\uff0c\u7528 Mermaid \u751f\u6210\u56fe\uff0c\u6211\u4ee5\u4e3a\u4f1a\u5f88\u6e05\u6670\uff0c\u7ed3\u679c\u662f\u8fd9\u6837\u7684\u2026\u2026\ngraph TB;\n17---4\n17---18\n1---11\n7---5\n13---1\n3---1\n14---5\n15---20\n9---12\n6---8\n16---14\n18---8\n8---4\n20---18\n20---10\n2---3\n12---5\n5---9\n5---20\n19---20\n19---9\n19---11\n19---2\n11---3\n4---15\n10---3\n21---3\n\u5410\u8840\u2026\u2026","tags":[{"name":"OI\u5b66\u4e60","slug":"OI\u5b66\u4e60","permalink":"https:\/\/skywt.cn\/tag\/OI%E5%AD%A6%E4%B9%A0\/"},{"name":"OI\u7b97\u6cd5","slug":"OI\u7b97\u6cd5","permalink":"https:\/\/skywt.cn\/tag\/OI%E7%AE%97%E6%B3%95\/"},{"name":"\u56fe\u8bba","slug":"\u56fe\u8bba","permalink":"https:\/\/skywt.cn\/tag\/%E5%9B%BE%E8%AE%BA\/"}],"categories":[]},{"title":"\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u7684\u5e94\u7528","date":"2018-08-06T14:29:00+08:00","path":"https:\/\/skywt.cn\/posts\/system-of-difference-constraints","text":"\u5982\u679c\u544a\u8bc9\u4f60\u5728\u4e00\u4e2a\u4e09\u89d2\u5f62\u4e2d\uff0c$B-A \\leqslant c, C-B \\leqslant a, C-A \\leqslant b$\uff0c\u600e\u4e48\u6c42 $C-A$ \u7684\u6700\u5927\u503c\u5462\uff1f\u901a\u8fc7yy\u89c2\u5bdf\u53ef\u4ee5\u53d1\u73b0\uff0c$C-A$ \u7684\u6700\u5927\u503c\u662f $min(a+c,b)$\u3002\u8fd9\u4e2a\u7b54\u6848\u5982\u4f55\u5f97\u51fa\uff1f\u5c06\u8fd9\u4e2a\u4e09\u89d2\u5f62\u5185\u7684\u7ea6\u675f\u6761\u4ef6\u63a8\u5e7f\u5230\u66f4\u591a\u7ea6\u675f\u6761\u4ef6\u5462\uff1f\n\n\n\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\uff08System of Difference Constraints\uff09\uff0c\u662f\u6c42\u89e3\u5173\u4e8e\u4e00\u7ec4\u53d8\u6570\u7684\u7279\u6b8a\u4e0d\u7b49\u5f0f\u7ec4\u4e4b\u65b9\u6cd5\u3002\n\n\u6982\u5ff5\u4e0e\u5b9a\u4e49\n\u4e00\u4e2a\u7cfb\u7edf\u7531 $n$ \u4e2a\u53d8\u91cf\u548c $m$ \u4e2a\u7ea6\u675f\u6761\u4ef6\u7ec4\u6210\uff08\u5c31\u5982\u540c\u4e0a\u9762\u4e09\u89d2\u5f62\u91cc\u7684\u4f8b\u5b50\uff09\uff0c\u6bcf\u4e2a\u7ea6\u675f\u6761\u4ef6\u5f62\u5982\uff1a$x_j-x_i \\leqslant b_i$\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7cfb\u7edf\u5c31\u662f\u4e00\u4e2a\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\uff08System of Difference Constraints\uff09\u3002\u8fd9\u4e2a\u5b9a\u4e49\u5f88\u76f4\u89c2\uff1a\u7528\u4e00\u7cfb\u5217\u4e0d\u7b49\u5f0f\u7ea6\u675f\u5dee\u5206\u7684\u57df\u3002\n\u89e3\u6cd5\n\u4ed4\u7ec6\u89c2\u5bdf\u8fd9\u4e2a\u4e0d\u7b49\u5f0f\uff1a\nx_j-x_i \\leqslant b_i\n\u53ef\u4ee5\u53d1\u73b0\u5b83\u53ef\u4ee5\u53d8\u5f62\u6210\uff1a$x_j\\leqslant x_i+b_i$\u3002 \u662f\u4e0d\u662f\u6709\u70b9\u50cf SPFA\/Dijkstra \u91cc\u4fee\u6b63\u6700\u77ed\u8def\u7684\u5224\u65ad\u65b9\u7a0b\uff08\u4e09\u89d2\u4e0d\u7b49\u5f0f\uff09\uff1f\uff01\ndist(x)+w(i) &lt; dst(son(i))\n\u6240\u4ee5\u6211\u4eec\u5c31\u53ef\u4ee5\u60f3\u5230\u4e00\u4e2a\u5947\u5999\u7684\u505a\u6cd5\uff1a\u4ece $i$ \u5230 $j$ \u5efa\u8fb9\uff0c\u8fb9\u6743\u4e3a $b_k$\uff0c\u6700\u540e\u589e\u52a0\u4e00\u4e2a\u6e90\u70b9 $s$\uff0c\u8dd1\u4e00\u904d\u6700\u77ed\u8def\u5c31\u53ef\u4ee5\u4e86\uff01\u5bf9\u4e8e\u5927\u4e8e\u7b49\u4e8e\u7684\u60c5\u51b5\u4e5f\u662f\u4e00\u6837\u7684\u3002\n\u5728\u6c42\u89e3\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u7684\u65f6\u5019\u4e00\u822c\u6211\u4eec\u7528 SPFA\uff08Bellman-ford\uff09\u7b97\u6cd5\u6c42\u6700\u77ed\u8def\u800c\u4e0d\u7528 Dijkstra\uff0c\u56e0\u4e3a SPFA \u53ef\u4ee5\u5224\u65ad\u8d1f\u73af\uff0c\u5373\u65e0\u89e3\u60c5\u51b5\u3002\u4f46\u662f\u5728\u9898\u76ee\u544a\u8bc9\u6211\u4eec\u4e00\u5b9a\u6709\u89e3\u65f6\u8fd8\u662f\u5c3d\u91cf\u7528 Dijkstra+Heap\uff0c\u4e0d\u7136\u5bb9\u6613\u88ab\u5361\uff08\u5728\u6d1b\u8c37\u4e0a\u770b\u89c1\u4e00\u53e5\u8bdd\uff1a\u4e0d\u5361\u4f60\u662f\u60c5\u5206\uff0c\u5361\u4f60\u662f\u672c\u5206\u2026\u2026\uff09\u3002\n\u56de\u5230\u524d\u9762\u8bf4\u7684\u4e00\u4e2a\u4e09\u89d2\u5f62\u91cc\u7684\u60c5\u51b5\uff1a$B-A \\leqslant c, C-B \\leqslant a, C-A \\leqslant b$\uff0c\u5219 $C-A$ \u7684\u6700\u5927\u503c\u662f $min(a+c,b)$\u3002\u753b\u51fa\u6765\u7684\u56fe\u5c31\u662f\uff1a\ngraph LR;\nA((A)) --c--&gt; B((B));\nB((B)) --a--&gt; C((C));\nA --b--&gt; C\n\uff08\u6211\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48 Mermaid \u753b\u7684\u56fe\u8fd9\u4e48\u4e11\u2026\u2026\uff09\n\u4f8b\u9898\u4e0e\u9898\u89e3\nPOJ 1201 Intervals\nPOJ 1201 Intervals\n\u9898\u76ee\u5927\u610f\u662f\u7ed9\u4f60 n \u4e2a\u95ed\u533a\u95f4\uff0c\u6bcf\u4e2a\u95ed\u533a\u95f4 $[L_i,R_i]$ \u91cc\u8981\u6c42\u81f3\u5c11\u9009\u62e9 $c_i$ \u4e2a\u6570\u5b57\u3002\u95ee\u4f60\u4e00\u5171\u6700\u5c11\u9009\u591a\u5c11\u6570\u5b57\u3002\n\u5982\u679c\u7528 $sum(i)$ \u8868\u793a\u5c0f\u4e8e\u7b49\u4e8e $i$ \u7684\u6570\u5b57\u4e2d\u4e00\u5171\u9009\u4e86\u591a\u5c11\uff08\u5176\u5b9e\u5c31\u662f\u524d\u7f00\u548c\uff09\uff0c\u90a3\u4e48\u5f88\u663e\u7136\u6839\u636e\u9898\u76ee\u4e2d\u6240\u7ed9\u4fe1\u606f\u53ef\u4ee5\u5217\u51fa\uff1a\nsum(R_1)-sum(L_1-1) \\geqslant c_1 \\\\\nsum(R_2)-sum(L_2-1) \\geqslant c_2 \\\\\n\\dots \\\\\nsum(R_n)-sum(L_n-1) \\geqslant c_n\n\u5f88\u663e\u7136\u662f\u5dee\u5206\u7ea6\u675f\u3002\u5efa\u8fb9\u6c42\u6700\u957f\u8def\u5373\u53ef\u3002\n\u4ee3\u7801\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;queue&gt;\nusing namespace std;\nconst int maxn=50005,maxe=150005,INF=1e9;\nint n,s,t,dst[maxn];\nint tot=0,lnk[maxn],nxt[maxe],son[maxe],w[maxe];\nbool vis[maxn];\nqueue&lt;int&gt; que;\ninline int read(){\n    int ret=0,f=1;char ch=getchar();\n    while (ch&lt;'0'||ch&gt;'9') {if (ch=='-') f=-1;ch=getchar();}\n    while (ch&gt;='0'&amp;&amp;ch&lt;='9') ret=ret*10+ch-'0',ch=getchar();\n    return ret*f;\n}\ninline void Init(){\n    tot=0;\n    s=INF;t=-INF;\n    memset(lnk,-1,sizeof(lnk));\n    memset(nxt,-1,sizeof(nxt));\n    memset(son,-1,sizeof(son));\n    memset(w,0,sizeof(w));\n    memset(vis,0,sizeof(vis));\n    memset(dst,0x80,sizeof(dst));\n}\ninline void add(int x,int y,int z){\n    tot++;son[tot]=y;w[tot]=z;nxt[tot]=lnk[x];lnk[x]=tot;\n    s=min(s,min(x,y));t=max(t,max(x,y));\n}\ninline void SPFA(){\n    que.push(s);vis[s]=true;dst[s]=0;\n    while (!que.empty()){\n        int x=que.front();que.pop();vis[x]=false;\n        for (int i=lnk[x];i!=-1;i=nxt[i]) if (dst[x]+w[i]&gt;dst[son[i]]){\n            dst[son[i]]=dst[x]+w[i];\n            if (!vis[son[i]]) vis[son[i]]=true,que.push(son[i]);\n        }\n    }\n}\nint main(){\n    while (scanf(\"%d\",&amp;n)!=-1){\n        Init();\n        for (int i=0;i&lt;n;i++){\n            int a=read(),b=read(),c=read();\n            add(a-1,b,c);\n        }\n        for (int i=s+1;i&lt;=t;i++) add(i,i-1,-1),add(i-1,i,0);\n        SPFA();\n        printf(\"%d\\n\",dst[t]);\n    }\n    return 0;\n}\nPOJ 3159 Candies\nPOJ 3159 Candies\n\u9898\u76ee\u5927\u610f\uff1a\u6709 n \u4e2a\u5b69\u5b50\u5206\u7cd6\u679c\uff0c\u7b2c $a_i$ \u4e2a\u5b69\u5b50\u8ba4\u4e3a\u7b2c $b_i$ \u4e2a\u5b69\u5b50\u4e0d\u5e94\u8be5\u5206\u5230\u6bd4\u4ed6\u5206\u5230\u7cd6\u679c\u6570\u591a $c_i$ \u7684\u7cd6\u679c\u3002\u95ee\u4f60\u5206\u5230\u6700\u591a\u7cd6\u679c\u7684\u5b69\u5b50\u4e0e\u5206\u5230\u6700\u5c11\u7cd6\u679c\u7684\u5b69\u5b50\u7684\u7cd6\u679c\u6570\u91cf\u4e4b\u5dee\u6700\u5927\u662f\u591a\u5c11\u3002\n\u66f4\u88f8\u7684\u5dee\u5206\u7ea6\u675f\uff0c\u6309\u9898\u76ee\u63cf\u8ff0\u5efa\u8fb9\uff0c\u4e5f\u5c31\u662f $d(b_i)-d(a_i) \\leqslant c_i$\u3002\u6c42\u6700\u77ed\u8def\u5373\u53ef\u3002\n\u6ce8\u610f\u8fd9\u9898\u5fc5\u987b\u5199 Dijkstra+Heap\uff0c\u5199 SPFA \u4f1a\u88ab\u5361\uff08\u636e\u8bf4\u53ef\u4ee5\u7528\u6808\u4f18\u5316\uff1f\uff09\u3002\n\u4ee3\u7801\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;queue&gt;\nusing namespace std;\nconst int maxn=30005,maxe=150005;\nint n,m,dst[maxn];\nint tot=0,lnk[maxn],nxt[maxe],son[maxe],w[maxe];\nbool vis[maxn];\nstruct HeapElementInfo{\n    int dst,id;\n    bool operator &lt;(const HeapElementInfo bb)const{\n        return dst&gt;bb.dst;\n    }\n};\npriority_queue&lt;HeapElementInfo&gt; heap;\ninline int read(){\n    int ret=0,f=1;char ch=getchar();\n    while (ch&lt;'0'||ch&gt;'9') {if (ch=='-') f=-1;ch=getchar();}\n    while (ch&gt;='0'&amp;&amp;ch&lt;='9') ret=ret*10+ch-'0',ch=getchar();\n    return ret*f;\n}\ninline void add(int x,int y,int z){\n    tot++;son[tot]=y;w[tot]=z;nxt[tot]=lnk[x];lnk[x]=tot;\n}\ninline void init(){\n    memset(dst,0x3f,sizeof(dst));\n}\ninline void Dijkstra(){\n    dst[1]=0;vis[1]=true;\n    for (int i=lnk[1];i;i=nxt[i]) heap.push((HeapElementInfo){w[i],son[i]}),dst[son[i]]=w[i];\n    for (int t=1;t&lt;n&amp;&amp;!heap.empty();t++){\n        HeapElementInfo now;\n        for (;;){\n            if (heap.size()==0) {printf(\"ERROR!\\n\");return;}\n            now.id=heap.top().id;now.dst=heap.top().dst;heap.pop();\n            if (now.dst==dst[now.id]&amp;&amp;!vis[now.id]) break;\n        }\n        vis[now.id]=true;\n        for (int i=lnk[now.id];i;i=nxt[i]) if (!vis[son[i]]&amp;&amp;dst[now.id]+w[i]&lt;dst[son[i]]){\n            dst[son[i]]=dst[now.id]+w[i];\n            heap.push((HeapElementInfo){dst[son[i]],son[i]});\n        }\n    }\n}\nint main(){\n    n=read();m=read();\n    init();\n    for (int i=0;i&lt;m;i++){\n        int x=read(),y=read(),z=read(); \/\/ dst[y]-dst[x]&lt;=z ==&gt; dst[y]&lt;=dst[x]+z\n        add(x,y,z);\n    }\n    Dijkstra();\n    printf(\"%d\\n\",dst[n]);\n    return 0;\n}\n\u53c2\u8003\n\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf - \u7ef4\u57fa\u767e\u79d1\uff0c\u81ea\u7531\u7684\u767e\u79d1\u5168\u4e66","tags":[{"name":"OI\u5b66\u4e60","slug":"OI\u5b66\u4e60","permalink":"https:\/\/skywt.cn\/tag\/OI%E5%AD%A6%E4%B9%A0\/"},{"name":"OI\u7b97\u6cd5","slug":"OI\u7b97\u6cd5","permalink":"https:\/\/skywt.cn\/tag\/OI%E7%AE%97%E6%B3%95\/"},{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u56fe\u8bba\u7c7b\u578b\u9898","slug":"\u56fe\u8bba\u7c7b\u578b\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E5%9B%BE%E8%AE%BA%E7%B1%BB%E5%9E%8B%E9%A2%98\/"},{"name":"\u6700\u77ed\u8def","slug":"\u6700\u77ed\u8def","permalink":"https:\/\/skywt.cn\/tag\/%E6%9C%80%E7%9F%AD%E8%B7%AF\/"},{"name":"\u56fe\u8bba","slug":"\u56fe\u8bba","permalink":"https:\/\/skywt.cn\/tag\/%E5%9B%BE%E8%AE%BA\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"CodeForces 274D Lovely Matrix\uff1a\u201c\u5197\u4f59\u70b9\u201d \u5efa\u8fb9 + \u62d3\u6251","date":"2018-08-06T18:41:00+08:00","path":"https:\/\/skywt.cn\/posts\/cf274d","text":"\u9898\u76ee\u94fe\u63a5\uff1aCodeForces 274D Lovely Matrix\n\u4eca\u5929\u770bCF\u5b98\u65b9\u9898\u89e3\u7684\u65f6\u5019\u5b66\u6765\u4e00\u53e5\u8bdd\uff0c\u66b4\u529b\u89e3\u6cd5\u79f0\u4e3a \u201cThe na\u00efve solution\u201d :joy:\n\nProblem\nLenny had an n\u2009\u00d7\u2009m matrix of positive integers. He loved the matrix so much, because each row of the matrix was sorted in non-decreasing order. For the same reason he calls such matrices of integers lovely.\nOne day when Lenny was at school his little brother was playing with Lenny's matrix in his room. He erased some of the entries of the matrix and changed the order of some of its columns. When Lenny got back home he was very upset. Now Lenny wants to recover his matrix.\nHelp him to find an order for the columns of the matrix so that it's possible to fill in the erased entries of the matrix to achieve a lovely matrix again. Note, that you can fill the erased entries of the matrix with any integers.\nInput\nThe first line of the input contains two positive integers n and m $(1\u2009\u2264\u2009n\u00b7m\u2009\u2264\u200910^5)$. Each of the next n lines contains m space-separated integers representing the matrix. An integer -1 shows an erased entry of the matrix. All other integers (each of them is between $0$ and $10^9$ inclusive) represent filled entries.\nOutput\nIf there exists no possible reordering of the columns print -1. Otherwise the output should contain m integers $p_1,\u2009p_2,\u2009...,\u2009p_m$ showing the sought permutation of columns. So, the first column of the lovely matrix will be p1-th column of the initial matrix, the second column of the lovely matrix will be $p_2$-th column of the initial matrix and so on.\nExamples\nInput #1\n3 3\n1 -1 -1\n1 2 1\n2 -1 1\nOutput #1\n3 1 2 \nInput #2\n2 3\n1 2 2\n2 5 4\nOutput #2\n1 3 2 \nInput #3\n2 3\n1 2 3\n3 2 1\nOutput #3\n-1\nTranslation\n\u7ed9\u4f60\u4e00\u4e2a n \u884c m \u5217\u7684\u77e9\u9635\uff0c\u5176\u4e2d -1 \u53ef\u4ee5\u6362\u6210\u4efb\u4f55\u6570\u5b57\u3002\u8981\u4f60\u91cd\u65b0\u5b89\u6392\u8fd9\u4e9b\u5217\u7684\u987a\u5e8f\uff0c\u4f7f\u5f97\u77e9\u9635\u6bcf\u884c\u5355\u8c03\u4e0d\u964d\u3002\u5982\u679c\u505a\u4e0d\u5230\u5219\u8f93\u51fa -1\u3002\nAnalysis\n\u770b\u5230\u8fd9\u9898\u5f88\u5bb9\u6613\u60f3\u5230\u662f\u62d3\u6251\u6392\u5e8f\uff0c\u4f46\u662f\u5bf9\u4e8e\u6bcf\u4e00\u884c\u6211\u4eec\u90fd\u9700\u8981 $N^2$ \u5730\u5efa\u8fb9\uff0c\u663e\u7136\u4f1a\u8d85\u65f6\u3002\u8fd9\u65f6\u5019\u5c31\u8981\u7528\u5230\u4e00\u4e2a\u9ed1\u79d1\u6280\uff1a\u5229\u7528\u5197\u4f59\u70b9\u5efa\u8fb9\u3002\n\u5bf9\u4e8e\u6bcf\u4e00\u884c\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5b83\u548c\u7b2c\u4e00\u4e2a\u6bd4\u5b83\u5c0f\u7684\u5143\u7d20\u4e4b\u95f4\u589e\u52a0\u4e00\u4e2a\u201c\u5197\u4f59\u70b9\u201d\uff0c\u5728\u5b83\u548c\u7b2c\u4e00\u4e2a\u6bd4\u5b83\u5927\u7684\u5143\u7d20\u4e4b\u95f4\u4e5f\u5efa\u4e00\u4e2a\u201c\u5197\u4f59\u70b9\u201d\uff0c\u7136\u540e\u8ba9\u5b83\u4e0e\u8fd9\u4e24\u4e2a\u201c\u5197\u4f59\u70b9\u201d\u8fde\u8fb9\u3002\u5176\u5b9e\u5177\u4f53\u5728\u5b9e\u73b0\u7684\u65f6\u5019\uff0c\u6211\u4eec\u662f\u5bf9\u4e8e\u6bcf\u884c\u7684\u5143\u7d20\u6392\u5e8f\u505a\u7684\uff0c\u8fd9\u6837\u5efa\u8fb9\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u964d\u5230 $\\Theta (N\\ast M)$\uff0c\u4f46\u662f\u7a7a\u95f4\u8981\u5f00\u4e24\u500d\uff08\u56e0\u4e3a\u589e\u52a0\u7684\u201c\u5197\u4f59\u70b9\u201d\u4e5f\u8981\u52a0\u5165\u62d3\u6251\u6392\u5e8f\uff09\u3002\u8fd9\u662f\u4e00\u79cd\u5178\u578b\u7684\u7a7a\u95f4\u6362\u65f6\u95f4\u7684\u601d\u60f3\u3002\n\u5efa\u8fb9\u6838\u5fc3\u4ee3\u7801\u5982\u4e0b\uff1a\ninline void Build(int k){ \/\/ K \u4ee3\u8868\u5f53\u524d\u884c\uff0crcd[].x \u5b58\u50a8\u4e86\u5df2\u7ecf\u6392\u597d\u5e8f\u7684\u6bcf\u884c\u6570\u636e\n    for (int i=1;i&lt;=m;i++) ans[i].id=i;\n    int s=-1;bool fst=true; \/\/ fst \u6807\u8bb0\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u7531\u4e8e\u6ca1\u6709\u6bd4\u5176\u66f4\u5c0f\u7684\u5143\u7d20\uff0c\u6240\u4ee5\u5b83\u4e4b\u524d\u4e0d\u9700\u8981\u589e\u52a0\u5197\u4f59\u70b9\u3002\u6700\u5927\u5143\u7d20\u4e5f\u7c7b\u4f3c\u3002\n    while (rcd[k][s+1].x==-1) s++; \/\/ \u5bf9\u4e8e-1\u53ef\u4ee5\u5ffd\u7565\uff0c\u4e0d\u52a0\u5165\u62d3\u6251\u6392\u5e8f\n    for (int i=s+1;i&lt;m;){ \/\/ \u6392\u5e8f\u53bb\u91cd\u7684\u505a\u6cd5\n        int j=i;cnt++;\n        if (!fst) add(cnt-1+m,rcd[k][i].id);\n        while (rcd[k][j+1].x==rcd[k][i].x&amp;&amp;j+1&lt;m){\n            j++;\n            if (!fst) add(cnt-1+m,rcd[k][j].id);\n        }\n        fst=false;\n        if (j+1&lt;m) for (int t=i;t&lt;=j;t++) add(rcd[k][t].id,cnt+m);\n        i=j+1;\n    }\n}\nCode\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;vector&gt;\n#include&lt;queue&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\nconst int maxn=200005,maxe=400005;\nint n,m,cnt=0;\nint tot=0,lnk[maxn],nxt[maxe],son[maxe],ind[maxe];\nstruct WT{\n    int x,id;\n}ans[maxn];\nvector&lt;int&gt; a[maxn];\nvector&lt;WT&gt; rcd[maxn];\nqueue&lt;int&gt; que;\n\ninline int read(){\n    int ret=0,f=1;char ch=getchar();\n    while (ch&lt;'0'||ch&gt;'9'){if (ch=='-') f=-1;ch=getchar();}\n    while (ch&gt;='0'&amp;&amp;ch&lt;='9') ret=ret*10+ch-'0',ch=getchar();\n    return ret*f;\n}\ninline void add(int x,int y){\n    x++;y++;\n    tot++;ind[y]++;son[tot]=y;nxt[tot]=lnk[x];lnk[x]=tot;\n    \/\/printf(\"Add an edge: %d  -&gt; %d\\n\",x,y);\n}\ninline bool cmp(WT aa,WT bb){\n    return aa.x&lt;bb.x;\n}\ninline void Build(int k){\n    for (int i=1;i&lt;=m;i++) ans[i].id=i;\n    int s=-1;bool fst=true;\n    while (rcd[k][s+1].x==-1) s++;\n    for (int i=s+1;i&lt;m;){\n        int j=i;cnt++;\n        if (!fst) add(cnt-1+m,rcd[k][i].id);\n        while (rcd[k][j+1].x==rcd[k][i].x&amp;&amp;j+1&lt;m){\n            j++;\n            if (!fst) add(cnt-1+m,rcd[k][j].id);\n        }\n        fst=false;\n        if (j+1&lt;m) for (int t=i;t&lt;=j;t++) add(rcd[k][t].id,cnt+m);\n        i=j+1;\n    }\n}\ninline void Topology(){\n    for (int i=1;i&lt;=m;i++) if (ind[i]==0) ans[i].x=1,que.push(i);\n    while (!que.empty()){\n        int x=que.front();que.pop();\n        for (int i=lnk[x];i;i=nxt[i]){\n            ind[son[i]]--;\n            ans[son[i]].x=max(ans[son[i]].x,ans[x].x+bool(son[i]&lt;=m));\n            if (ind[son[i]]==0) que.push(son[i]);\n        }\n    }\n}\nint main(){\n    n=read();m=read();\n    for (int i=1;i&lt;=n;i++){\n        for (int j=0;j&lt;m;j++){\n            int now=read();\n            a[i].push_back(now);\n            rcd[i].push_back((WT){now,j});\n        }\n        sort(rcd[i].begin(),rcd[i].end(),cmp);\n    }\n    for (int i=1;i&lt;=n;i++) Build(i);\n    Topology();\n    sort(ans+1,ans+1+m,cmp);\n    if (ans[1].x==0){printf(\"-1\\n\");return 0;}\n    for (int i=1;i&lt;=m;i++) printf(\"%d \",ans[i].id);\n    printf(\"\\n\");\n    return 0;\n}","tags":[{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u56fe\u8bba\u7c7b\u578b\u9898","slug":"\u56fe\u8bba\u7c7b\u578b\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E5%9B%BE%E8%AE%BA%E7%B1%BB%E5%9E%8B%E9%A2%98\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"Uva 1599 \/ POJ 3967 Ideal Path\uff1a\u4e0d\u4e00\u6837\u7684 BFS","date":"2018-08-07T19:42:09+08:00","path":"https:\/\/skywt.cn\/posts\/poj3967","text":"\u9898\u76ee\u94fe\u63a5\uff1aUVa 1599 Ideal Path \u6216\u8005 POJ 3967 Ideal Path\nPOJ \u4e0a\u5c45\u7136\u4e0d\u80fd\u7528 vector \uff01\uff01\uff01\u5f3a\u70c8\u4e0d\u6ee1\uff01\n\n\uff08\u672c\u535a\u5ba2\u4ee5 UVa \u4e0a\u7684\u9898\u76ee\u4e3a\u51c6\uff09\nProblem\nNew labyrinth attraction is open in New Lostland amusement park. The labyrinth consists of n rooms connected by m passages. Each passage is colored into some color ci. Visitors of the labyrinth are dropped from the helicopter to the room number 1 and their goal is to get to the labyrinth exit located in the room number n.\nLabyrinth owners are planning to run a contest tomorrow. Several runners will be dropped to the room number 1. They will run to the room number n writing down colors of passages as they run through them. The contestant with the shortest sequence of colors is the winner of the contest. If there are several contestants with the same sequence length, the one with the ideal path is the winner. The path is the ideal path if its color sequence is the lexicographically smallest among shortest paths.\nAndrew is preparing for the contest. He took a helicopter tour above New Lostland and made a picture of the labyrinth. Your task is to help him find the ideal path from the room number 1 to the room number n that would allow him to win the contest.\nNote: A sequence (a1, a2, . . . , ak) is lexicographically smaller than a sequence (b1, b2, . . . , bk) if there exists i such that ai &lt; bi , and aj = bj for all j &lt; i.\nInput\nThe input file contains several test cases, each of them as described below.\nThe first line of the input file contains integers n and m \u2014 the number of rooms and passages, respectively $(2 \u2264 n \u2264 100000, 1 \u2264 m \u2264 200000)$. The following m lines describe passages, each passage is described with three integer numbers: ai, bi, and ci \u2014 the numbers of rooms it connects and its color $(1 \u2264 a_i, b_i \u2264 n, 1 \u2264 c_i \u2264 10^9)$. Each passage can be passed in either direction. Two rooms can be connected with more than one passage, there can be a passage from a room to itself. It is guaranteed that it is possible to reach the room number n from the room number 1.\nOutput\nFor each test case, the output must follow the description below.\nThe first line of the output file must contain k \u2014 the length of the shortest path from the room\nnumber 1 to the room number n. The second line must contain k numbers \u2014 the colors of passages in\nthe order they must be passed in the ideal path.\nSample Input\n4 6\n1 2 1\n1 3 2\n3 4 3\n2 3 1\n2 4 4\n3 1 1\nSample Output\n2\n1 3\nAnalysis\n\u8fd9\u9898\u662f\u300a\u7b97\u6cd5\u7ade\u8d5b\u5165\u95e8\u7ecf\u5178\u300b\u4e0a\u9762\u7684\u539f\u9898\uff0c\u5728\u4e66\u4e0a\u4f5c\u8005\u8fd8\u52a0\u7c97\u6807\u6ce8\uff1a\u201c\u6b64\u9898\u975e\u5e38\u91cd\u8981\uff0c\u5f3a\u70c8\u5efa\u8bae\u8bfb\u8005\u7f16\u5199\u7a0b\u5e8f\uff01\u201d\u4f46\u662f\u5199\u8d77\u6765\u4f3c\u4e4e\u5e76\u6ca1\u6709\u8fd9\u4e48\u7b80\u5355\u2026\u2026\n\u60f3\u6cd5\u6bd4\u8f83\u7b80\u5355\uff0c\u5982\u679c\u5149\u95ee\u6211\u4eec\u6700\u77ed\u8def\u5f84\uff0c\u8fd9\u5c31\u662f\u5165\u95e8\u9898\uff1b\u5173\u952e\u662f\u8981\u8ba9\u6700\u77ed\u8def\u5f84\u4e0a\u989c\u8272\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u5e76\u4e14\u8fd8\u8981\u8f93\u51fa\u3002\u53ef\u4ee5\u4ece\u7ec8\u70b9 n \u5f00\u59cb\u53cd\u5411 BFS\uff0c\u6c42\u51fa\u6bcf\u4e2a\u70b9\u5230 n \u70b9\u7684\u8ddd\u79bb $dist(n)$\uff0c\u8fd9\u6837\u5904\u7406\u7684\u597d\u5904\u662f\uff1a\u5728\u4e4b\u540e\u6b63\u5411 BFS \u5904\u7406\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u65b9\u4fbf\u5730\u5f97\u51fa\u67d0\u4e2a\u70b9\u662f\u5426\u5728\u6700\u77ed\u8def\u5f84\u4e2d\u3002\n\u5904\u7406\u597d\u53cd\u5411\u7684 BFS \u4e4b\u540e\uff0c\u5904\u7406\u6b63\u5411\u7684\u6c42\u7b54\u6848\u7684 BFS \u624d\u662f\u91cd\u5934\u620f\u3002\u5176\u5b9e\u4e5f\u662f BFS \u7684\u601d\u60f3\uff0c\u4f46\u662f\u5199\u8d77\u6765\u5374\u4e0d\u50cf\u6211\u4eec\u5e73\u5e38\u7684\u201c\u7ef4\u62a4\u4e00\u4e2a\u961f\u5217\u201d\u7684 BFS\u3002\u6211\u4eec\u9700\u8981\u628a\u6bcf\u6b65\u53ef\u80fd\u7684\u8d70\u6cd5\u90fd\u5355\u72ec\u7ef4\u62a4\u3002\u5177\u4f53\u5904\u7406\u8d77\u6765\u8fd8\u6709\u6280\u5de7\uff1a\u5c06\u6240\u6709\u4e0b\u4e00\u6b65\u7684\u53ef\u80fd\u5168\u90fd\u5b58\u5728 vector \u91cc\uff0c\u7136\u540e\u6392\u5e8f\u53bb\u91cd\uff0c\u52a0\u5165\u4e0b\u6b21\u7684\u5904\u7406\u961f\u5217\u91cc\u3002\u8fd9\u6837\u5f88\u5927\u7a0b\u5ea6\u5730\u907f\u514d\u4e86\u5143\u7d20\u91cd\u590d\u4e0e\u7a7a\u95f4\u6d6a\u8d39\u3002\n\u5177\u4f53\u5b9e\u73b0\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u7528\u4e24\u4e2a vector\uff0c\u4e00\u4e2a now\uff0c\u4e00\u4e2a next\u3002\u8be6\u89c1\u4ee3\u7801\u7684 GetAns \u90e8\u5206\uff5e\nemm\uff0c\u54a8\u8be2 dalao \u542c\u8bf4\uff0c\u636e\u8bf4 POJ \u662f\u4e0d\u80fd\u7528 vector \u7684\u2026\u2026\u5bb3\u6015\u2026\u2026\n\u4ee3\u7801\u61d2\u5f97\u6539\u4e86\u2026\u2026\nCode\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n#include&lt;queue&gt;\nusing namespace std;\nconst int maxn=100005,maxe=400005;\nint T,n,e,dst[maxn],INF,dist=0;\nbool vis[maxn];\nstruct VertexInfo{\n    int x,c;\n};\nvector&lt;int&gt; ans,edge[maxn],color[maxn];\nvector&lt;VertexInfo&gt; now,nxt;\nqueue&lt;int&gt; que;\ninline int read(){\n    int ret=0,f=1;char ch=getchar();\n    while (ch&lt;'0'||ch&gt;'9') {if (ch=='-') f=-1;ch=getchar();}\n    while (ch&gt;='0'&amp;&amp;ch&lt;='9') ret=ret*10+ch-'0',ch=getchar();\n    return ret*f;\n}\ninline void init(){\n    memset(dst,0x3f,sizeof(dst));INF=dst[0];\n    for (int i=1;i&lt;=n;i++) edge[i].clear(),color[i].clear();\n}\ninline void BFS(int s){\n    memset(vis,0,sizeof(vis));\n    que.push(s);vis[s]=1;dst[s]=0;\n    while (!que.empty()){\n        int x=que.front();que.pop();\n        for (int i=0;i&lt;edge[x].size();i++) if (!vis[edge[x][i]]){\n            vis[edge[x][i]]=true;\n            dst[edge[x][i]]=dst[x]+1;\n            que.push(edge[x][i]);\n        }\n    }\n}\ninline bool CompareColor(VertexInfo aa,VertexInfo bb){\n    return aa.c&lt;bb.c||(aa.c==bb.c&amp;&amp;aa.x&lt;bb.x);\n}\ninline void GetAns(int s){\n    memset(vis,0,sizeof(vis));ans.clear();\n    \/\/Init Vector \"now\"\n    vis[s]=1;now.clear();\n    now.push_back((VertexInfo){s,-1});\n\n    for (int t=1;t&lt;=dist;t++){ \/\/ Do BT BFS\n        nxt.clear();\n        for (int i=0;i&lt;now.size();i++){\n            VertexInfo head=now[i];\n            for (int j=0;j&lt;edge[head.x].size();j++) if (!vis[edge[head.x][j]]){\n                if (t+dst[edge[head.x][j]]!=dist) continue;\n                nxt.push_back((VertexInfo){edge[head.x][j],color[head.x][j]});\n            }\n        }\n\n        now.clear();\n        sort(nxt.begin(),nxt.end(),CompareColor);\n        for (int i=0;i&lt;nxt.size()&amp;&amp;nxt[i].c==nxt[0].c;i++){\n            if (i!=0&amp;&amp;nxt[i].x==nxt[i-1].x) continue;\n            now.push_back(nxt[i]);\n            vis[nxt[i].x]=true;\n        }\n        ans.push_back(now[0].c);\n    }\n}\nint main(){\n    while (scanf(\"%d%d\",&amp;n,&amp;e)!=-1){\n        init();\n        for (int i=1;i&lt;=e;i++){\n            int x=read(),y=read(),z=read();\n            edge[x].push_back(y);color[x].push_back(z);\n            edge[y].push_back(x);color[y].push_back(z);\n        }\n        BFS(n);dist=dst[1];\n        GetAns(1);\n        printf(\"%d\\n\",(int)ans.size());\n        printf(\"%d\",ans[0]);\n        for (int i=1;i&lt;ans.size();i++) printf(\" %d\",ans[i]);\n        printf(\"\\n\");\n    }\n    return 0;\n}","tags":[{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u56fe\u8bba\u7c7b\u578b\u9898","slug":"\u56fe\u8bba\u7c7b\u578b\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E5%9B%BE%E8%AE%BA%E7%B1%BB%E5%9E%8B%E9%A2%98\/"},{"name":"\u6700\u77ed\u8def","slug":"\u6700\u77ed\u8def","permalink":"https:\/\/skywt.cn\/tag\/%E6%9C%80%E7%9F%AD%E8%B7%AF\/"},{"name":"\u641c\u7d22","slug":"\u641c\u7d22","permalink":"https:\/\/skywt.cn\/tag\/%E6%90%9C%E7%B4%A2\/"},{"name":"\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22","slug":"\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22","permalink":"https:\/\/skywt.cn\/tag\/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2\/"}],"categories":[]},{"title":"\u5229\u7528\u5bb9\u65a5\u539f\u7406\u6c42\u89e3 [a,b] \u533a\u95f4\u4e2d\u4e0e n \u4e92\u8d28\u7684\u6570\u5b57\u4e2a\u6570","date":"2018-08-08T13:32:00+08:00","path":"https:\/\/skywt.cn\/posts\/rongchi","text":"\u5148\u770b\u8fd9\u9053\u4e27\u5fc3\u75c5\u72c2\u7684\u9898\u76ee\uff1aHDU 4135 Co-prime\u3002\u9898\u76ee\u5927\u610f\u5c31\u662f\uff0c\u6709 $T$ \u7ec4\u8be2\u95ee\uff0c\u6bcf\u7ec4\u8be2\u95ee\u7ed9\u4f60\u4e09\u4e2a\u6570\uff1a$a, b, c$\uff0c\u95ee\u4f60\u95ed\u533a\u95f4 $[a,b]$ \u4e2d\u6709\u591a\u5c11\u4e2a\u6570\u5b57\u4e0e $n$ \u4e92\u8d28\u3002\u6570\u636e\u8303\u56f4\u662f\uff1a$1 \\leqslant A \\leqslant B \\leqslant 10^{15}$\uff0c$1 \\leqslant N \\leqslant 10^5$\u3002\n\u4e4d\u4e00\u770b\u6beb\u65e0\u5934\u7eea\uff0c\u4eff\u4f5b\u600e\u4e48\u505a\u90fd\u4f1a\u8d85\u65f6\u2026\u2026\u5176\u5b9e\u7528\u5bb9\u65a5\u7684\u60f3\u6cd5\u5c31\u5f88\u5bb9\u6613\u4e86\uff5e\n\n\u9898\u76ee\u63cf\u8ff0\nHDU 4135 Co-prime\nGiven a number N, you are asked to count the number of integers between A and B inclusive which are relatively prime to N.\nTwo integers are said to be co-prime or relatively prime if they have no common positive divisors other than 1 or, equivalently, if their greatest common divisor is 1. The number 1 is relatively prime to every integer.\n\u5206\u6790\n\u5148\u7b80\u5316\u95ee\u9898\uff0c\u53ef\u4ee5\u5148\u6c42\u51fa $[1,b]$ \u4e2d\u4e0e n \u4e92\u8d28\u4e2a\u6570\uff0c\u518d\u51cf\u53bb $[1,a-1]$ \u4e2d\u4e0e n \u4e92\u8d28\u7684\u4e2a\u6570\u3002\n\u8981\u6c42\u51fa\u95ed\u533a\u95f4 $[1,b]$ \u4e2d\u6709\u591a\u5c11\u4e2a\u6570\u5b57\u4e0e $n$ \u4e92\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\uff1a\u6c42\u95ed\u533a\u95f4 $[1,b]$ \u4e2d\u6709\u591a\u5c11\u4e2a\u6570\u5b57\u4e0e $n$ \u4e0d\u4e92\u8d28\u3002\n\u4e0e $n$ \u4e0d\u4e92\u8d28\u7684\u6570\u5b57\u90fd\u662f\u4e0e $n$ \u6709\u516c\u5171\u56e0\u5b50\u7684\u6570\u5b57\u3002\u6211\u4eec\u53ef\u4ee5\u5148\u5c06 $n$ \u5206\u89e3\u8d28\u56e0\u6570\uff0c\u5b83\u7684\u8d28\u56e0\u5b50\u80af\u5b9a\u4e0d\u4f1a\u5f88\u591a\uff08\u4f3c\u4e4e\u6700\u591a\u662f12\u4e2a\uff1f\u597d\u50cf\u6709\u4e2a\u516c\u5f0f\u7684\u2026\u2026\uff09\u3002\n\u9996\u5148\u8003\u8651\u4e0e $n$ \u6709\u4e00\u4e2a\u516c\u5171\u8d28\u56e0\u5b50\u7684\u6570\u5b57\uff0c\u53ef\u4ee5\u65b9\u4fbf\u5730\u6c42\u51fa\uff1b\u4f46\u662f\u8fd9\u6837\u6709\u4e9b\u6570\u5c31\u4f1a\u88ab\u91cd\u590d\u8003\u8651\u3002\u5177\u4f53\u5730\u8bf4\uff0c\u4e0e $n$ \u6709\u4e24\u4e2a\u516c\u5171\u8d28\u56e0\u5b50\u7684\u6570\u5b57\u88ab\u8ba1\u7b97\u4e86\u4e24\u6b21\u3002\u6240\u4ee5\u6211\u4eec\u8981\u51cf\u53bb\u6709\u4e24\u4e2a\u516c\u56e0\u5b50\u7684\u6570\u7684\u4e2a\u6570\u3002\u90a3\u4e48\u8fd9\u6837\u53c8\u4f1a\u5c11\u7b97\u6709\u4e09\u4e2a\u516c\u5171\u8d28\u56e0\u5b50\u7684\u6570\u7684\u6570\u91cf\u2026\u2026\n\u5f88\u660e\u663e\u662f\u5bb9\u65a5\u4e86\uff0c\u5bf9\u4e8e\u5947\u6570\u4e2a\u8d28\u56e0\u5b50\u7684\u4e58\u79ef\u7684\u500d\u6570\u7684\u4e2a\u6570\uff0c\u5c06\u603b\u6570\u52a0\u4e0a\u8fd9\u4e2a\u6570\u91cf\uff1b\u5982\u679c\u662f\u5076\u6570\u4e2a\uff0c\u5c31\u51cf\u53bb\u8fd9\u4e2a\u6570\u91cf\u3002\n\u63a5\u4e0b\u6765\u7528\u7c7b\u4f3c\u4e8e\u72b6\u6001\u538b\u7f29 DP \u7684\u65b9\u6cd5\u679a\u4e3e\u6240\u6709\u8d28\u56e0\u5b50\u7684\u7ec4\u5408\uff0c\u5224\u65ad\u5947\u5076\u3001\u7d2f\u52a0\u5c31\u53ef\u4ee5\u4e86\u3002\n\u5bf9\u4e8e\u9009\u62e9 $k$ \u4e2a\u8d28\u56e0\u5b50\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u9700\u8981\u77e5\u9053 $[1,b]$ \u4e2d $lcm(P_i)$ \u7684\u500d\u6570\u7684\u4e2a\u6570\u3002\u56e0\u4e3a\u6211\u4eec\u641e\u51fa\u6765\u7684 $p_i$ \u90fd\u662f\u8d28\u6570\uff0c\u6240\u4ee5 $\\displaystyle lcm(P_i) =\\prod_{i=1}^{k} P_i$\u3002\u76f4\u63a5\u4e58\u8d77\u6765\u5c31\u53ef\u4ee5\u4e86\uff5e\n\u4ee3\u7801\n#define CLEAR(x) memset(x,0,sizeof(x))\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;cmath&gt;\n#include&lt;vector&gt;\nusing namespace std;\nconst int maxn=50;\nint T;\nlong long a,b,n;\nvector&lt;long long&gt; yinzi;\ninline long long llread(){\n    long long ret=0,f=1;char ch=getchar();\n    while (ch&lt;'0'||ch&gt;'9') {if (ch=='-') f=-1;ch=getchar();}\n    while (ch&gt;='0'&amp;&amp;ch&lt;='9') ret=(long long)ret*10+ch-'0',ch=getchar();\n    return (long long)ret*f;\n}\ninline void MakeYinzi(long long n){\n    yinzi.clear();\n    for (long long i=2;i*i&lt;=n;i++) if (n%i==0){\n        yinzi.push_back(i);\n        while (n%i==0) n\/=i;\n    }\n    if (n&gt;1) yinzi.push_back(n);\n}\ninline long long GetAnswer(long long x,long long n){\n    long long ret=0;\n    MakeYinzi(n);\n    long long s=1&lt;&lt;yinzi.size();\n    for (int i=1;i&lt;s;i++){\n        long long now=1,cnt=0;\n        for (long long j=0;j&lt;yinzi.size();j++) if (i&amp;(1&lt;&lt;j)){\n            now*=yinzi[j];\n            cnt++;\n        }\n        if (cnt&amp;1) ret+=x\/now; else ret-=x\/now;\n    }\n    return x-ret;\n}\nint main(){\n    T=llread();\n    for (int t=1;t&lt;=T;t++){\n        a=llread();b=llread();n=llread();\n        long long ans=GetAnswer(b,n)-GetAnswer(a-1,n);\n        printf(\"Case #%d: %lld\\n\",t,ans);\n    }\n    return 0;\n}\n\u62d3\u5c55\uff1aZOJ 3547\nOn Mars, there is a huge company called ACM (A huge Company on Mars), and it\u2019s owned by a younger boss.\nDue to no moons around Mars, the employees can only get the salaries per-year. There are n employees in ACM, and it\u2019s time for them to get salaries from their boss. All employees are numbered from 1 to n. With the unknown reasons, if the employee\u2019s work number is k, he can get k^4 Mars dollars this year. So the employees working for the ACM are very rich.\nBecause the number of employees is so large that the boss of ACM must distribute too much money, he wants to fire the people whose work number is co-prime with n next year. Now the boss wants to know how much he will save after the dismissal.\n\u5927\u6982\u610f\u601d\u662f\uff1a\u4f60\u8981\u9009\u51fa $[1,n]$ \u4e2d\u4e0e $n$ \u4e92\u8d28\u6570\u5b57\u5e76\u4e14\u8f93\u51fa $\\displaystyle \\sum_{i=1}^{r} i^4$\u3002\n\u51e0\u4e4e\u5c31\u662f\u4e0a\u9762\u90a3\u9898\u4e00\u6837\u7684\u9898\u76ee\uff0c\u552f\u4e00\u7684\u4e0d\u540c\u662f\u9700\u8981\u7528\u5230\u56db\u6b21\u65b9\u6c42\u548c\u516c\u5f0f\uff1a\n\\displaystyle \\sum_{i=1}^{n} i^4 = \\frac {n(n+1)(2n+1)(3n^2+3n+1)} {30}\n\u6ce8\u610f\u51e0\u4e2a\u7ec6\u8282\u5c31\u53ef\u4ee5\u4e86\uff5e\u4ee3\u7801\uff1a\n#define CLEAR(x) memset(x,0,sizeof(x))\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;cmath&gt;\n#include&lt;vector&gt;\nusing namespace std;\nconst int maxn=100;\nconst long long tt=1e9+7;\nconst int inv30=233333335;\nint T;\nlong long n;\nvector&lt;long long&gt; yinzi;\ninline long long llread(){\n    long long ret=0,f=1;char ch=getchar();\n    while (ch&lt;'0'||ch&gt;'9') {if (ch=='-') f=-1;ch=getchar();}\n    while (ch&gt;='0'&amp;&amp;ch&lt;='9') ret=(long long)ret*10+ch-'0',ch=getchar();\n    return (long long)ret*f;\n}\ninline void MakeYinzi(int n){\n    yinzi.clear();\n    for (int i=2;i*i&lt;=n;i++) if (n%i==0){\n        yinzi.push_back(i);\n        while (n%i==0) n\/=i;\n    }\n    if (n&gt;1) yinzi.push_back(n);\n}\ninline long long Get4(long long x){\n    long long ret= (long long)x*(x+1)%tt*(2*x+1)%tt*(3*x*x%tt+3*x%tt-1+tt)%tt;\n    return ret;\n}\ninline long long Make(long long x){\n    long long ret=Get4(n\/x);\n    return x*x%tt*x%tt*x%tt*ret%tt;\n}\ninline long long GetAnswer(long long n){\n    MakeYinzi(n);\n    long long ret=Get4(n);\n    int s=1&lt;&lt;yinzi.size();\n    for (int i=1;i&lt;s;i++){\n        long long now=1,cnt=0;\n        for (int j=0;j&lt;yinzi.size();j++) if (i&amp;(1&lt;&lt;j)){\n            now*=yinzi[j];\n            cnt++;\n        }\n        if ((cnt&amp;1)==0) ret=(ret+Make(now))%tt; else ret=(ret-Make(now)+tt)%tt;\n    }\n    return (ret*inv30)%tt;\n}\nint main(){\n    T=llread();\n    for (int t=1;t&lt;=T;t++){\n        n=llread();\n        long long ans=GetAnswer(n);\n        printf(\"%lld\\n\",ans);\n    }\n    return 0;\n}\n","tags":[{"name":"OI\u5b66\u4e60","slug":"OI\u5b66\u4e60","permalink":"https:\/\/skywt.cn\/tag\/OI%E5%AD%A6%E4%B9%A0\/"},{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u6570\u5b66\u9898","slug":"\u6570\u5b66\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E6%95%B0%E5%AD%A6%E9%A2%98\/"},{"name":"\u6570\u8bba","slug":"\u6570\u8bba","permalink":"https:\/\/skywt.cn\/tag\/%E6%95%B0%E8%AE%BA\/"},{"name":"\u5bb9\u65a5\u539f\u7406","slug":"\u5bb9\u65a5\u539f\u7406","permalink":"https:\/\/skywt.cn\/tag\/%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"\u4ee5 O(N) \u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u9012\u63a8\u9006\u5143\u7684\u65b9\u6cd5","date":"2018-08-09T14:54:43+08:00","path":"https:\/\/skywt.cn\/posts\/o-n-inverse","text":"\u5728\u4e4b\u524d\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e58\u6cd5\u9006\u5143\u7684\u4e09\u79cd\u6c42\u6cd5\uff0c\u5bf9\u4e8e\u4e00\u822c\u7684\u9898\u76ee\u8ba9\u4f60\u628a\u7b54\u6848\u6a21\u4e00\u4e2a\u8d28\u6570\uff0c\u5982\u679c\u8981\u6c42\u9006\u5143\u4e00\u822c\u7528\u8d39\u9a6c\u5c0f\u5b9a\u7406\uff0c\u53ef\u4ee5\u5728 $\\Theta (Nlog_2(N))$ \u65f6\u95f4\u5185\u6784\u9020\u51fa 1 \u5230 N \u7684\u9006\u5143\uff1a$inv(x)=x^{mo-2} \\bmod mo$\u3002\u4f46\u662f\u5bf9\u4e8e $10^7$ \u7ea7\u522b\u7684 $N$\uff0c\u8fd9\u6837\u7684\u6c42\u6cd5\u5c31\u663e\u5f97\u6709\u70b9\u6162\u3002\u80fd\u4e0d\u80fd\u5728 $\\Theta (N)$ \u65f6\u95f4\u5185\u9012\u63a8\u51fa $inv(x)$ \u5462\uff1f\n\n\u7b54\u6848\u662f\u80af\u5b9a\u7684\u3002\n\u7ebf\u6027\u63a8\u9006\u5143\u7684\u9012\u63a8\u5f0f\n\uff08\u6a21\u6570\u662f $N$\uff0c$\\lfloor x \\rfloor$ \u8868\u793a $x$ \u5411\u4e0b\u53d6\u6574\uff09\ninv(i)=(N-N\/i)\\ast inv(N\\bmod i)\\bmod N\n\u539f\u7406\u4e0e\u8bc1\u660e\n\u5728\u67d0\u4f4d\u5927\u4f6c\u7684\u535a\u5ba2\u4e0a\u770b\u5230\u4e00\u4e2a\u8bc1\u660e\u3002\uff08\u4ee5\u4e0b $a\/b$ \u4e0e $\\displaystyle \\lfloor \\frac a b \\rfloor$ \u5747\u8868\u793a $a$ \u6574\u9664 $b$ \uff09\n\u5047\u8bbe $\\displaystyle k=\\lfloor \\frac N i \\rfloor ,b=N \\bmod i$\uff1b\u663e\u7136\u6709\uff1a\nk \\ast i + b \\equiv 0 \\pmod N\n\u53d8\u6362\u5f97\u5230\uff1a\n-k \\ast i \\equiv b \\pmod N\n\u4e24\u8fb9\u540c\u9664 $i \\ast k$\uff1a\n-k \\ast inv(b) \\equiv inv(i) \\pmod N\n\u628a $k$ \u548c $b$ \u6362\u56de\u6765\uff0c\u5c31\u5f97\u5230\u4e86\uff01\n- \\lfloor \\frac N i \\rfloor \\ast inv(N \\bmod i)\\equiv inv(i) \\pmod N \\\\\ninv(i) \\bmod N = - (N\/i) \\ast inv(N \\bmod i) \\bmod N \\\\\n\u56e0\u4e3a $inv(i)$ \u6709\u5f88\u591a\u4e2a\uff0c\u6211\u4eec\u53ef\u4ee5\u6c42\u51fa\u6700\u5c0f\u7684\u4e00\u4e2a\uff0c\u4e00\u5b9a\u5c0f\u4e8e\u7b49\u4e8e $N$\uff08\u8bc1\u660e\u8be6\u89c1\uff1a\u4e58\u6cd5\u9006\u5143\u7684\u4e09\u79cd\u6c42\u6cd5\uff09\uff0c\u6240\u4ee5\u5de6\u8fb9\u7684 $\\bmod N$ \u53ef\u4ee5\u53bb\u6389\u4e86\u3002\u53f3\u8fb9\u6709\u4e2a $\\bmod N$ \uff0c\u4e3a\u4e86\u8ba9\u53f3\u8fb9\u5927\u4e8e 0\uff0c\u6211\u4eec\u53ef\u4ee5\u7ed9\u5b83\u52a0\u4e0a $N$\u3002\ninv(i) = (N-N\/i) \\ast inv(N \\bmod i) \\bmod N\n\u521d\u59cb $inv(0)=1$\uff0c\u53ef\u4ee5\u6109\u5feb\u5730\u9012\u63a8\u5566\uff5e\n\u4ee3\u7801\n\u5176\u5b9e\u77e5\u9053\u4e86\u9012\u63a8\u5f0f\uff0c\u4ee3\u7801\u5c31\u4e24\u884c\u2026\u2026\n    inv[0]=1;\n    for (int i=1;i&lt;=M;i++) inv[i]=(N-(N\/i))*inv[N%i]%N;\n\u53c2\u8003\n\u9006\u5143\u8be6\u89e3 - CSDN\u535a\u5ba2","tags":[{"name":"OI\u5b66\u4e60","slug":"OI\u5b66\u4e60","permalink":"https:\/\/skywt.cn\/tag\/OI%E5%AD%A6%E4%B9%A0\/"},{"name":"\u6570\u8bba","slug":"\u6570\u8bba","permalink":"https:\/\/skywt.cn\/tag\/%E6%95%B0%E8%AE%BA\/"}],"categories":[]},{"title":"\u57c3\u6c0f\u7b5b\u6cd5\uff08\u6734\u7d20\u7b5b\u6cd5\u53ca\u5176\u4f18\u5316\uff09\u4e0e\u6b27\u62c9\u7b5b\uff08\u7ebf\u6027\u7b5b\u6cd5\uff09\u7565\u89e3","date":"2018-08-09T16:21:06+08:00","path":"https:\/\/skywt.cn\/posts\/aishi-eular-shai","text":"\u5728\u4e4b\u524d\u6211\u4eec\u5b66\u8fc7\u7684\u6700\u6734\u7d20\u7684\u7b5b\u6cd5\u5c31\u662f\u57c3\u6c0f\u7b5b\u6cd5\uff08\u57c3\u62c9\u6258\u65af\u7279\u5c3c\u7b5b\u6cd5\uff09\uff0c\u5b83\u7684\u590d\u6742\u5ea6\u662f $\\Theta (N \\log_2(N))$\u3002\u5176\u5b9e\u8fd9\u4e2a\u6734\u7d20\u7684\u7b5b\u6cd5\u53ef\u4ee5\u8fdb\u884c\u5e38\u6570\u4e0a\u7684\u4f18\u5316\u3002\u8fd8\u6709\u4e00\u79cd\u66f4\u70ab\u9177\u7684\u7b5b\u6cd5\uff1a\u6b27\u62c9\u7b5b\uff0c\u5373\u7ebf\u6027\u7b5b\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\Theta (N)$\u3002\n\n\u6734\u7d20\u7b5b\u6cd5\uff08\u57c3\u6c0f\u7b5b\u6cd5\uff09\n\u4e4b\u524d\u6211\u4eec\u5f88\u65e9\u5c31\u63a5\u89e6\u7684\u7b5b\u6cd5\u662f\u8fd9\u6837\u7684\uff1a\nfor (int i=2;i&lt;=N;i++)\n    for (int j=2;j&lt;=N\/i;j++) vis[i*j]=false;\n\u53e6\u4e00\u79cd\u5199\u6cd5\u662f\uff1a\nfor (int i=2;i&lt;=N;i++)\n    for (int j=i+i;j&lt;=N;j+=i) vis[j]=false;\n\u4e0d\u5f97\u4e0d\u8bf4\u8fd9\u4e2a\u7b97\u6cd5\u7684\u786e\u7279\u522b\u76f4\u89c2\uff1a\u628a\u6240\u6709\u5408\u6570\u90fd\u7b5b\u6389\u3002\u7ef4\u57fa\u767e\u79d1\u4e0a\u8fd8\u6709\u4e2a\u5f88\u5f62\u8c61\u7684\u56fe\uff08\u4e0d\u5f97\u4e0d\u8bf4\u7ef4\u57fa\u767e\u79d1\u771f\u662f\u4e2a\u597d\u5730\u65b9\uff09\uff1a\n\n\u5410\u69fd\u4e00\u53e5\uff0c\u8fd9\u4e2a\u7b5b\u6cd5\u5168\u540d\u53eb\u201c\u57c3\u62c9\u6258\u65af\u7279\u5c3c\u7b5b\u6cd5\u201d\u2026\u2026\u4f60\u77e5\u9053\u4e3a\u4ec0\u4e48\u6b27\u62c9\u7b5b\u4e0d\u53eb\u6b27\u6c0f\u7b5b\u6cd5\u800c\u53ea\u6709\u8fd9\u4e2a\u7b5b\u6cd5\u53eb\u505a\u57c3\u6c0f\u7b5b\u6cd5\u5417\u2026\u2026\n\u65f6\u95f4\u590d\u6742\u5ea6\n\u53ef\u4ee5\u770b\u51fa\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u7684\u8ba1\u7b97\u91cf\u662f $\\frac n 2 +\\frac n 3 +\\frac n 4 + \\dots$\u3002\u636e\u8bf4\u8fd9\u4e2a\u662f\u8c03\u548c\u7ea7\u6570\uff0c\u53ef\u4ee5\u8bc1\u660e\u590d\u6742\u5ea6\u662f $\\Theta (N log_2(N))$\u3002\n\u6734\u7d20\u7b5b\u6cd5\u7684\u4f18\u5316\n\u8fd9\u4e2a\u7b97\u6cd5\u5176\u5b9e\u53ef\u4ee5\u4f18\u5316\uff1a\u6309\u7167\u539f\u6765\u7684\u5199\u6cd5\uff0c\u5bf9\u4e8e\u5408\u6570 $a\\ast b$\uff0c\u5b83\u4f1a\u88ab $a$ \u548c $b$ \u7b5b\u5230\uff0c\u53c8\u4f1a\u88ab $b$ \u548c $a$ \u7b5b\u5230\uff0c\u76f8\u5f53\u4e8e\u88ab\u7b5b\u5230\u4e86\u4e24\u6b21\u3002\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u53ea\u679a\u4e3e\u8f83\u5c0f\u7684\u90a3\u4e2a\u56e0\u5b50\uff0c\u8fd9\u6837\u53ef\u4ee5\u4f18\u5316\u4e00\u534a\u7684\u65f6\u95f4\uff1a\nfor (int i=2;i&lt;=sqrt(n);i++)\n    for (int j=i*i;j&lt;=n;j+=i) vis[j]=true;\n\u590d\u6742\u5ea6\u4ecd\u7136\u6ca1\u6709\u4f18\u5316\uff0c\u4f46\u662f\u5e38\u6570\u4e0a\u4f18\u5316\u4e86\u3002\n\u7ebf\u6027\u7b5b\u6cd5\uff08\u6b27\u62c9\u7b5b\uff09\n\u91cd\u5934\u620f\u6765\u4e86\uff1a\u5229\u7528\u6b27\u62c9\u7b5b\uff0c\u53ef\u4ee5\u5728\u7ebf\u6027\u65f6\u95f4\u5185\uff0c\u5373 $\\Theta (N)$ \u7684\u590d\u6742\u5ea6\u7b5b\u51fa 1 \u5230 N \u7684\u6240\u6709\u7d20\u6570\u3002\n\u53cd\u601d\u524d\u9762\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u5176\u5b9e\u5f88\u591a\u5408\u6570\u88ab\u6807\u4e86\u5f88\u591a\u5f88\u591a\u6b21\uff0c\u6bd4\u5982 $36=2\\ast 18=3 \\ast 12=4 \\ast 9=6\\ast 6$\u2026\u2026\u80fd\u4e0d\u80fd\u8ba9\u6240\u6709\u7d20\u6570\u90fd\u88ab\u7b5b\u5230\u4e00\u6b21\u5462\uff1f\n\u6362\u4e00\u79cd\u601d\u8def\uff0c\u6211\u4eec\u7528 prime \u6570\u7ec4\u8bb0\u4e0b\u6240\u6709\u7d20\u6570\u3002\u63a5\u4e0b\u6765\u679a\u4e3e prime \u6570\u7ec4\u91cc\u7684\u7d20\u6570\u7684\u500d\u6570\u5c31\u53ef\u4ee5\u4e86\uff01\n\u4ee3\u7801\u5982\u4e0b\uff08\u8fd9\u91cc\u6211\u7528 prime[0] \u8868\u793a\u7d20\u6570\u6570\u91cf\uff09\uff1a\ninline void BuildPrime(){\n    vis[1]=false;\n    for (int i=2;i&lt;=N;i++){\n        if (vis[i]) prime[++prime[0]]=i;\n        for (int j=1;j&lt;=prime[0];j++){\n            if (i*prime[j]&gt;N) break;\n            vis[i*prime[j]]=false;\n            if (i%prime[j]==0) break; \/\/ \u5982\u679c\u518d\u5f80\u540e\uff0cprime[j] \u5c31\u4e0d\u662f i*prime[j] \u7684\u6700\u5c0f\u8d28\u56e0\u5b50\u4e86\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u7ee7\u7eed\u4e86\n        }\n    }\n}\n\u5173\u952e\u5728\u4e8e if (i%prime[j]==0) break \u8fd9\u53e5\uff0c\u8fd9\u662f\u6b27\u62c9\u7b5b\u7684\u7cbe\u9ad3\u3002\u6211\u4eec\u53ea\u8981\u5f53\u524d $prime[j]$ \u662f $i\\ast prime[j]$ \u7684\u6700\u5c0f\u8d28\u56e0\u5b50\uff0c\u518d\u5f80\u540e\u5c31\u4e0d\u9700\u8981\u505a\u4e86\u3002","tags":[{"name":"OI\u5b66\u4e60","slug":"OI\u5b66\u4e60","permalink":"https:\/\/skywt.cn\/tag\/OI%E5%AD%A6%E4%B9%A0\/"},{"name":"OI\u7b97\u6cd5","slug":"OI\u7b97\u6cd5","permalink":"https:\/\/skywt.cn\/tag\/OI%E7%AE%97%E6%B3%95\/"},{"name":"\u6570\u8bba","slug":"\u6570\u8bba","permalink":"https:\/\/skywt.cn\/tag\/%E6%95%B0%E8%AE%BA\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"\u6b27\u62c9\u7b5b\u7684\u5e94\u7528\uff1a\u5728\u7ebf\u6027\u65f6\u95f4\uff08O(N)\uff09\u5185\u6c42\u51fa 1~N \u7684\u6b27\u62c9\u51fd\u6570","date":"2018-08-09T16:53:15+08:00","path":"https:\/\/skywt.cn\/posts\/o-n-phi","text":"\u4e4b\u524d\u5b66\u4e60\u4e86\u6b27\u62c9\u51fd\u6570\u4ee5\u53ca\u51e0\u4e2a\u6027\u8d28\uff0c\u77e5\u9053\u4e86\u201c\u6b27\u62c9\u51fd\u6570 $\\varphi(n)$ \u662f\u5c0f\u4e8e\u6216\u7b49\u4e8e $n$ \u7684\u6b63\u6574\u6570\u4e2d\u4e0e $n$ \u4e92\u8d28\u7684\u6570\u7684\u6570\u76ee\u3002\u201d\u5bf9\u4e8e\u6c42\u89e3\u5355\u4e2a\u7684 $\\varphi(x)$ \u5f88\u7b80\u5355\uff0c\u76f4\u63a5\u679a\u4e3e\u5c31\u53ef\u4ee5\u4e86\uff1b\u4f46\u662f\u5982\u679c\u8981\u4f60\u5728 $\\Theta (N)$ \u65f6\u95f4\u590d\u6742\u5ea6\u5185\u6c42 $\\varphi(i)$ \u7684\u503c\uff08$i=1,2,\\dots,n$\uff09\uff0c\u600e\u4e48\u6c42\u5462\uff1f\u81ea\u7136\u662f\u7528\u6b27\u62c9\u7b5b\u4e86\uff5e\n\n\u51e0\u4e2a\u6027\u8d28\n\u8981\u7528\u6b27\u62c9\u7b5b\u6c42\u89e3 1\uff5eN \u7684\u6b27\u62c9\u51fd\u6570\uff0c\u9700\u8981\u7528\u5230\u51e0\u4e2a\u6027\u8d28\uff1a\n\n\n\u6b27\u62c9\u51fd\u6570\u662f\u79ef\u6027\u51fd\u6570\uff0c\u5373 $\\varphi(nm)=\\varphi(n)\\ast \\varphi(m)$\u3002\u4e0a\u6b21\u8bc1\u660e\u8fc7\u3002\uff08\u5176\u5b9e\u662f\u8bc1\u660e\u6027\u8d28 3 \u8981\u7528\uff09\n\n\n\u5f53 $p$ \u4e3a\u8d28\u6570\u65f6\uff0c$\\varphi(p)=x-1$\u3002\u8fd9\u6761\u4e0a\u6b21\u5df2\u7ecf\u8bc1\u660e\u8fc7\u3002\n\n\n\u5bf9\u4e8e\u8d28\u6570 $p$\uff0c\u5982\u679c $p|i$\uff0c\u90a3\u4e48 $\\varphi(i\\ast p) = p \\ast \\varphi(i)$\u3002\u8fd9\u4e2a\u4e0a\u6b21\u4e5f\u8bc1\u660e\u8fc7\u4e86\u3002\n\n\u5bf9\u4e8e\u8d28\u6570 $p$\uff0c\u5982\u679c\u4e0d\u6ee1\u8db3 $p|i$\uff0c\u90a3\u4e48 $\\varphi(i\\ast p) = (p-1) \\ast \\varphi(i)$\u3002\u8fd9\u4e2a\u8981\u8bc1\u660e\u4e0b\u2026\u2026\n\n\u4e00\u4e9b\u8bc1\u660e\n\u5bf9\u4e8e\u7b2c\u4e00\u6761\u6027\u8d28\u548c\u7b2c\u4e8c\u6761\u6027\u8d28\uff0c\u4e4b \u524d \u90fd\u8bc1\u660e\u8fc7\u4e86\uff1b\n\u4e0b\u9762\u8bc1\u660e\u7b2c\u4e09\u6761\u6027\u8d28\uff1a\n\u56e0\u4e3a $p$ \u662f\u8d28\u6570\u800c\u4e0d\u6ee1\u8db3 $p|i$\uff0c\u6240\u4ee5 $p$ \u4e0e $i$ \u4e92\u8d28\uff0c\u5373 $(p,i)=1$\u3002\n\u6839\u636e\u6027\u8d28 0\uff0c\u6ee1\u8db3\uff1a$\\varphi(i \\ast p)=\\varphi(i)\\ast \\varphi(p)$\u3002\n\u53c8\u6839\u636e\u6027\u8d28 1\uff0c\u6ee1\u8db3\uff1a$\\varphi(i \\ast p)=\\varphi(i)\\ast (p-1)$\u3002\u5f97\u8bc1\u3002\n\u6c42 1\uff5eN \u7684\u6b27\u62c9\u51fd\u6570\n\u9996\u5148\u590d\u4e60\u4e00\u4e0b\u6b27\u62c9\u7b5b\uff1a\ninline void BuildPrime(){\n    vis[1]=false;\n    for (int i=2;i&lt;=N;i++){\n        if (vis[i]) prime[++prime[0]]=i;\n        for (int j=1;j&lt;=prime[0];j++){\n            if (i*prime[j]&gt;N) break;\n            vis[i*prime[j]]=false;\n            if (i%prime[j]==0) break; \/\/ \u5982\u679c\u518d\u5f80\u540e\uff0cprime[j] \u5c31\u4e0d\u662f i*prime[j] \u7684\u6700\u5c0f\u8d28\u56e0\u5b50\u4e86\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u7ee7\u7eed\u4e86\n        }\n    }\n}\n\n\u76f4\u63a5\u662f\u679a\u4e3e\u7d20\u6570\u7684\u3002\u6240\u4ee5\u7ed3\u5408\u4e0a\u9762\u7684\u6027\u8d28\uff0c\u5f88\u5bb9\u6613\u5f97\u51fa\u6c42\u6b27\u62c9\u51fd\u6570\u7248\u7684\u6b27\u62c9\u7b5b\uff1a\ninline void BuildPhi(){\n    phi[1]=1;\n    memset(vis,1,sizeof(vis));\n    vis[1]=false;\n    for (int i=2;i&lt;=N;i++){\n        if (vis[i]){\n            phi[i]=i-1;\n            prime[++prime[0]]=i;\n        }\n        for (int j=1;j&lt;=prime[0];j++){\n            if (i*prime[j]&gt;N) break;\n            vis[i*prime[j]]=false;\n            if (i%prime[j]) phi[i*prime[j]]=(prime[j]-1)*phi[i];\n            else {phi[i*prime[j]]=prime[j]*phi[i];break;}\n        }\n    }\n}","tags":[{"name":"OI\u5b66\u4e60","slug":"OI\u5b66\u4e60","permalink":"https:\/\/skywt.cn\/tag\/OI%E5%AD%A6%E4%B9%A0\/"},{"name":"OI\u7b97\u6cd5","slug":"OI\u7b97\u6cd5","permalink":"https:\/\/skywt.cn\/tag\/OI%E7%AE%97%E6%B3%95\/"},{"name":"\u6570\u8bba","slug":"\u6570\u8bba","permalink":"https:\/\/skywt.cn\/tag\/%E6%95%B0%E8%AE%BA\/"}],"categories":[]},{"title":"\u6b27\u62c9\u51fd\u6570\u7684\u5e94\u7528\uff1a\u5feb\u901f\u6c42\u89e3 1~n \u4e2d\u4e24\u4e24\u6570\u5b57\u7684\u6700\u5c0f\u516c\u500d\u6570","date":"2018-08-10T08:30:39+08:00","path":"https:\/\/skywt.cn\/posts\/eular-function-use","text":"\u4eca\u5929\u9047\u5230\u4e00\u4e2a\u5341\u5206 Dark \u7684\u9898\u76ee\uff0c\u8ba9\u4f60\u6c42\uff1a\n$$\\sum_{i=1}^{n-1} \\sum_{j=i+1}^{n} lcm(i,j)$$\n\u4e00\u5171 $T$ \u7ec4\u6570\u636e\uff0c\u6570\u636e\u8303\u56f4\u662f\uff1a$T \\leqslant 2 \\ast 10^5, n \\leqslant 3\\ast 10^6$\u2026\u2026\n\u9898\u76ee\u94fe\u63a5\uff1aLightOJ 1375 LCM Extreme\n\n\u8fd9\u9898\u636e\u8bf4\u53ef\u4ee5\u7528\u83ab\u6bd4\u4e4c\u65af\u53cd\u6f14\u505a\uff0c\u4f46\u662f\u770b\u4e86\u4e00\u5927\u5806\u4f3c\u4e4e\u8fd8\u662f\u6ca1\u600e\u4e48\u61c2\u2026\u2026\u4f46\u662f\u7ffb\u5927\u4f6c\u7684\u535a\u5ba2\u627e\u5230\u4e00\u4e2a\u7cbe\u5999\u7684\u505a\u6cd5\uff5e\n\u9996\u5148\u628a\u4e0a\u9762\u90a3\u4e2a\u516c\u5f0f\u5206\u5f00\uff0c\u5148\u6c42\uff1a\n$$\\sum_{i=1}^{n} lcm(n,i)$$\n\u663e\u7136\u6709\uff1a\n$$lcm(n,i)=\\frac {ni} {gcd(n,i)}$$\n\u8bbe $g=gcd(n,i)$\uff0c\u5219 $\\displaystyle \\frac n g$ \u4e0e $\\displaystyle \\frac i g$ \u4e92\u8d28\u3002\n\u539f\u5f0f = $\\displaystyle g\\ast \\frac {n} {g} \\ast \\frac {i} {g}$ \uff0c\u5e76\u4e14\u663e\u7136 $\\displaystyle \\frac i g \\leqslant \\frac n g$\n\u63a5\u4e0b\u6765\u8981\u7528\u5230\u4e00\u4e2a\u516c\u5f0f\uff1a\u5c0f\u4e8e $x$ \u7684\u4e0e $x$ \u4e92\u8d28\u7684\u6570\u4e4b\u548c\u4e3a $\\displaystyle \\frac {x \\ast \\varphi(x)} {2}$ \uff1b\n\u6240\u4ee5\u5c0f\u4e8e $\\displaystyle \\frac n g$ \u7684\u4e14\u4e0e\u5176\u4e92\u8d28\u4e4b\u6570\u4e4b\u548c\uff1a\n$$\\frac {(\\frac n g)\\ast \\varphi(\\frac n g)} {2}$$\n\u4ee4 $\\displaystyle d=\\frac n g$\uff0c\u5219 $d$ \u662f $n$ \u7684\u56e0\u5b50\u3002\u65b9\u4fbf\u540e\u9762\u679a\u4e3e\u3002\u5f97\u5230\uff1a\n$$\\sum_{i=1}^{n-1} \\frac i g=\\sum_{d|n} \\frac {d \\ast \\varphi (d)} {2}$$\n\u56e0\u4e3a\u6211\u4eec\u8981\u8ba9\u5de6\u8fb9\u5f97\u5230 $lcm(n,i)$\uff0c\u6839\u636e $\\displaystyle lcm(n,i)= \\displaystyle n\\ast \\frac {n} {g} \\ast \\frac {i} {g}$\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5de6\u8fb9\u7684 $\\displaystyle \\frac n g \\ast g$ \u63d0\u53d6\u51fa\u6765\u5f97\u5230\uff1a\n$$\\sum_{i=1}^{n-1} lcm(n,i)=\\sum_{d|n} n \\ast \\frac {d \\ast \\varphi (d)} {2}$$\n\u54c7\uff01\uff01\uff01\u5c31\u8981\u6210\u529f\u4e86\uff01\u63a5\u4e0b\u6765\u8003\u8651 $i=n$ \u7684\u60c5\u51b5\uff0c\u56e0\u4e3a $i=n$ \u7684\u65f6\u5019 $\\displaystyle \\frac n g=1$\uff0c\u9700\u8981\u7279\u5224\uff1a\n$$\\sum_{i=1}^{n} lcm(n,i)=n+ \\sum_{d|n} n \\ast \\frac {d \\ast \\varphi(d)} 2$$\n\u6700\u540e\u6211\u4eec\u53ea\u9700\u8981\u7528\u6b27\u62c9\u7b5b\u8fdb\u884c\u4e00\u6b21 O(N) \u6c42\u6b27\u62c9\u51fd\u6570\u5c31\u53ef\u4ee5\u65b9\u4fbf\u5730\u6c42\u51fa $\\displaystyle \\sum_{i=1}^{n} lcm(n,i)$ \u4e86\uff5e\u679a\u4e3e\u56e0\u5b50\u7684\u590d\u6742\u5ea6\u662f\u8c03\u548c\u7ea7\u6570\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7a0b\u5e8f\u590d\u6742\u5ea6\u7531 $\\Theta (n)$ \u964d\u4f4e\u5230 $\\log(n)$\u3002\n\u73b0\u5728\u56de\u5230\u539f\u95ee\u9898\uff0c\u6c42\u51fa $\\displaystyle \\sum_{i=1}^{n-1} \\sum_{j=i+1}^{n} lcm(i,j)$\uff0c\u53ea\u8981\u679a\u4e3e N \u6c42\u89e3\uff0c\u524d\u7f00\u548c\u7d2f\u52a0\u4e00\u4e0b\u5c31\u597d\u4e86\uff01\uff01\n\u8fd8\u6709\u8bf4\u4e0b\u8fd9\u9898\u9898\u76ee\u8ba9\u6211\u4eec\u5bf9 $2^{32}$ \u53d6\u6a21\uff0c\u5982\u679c\u76f4\u63a5\u5f00 long long \u518d\u6a21\u53ef\u80fd\u4f1a\u7206\u5185\u5b58\u3002\u5904\u7406\u6280\u5de7\u662f\u76f4\u63a5\u5f00 unsigned int\uff0c\u7136\u540e\u81ea\u7136\u6ea2\u51fa\uff08\u4e5f\u5c31\u662f\u4e0d\u7528\u6a21\u7684\uff09\u3002\u6700\u540e\u8f93\u51fa\u4e0d\u80fd\u7528 %d\uff0c\u8981\u7528 %u\u3002\n\u590d\u6742\u5ea6 $\\Theta(n \\log n)$\u3002\n\u8d34\u4e0a\u4ee3\u7801\uff08\u8981\u6ce8\u610f\u4e00\u70b9\u7ec6\u8282\uff0c\u4e0d\u7136\u8fd8\u662f\u53ef\u80fd\u7206\u5185\u5b58\u2026\u2026\uff09\uff1a\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\nusing namespace std;\nconst int maxn=3000005,N=3000000;\nint T,n,prime[maxn];\nbool vis[maxn];\nunsigned long long f[maxn];\nunsigned int phi[maxn];\ninline int read(){\n    int ret=0,f=1;char ch=getchar();\n    while (ch&lt;'0'||ch&gt;'9') {if (ch=='-') f=-1;ch=getchar();}\n    while (ch&gt;='0'&amp;&amp;ch&lt;='9') ret=ret*10+ch-'0',ch=getchar();\n    return  ret*f;\n}\ninline void BuildPhi(){ \/\/ \u7ebf\u6027\u7b5b\u6cd5\u6c42\u6b27\u62c9\u51fd\u6570\uff0c\u9ed1\u79d1\u6280\uff01\n    phi[1]=1;\n    memset(vis,1,sizeof(vis));\n    vis[1]=false;\n    for (int i=2;i&lt;=N;i++){\n        if (vis[i]){\n            phi[i]=i-1;\n            prime[++prime[0]]=i;\n        }\n        for (int j=1;j&lt;=prime[0];j++){\n            if (i*prime[j]&gt;N) break;\n            vis[i*prime[j]]=false;\n            if (i%prime[j]) phi[i*prime[j]]=(prime[j]-1)*phi[i];\n            else {phi[i*prime[j]]=prime[j]*phi[i];break;}\n        }\n    }\n}\ninline void BuildSum(){\n    for (int i=1;i&lt;=N;i++){\n        for (int j=i;j&lt;=N;j+=i) f[j]+=(unsigned long long)phi[i]*i\/2*j; \/\/ i \u4f5c\u4e3a\u56e0\u5b50\n        f[i]=f[i-1]+f[i]; \/\/ i \u4e4b\u524d\u7684\u4e00\u5b9a\u90fd\u6c42\u597d\u4e86\uff0c\u5e72\u8106\u7d2f\u52a0\u8d77\u6765\n    }\n}\nint main(){\n    T=read();\n    BuildPhi();\n    BuildSum();\n    for (int t=1;t&lt;=T;t++){\n        n=read();\n        printf(\"Case %d: %llu\\n\",t,f[n]);\n    }\n    return 0;\n}","tags":[{"name":"OI\u5b66\u4e60","slug":"OI\u5b66\u4e60","permalink":"https:\/\/skywt.cn\/tag\/OI%E5%AD%A6%E4%B9%A0\/"},{"name":"OI\u7b97\u6cd5","slug":"OI\u7b97\u6cd5","permalink":"https:\/\/skywt.cn\/tag\/OI%E7%AE%97%E6%B3%95\/"},{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u6570\u5b66\u9898","slug":"\u6570\u5b66\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E6%95%B0%E5%AD%A6%E9%A2%98\/"},{"name":"\u6570\u8bba","slug":"\u6570\u8bba","permalink":"https:\/\/skywt.cn\/tag\/%E6%95%B0%E8%AE%BA\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"AC \u81ea\u52a8\u673a\uff08Aho\u2013Corasick \u7b97\u6cd5\uff09\u4e0e\u5b57\u7b26\u4e32\u5339\u914d\u95ee\u9898","date":"2018-08-11T13:44:00+08:00","path":"https:\/\/skywt.cn\/posts\/aho-corasick-algorithm","text":"\u636e\u8bf4\u5f88\u591a\u516c\u53f8\u90fd\u6709\u8fd9\u6837\u4e00\u9053\u9762\u8bd5\u9898\uff1a\u7ed9\u4f60\u51e0\u4e2a G \u7684\u5b57\u7b26\u4e32\uff0c\u8ba9\u4f60\u60f3\u529e\u6cd5\u5feb\u901f\u5730\u627e\u51fa\u5176\u4e2d\u7684\u5f88\u591a\u4e2a\u9700\u8981\u548c\u8c10\u7684\u654f\u611f\u8bcd\u3002\n\u8fd9\u4e2a\u95ee\u9898\u91cc\uff0c\u5982\u679c\u201c\u9700\u8981\u548c\u8c10\u7684\u5b57\u7b26\u4e32\u201d\u79f0\u4e3a\u201c\u6a21\u5f0f\u4e32\u201d\uff0c\u201c\u5f85\u88ab\u67e5\u7684\u5b57\u7b26\u4e32\u201d\u79f0\u4e3a\u6587\u672c\u4e32\u3002\u5bf9\u4e8e\u8fd9\u6837\u7684\u95ee\u9898\uff0c\u5982\u679c\u66b4\u529b\u505a\uff0c\u590d\u6742\u5ea6\u5c31\u662f $\\Theta(N \\ast M \\ast Len)$\u2026\u2026\u7528 AC \u81ea\u52a8\u673a\u8fd9\u79cd\u9ad8\u7ea7\u7684\u7b97\u6cd5\uff0c\u53ef\u4ee5\u5728 $\\Theta (N)$ \u5de6\u53f3\u590d\u6742\u5ea6\u5185\u5f97\u51fa\u7b54\u6848\u3002Excited\uff01\n\n\u5f15\n\u8fd9\u4e2a AC \u81ea\u52a8\u673a\u53ef\u4e0d\u662f Accepted \u81ea\u52a8\u673a\u2026\u2026\u5176\u5b9e\u662f\u201cAho\u2013Corasick \u7b97\u6cd5\u201d\uff0c\u662f\u7531 Alfred V. Aho \u548c Margaret J.Corasick \u53d1\u660e\u7684\u5b57\u7b26\u4e32\u641c\u7d22\u7b97\u6cd5\uff0c\n\u7ef4\u57fa\u767e\u79d1\u4e0a\u8bf4\uff1a\n\n\u8be5\u7b97\u6cd5\u4e3b\u8981\u4f9d\u9760\u6784\u9020\u4e00\u4e2a\u6709\u9650\u72b6\u6001\u673a\uff08\u7c7b\u4f3c\u4e8e\u5728\u4e00\u4e2atrie\u6811\u4e2d\u6dfb\u52a0\u5931\u914d\u6307\u9488\uff09\u6765\u5b9e\u73b0\u3002\u8fd9\u4e9b\u989d\u5916\u7684\u5931\u914d\u6307\u9488\u5141\u8bb8\u5728\u67e5\u627e\u5b57\u7b26\u4e32\u5931\u8d25\u65f6\u8fdb\u884c\u56de\u9000\uff08\u4f8b\u5982\u8bbeTrie\u6811\u7684\u5355\u8bcdcat\u5339\u914d\u5931\u8d25\uff0c\u4f46\u662f\u5728Trie\u6811\u4e2d\u5b58\u5728\u53e6\u4e00\u4e2a\u5355\u8bcdcart\uff0c\u5931\u914d\u6307\u9488\u5c31\u4f1a\u6307\u5411\u524d\u7f00ca\uff09\uff0c\u8f6c\u5411\u67d0\u524d\u7f00\u7684\u5176\u4ed6\u5206\u652f\uff0c\u514d\u4e8e\u91cd\u590d\u5339\u914d\u524d\u7f00\uff0c\u63d0\u9ad8\u7b97\u6cd5\u6548\u7387\u3002\n\n\u662f\u4e0d\u662f\u542c\u8d77\u6765\u5c31\u5f88\u9ad8\u7ea7\uff01\nAC \u81ea\u52a8\u673a\u4e0e KMP\n\u5176\u5b9e\u6309\u7167 AC \u81ea\u52a8\u673a\u7684\u601d\u60f3\u53ef\u4ee5\u53d1\u73b0\uff1a\u8fd9\u5176\u5b9e\u5c31\u662f\u6811\u4e0a KMP\uff0c\u5373 Trie \u6811\u4e0e KMP \u7b97\u6cd5\u7684\u7ed3\u5408\u3002\u7f51\u4e0a\u7684\u51e0\u4e4e\u5404\u8def\u9898\u89e3\u90fd\u8bf4\uff1a\u201c\u5728\u5b66\u4e60 AC \u81ea\u52a8\u673a\u524d\u8981\u5148\u638c\u63e1 Trie \u6811\u4e0e KMP\u201d\u2026\u2026\n\u4f46\u662f\u5176\u5b9e\u5b66 AC \u81ea\u52a8\u673a\u4e0d\u9700\u8981\u638c\u63e1 KMP\u3002\nAC \u81ea\u52a8\u673a\u7684\u5b9e\u9645\u5e94\u7528\n\u524d\u9762\u5df2\u7ecf\u63d0\u5230\uff1a\u636e\u8bf4\u5f88\u591a\u516c\u53f8\u90fd\u6709\u8fd9\u6837\u4e00\u9053\u9762\u8bd5\u9898\uff08\u636e\u8bf4\u662f\u7f8e\u56e2 2015 \u9762\u8bd5\u9898\uff1f\uff09\uff1a\u7ed9\u4f60\u51e0\u4e2a G \u7684\u5b57\u7b26\u4e32\uff0c\u8ba9\u4f60\u60f3\u529e\u6cd5\u5feb\u901f\u5730\u627e\u51fa\u5176\u4e2d\u7684\u5f88\u591a\u4e2a\u9700\u8981\u548c\u8c10\u7684\u654f\u611f\u8bcd\u3002\u8fd9\u51e0\u4e4e\u662f\u5f88\u591a\u4e92\u8054\u7f51\u516c\u53f8\u8981\u505a\u7684\u4e8b\u60c5\u3002\u8fd9\u79cd\u4e1c\u897f\u7528 AC \u81ea\u52a8\u673a\u6765\u505a\u5c31\u4f1a\u5927\u5927\u63d0\u9ad8\u6548\u7387\u3002\n\u636e\u8bf4\uff0cUNIX \u7cfb\u7edf\u4e2d\u7684\u4e00\u4e2a\u547d\u4ee4 fgrep \u5c31\u662f\u4ee5 AC \u81ea\u52a8\u673a\u7b97\u6cd5\u4f5c\u4e3a\u57fa\u7840\u5b9e\u73b0\u7684\u3002\u9ad8\u7ea7\uff01\n\u5931\u914d\u6307\u9488\uff08Fail \u6307\u9488\uff09\n\u9996\u5148\u6211\u4eec\u5bf9\u4e8e\u6240\u6709\u7684\u6a21\u5f0f\u4e32\uff0c\u6784\u9020\u4e00\u68f5 Trie \u6811\uff08\u5373\u5b57\u5178\u6811\uff09\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5047\u8bbe\u6587\u672c\u4e32\u662f $shers$\uff0c\u6a21\u5f0f\u4e32\u5206\u522b\u662f\uff1a$sher$\uff0c$hers$\uff0c$er$\uff0c\u90a3\u4e48\u6784\u9020\u7684 Trie \u6811\u662f\u8fd9\u6837\u7684\uff1a\ngraph TB;\nR((Root))---S1((S))\nS1---H1((H))\nH1---E1((E))\nE1---R1((R))\n\nR---H2((H))\nH2---E2((E))\nE2---R2((R))\nR2---S2((S))\n\nR---E3((E))\nE3---R3((R))\n\u4ece Trie \u6811\u5230 Trie \u56fe\n\u5728\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u67e5\u8be2\u7684\u6587\u672c\u4e32\u662f $sher$\uff0c\u81ea\u7136\u4e00\u76f4\u5f80\u6700\u5de6\u8fb9\u4e00\u8def\uff1b\u8d70\u7684\u65f6\u5019\u53ef\u4ee5\u53d1\u73b0\u524d\u9762\u56db\u4e2a\u4e00\u76f4\u5339\u914d\uff1b\u5f53\u8d70\u5230\u5de6\u8fb9\u4e00\u9897\u5b50\u6811\u7684\u6700\u5e95\u4e0b\u7684 R \u7ed3\u70b9\uff0c\u518d\u8d70\u53d1\u73b0 R \u6ca1\u6709\u513f\u5b50\u4e86\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e0d\u518d\u5339\u914d\u3002\u90a3\u4e48\u8fd9\u65f6\u5019\u5c31\u79f0\u4e3a R \u5931\u914d\u4e86\u3002\n\u90a3\u4e48\u5f53 R \u5931\u914d\u4e86\uff0c\u6211\u4eec\u4e0b\u4e00\u6b65\u8981\u4ece\u54ea\u91cc\u5f00\u59cb\u8d70\u5462\uff1f\u6211\u4eec\u60f3\u8981\u627e\u4e00\u6bb5 $sher$ \u7684\u6700\u957f\u540e\u7f00\uff0c\u8fd9\u6837\u624d\u80fd\u4fdd\u8bc1\u8fd9\u6bb5\u540e\u7f00\u4ecd\u7136\u662f\u6587\u672c\u4e32\u7684\u5b50\u4e32\uff0c\u5e76\u4e14\u7b54\u6848\u6700\u4f18\u3002\u663e\u7136\uff0c\u7b2c\u4e8c\u68f5\u5b50\u6811\u91cc $h - e -r$ \u8fd9\u6761\u8def\u5f84\u662f\u6700\u4f18\u89e3\u3002\u5f53 R \u5931\u914d\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8df3\u5230\u5de6\u8d77\u7b2c\u4e8c\u68f5\u5b50\u6811\u7684 R \u7ed3\u70b9\uff0c\u8fd9\u6837\u4fdd\u8bc1 $her$ \u662f $sher$ \u7684\u6700\u957f\u540e\u7f00\u3002\n\u6240\u4ee5\u6700\u5de6\u8fb9\u4e00\u6761\u5b50\u6811\u7684 R \u7ed3\u70b9\u7684\u5931\u914d\u6307\u9488\uff08fail \u6307\u9488\uff09\u6307\u5411\u5de6\u8d77\u7b2c\u4e8c\u68f5\u5b50\u6811\u7684 R\u3002\u7c7b\u4f3c\u5730\uff0c\u9020\u51fa\u6240\u6709\u5931\u914d\u6307\u9488\uff0c\u7528\u865a\u7ebf\u8fde\u63a5\uff1a\ngraph TB;\nR((Root))---S1((S))\nS1---H1((H))\nH1---E1((E))\nE1---R1((R))\n\nR---H2((H))\nH2---E2((E))\nE2---R2((R))\nR2---S2((S))\n\nR---E3((E))\nE3---R3((R))\n\nH1.-&gt;H2\nE1.-&gt;E2\nR1.-&gt;R2\nE2.-&gt;E3\nR2.-&gt;R3\n\u6784\u9020\u5931\u914d\u6307\u9488\u4e4b\u540e\uff0c\u540e\u9762\u7684\u5904\u7406\u5c31\u5f88\u65b9\u4fbf\u4e86\u3002\n\u6784\u9020\u5931\u914d\u6307\u9488\n\u600e\u4e48\u6784\u9020\u5931\u914d\u6307\u9488\u5462\uff1f\n\u9996\u5148\u6211\u4eec\u8bbe fail[x] \u8868\u793a x \u7684\u5931\u914d\u6307\u9488\u3002\u5047\u8bbe\u5f53\u524d\u7684\u7ed3\u70b9\u4e0d\u5b58\u5728 c \u513f\u5b50\u4e86:\n\n\u5982\u679c\u5176\u7236\u8282\u70b9\u7684\u5931\u914d\u6307\u9488\u5b58\u5728 c \u513f\u5b50\uff0c\u5219\u53ef\u4ee5\u201c\u76f4\u63a5\u8f6c\u79fb\u5931\u914d\u6307\u9488\u201d\uff0cfail[x]=ch[fail[fa]][c]\uff1b\n\u5426\u5219\uff0c\u5c31\u53bb\u770b fail[fail[fa]] \u6709\u6ca1\u6709 c \u513f\u5b50\uff0c\u5982\u679c\u6ca1\u6709\u518d\u770b fal[fail[fail[fa]]]\u2026\u2026\u76f4\u5230\u627e\u5230 c \u513f\u5b50\uff1b\n\u5982\u679c\u4e00\u76f4\u627e\u4e0d\u5230\uff0c\u5219 fail[u]=0\uff0c\u4e5f\u5c31\u662f\u6307\u5411 Root\u3002\n\n\u56e0\u6b64\uff0c\u7528\u4e00\u4e2a BFS \u5c31\u53ef\u4ee5\u65b9\u4fbf\u5730\u6784\u9020\u51fa\u5931\u914d\u6307\u9488\u4e86\u3002\n\u4f46\u662f\u8fd9\u6837\u627e fail \u6307\u9488\u53ef\u80fd\u4f1a\u5f88\u6162\uff0c\u56e0\u4e3a\u8981\u4e00\u76f4 fail fail \u5730\u627e\uff0c\u5341\u5206\u66b4\u529b\uff0c\u6709\u6ca1\u6709\u4f18\u5316\u65b9\u6cd5\u5462\uff1f\n\u7b54\u6848\u662f\u80af\u5b9a\u7684\u3002\u53ef\u4ee5\u65b9\u4fbf\u5730\u901a\u8fc7 Trie \u56fe\u5b9e\u73b0\u3002\n\u8fd8\u53ef\u4ee5\u66f4\u5feb\n\u4ed4\u7ec6\u601d\u8003\uff0c\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u5f53 x \u6ca1\u6709\u513f\u5b50\u65f6\u76f4\u63a5\u628a x \u4e0e fail[x] \u8fde\u8fb9\uff0c\u53cd\u6b63\u90fd\u662f\u8981\u8d70\u8fc7\u53bb\u7684\u3002\u7136\u540e\u5c31\u53ef\u4ee5\u5c06\u6240\u6709\u7a7a\u513f\u5b50\u90fd\u8fde\u4e0a\u540e\u7ee7\u7ed3\u70b9\u3002\u8fd9\u6837\u5bf9\u4e8e\u6bcf\u6b21\u5bfb\u627e\u5931\u914d\u6307\u9488\uff0c\u6211\u4eec\u90fd\u53ef\u4ee5 $O(1)$ \u627e\u5230\uff0c\u4e0d\u9700\u8981\u6bcf\u6b21\u90fd fail \u53bb\u627e\u4e86\u3002\n\u4ee3\u7801\u5982\u4e0b\uff1a\ninline void BuildFail(){ \/\/ Build Mismatch Pointer\n    for (int i=0;i&lt;26;i++) if (c[0][i]) que.push(c[0][i]);\n    while (!que.empty()){\n        int x=que.front();que.pop();\n        for (int i=0;i&lt;26;i++) if (c[x][i]){\n            fail[c[x][i]]=c[fail[x]][i];\n            que.push(c[x][i]);\n        } else c[x][i]=c[fail[x]][i];\n    }\n}\n\u67e5\u8be2\u7684\u5b9e\u73b0\n\u67e5\u8be2\u5176\u5b9e\u5f88\u65b9\u4fbf\u4e86\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6309\u7167\u6587\u672c\u4e32\u5728\u5b57\u5178\u6811\u4e0a\u8d70\uff0c\u628a\u8d70\u8fc7\u7684\u70b9\u7684 value \u6807\u8bb0\u4e3a -1\u3002\u56e0\u4e3a\u4efb\u610f\u70b9\u53ea\u4f1a\u8d70\u5230\u4e00\u6b21\u3002\u6ca1\u8d70\u5230\u4e00\u4e2a\u70b9\u5c31\u4e00\u76f4 fail\u3001\u7d2f\u8ba1\u5373\u53ef\u3002\n\u5224\u65ad\u4e00\u4e2a\u6570 x \u662f\u5426\u4e3a -1 \u7684\u9ad8\u7aef\u5199\u6cd5\u662f\uff1a\u5982\u679c ~ x==false\uff0c\u5219 x \u4e3a -1\u3002\u56e0\u4e3a -1 \u662f 32 \u4f4d\u6574\u6570\u91cc\u6bcf\u4f4d\u90fd\u4e3a 1\uff0c\u6309\u4f4d\u53d6\u53cd\u5c31\u662f 0 \u4e86\u3002\n\u4ee3\u7801\u5982\u4e0b\uff1a\ninline int query(char s[]){\n    int len=strlen(s),ret=0,x=0;\n    for (int i=0;i&lt;len;i++){\n        int now=s[i]-'a';\n        x=c[x][now];\n        for (int t=x;t&amp;&amp;~val[t];t=fail[t]) ret+=val[t],val[t]=-1;\n    }\n    return ret;\n}\n\u62d3\u5c55\u5e94\u7528\n\u901a\u8fc7\u4e0a\u9762\u7684 Trie \u56fe\u53ef\u4ee5\u53d1\u73b0\uff0cAC \u81ea\u52a8\u673a\u51e0\u4e4e\u628a\u5b57\u7b26\u4e32\u9898\u76ee\u8f6c\u5316\u4e3a\u4e86\u56fe\u8bba\u9898\u76ee\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u7ed3\u5408\u6811\u5f62 DP\u3001\u7ed3\u5408 DFS \u5e8f\u7b49\u7b49\u7b49\u7b49\u884d\u751f\u51fa\u4e00\u5927\u5806\u7528\u9014\u3002\u8fd9\u4e5f\u662f AC \u81ea\u52a8\u673a\u7684\u610f\u4e49\u4e4b\u4e00\u4e86\u3002\n\uff08\u672a\u5b8c\u5f85\u7eed\u2026\u2026\uff09\n\n\u6a21\u677f\u9898\n\u5f53\u7136\u53ef\u4ee5\u5148\u53bb\u505a\u6d1b\u8c37\u4e0a\u7684\u6a21\u677f\u9898\u4e86\uff5e\n\u8fd9\u4e5f\u662f\u9053\u6a21\u677f\u9898\uff1aHDU 2222 Keywords Search\n\u4ee3\u7801\nHDU 2222\n\/\/ Aho\u2013Corasick Algorithm\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;queue&gt;\nusing namespace std;\nconst int maxn=1000005,maxlen=55,maxlen_q=1000005;\nint T,n,cnt=0;\nint c[maxn][30],fail[maxn],val[maxn];\nchar s[maxlen],q[maxlen_q];\nqueue&lt;int&gt; que;\n\ninline int read(){\n    int ret=0,f=1;char ch=getchar();\n    while (ch&lt;'0'||ch&gt;'9') {if (ch=='-') f=-1;ch=getchar();}\n    while (ch&gt;='0'&amp;&amp;ch&lt;='9') ret=ret*10+ch-'0',ch=getchar();\n    return ret*f;\n}\ninline void init(){\n    cnt=0;\n    memset(c,0,sizeof(c));\n    memset(fail,0,sizeof(fail));\n    memset(val,0,sizeof(val));\n}\ninline void insert(char s[]){ \/\/ Insert a word to Trie Tree\n    int len=strlen(s),x=0;\n    for (int i=0;i&lt;len;i++){\n        int now=s[i]-'a';\n        if (!c[x][now]) c[x][now]=++cnt;\n        x=c[x][now];\n    }\n    val[x]++;\n}\ninline void BuildFail(){ \/\/ Build Mismatch Pointer\n    for (int i=0;i&lt;26;i++) if (c[0][i]) que.push(c[0][i]);\n    while (!que.empty()){\n        int x=que.front();que.pop();\n        for (int i=0;i&lt;26;i++) if (c[x][i]){\n            fail[c[x][i]]=c[fail[x]][i];\n            que.push(c[x][i]);\n        } else c[x][i]=c[fail[x]][i];\n    }\n}\ninline int query(char s[]){\n    int len=strlen(s),ret=0,x=0;\n    for (int i=0;i&lt;len;i++){\n        int now=s[i]-'a';\n        x=c[x][now];\n        for (int t=x;t&amp;&amp;~val[t];t=fail[t]) ret+=val[t],val[t]=-1;\n    }\n    return ret;\n}\nint main(){\n    T=read();\n    while (T--){\n        n=read();init();\n        for (int i=1;i&lt;=n;i++) scanf(\"%s\",s),insert(s);\n        BuildFail();\n        scanf(\"%s\",q);\n        printf(\"%d\\n\",query(q));\n    }\n    return 0;\n}","tags":[{"name":"OI\u5b66\u4e60","slug":"OI\u5b66\u4e60","permalink":"https:\/\/skywt.cn\/tag\/OI%E5%AD%A6%E4%B9%A0\/"},{"name":"OI\u7b97\u6cd5","slug":"OI\u7b97\u6cd5","permalink":"https:\/\/skywt.cn\/tag\/OI%E7%AE%97%E6%B3%95\/"},{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u56fe\u8bba\u7c7b\u578b\u9898","slug":"\u56fe\u8bba\u7c7b\u578b\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E5%9B%BE%E8%AE%BA%E7%B1%BB%E5%9E%8B%E9%A2%98\/"},{"name":"\u56fe\u8bba","slug":"\u56fe\u8bba","permalink":"https:\/\/skywt.cn\/tag\/%E5%9B%BE%E8%AE%BA\/"},{"name":"\u5b57\u7b26\u4e32","slug":"\u5b57\u7b26\u4e32","permalink":"https:\/\/skywt.cn\/tag\/%E5%AD%97%E7%AC%A6%E4%B8%B2\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"14\u4e2a\u81ea\u7528\u8d85\u7ea7\u5f3a\u5927\u7684 WordPress \u63d2\u4ef6\u63a8\u8350","date":"2018-08-16T17:09:33+08:00","path":"https:\/\/skywt.cn\/posts\/wordpress-addons","text":"\u4e00\u5165 WordPress \u6df1\u4f3c\u6d77\u2026\u2026\u4f17\u6240\u5468\u77e5 WordPress \u7684\u4e00\u5927\u5f3a\u5927\u4e4b\u5904\u5c31\u662f\u62e5\u6709\u4e00\u5927\u5806\u795e\u5947\u7684\u63d2\u4ef6\u3002\u4eca\u5929\u4ecb\u7ecd\u4e0b\u6211\u79c1\u85cf\u7684\u51e0\u4e2a\u8d85\u7ea7\u5f3a\u5927\u7684\u63d2\u4ef6 ~\n\nMarkdown \u7f16\u8f91\uff1aWP Editor.md\n\u5f3a\u70c8\u63a8\u8350\uff01\uff01\uff01\n\u5982\u4f5c\u8005\u6240\u8bf4\uff0c\u201c\u6216\u8bb8\u8fd9\u662f\u4e00\u4e2a WordPress \u4e2d\u6700\u597d\uff0c\u6700\u5b8c\u7f8e\u7684 Markdown \u7f16\u8f91\u5668\u201d\u3002\u56fd\u4eba\u5f00\u53d1\u7684\uff0c\u548c\u6d1b\u8c37\u4e0a\u7684\u5f88\u50cf\uff0c\u662f\u5f00\u6e90\u7684\u3002\u652f\u6301\u6570\u5b66\u516c\u5f0f\uff08\u800c\u4e14\u662f\u89e3\u6790\u8d85\u5feb\u7684 KaTeX\uff09\uff0c\u652f\u6301 Mermaid \u6d41\u7a0b\u56fe\uff08\u4e0b\u6b21\u9047\u5230\u56fe\u8bba\u9898\u76ee\u7684\u9898\u89e3\u90fd\u4e0d\u7528\u4f20\u56fe\u7247\u4e86\uff0c\u76f4\u63a5\u753b Mermaid \u6d41\u7a0b\u56fe\uff09\uff0c\u751a\u81f3\u652f\u6301 Emoji\uff01\n\u94fe\u63a5\uff1aWP Editor.md\n2019XXXX \u66f4\u65b0\uff1a\u8fd9\u4e2a\u63d2\u4ef6\u73b0\u5728\u548c WordPress 5.0 \u7f16\u8f91\u5668\u4e0d\u517c\u5bb9\uff0c\u8981\u7528 classic editor\uff0c\u5e76\u4e14\u5f00\u53d1\u8005\u5df2\u7ecf\u505c\u6b62\u5f00\u53d1\u2026\u2026\u4e0d\u8fc7\u4ecd\u7136\u662f\u76ee\u524d WordPress \u6700\u5b8c\u7f8e\u7684 markdown \u7f16\u8f91\u5668\u3002\n\u6587\u7ae0\u7d22\u5f15\uff1aTable of Contents Plus\n\u548c\u4e0a\u9762\u4e00\u4e2a\u914d\u5957\u4f7f\u7528\uff0c\u53ef\u4ee5\u663e\u793a\u6587\u7ae0\u76ee\u5f55\u3002\u672c\u6587\u524d\u9762\u7684\u6587\u7ae0\u76ee\u5f55\u5c31\u662f\u7528\u8fd9\u4e2a\u751f\u6210\u7684\u3002\u81ea\u5b9a\u4e49\u7684\u8bbe\u7f6e\u4e5f\u5f88\u5f3a\u5927\u3002\nTable of Contents Plus\n\uff08\u672c\u535a\u5ba2\u4e3b\u9898\u4f3c\u4e4e\u4e0e\u8fd9\u4e2a\u63d2\u4ef6\u4e0d\u517c\u5bb9\uff0c\u51fa\u4e86\u70b9\u5fae\u5c0f\u7684 bug\u2026\u2026\uff09\n\u641c\u7d22\u5f15\u64ce\u4f18\u5316\uff1a\u591a\u5408\u4e00SEO\u5305\uff08All in One SEO Pack\uff09\n\u505a\u641c\u7d22\u5f15\u64ce\u4f18\u5316\u7528\u7684\uff0c\u6709\u751f\u6210 XML \u7ad9\u70b9\u5730\u56fe\uff08\u4f3c\u4e4e Google\u3001\u767e\u5ea6\u90fd\u53ef\u4ee5\u7528\uff09\u3001\u751f\u6210\u6458\u8981\u3001\u81ea\u5b9a\u4e49\u9875\u9762\u5173\u952e\u8bcd\u7b49\u7b49\u4e00\u5927\u5806\u529f\u80fd\u3002\u5bf9 Google \u5341\u5206\u53cb\u597d\u3002\nAll in One SEO Pack\n\u751f\u6210\u7f13\u5b58\uff1aWP Super Cache\n\u8fd9\u4e2a\u662f\u7f51\u7ad9\u901f\u5ea6\u4f18\u5316\u7528\u7684\uff0c\u53ef\u4ee5\u81ea\u52a8\u751f\u6210\u7f51\u7ad9\u7f13\u5b58\uff0c\u7f51\u7ad9\u8bbf\u95ee\u901f\u5ea6\u4f1a\u660e\u663e\u63d0\u5347\u3002\nWP Super Cache\n\u63d2\u5165\u4ee3\u7801\uff1aHeader and Footer Scripts\n\u5f88\u5b9e\u7528\u7684\u4e00\u4e2a\u63d2\u4ef6\uff0c\u53ef\u4ee5\u5728\u6240\u6709\u9875\u9762\u7684\u5934\u90e8\uff08header\uff09\u548c\u9875\u811a\uff08footer\uff09\u63d2\u5165\u4ee3\u7801\u3002\u7528\u8fd9\u4e2a\u63d2\u5165\u767e\u5ea6\u81ea\u52a8\u63a8\u9001\u4ee3\u7801\u4ee5\u53ca\u8c37\u6b4c AdSense \u81ea\u52a8\u5e7f\u544a\u4ee3\u7801\u5c31\u5f88\u65b9\u4fbf\uff0c\u4e0d\u9700\u8981\u53bb\u6539\u4e3b\u9898\u4e86\u3002\nHeader and Footer Scripts\n\u63d2\u5165 PHP \u4ee3\u7801\uff1aPHP Code Widget\n\u53c8\u662f\u5f88\u65b9\u4fbf\u7684\u4e00\u4e2a\u63d2\u4ef6\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u548c\u4e0b\u9762\u7684 Elementor \u548c WP-PostViews \u914d\u5408\u4f7f\u7528\uff0c\u63d0\u4f9b\u4e86 php \u4ee3\u7801\u7684\u5c0f\u5de5\u5177\u3002\nPHP Code Widget\n\u7981\u6b62\u8c37\u6b4c\u5b57\u4f53\uff1aDisable Google Fonts\nWordPress \u9ed8\u8ba4\u662f\u4f7f\u7528 Google \u7684 Open Sans \u4e92\u8054\u7f51\u5b57\u4f53\u7684\uff0c\u4f46\u662f\u56e0\u4e3a\u795e\u5947\u7684\u539f\u56e0\uff0c\u4e2d\u56fd\u5927\u9646\u4f1a\u51fa\u73b0\u95ee\u9898\uff08\u5982\u679c\u4f7f\u7528\u9ed8\u8ba4\u4e3b\u9898\u7684 WordPress \u4ec0\u4e48\u90fd\u4e0d\u88c5\uff0c\u4f1a\u53d1\u73b0\u8bbf\u95ee\u4ec0\u4e48\u9875\u9762\u90fd\u8981\u52a0\u8f7d\u5f88\u957f\u65f6\u95f4\uff0c\u8fd9\u5c31\u662f\u4e00\u76f4\u7b49\u5f85\u8c37\u6b4c\u670d\u52a1\u5668\u54cd\u5e94\u800c\u7b49\u4e0d\u5230\u5bfc\u81f4\u7684\uff09\u3002\u8fd9\u4e2a\u63d2\u4ef6\u5c31\u53ef\u4ee5\u7981\u7528\u8c37\u6b4c\u5b57\u4f53\uff0c\u6539\u7528\u7cfb\u7edf\u9ed8\u8ba4\u5b57\u4f53\uff08\u90e8\u5206\u4e3b\u9898\u8fd8\u63d0\u4f9b\u4e86\u81ea\u5b9a\u4e49\u5b57\u4f53\u7684\u9009\u9879\uff09\u3002\nDisable Google Fonts\n\u9875\u9762\u7f16\u8f91\uff1aElementor\n\u8d85\u7ea7\u559c\u6b22\u7684\u4e00\u4e2a\u63d2\u4ef6\uff01\u53ef\u4ee5\u7528\u53ef\u89c6\u5316\u7684\u7f16\u8f91\u5668\u81ea\u5b9a\u4e49\u67d0\u4e2a\u9875\u9762\uff0c\u81ea\u5b9a\u4e49\u7684\u9009\u9879\u8d85\u7ea7\u4e30\u5bcc\u3002\u4e2a\u4eba\u611f\u89c9 WordPress \u6700\u8fd1\u63a8\u51fa\uff08\u5e76\u4e14\u201c\u5f3a\u5236\u201d\u4f7f\u7528\uff09\u7684\u53e4\u817e\u5821\uff0c\u5c31\u662f\u4e2a Elementor \u7684\u9609\u5272\u7248\u2026\u2026\u7528 Elementor \u53ef\u4ee5\u521b\u5efa\u5404\u79cd\u4e1c\u897f\uff0c\u6bd4\u5982\u8bf4\u4ec0\u4e48\u793e\u4ea4\u56fe\u6807\uff0c\u4ec0\u4e48\u529f\u80fd\u83dc\u5355\u2026\u2026\u7b80\u76f4\u5c31\u662f\u60f3\u600e\u4e48\u505a\u5c31\u600e\u4e48\u505a\uff0c\u6bd4\u53e4\u817e\u5821\u4e0d\u77e5\u9053\u9ad8\u5230\u54ea\u91cc\u53bb\u4e86\u3002\u672c\u7f51\u7ad9\u7684\u9996\u9875\u5c31\u662f\u7528 Elementor \u505a\u7684\u3002\uff08\u73b0\u5728\u5df2\u7ecf\u4e0d\u662f\u4e86\u2026\u2026\uff09\n\u6709\u6536\u8d39\u7684 Pro \u7248\uff0c\u4f46\u662f\u514d\u8d39\u7248\u5df2\u7ecf\u591f\u826f\u5fc3\u4e86\u3002\nElementor Page Builder\n20181011\uff1a\u5df2\u7ecf\u5f03\u7528\u8be5\u63d2\u4ef6\uff0c\u5f00\u59cb\u517b\u8001\u2026\u2026\uff08\u4e0d\u8fc7\u8fd9\u7684\u786e\u662f\u4e2a\u5f88\u597d\u7684\u63d2\u4ef6\uff09\n\u5404\u79cd\u529f\u80fd\uff1aOrbit Fox Companion\n\u8fd9\u4e2a\u5c0f\u63d2\u4ef6\u63d0\u4f9b\u4e86\u5f88\u591a\u529f\u80fd\uff0c\u5b98\u65b9\u8bf4\uff1a\u201cThis swiss-knife plugin comes with a quality template library, menu\/sharing icons modules, and newly added Elementor\/BeaverBuilder page builder widgets on each release.\u201d\n\u6211\u4e3b\u8981\u7528\u5230\u7684\u5c31\u662f\u5206\u4eab\u6309\u94ae\uff0c\u4f3c\u4e4e\u6bd4 AddThis \u8981\u5feb\u4e00\u70b9\uff08\u8fd9\u4e9b\u6309\u94ae\u7eaf\u7cb9\u597d\u770b\uff0c\u6211\u77e5\u9053\u6ca1\u4eba\u771f\u7684\u7528\u90a3\u51e0\u4e2a\u6309\u94ae\u2026\u2026\uff09\u548c Elementor \u7684\u989d\u5916\u63d2\u4ef6\uff0c\u8fd8\u6709\u83dc\u5355\u56fe\u6807\u529f\u80fd\u3002\u8fd9\u4e2a\u83dc\u5355\u56fe\u6807\u5f88\u5389\u5bb3\uff0c\u96c6\u6210\u4e86\u4e00\u5927\u5806\u56fe\u6807\u3002\u6211\u7684\u7f51\u7ad9\u4e0a\u9762\u4e00\u884c\u83dc\u5355\u7684\u56fe\u6807\u5c31\u662f\u7528\u8fd9\u4e2a\u641e\u7684\u3002\u8fd8\u6709\u4ec0\u4e48\u7f51\u7ad9\u5206\u6790\u4e4b\u7c7b\u7684\u529f\u80fd\uff0c\u603b\u4e4b\u4e5f\u4e0d\u9519\u4e86\u3002\nOrbit Fox Companion\n20181011\uff1a\u5df2\u7ecf\u5f03\u7528\u8be5\u63d2\u4ef6\uff0c\u5f00\u59cb\u517b\u8001\u2026\u2026\uff08\u4e0d\u8fc7\u8fd9\u4e5f\u7684\u786e\u662f\u4e2a\u5f88\u597d\u7684\u63d2\u4ef6\uff09\n\u6587\u7ae0\u8bbf\u95ee\u7edf\u8ba1\uff1aWP-PostViews\n\u8fd9\u4e2a\u63d2\u4ef6\u53ef\u4ee5\u7edf\u8ba1\u6bcf\u7bc7\u6587\u7ae0\u7684\u8bbf\u95ee\u91cf\u3002\u7ed3\u5408\u4e0a\u9762 PHP Code Widget \u7684\u63d2\u4ef6\uff0c\u7528 the_view() \u51fd\u6570\u53ef\u4ee5\u53d6\u5f97\u5f53\u524d\u6587\u7ae0\u8bbf\u95ee\u91cf\u3002\u6709\u4e9b\u4e3b\u9898\u662f\u9ed8\u8ba4\u663e\u793a\u7684\u3002\nWP-PostViews\n\u5206\u4eab\u6309\u94ae\uff1aShare Buttons by AddThis\n\u8fd9\u4e2a\u793e\u4ea4\u5206\u4eab\u6309\u94ae\u5f88\u5f3a\u5927\uff0c\u4e3b\u8981\u662f\u4f5c\u4e3a\u4e00\u4e2a\u56fd\u5916\u7684\u8f6f\u4ef6\uff0c\u5c45\u7136\u56ca\u62ec\u4e86\u51e0\u4e4e\u56fd\u5185\u7684\u6240\u6709\u793e\u4ea4\u5e73\u53f0\uff01\u8fd8\u9644\u5e26\u4ec0\u4e48\u5206\u6790\u4e4b\u7c7b\u7684\u529f\u80fd\u3002\u4e0d\u8fc7\u6709\u65f6\u5019\u52a0\u8f7d\u901f\u5ea6\u633a\u6162\u7684\uff08\u6bd5\u7adf\u4eba\u5bb6\u56fd\u5916\u7684\uff09\uff0c\u6211\u8be5\u7528 Orbit Fox Companion \u7684\u5206\u4eab\u6309\u94ae\u4e86\u3002\n\u987a\u4fbf\u63d0\u4e00\u53e5\uff0c\u56fd\u5185\u6709\u4e2a\u7c7b\u4f3c\u7684\u793e\u4ea4\u5206\u4eab\u6309\u94ae\u63d2\u4ef6\uff0cAddThis \u7684\u6a21\u4eff\u8005\uff08\u5341\u5206\u4e11\u964b\uff0c\u8fd8\u505c\u7559\u5728\u4e0a\u4e2a\u5e74\u4ee3\u7684\u62df\u7269\u98ce\uff09\uff0c\u53eb\u505a JiaThis\u2026\u2026\nShare Buttons by AddThis\n\u6587\u7ae0\u6279\u91cf\u4fee\u6539\u66ff\u6362\uff1aSearch &amp; Replace\n\u8fd9\u4e2a\u63d2\u4ef6\u53ef\u4ee5\u5728\u6240\u6709\u6587\u7ae0\u91cc\u67e5\u627e\u6307\u5b9a\u5173\u952e\u8bcd\u5e76\u7edf\u4e00\u66ff\u6362\uff0c\u8fd8\u63d0\u4f9b\u4e86\u5907\u4efd\u6570\u636e\u5e93\u7684\u529f\u80fd\u3002\nSearch &amp; Replace\n\u767b\u9646\u9875\u9762\u7f16\u8f91\uff1aDX Login Register\n\u8fd9\u4e2a\u4e1c\u897f\u4f3c\u4e4e\u662f\u56fd\u4eba\u5f00\u53d1\u7684\uff0c\u53ef\u4ee5\u81ea\u5b9a\u4e49 WordPress \u767b\u9646\u9875\u9762\u7684\u4e00\u4e9b\u4e1c\u897f\uff0c\u6bd4\u5982\u8bf4\u56fe\u6807\u3001\u63d0\u793a\u8bed\u4e4b\u7c7b\u7684\u3002\u6bcf\u6b21\u770b\u89c1\u4e00\u4e2a\u7855\u5927\u7684 WordPress \u56fe\u6807\u5c31\u60f3\u8981\u6362\u6389\u2026\u2026\nDX Login Register\n\u7ba1\u7406\u540e\u53f0\u7f16\u8f91\uff1aAdmin Menu Editor\n\u88c5\u4e86\u4e0a\u9762\u8fd9\u4e48\u591a\u63d2\u4ef6\uff0c\u4f60\u4f1a\u53d1\u73b0\u7ba1\u7406\u540e\u53f0\u7684\u83dc\u5355\u6742\u4e71\u65e0\u7ae0\uff1a\u6709\u4e9b\u63d2\u4ef6\u8bbe\u7f6e\u662f\u201c\u8bbe\u7f6e\u201d\u83dc\u5355\u91cc\u7684\uff0c\u6709\u4e9b\u662f\u201c\u5de5\u5177\u201d\u83dc\u5355\u91cc\u7684\uff0c\u6709\u4e9b\u628a\u81ea\u5df1\u653e\u5230\u201c\u63d2\u4ef6\u201d\u83dc\u5355\u91cc\uff0c\u6709\u4e9b\u751a\u81f3\u72ec\u7acb\u6210\u4e00\u4e2a\u83dc\u5355\u2026\u2026\u8fd9\u662f\u5760\u75db\u82e6\u7684\u2026\u2026\nAdmin Menu Editor \u8fd9\u4e2a\u63d2\u4ef6\u5c31\u53ef\u4ee5\u7f16\u8f91\u540e\u53f0\u7ba1\u7406\u754c\u9762\u7684\u83dc\u5355\u4e86\u3002\u6211\u65b0\u589e\u4e00\u4e2a\u201c\u63d2\u4ef6\u8bbe\u7f6e\u201d\u83dc\u5355\uff0cWordPress \u63d2\u4ef6\u7684\u8bbe\u7f6e\u4e00\u5f8b\u653e\u91cc\u9762\u3002\u770b\u8d77\u6765\u5c31\u5f88\u8212\u670d\u4e86 ~\nAdmin Menu Editor\n\u4e00\u5165 WordPress \u6df1\u4f3c\u6d77\uff0c\u4ece\u6b64\u5b66\u4e60\u662f\u8def\u4eba\u6211\u53d8\u5f97\u66f4\u52a0\u70ed\u7231\u5b66\u4e60\uff01\uff01\uff01","tags":[{"name":"\u65e5\u5e38\u641e\u673a","slug":"\u65e5\u5e38\u641e\u673a","permalink":"https:\/\/skywt.cn\/tag\/%E6%97%A5%E5%B8%B8%E6%90%9E%E6%9C%BA\/"},{"name":"\u7f51\u7edc","slug":"\u7f51\u7edc","permalink":"https:\/\/skywt.cn\/tag\/%E7%BD%91%E7%BB%9C\/"},{"name":"\u9ed1\u79d1\u6280","slug":"\u9ed1\u79d1\u6280","permalink":"https:\/\/skywt.cn\/tag\/%E9%BB%91%E7%A7%91%E6%8A%80\/"},{"name":"WordPress","slug":"WordPress","permalink":"https:\/\/skywt.cn\/tag\/WordPress\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"Topcoder SRM 640 Div2 T3 TwoNumberGroupsEasy \u9898\u89e3","date":"2018-08-26T19:54:59+08:00","path":"https:\/\/skywt.cn\/posts\/tc-640-div2-t3","text":"Topcoder Single Round Match 640 DIv2 T3 TwoNumberGroupsEasy \u9898\u89e3\n\uff08TC SRM \u4ece 640 \u5230 616 \u6301\u7eed\u65bd\u5de5\uff5e\uff09\n\uff08\u5012\u7740\u5f00\u8f66\uff0c\u6700\u4e3a\u81f4\u547d\uff09\uff08\u56fd\u5e86\u4e4b\u524d\u6015\u662f\u5b8c\u4e0d\u6210\u4e86\uff09\n\n\nTranslation\n\u7ed9\u4f60\u4e24\u4e2a Multiset\uff0c\u4f60\u53ef\u4ee5\u628a\u8fd9\u4e24\u4e2a Multiset \u91cc\u7684\u5143\u7d20\u90fd\u6a21\u67d0\u4e2a\u5927\u4e8e 1 \u7684\u6570 $m$\uff0c\u4f7f\u5f97\u6a21\u5b8c\u4e4b\u540e\u5b83\u4eec\u7684\u8ddd\u79bb\u6700\u5c0f\u3002\u4f60\u8981\u8f93\u51fa\u6700\u5c0f\u8ddd\u79bb\u3002\n\u4e24\u4e2a Multiset \u7684\u8ddd\u79bb\u5b9a\u4e49\u4e3a\uff1a\u8981\u4f7f\u5f97\u4e24\u4e2a Multiset \u5b8c\u5168\u76f8\u540c\uff0c\u9700\u8981\u5220\u53bb\u7684\u6700\u5c11\u5143\u7d20\u6570\u91cf $x$\u3002\n\u9898\u76ee\u91cc\u7ed9\u51fa\u6570\u636e\u7684\u65b9\u5f0f\u662f\uff1a\u7ed9\u4f60\u4e00\u4e2a\u4e0d\u591a\u4e8e 10 \u4e2a\u5143\u7d20\u7684 vector A\uff0c\u7136\u540e\u7ed9\u4f60\u4e00\u4e2a\u548c A \u4e00\u6837\u5927\u7684 vector numA\uff0cnumA[i] \u8868\u793a A[i] \u8fd9\u4e2a\u5143\u7d20\u5728\u7b2c\u4e00\u4e2a Multiset \u4e2d\u6709\u51e0\u4e2a\u3002B \u540c\u7406\u3002\n\n\nA and B will each contain between 1 and 10 elements, inclusive.\nAll elements of A will be distinct.\nAll elements of B will be distinct.\nThe number of elements in numA will be the same as the number of elements in A.\nThe number of elements in numB will be the same as the number of elements in B.\nAll elements of A and B will be between 1 and 1,000,000,000, inclusive.\nAll elements of numA and numB will be between 1 and 100,000, inclusive.\nTime limit (s): 2.000\nMemory limit (MB): 256\n\n\n\u6570\u636e\u8303\u56f4\u662f\uff1a$A_i,B_i \\leqslant 10^9,numA_i,numB_i \\leqslant 10^5$\u3002\u6ce8\u610f\u65f6\u9650\u662f 2s\u3002\n\nExamples\n\u6837\u4f8b\u96f6\uff1a\n{1,2,3,4}\n{2,1,1,1}\n{5,6,7,8}\n{1,1,1,2}\nReturns: 2\n\u4e0d\u96be\u770b\u51fa\uff0cA \u662f {1,1,2,3,4} \u800c B \u662f {5,6,7,8,8}\u3002\u5f53 M=2 \u65f6\uff0c\u6240\u6709\u6570\u5b57\u6a21 2\uff0c\u5219 (A modulo M) = {0,0,1,1,1} \uff0c(B modulo M) = {0,0,0,1,1}\uff0c\u201c\u8ddd\u79bb\u201d\u4e3a 2\u3002\u8fd9\u5df2\u7ecf\u662f\u6700\u5c0f\u8ddd\u79bb\u4e86\u3002\n\nThis input describes the multisets A = {1,1,2,3,4} and B = {5,6,7,8,8}. For M=2, we have (A modulo M) = {0,0,1,1,1} and (B modulo M) = {0,0,0,1,1}. The distance between these two multisets is 2, and that is the best we can get.\n\n\u6837\u4f8b\u4e00\uff1a\n{5,7}\n{1,1}\n{12,14}\n{1,1}\nReturns: 0\nA \u96c6\u5408\u662f {5,7}\uff0c\u800c B \u96c6\u5408\u662f {12,14}\uff0c\u663e\u7136 M=7 \u65f6\u4e24\u4e2a\u96c6\u5408\u76f8\u540c\u3002\n\nThe optimal solution is obtained for M = 7.\n\n\nOriginal\n\nA multiset is the same thing as a set, with the difference that a multiset can contain multiple copies of the same element. For example, {1,1,1,2,3} is a multiset that contains three 1s, one 2, and one 3.\nThe distance between two multisets is the smallest total number of elements we need to erase from them in order to make them equal. For example, the distance between {1,1,2,2,3} and {1,2,2,4} is 3. Note that we can compute distance as follows: For each value, we count its occurrences in the first multiset, we count its occurrences in the second multiset, and we write down the difference between those two counts. The distance is then equal to the sum of all values we wrote down.\nIf S is a multiset, then (S modulo M) is the multiset of all values (x modulo M) where x belongs to S. For example, if S = {11,12,13,21,22} and M = 10, then (S modulo M) = {1,2,3,1,2} = {1,1,2,2,3}.\nYou have two multisets called A and B. The first multiset is described by the vector s A and numA. For each valid i, the multiset contains numA[i] copies of the value A[i]. The second multiset is described by the vector s B and numB in the same way.\nWe are now looking for a positive integer M with the following properties: M must be greater than 1, and the distance between (A modulo M) and (B modulo M) must be as small as possible. Compute and return the smallest possible distance.\n\n\nAnalysis\n\u770b\u5230\u8fd9\u9898\u6700\u66b4\u529b\u7684\u60f3\u6cd5\u5c31\u662f\uff1a\u66b4\u529b\u679a\u4e3e $m$ \u4ece 2 \u5230 MaxNumber\uff0c\u6bcf\u6b21\u90fd\u5904\u7406\u51fa\u8ddd\u79bb\uff0c\u53d6\u6700\u5c0f\u3002\u663e\u7136\u8d85\u65f6\u3002\n\u4ed4\u7ec6\u601d\u8003\u53ef\u4ee5\u53d1\u73b0\uff1a\u5176\u5b9e\u5f88\u591a\u679a\u4e3e\u5230\u7684 m \u662f\u201c\u663e\u7136\u6ca1\u6709\u7528\u7684\u201d\uff0c\u6211\u4eec\u7406\u60f3\u4e2d\u7684 $m$ \u5fc5\u987b\u4f7f\u5f97 A \u4e0e B \u4e2d\u81f3\u5c11\u4e00\u5bf9\u5143\u7d20\u6a21 $m$ \u540e\u76f8\u540c\u4e86\u3002\u4e5f\u5c31\u662f\u8bf4\uff1a\nA_i\\equiv B_j  \\pmod m \\iff A_i-B_j \\equiv 0 \\pmod m\n\u663e\u7136 $m$ \u662f $A_i-B_j$ \u7684\u56e0\u5b50\u3002\u8fd9\u544a\u8bc9\u6211\u4eec\uff0c\u53ea\u9700\u8981\u66b4\u529b\u679a\u4e3e $A_i,B_j$\uff0c\u7136\u540e\u5c06 $|A_i-B_j|$ \u7684\u56e0\u5b50\u4f5c\u4e3a $m$ \u66b4\u529b\u5c1d\u8bd5\uff0c\u627e\u6700\u4f18\u89e3\u5c31\u53ef\u4ee5\u4e86\u3002\u56e0\u4e3a\u6211\u4eec\u679a\u4e3e\u5230\u7684 $m$ \u90fd\u662f\u201c\u6709\u8d21\u732e\u201d\u7684\uff08\u81f3\u5c11\u4e5f\u662f\u505a\u4e86\u4e00\u70b9\u5fae\u5c0f\u7684\u8d21\u732e\u7684\uff09\uff0c\u6ca1\u6709\u8d21\u732e\u7684\u6211\u4eec\u5c31\u90fd\u4e0d\u7528\u679a\u4e3e\u4e86\u3002\n\u5c0f\u4e8e\u7b49\u4e8e $10^9$ \u7684\u6570\u5b57\u7684\u6700\u5927\u56e0\u5b50\u4e2a\u6570\u597d\u50cf\u662f 1000 \u5de6\u53f3\uff08\u53cd\u6b63\u4e0d\u4f1a\u8d85\u8fc7 2000\uff09\uff0c\u6240\u4ee5\u8fd9\u6837\u7684\u505a\u6cd5\u4e0d\u4f1a\u8d85\u65f6\u3002\n\nCode\n#include &lt;bits\/stdc++.h&gt;\nusing namespace std;\nvector&lt;int&gt; vec;\nmap&lt;int,int&gt; cnt;\nmap&lt;int,int&gt;::iterator it;\nclass TwoNumberGroupsEasy {\npublic:\n    int solve( vector &lt;int&gt; A, vector &lt;int&gt; numA, vector &lt;int&gt; B, vector &lt;int&gt; numB );\n};\ninline int MyAbs(int x){return x&gt;0?x:-x;}\nint TwoNumberGroupsEasy::solve(vector &lt;int&gt; A, vector &lt;int&gt; numA, vector &lt;int&gt; B, vector &lt;int&gt; numB) {\n    vec.clear();\n    for (int i=0;i&lt;A.size();i++)\n    for (int j=0;j&lt;B.size();j++){\n        int now=MyAbs(A[i]-B[j]);\n        for (int k=2;k&lt;=sqrt(now);k++) if (now%k==0){\n            vec.push_back(k);\n            if (now\/k!=now) vec.push_back(now\/k);\n        }\n        vec.push_back(now);\n    }\n    vec.push_back(1&lt;&lt;30);\n    int ret=1&lt;&lt;30;\n    for (int i=0;i&lt;vec.size();i++){\n        int m=vec[i];\n        cnt.clear();\n        if (m==0||m==1) continue;\n        int now=0;\n        for (int j=0;j&lt;A.size();j++) cnt[A[j]%m]+=numA[j];\n        for (int j=0;j&lt;B.size();j++) cnt[B[j]%m]-=numB[j];\n        for (it=cnt.begin();it!=cnt.end();it++) now+=MyAbs(it-&gt;second);\n        if (now&lt;ret) ret=now;\n    }\n    return ret;\n}","tags":[{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u6570\u5b66\u9898","slug":"\u6570\u5b66\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E6%95%B0%E5%AD%A6%E9%A2%98\/"},{"name":"\u6570\u8bba","slug":"\u6570\u8bba","permalink":"https:\/\/skywt.cn\/tag\/%E6%95%B0%E8%AE%BA\/"}],"categories":[]},{"title":"Topcoder SRM 639 Div2 T3 BoardFoldingDiv2 \u9898\u89e3","date":"2018-08-26T19:58:07+08:00","path":"https:\/\/skywt.cn\/posts\/tc-639-div2-t3","text":"Topcoder Single Round Match 639 DIv2 T3 BoardFoldingDiv2 \u9898\u89e3\n\u8fd9\u662f\u6211\u535a\u5ba2\u7684\u7b2c 66 \u7bc7\u6587\u7ae0\uff0c\u5e86\u795d\u4e00\u4e0b :tada:\n\n\nTranslation\n\u6709\u4e00\u4e2a n \u884c m \u5217\u7684\u77e9\u9635\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f 0 \u6216 1\uff1b\u73b0\u5728\u4f60\u53ef\u4ee5\u6cbf\u7740\u5e73\u884c\u4e8e\u77e9\u9635\u8fb9\u7f18\u7684\u76f4\u7ebf\u201c\u7ffb\u6298\u201d\uff0c\u5fc5\u987b\u4fdd\u8bc1\u7ffb\u6298\u540e\u91cd\u5408\u7684\u4e24\u4e2a\u9762\u4e0a\u7684\u5bf9\u5e94\u5143\u7d20\u76f8\u540c\u3002\u95ee\u4f60\u7ecf\u8fc7\u4e00\u7cfb\u5217\u7ffb\u6298\u64cd\u4f5c\u540e\uff0c\u53ef\u80fd\u4ea7\u751f\u591a\u5c11\u4e0d\u540c\u7684\u77e9\u9635\u3002\u5982\u679c\u4e24\u4e2a\u77e9\u9635\u5927\u5c0f\u3001\u5143\u7d20\u76f8\u540c\uff0c\u4f46\u662f\u5bf9\u4e8e\u6700\u521d\u5927\u77e9\u9635\u5de6\u4e0a\u89d2\u5750\u6807\u4e0d\u540c\uff0c\u5219\u8fd9\u4e24\u4e2a\u77e9\u9635\u4e0d\u540c\u3002\n\u6570\u636e\u8303\u56f4 $1\\leqslant n,m \\leqslant 50$\u3002\n\n\npaper will contain between 1 and 50 elements, inclusive.\nEach element of paper will contain between 1 and 50 elements, inclusive.\nAll elements of paper will have the same length.\npaper will contain only characters '0' and '1'.\nTime limit (s): 2.000\nMemory limit (MB): 256\nStack limit (MB): 256\n\n\nExamples\n\u6837\u4f8b\u96f6\uff1a\n{\"10\",\n \"11\"}\nReturns: 1\n\u8fd9\u5f20\u7eb8\u6839\u672c\u6ca1\u6cd5\u6298\u3002\n\nThere is no valid way to fold this paper, so there is just one possible outcome.\n\n\u6837\u4f8b\u4e00\uff1a\n{\"1111111\",\n \"1111111\"}\nReturns: 84\n\u8fd9\u5f20\u7eb8\u53ef\u4ee5\u968f\u4fbf\u6298\u3002\u4e00\u5171\u6709 84 \u79cd\u65b9\u6848\u3002\n\nWe can fold it into any of the 84 possible subrectangles of the original rectangle.\n\n\u6837\u4f8b\u4e09\uff1a\n{\"0110\",\n \"1001\",\n \"1001\",\n \"0110\"}\nReturns: 9\n\u6a2a\u7740\u3001\u7ad6\u7740\u90fd\u53ef\u4ee5\u6cbf\u4e2d\u7ebf\u5bf9\u6298\uff0c\u5171 9 \u79cd\u65b9\u6848\u3002\nOriginal\n\nLittle Petya likes puzzles a lot. Recently he has received one as a gift from his mother. The puzzle has the form of a rectangular sheet of paper that is divided into N rows by M columns of unit square cells. Rows are numbered 0 through N-1 from top to bottom, and columns 0 through M-1 from left to right. Each cell is colored either black or white. You are given a description of the paper, the exact format is specified at the end of this problem statement.  The goal of the puzzle is to fold the paper. This has to be done in a sequence of turns. In each turn, Petya has to fold the paper according to the rules below. He can end the process after any number of turns (including zero), even if there are still valid ways to fold the paper.  In each turn, Petya must follow these steps: To start folding, he must choose a line that is parallel to one of the sides of the paper and passes between two rows\/columns of cells. He can then take the smaller part of the paper and fold it on top of the larger part. (If the line divides the current paper in half, he can fold either half on top of the other.) There is one additional restriction: Petya may only perform the fold if all cells of the part that is being folded land on equally-colored cells of the part that remains in place.  For example, consider the following paper (with 0 and 1 representing white and black):\n10010101\n11110100\n00000000\n01101110\nHere, Petya could choose the vertical line that goes between the two leftmost columns and the rest of the paper. Note that this is a valid choice: as he makes the fold, the cells from the leftmost two columns will all match their counterparts in the right part of the paper. This is how the paper looks like after the fold (with periods representing empty spaces):\n..010101\n..110100\n..000000\n..101110\nClearly, even after multiple folds the paper will always look like a subrectangle of the original paper. Two states of the game are considered the same if that rectangle has the same dimensions and the same offset with respect to the original top left corner of the paper. (Note that folding order does not matter. Two different sequences of folding may produce the same final state.)  You are given a description of the original state of the paper as a vector  paper. Here N is the number of elements in paper and M is the length of its each element. For each i and j, the character paper[i][j] is either '0' (meaning that the cell (i,j) is white) or '1' (the cell is black). Compute and return the number of possible final states of the game.\n\nAnalysis\n\u9996\u5148\u5fc5\u987b\u60f3\u660e\u767d\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u7ed3\u8bba\uff08\u5176\u5b9e\u539f\u9898\u9898\u76ee\u91cc\u90fd\u63d0\u793a\u4f60\u4e86\uff09\uff1a\u6a2a\u5411\u7ffb\u6298\u4e0e\u7eb5\u5411\u7ffb\u6298\u662f\u72ec\u7acb\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u53ef\u4ee5\u5148\u5904\u7406\u6a2a\u5411\u7ffb\u6298\u7684\u60c5\u51b5\uff0c\u5f97\u51fa\u65b9\u6848\u6570\uff0c\u518d\u5904\u7406\u7eb5\u5411\u7ffb\u6298\uff0c\u6700\u540e\u4e24\u8005\u76f8\u4e58\u5c31\u662f\u7b54\u6848\u3002\n\u6709\u4e86\u8fd9\u4e2a\u7ed3\u8bba\uff0c\u95ee\u9898\u5c31\u5f88\u7b80\u5355\u4e86\u3002\u6211\u4eec\u76f4\u63a5\u505a\u4e00\u6b21\u533a\u95f4 DP \u5c31\u53ef\u4ee5\u65b9\u4fbf\u5730\u5f97\u51fa\u7ffb\u6298\u65b9\u6848\u6570\uff0c\u7d2f\u8ba1\u5373\u53ef\u3002\nCode\n\u4ee3\u7801\u5b9e\u73b0\u8d77\u6765\u6709\u70b9\u590d\u6742\uff0c\u4f46\u662f\u53ea\u8981\u601d\u8def\u6e05\u6670\u5176\u5b9e\u5e76\u4e0d\u96be\u3002\n#include &lt;bits\/stdc++.h&gt;\nusing namespace std;\nconst int maxn=55;\nint n,m,ans1,ans2;\nbool vis[maxn][maxn]; \/\/ vis[i][j]: \u7b2ci\u4e2acell\u5f00\u59cb\u7684\u4e00\u6bb5\u957f\u5ea6\u4e3aj\u7684\u95ed\u533a\u95f4\u80fd\u5426\u4e0ei+j+1\u5f00\u59cb\u7684\u4e00\u6bb5\u7b49\u957f\u7684\u95ed\u533a\u95f4\u5339\u914d\n\/\/ \u5373[i,i+j]\u4e0e[i+j+1,i+2*j+1]\u4e24\u6bb5\u533a\u95f4\u7684cells\u662f\u5426\u5bf9\u79f0\n\/\/ \u6ce8\u610fj\u662f\u6574\u4e2a\u533a\u95f4\u534a\u957f\nbool f[maxn][maxn]; \/\/ F[i][j]: \u80fd\u5426\u6298\u53e0\u5f97\u53ea\u5269[i,j]\u533a\u95f4\nclass BoardFoldingDiv2 {\npublic:\n    int howMany( vector &lt;string&gt; paper );\n};\ninline bool Check(int x,int y,bool mode,vector &lt;string&gt; paper){ \/\/ \u9a8c\u8bc1\u4e24\u884c\/\u4e24\u5217\u662f\u5426\u76f8\u540c\u7684\u51fd\u6570\n    \/\/ mode: \u7ad6\u5411\u9a8c\u8bc1(true)(||)\u6216\u6a2a\u5411\u9a8c\u8bc1(false)(=)\n    if (mode){\n        for (int i=0;i&lt;n;i++) if (paper[i][x]!=paper[i][y]) return false;\n        \/\/ printf(\"Check Succesful: %d %d\\n\",x,y);\n        return true;\n    } else {\n        for (int i=0;i&lt;m;i++) if (paper[x][i]!=paper[y][i]) return false;\n        return true;\n    }\n    return false;\n}\nint BoardFoldingDiv2::howMany(vector &lt;string&gt; paper) {\n    n=paper.size();\n    if (n==0) return 0;\n    m=paper[0].length();\n\n    \/\/ Part 1: build ans1 -------------------------------\n\n    memset(vis,0,sizeof(vis));\n    for (int i=0;i&lt;m-1;i++) vis[i][1]=Check(i,i+1,true,paper);\n    for (int L=3;L&lt;=m;L+=2)\n    for (int i=0;i&lt;m-L;i++){\n        int j=i+L;\n        if ((j&gt;=m)||(!vis[i+1][L\/2])) continue;\n        vis[i][(L+1)\/2]=Check(i,j,true,paper);\n    }\n\n    memset(f,0,sizeof(f));\n    f[0][m-1]=true;\n    for (int L=m-1;L&gt;=0;L--)\n    for (int i=0;i&lt;m-L;i++){\n        int j=i+L;\n        if (j&gt;=m) continue;\n        for (int k=i;(k&lt;=j)&amp;&amp;(!f[i][j]);k++){\n            if ((j+(j-k+1)&lt;m)&amp;&amp;(vis[k][j-k+1])){ \/\/ \u5148\u8003\u8651\u53f3\u8fb9\u4e00\u5757\u5411\u5de6\u8fb9\u6298\u53e0\u60c5\u51b5\n                f[i][j]|=f[i][j+(j-k+1)];\n            }\n            if ((i-(k-i+1)&gt;=0)&amp;&amp;(vis[i-(k-i+1)][k-i+1])){ \/\/ \u5de6\u8fb9\u4e00\u5757\u5411\u53f3\u6298\u53e0\n                f[i][j]|=f[i-(k-i+1)][j];\n            }\n        }\n    }\n    ans1=0;\n    for (int i=0;i&lt;m;i++)\n    for (int j=i;j&lt;m;j++) ans1+=f[i][j];\n    if (m==1) ans1=1;\n\n    \/\/ Part 2: build ans2 -------------------------------\n\n    memset(vis,0,sizeof(vis));\n    for (int i=0;i&lt;n-1;i++) vis[i][1]=Check(i,i+1,false,paper);\n    for (int L=3;L&lt;=n;L+=2)\n    for (int i=0;i&lt;n-L;i++){\n        int j=i+L;\n        if ((j&gt;=n)||(!vis[i+1][L\/2])) continue;\n        vis[i][(L+1)\/2]=Check(i,j,false,paper);\n    }\n\n    memset(f,0,sizeof(f));\n    f[0][n-1]=true;\n    for (int L=n-1;L&gt;=0;L--)\n    for (int i=0;i&lt;n-L;i++){\n        int j=i+L;\n        if (j&gt;=n) continue;\n        for (int k=i;(k&lt;=j)&amp;&amp;(!f[i][j]);k++){\n            if ((j+(j-k+1)&lt;n)&amp;&amp;(vis[k][j-k+1])){ \/\/ \u5148\u8003\u8651\u4e0b\u9762\u4e00\u5757\u5411\u4e0a\u8fb9\u6298\u53e0\u60c5\u51b5\n                f[i][j]|=f[i][j+(j-k+1)];\n            }\n            if ((i-(k-i+1)&gt;=0)&amp;&amp;(vis[i-(k-i+1)][k-i+1])){ \/\/ \u4e0a\u9762\u4e00\u5757\u5411\u4e0b\u6298\u53e0\n                f[i][j]|=f[i-(k-i+1)][j];\n            }\n        }\n    }\n    ans2=0;\n    for (int i=0;i&lt;n;i++)\n    for (int j=i;j&lt;n;j++) ans2+=f[i][j];\n    if (n==1) ans2=1;\n\n    \/\/ printf(\"ANS1=%d  ANS2=%d\\n\",ans1,ans2);\n    return ans1*ans2;\n}","tags":[{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u52a8\u6001\u89c4\u5212\u7c7b\u578b\u9898","slug":"\u52a8\u6001\u89c4\u5212\u7c7b\u578b\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB%E5%9E%8B%E9%A2%98\/"},{"name":"\u533a\u95f4DP","slug":"\u533a\u95f4DP","permalink":"https:\/\/skywt.cn\/tag\/%E5%8C%BA%E9%97%B4DP\/"}],"categories":[]},{"title":"Topcoder SRM 638 Div2 T3 CandleTimerEasy \u9898\u89e3","date":"2018-08-28T20:33:19+08:00","path":"https:\/\/skywt.cn\/posts\/tc-638-div2-t3","text":"Topcoder Single Round Match 638 Div2 T3 CandleTimerEasy \u9898\u89e3\n\u6bcf\u5929\u88ab XY \u9898\u56f0\u6270\u7684\u6211\u4eec\u600e\u4e48\u4f1a\u53bb\u505a Topcoder \u5462\n\n\nTranslation\n\u4f60\u6709\u5f88\u591a\u8721\u70db\uff0c\u6bcf\u6761\u8721\u70db\u770b\u6210\u4e00\u6761\u8fb9\uff0c\u5219\u6784\u6210\u4e86\u4e00\u68f5\u6811\u3002\u73b0\u5728\u4f60\u8981\u70b9\u71c3\u6240\u6709\u8721\u70db\uff0c\u6709\u4e24\u4e2a\u6761\u4ef6\uff1a\n\n\u53ea\u80fd\u4ece\u6811\u7684\u53f6\u8282\u70b9\u5f00\u59cb\u70b9\u71c3\uff1b\n\u957f\u5ea6\u4e3a len[i] \u7684\u8721\u70db\u5b8c\u5168\u71c3\u70e7\u9700\u8981 len[i] \u7684\u65f6\u95f4\u3002\u5982\u679c\u4ece\u5b83\u7684\u4e24\u8fb9\u540c\u65f6\u70b9\u71c3\uff0c\u5219\u53ea\u9700\u8981 len[i]\/2 \u7684\u65f6\u95f4\u3002\n\n\u95ee\u4f60\u4ee5\u4e0d\u540c\u65b9\u5f0f\u4ece\u53f6\u8282\u70b9\u70b9\u71c3\u8721\u70db\uff0c\u6700\u540e\u6240\u6709\u8721\u70db\u71c3\u70e7\u5b8c\u9700\u8981\u6d88\u8017\u7684\u65f6\u95f4\u6709\u591a\u5c11\u79cd\u3002\n\u7ed9\u51fa\u6570\u636e\u7684\u65b9\u5f0f\u662f\u7ed9\u4f60\u4e09\u4e2a vector\uff1aA\u3001B \u548c len\uff0c\u5bf9\u4e8e i\uff0c\u8282\u70b9 A[i] \u4e0e B[i] \u4e4b\u95f4\u6709\u4e00\u6761\u957f\u5ea6\u4e3a len[i] \u7684\u8721\u70db\u3002\n\u6570\u636e\u8303\u56f4\uff1a$1 \\leqslant e \\leqslant 19$\u3002\n\n\nA will contain between 1 and 19 elements, inclusive.\nA, B and len will contain same number of elements.\nEach element in A will be between 0 and |A|, inclusive.\nEach element in B will be between 0 and |A|, inclusive.\nEach element in len will be between 1 and 1000, inclusive.\nA, B and len will describe a tree.\nTime limit (s): 2.000\nMemory limit (MB): 256\n\n\n\nExamples\n\u6837\u4f8b\u96f6\uff1a\n{0,1}\n{1,2}\n{10,1}\nReturns: 2\n\u8fd9\u662f\u4e00\u6761\u94fe\uff0c\u53ef\u4ee5\u770b\u6210\u4e00\u6761\u957f\u5ea6\u4e3a 11 \u7684\u957f\u8721\u70db\uff0c\u4ece\u5934\u3001\u5c3e\u5355\u72ec\u70b9\u71c3\u65f6\u95f4 11\uff0c\u540c\u65f6\u70b9\u71c3\u65f6\u95f4 5.5\uff0c\u4e00\u5171 2 \u79cd\u3002\n\nThis tree looks the same as a single candle of length 11. If we light it on one end, we will measure the time 11. If we light it on both ends, we will measure the time 5.5.\n\n\u6837\u4f8b\u4e00\uff1a\n{0,0,0}\n{1,2,3}\n{1,1,1}\nReturns: 2\n\u8fd9\u6b21\u6709 3 \u4e2a\u5730\u65b9\u53ef\u4ee5\u70b9\u71c3\u3002\u5982\u679c\u5168\u90e8\u540c\u65f6\u70b9\u71c3\uff0c\u9700\u8981\u6d88\u8017 1 \u7684\u65f6\u95f4\uff0c\u5426\u5219\u6d88\u8017 2\u3002\n\nThis time we have 3 ends. If we ignite all of them the time is 1, otherwise the time is 2.\n\n\u6837\u4f8b\u4e8c\uff1a\n{0,0,0}\n{1,2,3}\n{1,2,3}\nReturns: 4\n\nWe can get 4 different outcomes: 2.5, 3, 4, 5.\n\n\nOriginal\n\nYou have a lot of candles. The candles burn at a uniform rate: if you ignite a candle of length L, it will burn completely in L units of time. You can also ignite a candle at both ends, which makes it burn twice as fast.   You have arranged some candles into the shape of a tree. You want to use the tree to measure time. At the beginning, you will ingite some leaves of the tree (all at the same time). Then you will just wait and watch the flames spread across the entire tree. (Whenever a flame reaches an inner node of the tree, it spreads to all branches that meet at that node.) Note that you are not allowed to light new flames during the process. The time you will measure is the time between the moment when you lighted the fire(s) and the moment when the last part of the tree finished burning.   You are given a description of the tree as three vector s: a, b, and len, with N elements each. The nodes of the tree are numbered 0 through N, inclusive. For each valid i, there is a candle between the nodes a[i] and b[i] with length len[i].   Compute and return the number of different times you can measure when following the above procedure.\n\n\n\u56e0\u4e3a\u6570\u636e\u975e\u5e38\u975e\u5e38\u975e\u5e38\u5c0f\uff0c\u53ef\u4ee5\u8003\u8651\u66b4\u679a\u3002\u66b4\u529b\u679a\u4e3e\u6bcf\u4e2a\u53f6\u8282\u70b9\u70b9\u71c3\u6216\u4e0d\u70b9\u71c3\uff0c\u5219\u590d\u6742\u5ea6\u662f $\\Theta (2^{f})$\uff08f \u4ee3\u8868\u53f6\u8282\u70b9\u6570\u91cf\uff09\u3002\u63a5\u4e0b\u6765\u8003\u8651\u7684\u5c31\u662f\u6839\u636e\u67d0\u4e2a\u53f6\u8282\u70b9\u7684\u70b9\u96c6\u6765\u7b97\u51fa\u71c3\u70e7\u65f6\u95f4\u3002\n\u56e0\u4e3a\u6570\u636e\u975e\u5e38\u975e\u5e38\u975e\u5e38\u5c0f\uff0c\u53ef\u4ee5\u5148\u76f4\u63a5\u6765\u4e00\u8d9f Floyd \u7b97\u51fa\u4e24\u4e24\u53f6\u8282\u70b9\u4e4b\u95f4\u8721\u70db\u957f\u5ea6\u3002\u5047\u8bbe t[i] \u8868\u793a\u70e7\u5230\u7b2c i \u4e2a\u8282\u70b9\u7684\u6700\u65e9\u65f6\u95f4\uff0c\u90a3\u4e48\u63a5\u4e0b\u6765\uff1a\u5bf9\u6240\u6709\u975e\u70b9\u71c3\u5904\uff0c\u5bfb\u627e\u79bb\u5b83\u6700\u8fd1\u7684\u70b9\u71c3\u5904\uff0c\u4e24\u8005\u4e4b\u95f4\u8ddd\u79bb\u5373\u662f\u70e7\u5230\u8fd9\u4e2a\u70b9\u7684\u6700\u65e9\u65f6\u95f4\uff1b\u5bf9\u6240\u6709\u70b9\u71c3\u5904\uff0ct[i]=0\u3002\n\u4f46\u662f\u8fd9\u4e0d\u591f\u3002\u4f60\u4ee5\u4e3a\u5904\u7406\u6240\u6709\u201c\u70b9\u71c3\u5904\u201d\u65f6\u95f4\u7684\u6700\u5927\u503c max(t[i]) \u5c31\u662f\u5f53\u524d\u7b54\u6848\u5417\uff1f\u5176\u5b9e\u5373\u4f7f\u8003\u8651\u5b8c\u6240\u6709\u7684\u70b9\uff0c\u4ecd\u7136\u4f1a\u6709\u4e9b\u8fb9\u6ca1\u6709\u88ab\u8003\u8651\u5230\u3002\u6211\u4eec\u8981\u518d\u679a\u4e3e\u6240\u6709\u7684\u8fb9\uff0c\u8fd9\u65f6\u5019\u6bcf\u6761\u8fb9\u4e24\u4e2a\u7aef\u70b9\u7684\u6700\u65e9\u70e7\u5230\u7684\u65f6\u95f4\u90fd\u5df2\u7ecf\u5f97\u51fa\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651\u6839\u636e\u8fd9\u4e2a\u7b97\u51fa\u8fd9\u6761\u8fb9\u70e7\u5b8c\u7684\u65f6\u95f4\u3002\n\u5982\u4f55\u6839\u636e\u8fd9\u6761\u8fb9\u4e24\u4e2a\u7aef\u70b9 $A_i$ \u548c $B_i$ \u6700\u65e9\u88ab\u70e7\u5230\u7684\u65f6\u95f4\uff0c\u7b97\u51fa\u8fd9\u6761\u8fb9\u88ab\u70e7\u5b8c\u7684\u65f6\u95f4\uff1f\u4e24\u4e2a\u7aef\u70b9\u7684\u6700\u65e9\u70e7\u5230\u65f6\u95f4\u53ef\u4ee5\u770b\u6210\u6709\u5148\u540e\u987a\u5e8f\u7684\uff0c\u90a3\u4e48\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5\uff1a\n\n\n\u4e24\u7aef\u70b9\u4e2d\u5148\u70e7\u5230\u7684\u4e00\u4e2a\uff0c\u76f4\u63a5\u628a\u6574\u6839\u8721\u70db\u70e7\u6389\u4e86\uff0c\u53e6\u4e00\u7aef\u7684\u5c0f\u706b\u82d7\u6839\u672c\u6ca1\u6709\u673a\u4f1a\uff0c\u5219\u65f6\u95f4\u662f\uff1a$min(t_{A_i},t_{B_i})+len_i$\uff1b\n\n\u4e24\u7aef\u70b9\u4e2d\u4e00\u4e2a\u5148\u5f00\u59cb\u70e7\u8fd9\u6839\u8721\u70db\uff0c\u70e7\u4e86\u4e00\u4f1a\u513f\u53e6\u5916\u4e00\u7aef\u5f00\u59cb\u70e7\u3002\u90a3\u4e48\u8f83\u665a\u7684\u4e00\u7aef\u5f00\u59cb\u70e7\u7684\u65f6\u5019\uff0c\u5269\u4e0b\u8721\u70db\u957f\u5ea6\u662f\uff1a$len_i-|t_{A_i}-t_{B_i}|$\uff0c\u8fd9\u6bb5\u53ea\u9700\u8981\u4e00\u534a\u7684\u65f6\u95f4\uff1b\u5176\u4f59\u7684\u4e00\u6bb5\u5219\u662f\u9700\u8981\u5b8c\u6574\u7684\u65f6\u95f4\u3002\u70e7\u5b8c\u8fd9\u6839\u8721\u70db\u603b\u65f6\u95f4\u5c31\u662f\uff1amax(t[A[i]],t[B[i]])+(len[i]-Abs(t[A[i]]-t[B[i]]))\/2.0)\u3002\n\n\u56e0\u4e3a\u6570\u636e\u975e\u5e38\u975e\u5e38\u975e\u5e38\u5c0f\uff0c\u800c\u4e14\u65f6\u9650 2s\uff0c\u5373\u4f7f\u4e0a\u8ff0\u65b9\u6cd5 $\\Theta (f^2\\ast 2^f)$ \u5b8c\u6210\uff0c\u4e5f\u4e0d\u4f1a\u8d85\u65f6\u2026\u2026\n\nCodes\n#include &lt;bits\/stdc++.h&gt;\n#define CLEAR(x) memset(x,0,sizeof(x))\n#define CLEAR_MAX(x) memset(x,63,sizeof(x))\nusing namespace std;\nconst int maxn=25,INF=1e8;\nint n,s,ind[maxn];\nint dst[maxn][maxn];\ndouble t[maxn];\nvector &lt;double&gt; vec;\n\nclass CandleTimerEasy {\npublic:\n    int differentTime( vector &lt;int&gt; A, vector &lt;int&gt; B, vector &lt;int&gt; len );\n};\ninline void init(){\n    vec.clear();CLEAR(ind);CLEAR_MAX(dst);\n}\ninline void Floyd(){\n    for (int i=0;i&lt;n;i++) dst[i][i]=0;\n    for (int k=0;k&lt;n;k++)\n    for (int i=0;i&lt;n;i++) if (i!=k)\n    for (int j=0;j&lt;n;j++) if ((j!=k)&amp;&amp;(j!=i))\n        dst[i][j]=dst[j][i]=min(dst[i][j],dst[i][k]+dst[k][j]);\n}\ninline double Abs(double x) {return x&lt;0?-x:x;}\ninline double Get(int x,vector &lt;int&gt; A, vector &lt;int&gt; B, vector &lt;int&gt; len){\n    double ret=0.0;\n    for (int i=0;i&lt;n;i++) if ((ind[i]==1)&amp;&amp;(x&amp;(1&lt;&lt;i))) t[i]=0; else {\n        t[i]=(double)INF;\n        for (int j=0;j&lt;n;j++) if ((ind[j]==1)&amp;&amp;(x&amp;(1&lt;&lt;j))&amp;&amp;(i!=j)) t[i]=min(t[i],(double)dst[i][j]);\n        ret=max(ret,t[i]);\n    }\n    for (int i=0;i&lt;n-1;i++) ret=max(ret,min(min(t[A[i]],t[B[i]])+len[i],max(t[A[i]],t[B[i]])+(len[i]-Abs(t[A[i]]-t[B[i]]))\/2.0));\n    return ret;\n}\nint CandleTimerEasy::differentTime(vector &lt;int&gt; A, vector &lt;int&gt; B, vector &lt;int&gt; len) {\n    init();\n    n=A.size()+1;s=1&lt;&lt;n;\n    for (int i=0;i&lt;n-1;i++){\n        dst[A[i]][B[i]]=dst[B[i]][A[i]]=len[i];\n        ind[A[i]]++;ind[B[i]]++;\n    }\n    Floyd();\n    for (int i=1;i&lt;s;i++) vec.push_back(Get(i,A,B,len));\n    sort(vec.begin(),vec.end());\n    int ans=0;\n    \/\/ for (int i=0;i&lt;vec.size();i++) printf(\"ANS: %.3lf\\n\",vec[i]);\n    for (int i=0;i&lt;vec.size();i++) if (((i==0)||(vec[i]!=vec[i-1]))&amp;&amp;(vec[i]&gt;0)&amp;&amp;(vec[i]&lt;INF)) ans++;\/\/,printf(\"%.2f\\n\",vec[i]);\n    return ans;\n}","tags":[{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u56fe\u8bba\u7c7b\u578b\u9898","slug":"\u56fe\u8bba\u7c7b\u578b\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E5%9B%BE%E8%AE%BA%E7%B1%BB%E5%9E%8B%E9%A2%98\/"},{"name":"\u6570\u5b66\u9898","slug":"\u6570\u5b66\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E6%95%B0%E5%AD%A6%E9%A2%98\/"},{"name":"\u6700\u77ed\u8def","slug":"\u6700\u77ed\u8def","permalink":"https:\/\/skywt.cn\/tag\/%E6%9C%80%E7%9F%AD%E8%B7%AF\/"}],"categories":[]},{"title":"\u4e8c\u5206\u56fe\u5339\u914d\u95ee\u9898\u4e0e\u5308\u7259\u5229\u7b97\u6cd5","date":"2018-09-01T18:45:00+08:00","path":"https:\/\/skywt.cn\/posts\/bipartite-matching","text":"\u6240\u8c13\u4e8c\u5206\u56fe\uff08Bipartite Graph\uff09\u5c31\u662f\u8fd9\u6837\u7684\u4e00\u4e2a\u56fe\uff1a\n\n\u7b80\u5355\u5730\u8bf4\uff0c\u5c31\u662f\u4e00\u5f20\u56fe\u91cc\u7684\u6240\u6709\u70b9\u53ef\u4ee5\u5206\u4e3a\u4e24\u7ec4\uff08\u5982\u4e0a\u56fe\uff09\uff0c\u5e76\u4e14\u6bcf\u6761\u8fb9\u90fd\u8de8\u8d8a\u4e24\u7ec4\u3002\u8fd9\u6837\u7684\u56fe\u5c31\u662f\u4e8c\u5206\u56fe\u3002\n\n\u4e8c\u5206\u56fe\u7684\u5b9a\u4e49\n\u8bf4\u5f97\u4e25\u8c28\u4e00\u70b9\uff1a\n\n\u4e8c\u5206\u56fe\u53c8\u79f0\u53cc\u5206\u56fe\u3001\u4e8c\u90e8\u56fe\u3001\u5076\u56fe\uff0c\u6307\u9876\u70b9\u53ef\u4ee5\u5206\u6210\u4e24\u4e2a\u4e0d\u76f8\u4ea4\u7684\u96c6 $U$\u548c $V$ \uff08$U$ \u4e0e $V$ \u7686\u4e3a\u72ec\u7acb\u96c6\uff08Independent Sets\uff09\uff09\uff0c\u4f7f\u5f97\u5728\u540c\u4e00\u4e2a\u96c6\u5185\u7684\u9876\u70b9\u4e0d\u76f8\u90bb\uff08\u6ca1\u6709\u5171\u540c\u8fb9\uff09\u7684\u56fe\u3002\n\n\u4e00\u4e2a\u56fe\u4e3a\u4e8c\u5206\u56fe\u4ec5\u5f53\uff1a\n\n\u6ca1\u6709\u5947\u6570\u5708\uff1b\n\u70b9\u8272\u6570\u4e3a 2\u3002\n\n\u76f8\u5173\u7684\u51e0\u4e2a\u6982\u5ff5\n\n\n\u5339\u914d\uff1a\u4e8c\u5206\u56fe\u7684\u4e00\u4e2a\u201c\u5339\u914d\u201d\u662f\u6307\u4e00\u4e9b\u8fb9\u7684\u96c6\u5408\uff0c\u4efb\u610f\u4e24\u6761\u8fb9\u6ca1\u6709\u516c\u5171\u70b9\u3002\n\n\n\u6700\u5927\u5339\u914d\uff1a\u4e8c\u5206\u56fe\u7684\u201c\u6700\u5927\u5339\u914d\u201d\uff0c\u6307\u7684\u662f\u4e8c\u5206\u56fe\u7684\u6240\u6709\u5339\u914d\u4e2d\u8fb9\u6570\u6700\u591a\u7684\u5339\u914d\u3002\n\n\n\u5b8c\u7f8e\u5339\u914d\uff1a\u4e8c\u5206\u56fe\u7684\u4e00\u4e2a\u201c\u5b8c\u7f8e\u5339\u914d\u201d\uff0c\u662f\u6307\u6240\u6709\u70b9\u90fd\u5728\u8fd9\u4e2a\u5339\u914d\u4e2d\u7684\u4e00\u4e2a\u5339\u914d\u3002\u4e5f\u5c31\u662f\u8bf4\u8fd9\u4e2a\u5339\u914d\u91cc\u7684\u6240\u6709\u8fb9\u521a\u597d\u7ecf\u8fc7\u6240\u6709\u70b9\u4e00\u6b21\u3002\u591a\u5b8c\u7f8e\uff01\n\n\u5339\u914d\u8fb9\/\u70b9\uff1a\u5728\u4e00\u4e2a\u5339\u914d\u4e2d\u7684\u8fb9\/\u70b9\uff08\u5339\u914d\u70b9\u53c8\u53eb\u505a\u76d6\u70b9\uff0c\u975e\u5339\u914d\u70b9\u53eb\u505a\u672a\u76d6\u70b9\uff08\u6240\u8c13\u201c\u76d6\u201d\u6307\u7684\u662f\u88ab\u4e00\u6761\u8fb9\u76d6\u4f4f\uff09\uff09\u3002\n\n\u4e8c\u5206\u56fe\u7684\u6700\u5927\u5339\u914d\uff1a\u5308\u7259\u5229\u7b97\u6cd5\n\u5982\u4f55\u6c42\u89e3\u4e8c\u5206\u56fe\u7684\u6700\u5927\u5339\u914d\u5462\uff1f\u53ef\u4ee5\u7528\u5308\u7259\u5229\u7b97\u6cd5\uff08Hungary Algorithm\uff09\u89e3\u51b3\u3002\n\n\u5308\u7259\u5229\u7b97\u6cd5\u662f\u4e00\u79cd\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u6c42\u89e3\u4efb\u52a1\u5206\u914d\u95ee\u9898\u7684\u7ec4\u5408\u4f18\u5316\u7b97\u6cd5\uff0c\u5e76\u63a8\u52a8\u4e86\u540e\u6765\u7684\u539f\u59cb\u5bf9\u5076\u65b9\u6cd5\u3002\u7f8e\u56fd\u6570\u5b66\u5bb6\u54c8\u7f57\u5fb7\u00b7\u5e93\u6069\u4e8e1955\u5e74\u63d0\u51fa\u8be5\u7b97\u6cd5\u3002\u6b64\u7b97\u6cd5\u4e4b\u6240\u4ee5\u88ab\u79f0\u4f5c\u5308\u7259\u5229\u7b97\u6cd5\uff0c\u662f\u56e0\u4e3a\u7b97\u6cd5\u5f88\u5927\u4e00\u90e8\u5206\u662f\u57fa\u4e8e\u4ee5\u524d\u5308\u7259\u5229\u6570\u5b66\u5bb6 D\u00e9nes K\u0151nig \u548c Jen\u0151 Egerv\u00e1ry \u7684\u5de5\u4f5c\u4e4b\u4e0a\u521b\u5efa\u8d77\u6765\u7684\u3002\n\u8a79\u59c6\u58eb\u00b7\u8292\u514b\u52d2\u65af\u5728 1957 \u5e74\u56de\u987e\u4e86\u8be5\u7b97\u6cd5\uff0c\u5e76\u53d1\u73b0\uff08\u5f3a\uff09\u591a\u9879\u5f0f\u65f6\u95f4\u7684\u3002\u6b64\u540e\u8be5\u7b97\u6cd5\u88ab\u79f0\u4e3a Kuhn\u2013Munkres \u7b97\u6cd5\u6216 Munkres \u5206\u914d\u7b97\u6cd5\u3002\u539f\u59cb\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n^{4}) $\uff0c\u4f46 Edmonds \u4e0e\u5361\u666e\u53d1\u73b0\u53ef\u4ee5\u4fee\u6539\u7b97\u6cd5\u8fbe\u5230 $O(n^{3})$ \u8fd0\u884c\u65f6\u95f4\uff0c\u5bcc\u6cfd\u4e5f\u72ec\u7acb\u53d1\u73b0\u4e86\u8fd9\u4e00\u70b9\u3002Ford \u548c Fulkerson \u5c06\u8be5\u65b9\u6cd5\u63a8\u5e7f\u5230\u4e86\u4e00\u822c\u8fd0\u8f93\u95ee\u9898\u30022006 \u5e74\u53d1\u73b0\u5361\u5c14\u00b7\u96c5\u53ef\u6bd4\u5728 19 \u4e16\u7eaa\u5c31\u89e3\u51b3\u4e86\u6307\u6d3e\u95ee\u9898\uff0c\u8be5\u89e3\u6cd5\u5728\u4ed6\u6b7b\u540e\u5728 1890 \u5e74\u4ee5\u62c9\u4e01\u6587\u53d1\u8868\u3002\n\u2014\u2014Wikipedia\n\n\u8fd9\u6bb5\u6587\u5b57\u4e3a\u6211\u4eec\u8bb2\u8ff0\u5308\u7259\u5229\u7b97\u6cd5\u7684\u5386\u53f2\u59fb\u7f18\u2026\u2026\n\u51e0\u4e2a\u6982\u5ff5\u548c\u5b9a\u7406\n\n\n\u4ea4\u66ff\u8def\uff08\u4e5f\u53eb\u4ea4\u9519\u8def\uff09\uff1a\u4ece\u4e00\u4e2a\u672a\u5339\u914d\u70b9\u51fa\u53d1\uff0c\u4f9d\u6b21\u7ecf\u8fc7\u975e\u5339\u914d\u8fb9\u3001\u5339\u914d\u8fb9\u3001\u975e\u5339\u914d\u8fb9\u2026\u2026\u5f62\u6210\u7684\u8def\u5f84\u53eb\u4ea4\u66ff\u8def\u3002\n\n\n\u589e\u5e7f\u8def\uff1a\u4ece\u4e00\u4e2a\u672a\u5339\u914d\u70b9\u51fa\u53d1\uff0c\u8d70\u4ea4\u66ff\u8def\uff0c\u4ee5\u53e6\u4e00\u4e2a\u672a\u5339\u914d\u70b9\u4e3a\u7ed3\u5c3e\uff08\u51fa\u53d1\u7684\u70b9\u4e0d\u7b97\uff09\uff0c\u5219\u8fd9\u6761\u4ea4\u66ff\u8def\u79f0\u4e3a\u589e\u5e7f\u8def\uff08Agumenting Path\uff09\u3002\uff08\u5f88\u719f\u6089\uff1f\u5728 \u7f51\u7edc\u6d41\u6700\u5927\u6d41\u7b97\u6cd5\u603b\u7ed3 \u91cc\u51fa\u73b0\u8fc7\u589e\u5e7f\u8def\u7684\u6982\u5ff5\u3002\uff09\n\n\u589e\u5e7f\u8def\u5b9a\u7406\uff1a\u4efb\u610f\u4e00\u4e2a\u975e\u6700\u5927\u5339\u914d\u7684\u5339\u914d\u4e00\u5b9a\u5b58\u5728\u589e\u5e7f\u8def\u3002\n\n\u7b97\u6cd5\u57fa\u672c\u539f\u7406\n\u6ce8\u610f\u524d\u9762\u589e\u5e7f\u8def\u7684\u5b9a\u4e49\uff1a\u201c\u4ece\u4e00\u4e2a\u672a\u5339\u914d\u70b9\u51fa\u53d1\uff0c\u8d70\u4ea4\u66ff\u8def\uff0c\u4ee5\u53e6\u4e00\u4e2a\u672a\u5339\u914d\u70b9\u4e3a\u7ed3\u5c3e\u201d\uff0c\u9996\u5c3e\u90fd\u662f\u672a\u5339\u914d\u70b9\uff0c\u8bf4\u660e\u9996\u5c3e\u7684\u8fb9\u90fd\u662f\u975e\u5339\u914d\u8fb9\u3002\u800c\u53c8\u662f\u4ea4\u66ff\u8def\uff0c\u4e5f\u5c31\u662f\u8bf4\u975e\u5339\u914d\u8fb9\u6bd4\u5339\u914d\u8fb9\u591a\u4e00\u6761\u3002\u90a3\u4e48\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u628a\u8fd9\u6761\u589e\u5e7f\u8def\u91cc\u7684\u5339\u914d\u8fb9\u548c\u975e\u5339\u914d\u8fb9\u4e92\u6362\uff08\u79f0\u4e3a\u201c\u4ea4\u6362\u5339\u914d\u201d\uff09\uff0c\u90a3\u4e48\u5339\u914d\u8fb9\u5c31\u4f1a\u591a\u51fa 1 \u6761\uff0c\u5b9e\u73b0\u4e86\u201c\u589e\u5e7f\u201d\u7684\u610f\u4e49\u3002\u5e76\u4e14\u8fd9\u6837\u505a\u5e76\u4e0d\u4f1a\u5bf9\u5176\u4ed6\u8fb9\u9020\u6210\u5f71\u54cd\uff0c\u4e5f\u4e0d\u7834\u574f\u4e8c\u5206\u56fe\u7684\u6027\u8d28\u3002\n\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u4e00\u76f4\u627e\u589e\u5e7f\u8def\uff0c\u4e0d\u65ad\u4ea4\u6362\u5339\u914d\u3002\u6839\u636e\u589e\u5e7f\u8def\u5b9a\u7406\uff0c\u5982\u679c\u627e\u4e0d\u5230\u4e86\uff0c\u5c31\u8bf4\u660e\u5df2\u7ecf\u8fbe\u5230\u6700\u5927\u5339\u914d\u3002\n\u540c\u6837\u53ef\u4ee5\u8bc1\u660e\uff0c\u5df2\u7ecf\u5339\u914d\u7684\u70b9\u6c38\u8fdc\u4e0d\u4f1a\u9000\u51fa\u5339\u914d\uff0c\u53ea\u4f1a\u66f4\u6362\u5339\u914d\u3002\n\u8fd9\u5c31\u662f\u5308\u7259\u5229\u7b97\u6cd5\u6700\u6838\u5fc3\u7684\u90e8\u5206\u4e86\uff1a\u4e00\u76f4\u627e\u589e\u5e7f\u8def\uff0c\u4e0d\u65ad\u4ea4\u6362\u5339\u914d\u3002\n\u53e6\u4e00\u79cd\u8f83\u4e3a\u53d8\u6001\u7684\u89e3\u91ca\n\u51fa\u81ea\u4e0a\u8bfe\u7684 PPT\uff1a\n\n\n\u5047\u8bbe\u4f60\u6709\u4e86\u4e00\u4e2a\u5339\u914dP\uff0c\u6211\u4eec\u6bd4\u8f83\u8fd9\u4e2a\u5339\u914d\u4e0e\u6700\u5927\u5339\u914dM\u3002\n\u5982\u679cM\u91cc\u9762\u6709\u5339\u914d\u8fb9\u662fP\u91cc\u9762\u6ca1\u6709\u7684\u800c\u4e14\u5339\u914d\u8fb9\u5bf9\u5e94\u7684\u4e24\u4e2a\u5339\u914d\u70b9\u5728\u5f53\u524d\u4e5f\u662f\u672a\u76d6\u70b9\uff0c\u90a3\u5c31\u628a\u8fd9\u4e9b\u8fb9\u76f4\u63a5\u8fde\u4e0a\uff0c\u5f97\u5230Q\u3002\n\u73b0\u5728\u7684Q\u5df2\u7ecf\u6ca1\u6cd5\u518d\u901a\u8fc7\u5355\u72ec\u589e\u52a0\u4e00\u4e2a\u4e0e\u4e4b\u524d\u6beb\u4e0d\u76f8\u5173\u7684\u5339\u914d\u8fb9\u6765\u6269\u5927\u5339\u914d\u4e86\u3002\n\u4e5f\u5c31\u662f\u8bf4\u4efb\u610f\u4e00\u4e2aM\u91cc\u9762\u7684\u5339\u914d\u8fb9\u5728Q\u91cc\u9762\u90fd\u4f1a\u8986\u76d6Q\u7684\u67d0\u4e2a\u5339\u914d\u70b9\u3002\n\u5047\u8bbeQ\u8fd8\u4e0d\u662f\u6700\u5927\u5339\u914d\uff0c\u90a3\u4e48\u6211\u4eec\u8981\u5c06Q\u53d8\u6210M\u7684\u65b9\u6cd5\u5c31\u662f\u5c06Q\u4e2d\u7684\u8fb9\u66ff\u6362\u6210M\u4e2d\u7684\u8fb9\u3002\n\u8fd9\u4e2a\u66ff\u6362\u7684\u524d\u63d0\u5c31\u662f\u8fb9\u96c6X\uff08M - M\u4ea4Q\uff09\u4e0e\u8fb9\u96c6Y\uff08Q - M\u4ea4Q\uff09\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u5bf9\u79f0\u5dee\uff0c\u4e00\u5b9a\u4f1a\u5f62\u6210x-y-x...-x-y-x\u8fd9\u6837\u4ea4\u9519\u7684\u8def\u5f84\uff0c\u5c5e\u4e8eX\u8fb9\u96c6\u7684\u8fb9\u4f1a\u6bd4\u5c5e\u4e8eY\u8fb9\u96c6\u7684\u8fb9\u591a\u4e00\u6761\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u8def\u5f84\uff0c\u8bf4\u660eM\u7684\u5339\u914d\u6570\u4e0d\u6bd4Q\u591a\u3002\n\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5c06\u4ea4\u9519\u8def\u5f84\u7684\u5339\u914d\u8fb9\u4e0e\u975e\u5339\u914d\u8fb9\u4e92\u6362\u3002\n\n\n\u6838\u5fc3\u4ee3\u7801\u5b9e\u73b0\ninline bool DFS(int s){\n    for (int i=lnk[s];i;i=nxt[i]) if (!vis[son[i]]){\n        vis[son[i]]=true;int t=son[i];\n        if ((con_y[t]==-1)||(DFS(con_y[t]))){ \/\/ \u5982\u679c\u53f3\u8fb9\u7684\u70b9\u662f\u672a\u5339\u914d\u70b9\uff0c\u6216\u8005\u7ee7\u7eed\u80fd\u627e\u5230\u589e\u5e7f\u8def\n            con_x[s]=t; \/\/ \u5c31\u6109\u5feb\u5730\u4ea4\u6362\u5339\u914d\u4e00\u756a\n            con_y[t]=s;\n            return true;\n        }\n    }\n    return false;\n}\ninline int max_match(){\n    memset(con_x,-1,sizeof(con_x));\n    memset(con_y,-1,sizeof(con_y));\n    int ret=0;\n    for (int i=1;i&lt;=n;i++){\n        memset(vis,0,sizeof(vis));\n        ret+=DFS(i);\n    }\n    return ret;\n}\n\u5b8c\u6574\u4ee3\u7801\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\nusing namespace std;\nconst int maxn=1005,maxe=1000005;\nint n,m,e,con_x[maxn],con_y[maxn];\nint tot=0,lnk[maxn],nxt[maxe],son[maxe];\nbool vis[maxe];\n\ninline int read(){\n    int ret=0,f=1;char ch=getchar();\n    while (ch&lt;'0'||ch&gt;'9') {if (ch=='-') f=-1;ch=getchar();}\n    while (ch&gt;='0'&amp;&amp;ch&lt;='9') ret=ret*10+ch-'0',ch=getchar();\n    return ret*f;\n}\ninline void add(int x,int y){\n    tot++;son[tot]=y;nxt[tot]=lnk[x];lnk[x]=tot;\n}\ninline bool DFS(int s){\n    for (int i=lnk[s];i;i=nxt[i]) if (!vis[son[i]]){\n        vis[son[i]]=true;int t=son[i];\n        if ((con_y[t]==-1)||(DFS(con_y[t]))){\n            con_x[s]=t;\n            con_y[t]=s;\n            return true;\n        }\n    }\n    return false;\n}\ninline int max_match(){\n    memset(con_x,-1,sizeof(con_x));\n    memset(con_y,-1,sizeof(con_y));\n    int ret=0;\n    for (int i=1;i&lt;=n;i++){\n        memset(vis,0,sizeof(vis));\n        ret+=DFS(i);\n    }\n    return ret;\n}\nint main(){\n    n=read();m=read();e=read();\n    for (int i=1;i&lt;=e;i++){\n        int x=read(),y=read();\n        if (x&gt;n||y&gt;m||x&lt;1||y&lt;1) continue;\n        add(x,y);\n    }\n    printf(\"%d\\n\",max_match());\n    return 0;\n}\n\u53c2\u8003\n\u4e8c\u5206\u56fe\u7684\u6700\u5927\u5339\u914d\u3001\u5b8c\u7f8e\u5339\u914d\u548c\u5308\u7259\u5229\u7b97\u6cd5 - Blog - Renfei Song\n\u4e8c\u5206\u56fe - \u7ef4\u57fa\u767e\u79d1\uff0c\u81ea\u7531\u7684\u767e\u79d1\u5168\u4e66\n\u6709\u5411\u65e0\u73af\u56fe\uff08DAG\uff09\u7684\u6700\u5c0f\u8def\u5f84\u8986\u76d6 - justPassBy - \u535a\u5ba2\u56ed","tags":[{"name":"OI\u5b66\u4e60","slug":"OI\u5b66\u4e60","permalink":"https:\/\/skywt.cn\/tag\/OI%E5%AD%A6%E4%B9%A0\/"},{"name":"OI\u7b97\u6cd5","slug":"OI\u7b97\u6cd5","permalink":"https:\/\/skywt.cn\/tag\/OI%E7%AE%97%E6%B3%95\/"},{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u56fe\u8bba","slug":"\u56fe\u8bba","permalink":"https:\/\/skywt.cn\/tag\/%E5%9B%BE%E8%AE%BA\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"VSCode\u3001Vim \u914d\u7f6e\u6587\u4ef6\u5907\u4efd","date":"2018-08-28T10:38:50+08:00","path":"https:\/\/skywt.cn\/posts\/vscode-vim-config","text":"\u8fd9\u91cc\u5c31\u662f\u6211 Visual Studio Code \u548c Vim \u7684\u914d\u7f6e\u6587\u4ef6\u7684\u5907\u4efd\u2026\u2026\n\nVisual Studio Code\n{\n    \"editor.acceptSuggestionOnEnter\": \"off\",\n    \"editor.autoClosingBrackets\": true,\n    \"editor.cursorBlinking\": \"smooth\",\n    \"editor.multiCursorModifier\": \"ctrlCmd\",\n    \"editor.insertSpaces\": false,\n    \"editor.cursorStyle\": \"line\",\n    \"editor.folding\": true,\n    \"terminal.integrated.cursorBlinking\": true,\n    \"terminal.integrated.cursorStyle\": \"line\",\n    \"editor.renderWhitespace\": \"all\",\n    \"editor.renderIndentGuides\": true,\n}\nVIm\n\uff08\u6682\u65f6\uff0c\u5f85\u4fee\u6539\uff09\nset cin nu rnu ts=4 sw=4 sts=4 et noswapfile nobackup\nset so=100\nset backspace=eol,start,indent\nsyntax on\nset incsearch\nset hlsearch\nset ignorecase\nset rtp+=~\/.vim\/bundle\/Vundle.vim\ncall vundle#begin()\n    Plugin 'gmarik\/Vundle.vim'\n    Plugin 'xjoi\/codeforces.vim'\n    Plugin 'vim-airline\/vim-airline'\ncall vundle#end()\nfiletype plugin indent on\nlet g:airline#extensions#tabline#enabled = 1\nset autochdir\nnmap &lt;tab&gt; :bn &lt;enter&gt;\nset cursorline\nhi CursorLine   cterm=NONE ctermbg=238 ctermfg=none","tags":[{"name":"\u65e5\u5e38\u641e\u673a","slug":"\u65e5\u5e38\u641e\u673a","permalink":"https:\/\/skywt.cn\/tag\/%E6%97%A5%E5%B8%B8%E6%90%9E%E6%9C%BA\/"},{"name":"Linux","slug":"Linux","permalink":"https:\/\/skywt.cn\/tag\/Linux\/"}],"categories":[]},{"title":"\u9012\u63a8\u4e13\u9879\u8bad\u7ec3\u4e94\u9898\u9898\u89e3","date":"2018-08-28T14:18:35+08:00","path":"https:\/\/skywt.cn\/posts\/ditui-training","text":"\u4eca\u5929\u7684 XY \u9898\u5c45\u7136\u662f\u9012\u63a8\u4e13\u9898\uff0c\u4e94\u9053\u9898\u76ee\u5168\u90fd\u662f\u9012\u63a8\uff0c30+\u4e2a\u4eba AK \u4e86\u2026\u2026\n\n\u9012\u63a8\u662f\u6309\u7167\u4e00\u5b9a\u7684\u89c4\u5f8b\u6765\u8ba1\u7b97\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e2a\u9879\uff0c\u901a\u5e38\u662f\u901a\u8fc7\u8ba1\u7b97\u524d\u9762\u7684\u4e00\u4e9b\u9879\u6765\u5f97\u51fa\u5e8f\u5217\u4e2d\u7684\u6307\u5b9a\u9879\u7684\u503c\u3002\u5176\u601d\u60f3\u662f\u628a\u4e00\u4e2a\u590d\u6742\u7684\u5e9e\u5927\u7684\u8ba1\u7b97\u8fc7\u7a0b\u8f6c\u5316\u4e3a\u7b80\u5355\u8fc7\u7a0b\u7684\u591a\u6b21\u91cd\u590d\uff0c\u8be5\u7b97\u6cd5\u5229\u7528\u4e86\u8ba1\u7b97\u673a\u901f\u5ea6\u5feb\u548c\u4e0d\u77e5\u75b2\u5026\u7684\u673a\u5668\u7279\u70b9\u3002\n\n\n&quot;\u5229\u7528\u4e86\u8ba1\u7b97\u673a\u901f\u5ea6\u5feb\u548c\u4e0d\u77e5\u75b2\u5026\u7684\u673a\u5668\u7279\u70b9&quot; :no_mouth:\n\u86c7\u76ae\u76ee\u5f55\n\u95ee\u9898\u4e00\n\u9898\u76ee\u63cf\u8ff0\n\u5728\u6240\u6709\u7684 N \u4f4d\u6570\u4e2d\uff0c\u6709\u591a\u5c11\u4e2a\u6570\u4e2d\u6709\u5076\u6570\u4e2a\u6570\u5b57 3\uff1f\nTime Limit: 1000ms\nMemory Limit: 65536Bit\n\u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n\u8bfb\u5165\u4e00\u4e2a\u6570 N\u3002\n\u8f93\u51fa\u7b54\u6848\u3002\u7531\u4e8e\u7ed3\u679c\u53ef\u80fd\u5f88\u5927\uff0c\u4f60\u53ea\u9700\u8981\u8f93\u51fa\u8fd9\u4e2a\u7b54\u6848 mod 12345 \u7684\u503c\u3002\n\u6837\u4f8b\u8f93\u5165\n2\n\u6837\u4f8b\u8f93\u51fa\n73\n\u6570\u636e\u8303\u56f4\n1&lt;=N&lt;=1000\n\u95ee\u9898\u5206\u6790\n\u5f88\u660e\u663e\u662f\u9012\u63a8\uff08\u6216\u8005\u8bf4 DP\uff09\u3002\u5bb9\u6613\u60f3\u5230\u5b9a\u4e49 $f(i)$ \u8868\u793a\u5728 $i$ \u4f4d\u6570\u4e2d\u6709\u591a\u5c11\u4e2a\u6570\u4e2d\u6709\u5076\u6570\u4e2a\u6570\u5b57 3\uff0c\u4f46\u662f\u8fd9\u6837\u5982\u4f55\u8fdb\u884c\u72b6\u6001\u8f6c\u79fb\u5462\uff1f\u5f88\u660e\u663e\uff0c\u5355\u7eaf\u8fd9\u4e48\u5b9a\u4e49\u65e0\u6cd5\u76f4\u63a5\u72b6\u6001\u8f6c\u79fb\u3002\u6240\u4ee5\u6211\u4eec\u518d\u5b9a\u4e49 $g(i)$ \u8868\u793a $i$ \u4f4d\u6570\u4e2d\u6709\u591a\u5c11\u4e2a\u6570\u5b57\u4e2d\u6709\u5947\u6570\u4e2a\u6570\u5b57 3\u3002\n\u8003\u8651\u72b6\u6001\u8f6c\u79fb\uff0c\u5bf9\u4e8e $f(i)$ \u548c $g(i)$\uff0c\u80af\u5b9a\u4e0e $i-1$ \u4f4d\u6570\u5b57\u7684\u60c5\u51b5\u6709\u5173\u3002\u5148\u8003\u8651 $f(i)$\uff1a\n\n\u5982\u679c\u7b2c $i$ \u4f4d\u6570\u5b57\uff08\u4e5f\u5c31\u662f\u76f8\u8f83\u4e8e $i-1$ \u4f4d\uff0c\u65b0\u589e\u7684\u4e00\u4f4d\u6570\u5b57\uff09\u662f 3\uff0c\u90a3\u4e48\u5269\u4e0b\u7684 $i-1$ \u4f4d\u5c31\u5e94\u8be5\u6709\u5947\u6570\u4e2a 3\uff0c\u65b9\u6848\u6570\u662f $g(i-1)$\uff1b\n\u5982\u679c\u7b2c $i$ \u4f4d\u6570\u5b57\u4e0d\u662f 3\uff0c\u5219\u53ef\u4ee5\u662f\u9664\u4e86 3 \u4ee5\u5916\u7684 9 \u4e2a\u6570\u5b57\uff0c\u5269\u4e0b\u7684 $i-1$ \u4f4d\u5e94\u5f53\u6709\u5076\u6570\u4e2a 3\uff0c\u65b9\u6848\u6570\uff1a$f(i-1)\\ast 9$\n\n\u540c\u7406\u53ef\u4ee5\u5f97\u51fa $g(i)$ \u7684\u72b6\u6001\u8f6c\u79fb\u3002\u8f6c\u79fb\u65b9\u7a0b\uff1a\nf(i)=f(i-1)\\ast 9+g(i-1) \\\\\ng(i)=g(i-1)\\ast 9+f(i-1)\n\u4ee3\u7801\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\nusing namespace std;\nconst int maxn=1005,tt=12345;\nint n,f[maxn],g[maxn];\nint main(){\n    scanf(\"%d\",&amp;n);\n    if (n==1) {printf(\"9\\n\");return 0;}\n    f[1]=8;g[1]=1;\n    for (int i=2;i&lt;=n;i++){\n        f[i]=(f[i-1]*9%tt+g[i-1])%tt;\n        g[i]=(g[i-1]*9%tt+f[i-1])%tt;\n    }\n    printf(\"%d\\n\",f[n]);\n    return 0;\n}\n\u95ee\u9898\u4e8c\n\u9898\u76ee\u63cf\u8ff0\n\u7528 1\u00d71 \u548c 2\u00d72 \u7684\u78c1\u7816\u4e0d\u91cd\u53e0\u5730\u94fa\u6ee1 N\u00d73 \u7684\u5730\u677f\uff0c\u5171\u6709\u591a\u5c11\u79cd\u65b9\u6848\uff1f\n\u6837\u4f8b\u8f93\u5165\n2\n\u6837\u4f8b\u8f93\u51fa\n3\n\uff08\u6570\u636e\u8303\u56f4\u3001\u65f6\u7a7a\u9650\u5236\u3001\u8f93\u5165\u8f93\u51fa\u683c\u5f0f\u540c\u4e0a\uff09\n\u95ee\u9898\u5206\u6790\n\u4e00\u770b\u5230\u8fd9\u9898\u53ef\u80fd\u4f1a\u60f3\u5230\u8f6e\u5ed3\u7ebf DP\u2026\u2026\u5176\u5b9e\u6839\u672c\u6ca1\u6709\u8fd9\u4e48\u590d\u6742\uff0c\u6ce8\u610f\u5230\u53ea\u6709 1\u00d71 \u548c 2\u00d72 \u4e24\u79cd\u5730\u7816\uff0c\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e2a 2\u00d73 \u7684\u77e9\u5f62\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\u53f3\u8fb9\u4e00\u5757 2\u00d72\u3001\u5de6\u8fb9\u4e24\u5757 1\u00d71 \u548c \u5de6\u8fb9\u4e00\u5757 2\u00d72\u3001\u53f3\u8fb9\u4e24\u5757 1\u00d71\u3002\u8fd8\u6709\u53e6\u4e00\u79cd\u60c5\u51b5\u5c31\u662f\u6bcf\u884c\u4e09\u5757 1\u00d71\u3002\u5b9a\u4e49 $f(i)$ \u8868\u793a\u94fa $i$ \u884c\u7684\u65b9\u6848\u6570\uff0c\u90a3\u4e48\u9012\u63a8\u5f0f\u5f88\u5bb9\u6613\u5f97\u51fa\uff1a\nf(i)=f(i-2)\\ast 2+f(i-1)\n\u4ee3\u7801\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\nusing namespace std;\nconst int maxn=1005,tt=12345;\nint n,f[maxn];\nint main(){\n    scanf(\"%d\",&amp;n);\n    f[0]=1;\n    for (int i=1;i&lt;=n;i++) f[i]=(f[i-2]*2%tt+f[i-1])%tt;\n    printf(\"%d\\n\",f[n]);\n    return 0;\n}\n\u95ee\u9898\u4e09\n\u9898\u76ee\u63cf\u8ff0\n\u4ece\u539f\u70b9\u51fa\u53d1\uff0c\u4e00\u6b65\u53ea\u80fd\u5411\u53f3\u8d70\u3001\u5411\u4e0a\u8d70\u6216\u5411\u5de6\u8d70\u3002\u6070\u597d\u8d70 N \u6b65\u4e14\u4e0d\u7ecf\u8fc7\u5df2\u8d70\u7684\u70b9\u5171\u6709\u591a\u5c11\u79cd\u8d70\u6cd5\uff1f\n\u6837\u4f8b\u8f93\u5165\n2\n\u6837\u4f8b\u8f93\u51fa\n7\n\uff08\u6570\u636e\u8303\u56f4\u3001\u65f6\u7a7a\u9650\u5236\u3001\u8f93\u5165\u8f93\u51fa\u683c\u5f0f\u540c\u4e0a\uff09\n\u95ee\u9898\u5206\u6790\n\u4e00\u770b\u8fd9\u9898\uff0c\u53ef\u80fd\u96be\u70b9\u4e3b\u8981\u5728\u201c\u4e0d\u7ecf\u8fc7\u5df2\u8d70\u7684\u70b9\u201d\u5982\u4f55\u5904\u7406\u3002\u5982\u679c\u6211\u4eec\u5b9a\u4e49 $f(i)$ \u8868\u793a\u8d70\u4e86 i \u6b65\u7684\u65b9\u6848\u6570\uff0c\u90a3\u4e48\u201c\u4e0d\u7ecf\u8fc7\u5df2\u8d70\u7684\u70b9\u201d\u5c31\u6ca1\u6cd5\u5904\u7406\u4e86\u3002\n\u4e0d\u59a8\u5b9a\u4e49 $f(i,0\/1\/2)$ \u8868\u793a\u8d70\u4e86 i \u6b65\uff0c\u6700\u540e\u4e00\u6b65\u5411\u4e0a\/\u5de6\/\u53f3\u8d70\u7684\u65b9\u6848\u6570\u3002\u90a3\u4e48\u4e0a\u6b21\u662f\u5411\u53f3\u8fb9\u8d70\uff0c\u8fd9\u6b21\u5c31\u4e0d\u80fd\u5411\u5de6\u8fb9\u8d70\uff1b\u4e0a\u6b21\u5411\u5de6\uff0c\u8fd9\u6b21\u5c31\u4e0d\u80fd\u5411\u53f3\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u72b6\u6001\u8f6c\u79fb\u4e86\uff1a\nf(i,0)=f(i-1,0)+f(i-1,1)+f(i-1,2) \\\\\nf(i,1)=f(i-1,0)+f(i-1,1) \\\\\nf(i,2)=f(i-1,0)+f(i-1,2)\n\u4ee3\u7801\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\nusing namespace std;\nconst int maxn=1005,tt=12345;\nint n,f[maxn][3];\nint main(){\n    scanf(\"%d\",&amp;n);\n    f[1][0]=f[1][1]=f[1][2]=1;\n    for (int i=2;i&lt;=n;i++){\n        f[i][0]=(f[i-1][0]+f[i-1][1]+f[i-1][2])%tt;\n        f[i][1]=(f[i-1][0]+f[i-1][1])%tt;\n        f[i][2]=(f[i-1][0]+f[i-1][2])%tt;\n    }\n    printf(\"%d\\n\",(f[n][0]+f[n][1]+f[n][2])%tt);\n    return 0;\n}\n\u95ee\u9898\u56db\n\u9898\u76ee\u63cf\u8ff0\n\u5706\u5468\u4e0a\u6709 N \u4e2a\u70b9\u3002\u8fde\u63a5\u4efb\u610f\u591a\u6761\uff08\u53ef\u80fd\u662f 0 \u6761\uff09\u4e0d\u76f8\u4ea4\u7684\u5f26\uff08\u5171\u7528\u7aef\u70b9\u4e5f\u7b97\u76f8\u4ea4\uff09\u5171\u6709\u591a\u5c11\u79cd\u65b9\u6848\uff1f\n\u6837\u4f8b\u8f93\u5165\n4\n\u6837\u4f8b\u8f93\u51fa\n9\n\uff08\u6570\u636e\u8303\u56f4\u3001\u65f6\u7a7a\u9650\u5236\u3001\u8f93\u5165\u8f93\u51fa\u683c\u5f0f\u540c\u4e0a\uff09\n\u95ee\u9898\u5206\u6790\n\u4e5f\u662f\u5f88\u663e\u7136\u7684\u9012\u63a8\u9898\u2026\u2026\u4e00\u822c\u8fd9\u79cd\u9898\u76ee\u6211\u4eec\u53ef\u4ee5\u201c\u627e\u89c4\u5f8b\u201d\uff1a\n\n\n\u5982\u679c\u53ea\u6709 0 \u4e2a\u70b9\uff0c\u65e0\u6cd5\u8fde\u63a5\uff0c\u53ea\u6709\u4e00\u79cd\u65b9\u6848\uff0c\u5373\u5168\u90e8\u4e0d\u8fde\u3002$f(0)=1$\u3002\n\n\n\u540c\u7406\uff0c\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u70b9\uff0c$f(1)=1$\u3002\n\n\n\u5982\u679c\u6709\u4e24\u4e2a\u70b9\uff0c\u8981\u4e48\u8fde\u63a5\uff0c\u8981\u4e48\u4e0d\u8fde\uff0c$f(2)=2$\u3002\n\n\n\uff08\u91cd\u5934\u620f\u6765\u4e86\uff09\u5982\u679c\u6709\u4e09\u4e2a\u70b9\uff0c\u5219\u65b0\u52a0\u5165\u7684\u70b9\u8981\u4e48\u4e0d\u4e0e\u5176\u4ed6\u4e24\u4e2a\u70b9\u8fde\u63a5\uff08\u65b9\u6848\u6570\uff1a$f(2)$\uff09\uff0c\u8981\u4e48\u968f\u4fbf\u9009\u4e00\u4e2a\u8fde\u63a5\uff0c\u201c\u5b64\u7acb\u201d\u5269\u4e0b\u7684\u4e00\u4e2a\u70b9\uff0c\u5171 4 \u79cd\u65b9\u6848\u3002\n\n\n\uff08\u771f\u6b63\u7684\u91cd\u5934\u620f\uff09\u5982\u679c\u518d\u52a0\u5165\u4e00\u4e2a\u70b9\u5462\uff1f\n\n\n\u4e0d\u4e0e\u5176\u4ed6\u4e09\u4e2a\u70b9\u8fde\u63a5\uff0c\u65b9\u6848\u6570 $f(3)$\n\n\u4e0e\u67d0\u4e2a\u70b9\u8fde\u63a5\uff0c\u53ef\u4ee5\u770b\u6210\u8fde\u6210\u7684\u8fd9\u6761\u8fb9\u628a\u70b9\u96c6\u5206\u6210\u4e86\u4e24\u90e8\u5206\uff0c\u5de6\u53f3\u4e24\u90e8\u5206\u5269\u4e0b\u7684\u70b9\u5206\u522b\u8fde\u8fb9\uff0c\u65b9\u6848\u6570\u5206\u522b\u76f8\u4e58\u3002\n\n\n\n\u5728\u4e0a\u8ff0\u624b\u7b97\u8fc7\u7a0b\u4e2d\u6211\u4eec\u53d1\u73b0\u4e86\u89c4\u5f8b\uff0c\u603b\u7ed3\u51fa\u9012\u63a8\u5f0f\u5c31\u662f\uff1a\nf(i)=f(i-1)+ \\sum_{j=0}^{i-2} f(j)\\ast f(i-j-2)\n\u4ee3\u7801\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\nusing namespace std;\nconst int maxn=1005,tt=12345;\nint n,f[maxn];\nint main(){\n    scanf(\"%d\",&amp;n);\n    f[0]=f[1]=1;f[2]=2;\n    for (int i=3;i&lt;=n;i++){\n        f[i]=f[i-1];\n        for (int j=0;j&lt;=i-2;j++) f[i]=(f[i]+f[j]*f[i-j-2]%tt)%tt;\n    }\n    printf(\"%d\\n\",f[n]);\n    return 0;\n}\n\u95ee\u9898\u4e94\n\u9898\u76ee\u63cf\u8ff0\n\u5728\u7f51\u683c\u4e2d\u53d6\u4e00\u4e2a N\u00d71 \u7684\u77e9\u5f62\uff0c\u5e76\u628a\u5b83\u5f53\u4f5c\u4e00\u4e2a\u65e0\u5411\u56fe\u3002\u8fd9\u4e2a\u56fe\u6709 2(N+1) \u4e2a\u9876\u70b9\uff0c\u6709 3(N-1)+4 \u6761\u8fb9\u3002\u8fd9\u4e2a\u56fe\u6709\u591a\u5c11\u4e2a\u751f\u6210\u6811\uff1f\n\u6837\u4f8b\u8f93\u5165\n1\n\u6837\u4f8b\u8f93\u51fa\n4\n\uff08\u6570\u636e\u8303\u56f4\u3001\u65f6\u7a7a\u9650\u5236\u3001\u8f93\u5165\u8f93\u51fa\u683c\u5f0f\u540c\u4e0a\uff09\n\u95ee\u9898\u5206\u6790\n\uff08\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u5728\u8fd9\u91cc\u7684\u5206\u6790\u4e2d\uff0c\u6211\u5047\u8bbe\u77e9\u5f62\u4ece\u4e0b\u5230\u4e0a\u5b89\u6392\uff09\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49 $f(i)$ \u8868\u793a\u9ad8\u5ea6\u4e3a $i$ \u7684\u77e9\u5f62\u5f62\u6210\u751f\u6210\u6811\u7684\u4e2a\u6570\u3002\u6700\u5f00\u59cb\u6211\u60f3\u5230\u4e00\u4e2a naive \u7684\u60f3\u6cd5\uff1a\u6700\u5e95\u4e0b\u7684\u4e00\u4e2a\u77e9\u5f62\u6709\u56db\u79cd\u60c5\u51b5\uff0c\u4e0a\u9762\u6bcf\u589e\u52a0\u4e00\u4e2a\u5c31\u6709\u4e09\u79cd\u60c5\u51b5\uff08\u5982\u56fe\uff09\uff0c\u6240\u4ee5\u7b54\u6848\u5c31\u662f $4\\ast 3^{n-1}$ \uff01\n\n\u4f46\u662f\u73b0\u5b9e\u5f88\u6b8b\u9177\uff0c\u5f88\u663e\u7136\u201c\u68af\u5b50\u5f62\u201d\u6ca1\u6709\u88ab\u6211\u8003\u8651\u5230\uff0c\u5373\u8fd9\u6837\u7684\u60c5\u51b5\uff1a\n\n\u6240\u4ee5\u6211\u4eec\u4e0d\u5f97\u4e0d\u6362\u4e00\u79cd\u5b9a\u4e49\uff1a$f(i,0\/1)$ \u8868\u793a\u6709 $i$ \u4e2a\u6b63\u65b9\u5f62\uff0c\u5176\u4e2d\u6700\u4e0a\u9762\u4e00\u4e2a\u6b63\u65b9\u5f62\u7684\u6700\u4e0a\u9762\u4e00\u6761\u8fb9\u53d6\u4e86\/\u6ca1\u53d6\u3002\u56e0\u4e3a\u63a5\u4e0b\u6765\u52a0\u5165\u7684\u6b63\u65b9\u5f62\u53ea\u548c\u6700\u4e0a\u9762\u4e00\u6761\u8fb9\u6709\u5173\u3002\u8003\u8651\u72b6\u6001\u8f6c\u79fb\uff1a\n\n\n\u5148\u8003\u8651 $f(i,1)$ \u5982\u4f55\u8f6c\u79fb\uff1a\u5f88\u7b80\u5355\uff0c\u65b0\u52a0\u5165\u7684\u6b63\u65b9\u5f62\u4e0a\u9762\u4e00\u6761\u8fb9\u4e0d\u53d6\uff0c\u53ea\u6709\u4e00\u79cd\u60c5\u51b5\uff0c\u5373\u201c|  |\u201d\u3002\n\n\n\u63a5\u4e0b\u6765\u770b\u770b $f(i,0)$ \u600e\u4e48\u8f6c\u79fb\u3002\n\n\n\u5982\u679c\u4e0b\u9762\u77e9\u5f62\u6700\u4e0a\u9762\u4e00\u6761\u8fb9\u6ca1\u53d6\uff0c\u5219\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\u5de6\u4e0a\u3001\u53f3\u4e0a\u3002\n\n\u5982\u679c\u4e0b\u9762\u77e9\u5f62\u6700\u4e0a\u9762\u4e00\u6761\u8fb9\u53d6\u4e86\uff0c\u90a3\u4e48\u6211\u4eec\u8fd8\u8981\u518d\u8003\u8651\u4e00\u79cd\u60c5\u51b5\uff1a\u53ef\u4ee5\u628a\u8fd9\u6761\u8fb9\u62ff\u6765\u5f53\u505a\u52a0\u5165\u7684\u6b63\u65b9\u5f62\u7684\u6700\u4e0a\u9762\u4e00\u6761\u8fb9\uff08\u8fd9\u4e2a\u771f\u7684\u662f\u60f3\u4e0d\u5230\uff09\u3002\u8fd9\u6837\u624d\u4fdd\u8bc1\u4e86\u4e0a\u9762\u6240\u8ff0\u7684\u201c\u68af\u5b50\u5f62\u201d\u53ef\u4ee5\u8003\u8651\u5230\u3002\n\n\n\n\u8f6c\u79fb\u65b9\u7a0b\uff1a\nf(i,0)=f(i-1,1)\\ast 2+f(i-1,0)\\ast 3 \\\\\nf(i,1)=f(i-1,1)+f(i-1,0)\n\u4ee3\u7801\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\nusing namespace std;\nconst int maxn=1005,tt=12345;\nint n,f[maxn][2];\nint main(){\n    scanf(\"%d\",&amp;n);\n    f[1][0]=3;f[1][1]=1;\n    for (int i=2;i&lt;=n;i++){\n        f[i][0]=(f[i-1][1]*2%tt+f[i-1][0]*3%tt)%tt;\n        f[i][1]=(f[i-1][0]+f[i-1][1])%tt;\n    }\n    printf(\"%d\\n\",(f[n][0]+f[n][1])%tt);\n    return 0;\n}","tags":[{"name":"OI\u5b66\u4e60","slug":"OI\u5b66\u4e60","permalink":"https:\/\/skywt.cn\/tag\/OI%E5%AD%A6%E4%B9%A0\/"},{"name":"OI\u7b97\u6cd5","slug":"OI\u7b97\u6cd5","permalink":"https:\/\/skywt.cn\/tag\/OI%E7%AE%97%E6%B3%95\/"},{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u52a8\u6001\u89c4\u5212\u7c7b\u578b\u9898","slug":"\u52a8\u6001\u89c4\u5212\u7c7b\u578b\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB%E5%9E%8B%E9%A2%98\/"},{"name":"\u6570\u5b66\u9898","slug":"\u6570\u5b66\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E6%95%B0%E5%AD%A6%E9%A2%98\/"},{"name":"\u7ebf\u6027DP","slug":"\u7ebf\u6027DP","permalink":"https:\/\/skywt.cn\/tag\/%E7%BA%BF%E6%80%A7DP\/"}],"categories":[]},{"title":"Topcoder SRM 637 Div2 T3 ConnectingGameDiv2 \u9898\u89e3","date":"2018-08-29T20:45:56+08:00","path":"https:\/\/skywt.cn\/posts\/tc-637-div2-t3","text":"Topcoder SIngle Round Match 637 Div 2 T3 ConnectingGameDiv2 \u9898\u89e3\n\n\nTranslation\n\u7ed9\u4f60\u4e00\u4e2a N\u00d7M \u7684\u5b57\u7b26\u77e9\u9635\uff0c\u6bcf\u4e2a\u5b57\u7b26\u53ef\u80fd\u662f\u5927\u5199\u5b57\u6bcd\u3001\u5c0f\u5199\u5b57\u6bcd\u6216\u8005\u6570\u5b57\u3002\u76f8\u540c\u5b57\u7b26\u7684\u4e00\u5757\u8054\u901a\u5757\u79f0\u4e3a\u4e00\u4e2a\u201c\u533a\u57df\u201d\u3002\u73b0\u5728\u8981\u9009\u53d6\u8fd9\u4e2a\u77e9\u9635\u91cc\u7684\u51e0\u4e2a\u533a\u57df\u67d3\u6210\u7ea2\u8272\uff0c\u4f7f\u5f97\u4ece\u77e9\u9635\u7684\u7b2c\u4e00\u884c\u5230\u6700\u540e\u4e00\u884c\u6ca1\u6709\u4e00\u6761\u6ca1\u6709\u989c\u8272\u7684\u901a\u8def\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u67d3\u6210\u7ea2\u8272\u7684\u70b9\u5c31\u4e0d\u80fd\u8d70\u4e86\uff0c\u8981\u4f7f\u5f97\u7b2c\u4e00\u884c\u5230\u6700\u540e\u4e00\u884c\u6ca1\u6709\u901a\u8def\u3002\n\u4f60\u7684\u4efb\u52a1\u662f\u4f7f\u5f97\u67d3\u8272\u7684 cells \u4e2a\u6570\u6700\u5c11\u3002\u6ce8\u610f\uff1a\u53ea\u80fd\u4e00\u6b21\u67d3\u4e00\u4e2a\u533a\u57df\u3002\n\u5b57\u7b26\u77e9\u9635\u4ee5 vector  board \u7ed9\u51fa\u3002\u6570\u636e\u8303\u56f4\uff1a$1 \\leqslant n,m \\leqslant 50$\u3002\n\n\nboard will contain between 1 and 50 elements, inclusive.\nEach element in board will contain between 1 and 50 characters, inclusive.\nAll elements in board will have the same length.\nEach character in board will be a letter or a digit (\u2019a'-'z', 'A'-'Z', or '0'-'9').\nEach of the regions in board will be 4-connected.\nTime limit (s): 2.000\nMemory limit (MB): 256\n\n\n\nExamples\n\u6837\u4f8b\u96f6\uff1a\n{\"AA\"\n,\"BC\"}\nReturns: 2\n\u67d3\u4e24\u4e2a A \u6216\u8005 B \u548c C \u5747\u53ef\u3002\n\nIf Snuke colors 0 or 1 cells red, he will lose the game. He can win the game by coloring 2 cells red. One possibility is to color the two 'A' cells red.\n\n\u6837\u4f8b\u4e00\uff1a\n{\"AAB\"\n,\"ACD\"\n,\"CCD\"}\nReturns: 4\n\u65b9\u6848\u4e4b\u4e00\u662f\u67d3 B \u548c C\uff0c\u4e00\u5171 4 \u4e2a cells\u3002\n\nHere, one optimal solution is to color the regions 'B' and 'C' red. There will be 1 + 3 = 4 red cells.\n\n\u6837\u4f8b\u4e8c\uff1a\n{\"iii\"\n,\"iwi\"\n,\"iii\"}\nReturns: 8\n\u552f\u4e00\u7684\u65b9\u6848\u662f\u628a\u4e00\u5708 i \u90fd\u67d3\u4e86\u3002\n\nOriginal\n\nCat Snuke and wolf Sothe are playing the Connecting Game.\nThe Connecting Game is played on a rectangular grid that is divided into unit square cells. The grid is divided into some regions. Each cell belongs into exactly one of those regions. Each region is 4-connected (see Notes for a formal definition).\nYou are given a vector  board that describes the division of the grid into regions. Each character in board represents one of the cells. Cells that are represented by the same character belong into the same region.\nInitially, the entire grid is colorless. The game consists of two steps. In the first step, Snuke colors some of the regions red. In the second step, Sothe colors all remaining regions blue. (Within each region, all cells must have the same color.) Sothe wins if there is a path (see Notes for a formal definition) of blue cells from the top row to the bottom row. Otherwise, Snuke wins.\nYou are given the vector  board. Compute and return the smallest number of cells Snuke can color red in order to win the game.\n(Note that Snuke cannot simply color individual cells, he must color entire regions. Also note that we are interested in minimizing the total number of cells, not the number of regions Snuke colors.)\n\n\nAnalysis\n\u636e\u8bf4\u8fd9\u9898\u53ef\u4ee5\u7528\u6700\u5927\u6d41\u505a\uff0c\u662f\u6700\u5927\u6d41\u6700\u5c0f\u5272\u95ee\u9898\uff0c\u4f46\u662f\u6211\u548c DYT \u7814\u7a76\u8ba8\u8bba\u4e86\u4e00\u665a\u4e0a\u6ca1\u60f3\u5230\u597d\u7684\u89e3\u51b3\u65b9\u6848\u2026\u2026\u4e0d\u8fc7\u6211\u4eec\u60f3\u5230\u4e00\u79cd\u66f4\u52a0\u7b80\u5355\u7684\u60f3\u6cd5\u2026\u2026\n\u65e2\u7136\u9898\u76ee\u91cc\u8981\u6211\u4eec\u201c\u4f7f\u5f97\u7b2c\u4e00\u884c\u5230\u6700\u540e\u4e00\u884c\u6ca1\u6709\u901a\u8def\u201d\uff0c\u81ea\u7136\u5c31\u53ef\u4ee5\u60f3\u5230\u6211\u4eec\u53ef\u4ee5\u53bb\u201c\u963b\u65ad\u201d\u4ece\u4e0a\u5230\u4e0b\u7684\u8def\u3002\u95ee\u9898\u53ef\u4ee5\u53d8\u6210\uff1a\u8981\u4ece\u6700\u5de6\u8fb9\u4e00\u5217\u5230\u6700\u53f3\u8fb9\u4e00\u5217\u753b\u4e00\u6761\u5f2f\u66f2\u7684\u7ebf\uff0c\u5373\u53ea\u8981\u67d3\u4e86\u8fd9\u6761\u201c\u7ebf\u201d\u4e0a\u7684 cells \u5c31\u53ef\u4ee5\u201c\u963b\u65ad\u901a\u8def\u201d\u3002\u5176\u6240\u7ecf\u4e4b\u5904\u7684\u533a\u57df\u7684\u6240\u6709 cells \u90fd\u8981\u88ab\u67d3\u8272\uff0c\u5373\u52a0\u4e0a\u533a\u57df\u6240\u542b cells \u7684\u4e2a\u6570\u3002\u6211\u4eec\u8981\u627e\u5230\u6240\u7ecf\u533a\u57df cells \u4e2a\u6570\u4e4b\u548c\u6700\u5c0f\u7684\u4e00\u6761\u201c\u7ebf\u201d\u3002\n\u5f88\u660e\u663e\u5c31\u662f\u4e00\u4e2a\u53d8\u5f62\u7684\u6700\u77ed\u8def\u3002\u53ef\u4ee5\u7528 SPFA\uff08Bellman-Ford\uff09\u7b97\u6cd5\u89e3\u51b3\u3002\u9700\u8981\u6ce8\u610f\u8981\u8003\u8651\u516b\u4e2a\u65b9\u5411\uff08\u5373\u516b\u8054\u901a\uff09\uff0c\u5f62\u5982\u8fd9\u6837\u7684\u56f4\u6cd5\uff08\u659c\u8fde\u63a5\uff09\u4e5f\u53ef\u4ee5\u963b\u65ad\u9053\u8def\uff1a\nOOX \\\\\nXXO \\\\\nOOO\n\u5173\u4e8e\u6700\u5c0f\u5272\u6700\u5927\u6d41\uff08min-cut max flow\uff09\u7684\u89e3\u6cd5\uff0c\u6211\u4eec\u770b\u4e86\u4e00\u4f4d\u5916\u56fd\u5927\u4f6c\u7684\u89e3\u6cd5\uff0c\u548c\u51e0\u7bc7\u65e5\u672c\u9009\u624b\u7684\u9898\u89e3\uff08\u7b2c\u4e00\u7bc7\u548c\u7b2c\u4e8c\u7bc7\uff09\uff0c\u4f46\u662f\u90fd\u6ca1\u770b\u61c2\u2026\u2026\n\uff08Google \u7ffb\u8bd1\u65e5\u8bed\u7ffb\u8bd1\u8fc7\u6765\u6839\u672c\u770b\u4e0d\u61c2\u554a\u2026\u2026\uff09\n\nCode\nTC \u7684\u7f16\u8bd1\u5668\u4f3c\u4e4e move \u53d8\u91cf\u4e0d\u80fd\u5f00\u2026\u2026\n#include &lt;bits\/stdc++.h&gt;\n#define CLEAR(x) memset(x,0,sizeof(x))\n#define CLEAR_NEG(x) memset(x,255,sizeof(x))\n#define CLEAR_MAX(x) memset(x,0x3f,sizeof(x))\n#define CLEAR_MIN(x) memset(x,0x80,sizeof(x))\nusing namespace std;\n\nconst int maxn=2510,maxnn=55,INF=5e8;\nconst int mve[4][2]={{-1,0},{0,1},{1,0},{0,-1}};\nconst int move_eight[8][2]={{-1,0},{-1,1},{0,1},{1,1},{1,0},{1,-1},{0,-1},{-1,-1}};\nint n,nn,mm,ans=0;\nint num[maxnn][maxnn],sum[maxn],dst[maxnn][maxnn];\nbool vis[maxnn][maxnn];\nvector &lt;string&gt; a;\nstruct WT{\n    int x,y;\n};\nqueue &lt;WT&gt; que;\n\nclass ConnectingGameDiv2 {\npublic:\n    int getmin( vector &lt;string&gt; board );\n};\ninline void init(){\n    CLEAR(sum);CLEAR(vis);\n    CLEAR_NEG(num);\n    n=0;ans=INF;\n}\ninline bool CheckMove(int x,int y){\n    if (x&lt;0||y&lt;0||x&gt;nn-1||y&gt;mm-1) return false;\n    return true;\n}\ninline void MakeRegion(int x,int y,int id){\n    num[x][y]=id;sum[id]++;\n    for (int i=0;i&lt;4;i++)\n        if (CheckMove(x+mve[i][0],y+mve[i][1])&amp;&amp;(num[x+mve[i][0]][y+mve[i][1]]==-1)&amp;&amp;(a[x+mve[i][0]][y+mve[i][1]]==a[x][y]))\n            MakeRegion(x+mve[i][0],y+mve[i][1],id);\n}\ninline void BuildSum(){\n    for (int i=0;i&lt;nn;i++)\n    for (int j=0;j&lt;mm;j++)\n        if (num[i][j]==-1) MakeRegion(i,j,++n);\n    \/\/ for (int i=0;i&lt;nn;i++){\n    \/\/  for (int j=0;j&lt;mm;j++) printf(\"%d \",num[i][j]);\n    \/\/  printf(\"\\n\");\n    \/\/ }\n    \/\/ printf(\"sum:\");for (int i=1;i&lt;=n;i++) printf(\"%d \",sum[i]);printf(\"\\n\");\n}\ninline int SPFA(int sx,int sy){\n    CLEAR_MAX(dst);\n    vis[sx][sy]=true;dst[sx][sy]=sum[num[sx][sy]];\n    que.push((WT){sx,sy});\n    while (!que.empty()){\n        WT head=que.front();que.pop();\n        vis[head.x][head.y]=false;\n        for (int i=0;i&lt;8;i++) if (CheckMove(head.x+move_eight[i][0],head.y+move_eight[i][1])){\n            int xx=head.x+move_eight[i][0],yy=head.y+move_eight[i][1];\n            if (dst[head.x][head.y]+sum[num[xx][yy]]*(bool)(num[xx][yy]!=num[head.x][head.y])&lt;dst[xx][yy]){\n                dst[xx][yy]=dst[head.x][head.y]+sum[num[xx][yy]]*(bool)(num[xx][yy]!=num[head.x][head.y]);\n                if (!vis[xx][yy]) vis[xx][yy]=true,que.push((WT){xx,yy});\n            }\n        }\n    }\n    int ret=INF;\n    for (int i=0;i&lt;nn;i++) ret=min(ret,dst[i][mm-1]);\n    return ret;\n}\nint ConnectingGameDiv2::getmin(vector &lt;string&gt; board) {\n    init();\n    nn=board.size();mm=board[0].length();\n    a=board;\n    BuildSum();\n    for (int i=0;i&lt;nn;i++) ans=min(ans,SPFA(i,0));\n    return ans;\n}","tags":[{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u56fe\u8bba\u7c7b\u578b\u9898","slug":"\u56fe\u8bba\u7c7b\u578b\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E5%9B%BE%E8%AE%BA%E7%B1%BB%E5%9E%8B%E9%A2%98\/"},{"name":"\u6700\u77ed\u8def","slug":"\u6700\u77ed\u8def","permalink":"https:\/\/skywt.cn\/tag\/%E6%9C%80%E7%9F%AD%E8%B7%AF\/"},{"name":"\u7f51\u7edc\u6d41","slug":"\u7f51\u7edc\u6d41","permalink":"https:\/\/skywt.cn\/tag\/%E7%BD%91%E7%BB%9C%E6%B5%81\/"}],"categories":[]},{"title":"Topcoder SRM 640 Div1 T1 ChristmasTreeDecoration \u9898\u89e3","date":"2018-08-30T15:25:56+08:00","path":"https:\/\/skywt.cn\/posts\/tc-640-div1-t1","text":"Topcoder Single Round Match 640 Div 1 T1 ChristmasTreeDecoration \u9898\u89e3\n\u522b\u770b\u4e86\uff0c\u8fd9\u7bc7\u535a\u5ba2\u5f88\u6c34\u2026\u2026\n\n\n\u7ed9\u4f60 N \u4e2a\u8282\u70b9\u548c\u4e00\u4e9b\u8fb9\uff0c\u6bcf\u4e2a\u70b9\u6709\u4e2a\u989c\u8272\uff0c\u73b0\u5728\u8981\u4f60\u4ece\u8fd9\u4e9b\u8fb9\u91cc\u9009\u51fa N-1 \u6761\u6784\u6210\u4e00\u68f5\u6811\uff0c\u5e76\u4e14\u8981\u8ba9\u5c3d\u91cf\u5c11\u7684\u8fb9\u8fde\u63a5\u76f8\u540c\u989c\u8272\u7684\u70b9\u3002\n\u8fd4\u56de\u8fde\u63a5\u76f8\u540c\u989c\u8272\u7684\u70b9\u7684\u8fb9\u6700\u5c11\u6570\u91cf\u3002\n\u989c\u8272\u4ee5 vector &lt;int&gt; col \u7ed9\u51fa\uff0ccol[i] \u8868\u793a\u7684\u662f i+1 \u8282\u70b9\u7684\u989c\u8272\uff08\u56e0\u4e3a\u8282\u70b9\u4ece 1 \u5f00\u59cb\u7f16\u53f7\uff0c\u800c vector \u4ece 0 \u5f00\u59cb\uff09\u3002\u8fb9\u4ee5 vector &lt;int&gt; x,y \u7ed9\u51fa\u3002\n\n\nN will be between 2 and 50, inclusive.\nThe number of elements in col will be N exactly.\nThe number of elements in x will be between 1 and 200, inclusive.\nThe number of elements in y will be the same as the number of elements in x.\nAll elements of x and y will be between 1 and N, inclusive.\nFor each i, the numbers x[i] and y[i] will be different.\nAll unordered pairs (x[i], y[i]) will be distinct.\nThere will be at least one way to choose N-1 ribbons that form a connected graph.\nTime limit (s): 2.000\nMemory limit (MB): 256\n\n\n\n\u9898\u76ee\u539f\u6587\uff1a\n\nChristmas is just around the corner, and Alice just decorated her Christmas tree. There are N stars on the tree. The stars are numbered 1 through N. Additionally, each star has some color. You are given the colors of stars as a vector  col with N elements. For each i, col[i] is the color of star i+1. (Different integers represent different colors.)\nAlice has prepared N-1 ribbons and she is now going to attach them to the tree. Each ribbon will connect two of the stars. The ribbons have to be placed in such a way that all stars and ribbons will hold together. (In other words, in the resulting arrangement the stars and ribbons will correspond to vertices and edges of a tree.)\nOnly some pairs of stars can be connected by a ribbon. You are given a list of all such pairs of stars in two vector s: x and y. For each valid i, it is possible to add a ribbon that connects the stars with numbers x[i] and y[i].\nAccording to Alice, a ribbon that connects two stars that share the same color is less beautiful than a ribbon that connects two stars with different colors. Therefore, she would like to minimize the number of ribbons that connect two same-colored stars. Compute and return the smallest possible number of such ribbons.\n\n\n\u5178\u578b\u7684\u6700\u5c0f\u751f\u6210\u6811\uff0c\u76f8\u540c\u989c\u8272\u8fb9\u6743\u4e3a 1\uff0c\u4e0d\u540c\u989c\u8272\u8fb9\u6743\u4e3a 0\uff0c\u8dd1\u4e00\u8d9f Kruscal \u5373\u53ef\u3002\n\n\u4ee3\u7801\uff1a\n#include &lt;bits\/stdc++.h&gt;\n#define CLEAR(x) memset(x,0,sizeof(x))\nusing namespace std;\nconst int maxn=55,maxm=205;\nint n,m,fa[maxn],ans;\n\ntemplate&lt;class T&gt; void checkmin(T &amp;a,const T &amp;b) { if (b&lt;a) a=b; } \ntemplate&lt;class T&gt; void checkmax(T &amp;a,const T &amp;b) { if (b&gt;a) a=b; }\n\nclass ChristmasTreeDecoration {\npublic:\n    int solve( vector &lt;int&gt; col, vector &lt;int&gt; x, vector &lt;int&gt; y ) ;\n};\n\nstruct EdgeInfo{\n    int x,y,w;\n}a[maxm];\ninline bool cmp(EdgeInfo aa,EdgeInfo bb){\n    return aa.w&lt;bb.w;\n}\n\ninline void init(){\n    CLEAR(a);ans=0;\n}\ninline int getfa(int x){\n    if (fa[x]==x) return x;\n    fa[x]=getfa(fa[x]);\n    return fa[x];\n}\ninline void Kruskal(){\n    sort(a,a+m,cmp);\n    for (int i=0;i&lt;m;i++){\n        int fx=getfa(a[i].x),fy=getfa(a[i].y);\n        if (fx==fy) continue;\n        ans+=a[i].w;fa[fx]=fy;\n    }\n}\nint ChristmasTreeDecoration::solve(vector &lt;int&gt; col, vector &lt;int&gt; x, vector &lt;int&gt; y) {\n    init();\n    n=col.size();m=x.size();\n    for (int i=1;i&lt;=n;i++) fa[i]=i;\n    for (int i=0;i&lt;m;i++) a[i].x=x[i],a[i].y=y[i],a[i].w=col[x[i]-1]==col[y[i]-1];\n    Kruskal();\n    return ans;\n}","tags":[{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u56fe\u8bba\u7c7b\u578b\u9898","slug":"\u56fe\u8bba\u7c7b\u578b\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E5%9B%BE%E8%AE%BA%E7%B1%BB%E5%9E%8B%E9%A2%98\/"},{"name":"\u751f\u6210\u6811","slug":"\u751f\u6210\u6811","permalink":"https:\/\/skywt.cn\/tag\/%E7%94%9F%E6%88%90%E6%A0%91\/"}],"categories":[]},{"title":"Topcoder SRM 616 Div2 T3 TwoLLogo \u9898\u89e3","date":"2018-08-31T21:21:10+08:00","path":"https:\/\/skywt.cn\/posts\/tc-616-div2-t3","text":"Topcoder Single Round Match 616 Div 2 T3 \u9898\u89e3\n\n\n\u9898\u76ee\u5927\u610f\n\u7ed9\u4f60\u4e00\u4e2a N\u00d7M \u7684\u5b57\u7b26\u77e9\u9635\uff0c\u4ee3\u8868 N \u884c M \u5217\u7684\u70b9\u3002\u6bcf\u4e2a\u70b9\u53ef\u80fd\u662f # \u6216\u8005 . \uff08\u201c\u969c\u788d\u201d\u4e0e\u201c\u7a7a\u767d\u201d\uff09\u3002\u73b0\u5728\u4f60\u8981\u4ece\u4e2d\u9009\u51fa\u4e00\u4e9b\u7a7a\u767d\u70b9\u4f7f\u5f97\u5b83\u4eec\u6784\u6210\u4e24\u4e2a \u201cL\u201d \u5f62\u72b6\uff08\u5373\u9009\u51fa\u4e24\u6761\u53ea\u6709\u4e00\u4e2a\u4ea4\u70b9\u7684\u7ebf\u6bb5\u7ec4\u6210\uff09\u3002\u6709\u5982\u4e0b\u89c4\u5b9a\uff1a\n\n\u5fc5\u987b\u662f\u4e25\u683c\u7684 &quot;L&quot; \u5f62\u72b6\uff0c\u4e0d\u53ef\u4ee5\u65cb\u8f6c\uff1b\u539f\u56fe\u4e5f\u4e0d\u80fd\u65cb\u8f6c\uff1b\n\u4e24\u6761\u201c\u7ebf\u6bb5\u201d\u5fc5\u987b\u6709\u6b63\u957f\u5ea6\uff0c\u5e76\u4e14\u957f\u5ea6\u8981\u5927\u4e8e\u7b49\u4e8e 2\uff1b\n\u5e76\u4e14\u7ebf\u6bb5\u7ecf\u8fc7\u7684\u6240\u6709\u70b9\u90fd\u5fc5\u987b\u662f\u767d\u8272\u7684\u3002\n\n\u6700\u540e\u4f60\u9700\u8981\u5728\u4e00\u5e45\u56fe\u91cc\u627e\u51fa\u4e24\u4e2a \u201cL\u201d \u5f62\u72b6\uff0c\u5e76\u4e14\u8fd9\u4e24\u4e2a &quot;L&quot; \u4e0d\u80fd\u6709\u4efb\u4f55\u76f8\u4ea4\uff08\u5373\u4e0d\u53ef\u4ee5\u5360\u7528\u516c\u5171\u7684\u70b9\uff09\u3002\u95ee\u4f60\u6709\u591a\u5c11\u79cd\u65b9\u6848\u3002\n\u9898\u76ee\u91cc\u7684\u5b57\u7b26\u77e9\u9635\u4ee5 vector &lt;string&gt; grid \u7ed9\u51fa\u3002\u6ce8\u610f\u672c\u9898\u7684\u65f6\u9650\u662f 3 \u79d2\u3002\n\n\ngrid will contain between 2 and 30 elements, inclusive.\nAll elements of grid will contain the same number of characters.\nEach element of grid will contain between 2 and 30 characters, inclusive.\nEach character of grid will be either '.' or '#'.\nTime limit (s): 3.000\nMemory limit (MB): 256\n\n\n\n\u9898\u76ee\u539f\u6587\n\nPlease note that this problem has a non-standard time limit: 3 seconds.\nA yet unknown &quot;LL Company&quot; wants to design a logo. After a long discussion, company designers decided that the logo should consist of two letters L drawn in some way.\nTo start with something, designers drew N rows of M points each, one under another, so that these points form a rectangular grid. They also painted each point either white or black. Here is an example of what they could get for N = 4 and M = 5:\n\nDesigners agreed to draw each letter L as a union of a horizontal and a vertical line segment intersecting at their left and bottom ends, respectively. The segments must have positive lengths, and their endpoints must be white grid points. All grid points that lie on the segments must be white as well. For example, here are two valid placements of a letter:\n  233333 \nNote that neither the letters nor the grid can be rotated.\nThe final requirement is that the two letters should be disjoint. That is, no white point should lie on two segments belonging to different letters.\nYou are given the grid with N rows and M columns, encoded as a vector  grid with N elements, each containing M characters. Each character is either '.' or '#', meaning that the corresponding point is either white or black, respectively. \nReturn the number of different possible logos with two L's drawn on them according to the requirements. Two logos are considered different if there is a pair of points that is connected by a line segment in exactly one of the logos.\n\n\n\u6837\u4f8b\u89e3\u91ca\n\u6837\u4f8b\u96f6\uff1a\n{\"....\",\n \"....\"}\nReturns: 1\n\n\u6837\u4f8b\u4e00\uff1a\n{\".##..\",\n \"...#.\",\n \".#.#.\",\n \"#...#\"}\nReturns: 3\nThis is the example from the problem statement. The three possible logos look as follows:\n    \n\u6837\u4f8b\u4e94\uff1a\n{\"##############\",\n \"##############\",\n \"#.############\",\n \"#.############\",\n \"#.############\",\n \"#.############\",\n \"#.############\",\n \"#.############\",\n \"#.#####.######\",\n \"#.#####.######\",\n \"#.#####.######\",\n \"#....##.######\",\n \"#######.######\",\n \"#######.######\",\n \"#######.######\",\n \"#######.######\",\n \"#######.######\",\n \"#######.######\",\n \"#######......#\",\n \"##############\"}\n\nReturns: 1350\n\u8fd9\u5e45\u56fe\u91cc\u53ea\u6709\u4e24\u4e2a L \u5f62\u72b6\u7684\u201c\u57fa\u51c6\u70b9\u201d\uff08\u5373\u62d0\u89d2\uff09\uff0c\u6240\u4ee5\u65b9\u6848\u6570\u91cf\u5c31\u662f\u51e0\u6761\u7ebf\u6bb5\u957f\u5ea6\u53ef\u80fd\u6570\u91cf\u4e4b\u4e58\u79ef\u3002\n9\u00d73\u00d710\u00d75=1350\u3002\n\u2026\u2026\n\n\u5206\u6790\n\u4e00\u5f00\u59cb\u6211\u4eec\u80af\u5b9a\u53ef\u4ee5\u60f3\u5230\u4e00\u4e2a $\\Theta (N^4\\ast M^4)$ \u7684\u60f3\u6cd5\uff1a\u679a\u4e3e\u7b2c\u4e00\u4e2a L \u7684\u5de6\u4e0b\u89d2\u7684\u70b9\uff08\u4ee5\u4e0b\u6211\u4eec\u79f0\u4e4b\u4e3a\u201c\u57fa\u51c6\u70b9\u201d\uff09\uff0c\u7136\u540e\u5411\u4e0a\u3001\u5411\u53f3\u679a\u4e3e\uff0c\u7d2f\u8ba1\u6240\u6709\u60c5\u51b5\u3002\n\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u201c\u5411\u4e0a\u3001\u5411\u53f3\u679a\u4e3e\u201d\u7684\u8fc7\u7a0b\u53ef\u4ee5\u514d\u53bb\uff0c\u53ef\u4ee5\u5148\u6784\u9020\u6570\u7ec4 up[i][j] \u548c rght[i][j]\uff0c\u5206\u522b\u8868\u793a\u70b9 (i,j) \u5411\u4e0a\u3001\u5411\u53f3\u6709\u51e0\u4e2a\u767d\u8272\u7684\u70b9\u3002\u5bf9\u4e8e\u4e24\u4e2a\u57fa\u51c6\u70b9 (i,j) \u4e0e (k,t)\uff0c\u65b9\u6848\u6570\u5c31\u662f up[i][j]*right[i][j]*up[k][t]*right[k][t]\u2026\u2026\u662f\u5417\uff1f\n\u4f46\u662f\u6211\u4eec\u53c8\u53d1\u73b0\u4e86\u95ee\u9898\uff1a\u5982\u4f55\u5224\u65ad\u4e24\u4e2a L \u662f\u5426\u76f8\u4ea4\u5462\uff1f\u5728\u521a\u624d\u76f4\u63a5\u5411\u4e0a\u3001\u5411\u53f3\u679a\u4e3e\u7684\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u65b9\u4fbf\u5730\u5224\u65ad\u76f8\u4ea4\uff0c\u4f46\u662f\u73b0\u5728\u6211\u4eec\u8fd9\u6837\u7684\u65b9\u5f0f\uff0c\u5c31\u9700\u8981\u5206\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5\u8ba8\u8bba\u4e86\uff1a\n\n\u7b2c\u4e00\u79cd\uff0c\u5760\u7b80\u5355\u7684\u60c5\u51b5\uff0c\u76f4\u63a5\u7d2f\u52a0\uff08\u61d2\u5f97\u753b\u56fe\uff0c\u76f4\u63a5\u7528\u516c\u5f0f\u4e86\u2026\u2026\uff09\uff1a\n\nXOXOX \\\\\nXOXOO \\\\\nXOXXX \\\\\nXOOOX \\\\\nXXXXX\n\n\u7136\u540e\u5c31\u662f\u5206\u7c7b\u8ba8\u8bba\u51e0\u79cd\u7279\u6b8a\u60c5\u51b5\uff0c\u4e5f\u5c31\u662f\u5b58\u5728\u4ea4\u96c6\u7684\uff0c\u4ee5\u4ee5\u4e0b\u8fd9\u79cd\u4e3a\u4f8b\uff1a\n\nXXXXXX \\\\\nXOXXXX \\\\\nXOXOXX \\\\\nXOOOOX \\\\\nXXXOXX \\\\\nXXXOOO\n\u5982\u679c\u6309\u524d\u9762\u4e24\u4e2a L \u5206\u522b\u76f8\u4e58\u8ba1\u7b97\u52bf\u5fc5\u4f1a\u6709\u91cd\u590d\uff0c\u8fd9\u65f6\u53ea\u8981\u51cf\u53bb\u76f8\u4ea4\u7684\u4e00\u90e8\u5206\u7684\u91cd\u590d\u60c5\u51b5\u5c31\u53ef\u4ee5\u4e86\u3002\n\u590d\u6742\u5ea6 $\\Theta (N^2\\ast M^2)$\uff0c\u8003\u8651\u7ec6\u8282\u6709\u70b9\u9ebb\u70e6\u3002\n\n\u4ee3\u7801\n#include &lt;bits\/stdc++.h&gt;\n#define CLEAR(_) memset(_,0,sizeof(_))\n#define CLEAR_MAX(_) memset(_,0x3f,sizeof(_))\n#define CLEAR_MIN(_) memset(_,0x80,sizeof(_))\n#define CLEAR_REG(_) memset(_,255,sizeof(_))\n\nusing namespace std;\nconst long long maxn=35;\nlong long n,m;\nlong long rght[maxn][maxn],up[maxn][maxn],ans;\nvector &lt;string&gt; a;\n\ntemplate&lt;class T&gt; void checkmin(T &amp;a,const T &amp;b) { if (b&lt;a) a=b; } \ntemplate&lt;class T&gt; void checkmax(T &amp;a,const T &amp;b) { if (b&gt;a) a=b; }\nclass TwoLLogo {\npublic:\n    long long countWays( vector &lt;string&gt; grid ) ;\n};\n\ninline void init(){\n    ans=0;\n    CLEAR_REG(up);CLEAR_REG(rght);\n}\ninline void Build(){\n    for (long long i=0;i&lt;n;i++)\n    for (long long j=m-1;j&gt;=0;j--) if (a[i][j]=='.'){\n        up[i][j]=i==0?0:up[i-1][j]+1;\n        rght[i][j]=rght[i][j+1]+1;\n    } else up[i][j]=rght[i][j]=-1;\n}\nlong long TwoLLogo::countWays(vector &lt;string&gt; grid) {\n    init();a=grid;\n    n=grid.size();m=grid[0].length();\n    Build();\n    for (long long i=0;i&lt;n;i++)\n    for (long long j=0;j&lt;m;j++) if (a[i][j]=='.')\n    for (long long k=0;k&lt;n;k++)\n    for (long long t=0;t&lt;m;t++) if ((a[k][t]=='.')&amp;&amp;((i!=k)||(j!=t))){\n        if ((up[i][j]==0)||(rght[i][j]==0)||(up[k][t]==0)||(rght[k][t]==0)) continue;\n        if ((i&lt;k)&amp;&amp;(j&gt;t)) ans+=rght[i][j]*up[i][j]*rght[k][t]*up[k][t]; else\n        if ((i&lt;k)&amp;&amp;(j&lt;t)) ans+=max((long long)0,\n            up[i][j]*rght[i][j]*min(up[k][t],k-i-1)*rght[k][t]+\n            up[i][j]*min(rght[i][j],t-j-1)*up[k][t]*rght[k][t]-\n            up[i][j]*min(up[k][t],k-i-1)*min(rght[i][j],t-j-1)*rght[k][t]); else\n        if ((i&lt;k)&amp;&amp;(j==t)) ans+=up[i][j]*rght[i][j]*min(up[k][t],k-i-1)*rght[k][t];\n        if ((i==k)&amp;&amp;(j&lt;t)) ans+=up[i][j]*up[k][t]*min(rght[i][j],t-j-1)*rght[k][t];\n    }\n    return ans;\n}","tags":[{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u641c\u7d22","slug":"\u641c\u7d22","permalink":"https:\/\/skywt.cn\/tag\/%E6%90%9C%E7%B4%A2\/"}],"categories":[]},{"title":"Topcoder SRM 635 Div2 T3 LonglongestPathTree \u9898\u89e3","date":"2018-09-01T21:05:16+08:00","path":"https:\/\/skywt.cn\/posts\/tc-635-div2-t3","text":"Topcoder Single Round Match 635 Div2 T3 LonglongestPathTree \u9898\u89e3\n\n\nTranslation\n\u6709\u4e00\u68f5\u52a0\u6743\u6811\uff0c\u4f60\u53ef\u4ee5\u4ece\u6811\u4e2d\u5220\u9664\u4e00\u6761\u8fb9\uff0c\u5e76\u6dfb\u52a0\u4e00\u6761\u957f\u5ea6\u76f8\u540c\u7684\u8fb9\uff0c\u5e76\u4e14\u4fdd\u8bc1\u8fd9\u6837\u7684\u64cd\u4f5c\u8fc7\u540e\u65b0\u7684\u56fe\u4ecd\u7136\u662f\u4e00\u68f5\u6811\u3002\n\u8ba1\u7b97\u5e76\u8fd4\u56de\u8fd9\u6837\u64cd\u4f5c\u8fc7\u540e\u7684\u6811\u7684\u6700\u5927\u76f4\u5f84\u3002\n\u6811\u4ee5\u4e09\u4e2a vector  A, B \u548c L \u7ed9\u51fa\uff0c\u8868\u793a A[i] \u548c B[i] \u4e4b\u95f4\u6709\u4e00\u6761\u957f\u5ea6\u4e3a L[i] \u7684\u8fb9\uff0c$0 \\leqslant i \\leqslant n-2$\u3002\n\u70b9\u4ece 0 \u5f00\u59cb\u7f16\u53f7\u3002\n\u6570\u636e\u8303\u56f4\uff1a$2 \\leqslant n \\leqslant 2000$\u3002\n\uff08\u4e3a\u4ec0\u4e48 TC \u4e00\u9047\u5230\u6b63\u7ecf\u9898\u76ee\u6570\u636e\u8303\u56f4\u5c31\u8fd9\u4e48\u5927\uff1f\uff01\uff09\n\n\nN will be between 2 and 2,000, inclusive.\nArrays A, B and L will each contain N-1 elements.\nEach element of A and B will be between 0 and N-1, inclusive.\nEach element of L will be between 1 and 1,000,000,000, inclusive.\nA and B will describe a tree.\nTime limit (s): 2.000\nMemory limit (MB): 256\nStack limit (MB): 256\n\n\nExamples\n\u6837\u4f8b\u96f6\uff1a\n{0,0,0}\n{1,2,3}\n{2,4,8}\nReturns: 14\n\u539f\u6765\u7684\u6811\u6700\u8fdc\u7684\u70b9\u5bf9\u662f (2,3)\uff0c\u4ed6\u4eec\u4e4b\u95f4\u7684\u8ddd\u79bb\uff08\u5373\u76f4\u5f84\uff09\u662f 12\u3002\u5982\u679c\u6211\u4eec\u79fb\u9664\u8fb9 1-0 \u5e76\u6dfb\u52a0 3-1\uff0c\u5219\u65b0\u7684\u6811\u76f4\u5f84\u4e3a 14\uff0c\u8fd9\u4e2a\u65b9\u6848\u662f\u6700\u4f18\u7684\u3002\n\nThe tree has 4 vertices and 3 edges: 1-0 (length 2), 2-0 (length 4) and 0-3 (length 8). Currently, the farthest pair of vertices is (2,3); their distance is 8+4=12. If we remove the edge 1-0 and add an edge 3-1, we'll get a tree with edges 2-0 (length 4), 0-3 (length 8) and 3-1 (length 2). Now, the fathest pair of vertices is (2,1); their distance is 8+4+2=14. Obviously, we can't do better than that (but this is not the only way to achieve distance 14).\n\n\u6837\u4f8b\u4e00\uff1a\n{0,1,2,3}\n{1,2,3,4}\n{1,2,3,4}\nReturns: 10\n\u4e0d\u9700\u8981\u66f4\u6539\u6811\uff0c\u7b54\u6848\u5df2\u7ecf\u6700\u4f18\u4e86\u3002\n\nOne optimal solution is not changing the tree.\n\n\u6837\u4f8b\u4e8c\uff1a\n{0,1,0,3,0,6,7,7,8,9,11}\n{1,2,3,4,5,5,5,8,9,10,9}\n{100,1000,100,1000,1,10,10,10,10,100,100}\nReturns: 2410\nOriginal\n\nThere is a weighted tree with N vertices. The vertices are numbered 0 through N-1.\nYou're given a description of the tree in three vector s: A, B and L. For each 0 &lt;= i &lt;= N-2, there's an edge between vertices A[i] and B[i]; the length of this edge is L[i].\nIn a tree, each pair of vertices is connected by exactly one simple path. The distance between those vertices is the sum of lengths of edges on that simple path. The diameter of the tree is the maximum of all those pairwise distances.\nYou're allowed to remove one of the edges and then add another edge. There are two constraints: the length of this edge must be the same as the length of the removed edge and the resulting graph must again be a tree.\nCompute and return the maximum diameter of the resulting tree that can be achieved this way.\n\nAnalysis\n\u770b\u5230\u8fd9\u9898\uff0c\u4e00\u80a1\u4eb2\u5207\u611f\u6251\u9762\u800c\u6765\u3002\u6ca1\u9519\uff0c\u5c31\u662f\u8fd9\u9898\uff01CodeForces 294E Shaass the Great\uff1a\u6781\u5176\u53d8\u6001\u7684\u6811\u5f62 DP \u4e0e\u601d\u7ef4\u9898\uff0c\u5f53\u65f6\u6298\u817e\u4e86\u6211\u534a\u5929\u7684\u8fd9\u9898\uff01\n\u90a3\u9898\u540c\u6837\u662f\u5220\u9664\u4e00\u6761\u8fb9\u3001\u6dfb\u4e00\u6761\u540c\u6837\u957f\u5ea6\u7684\u8fb9\u3001\u4fdd\u8bc1\u4e00\u68f5\u6811\u2026\u2026\u552f\u4e00\u7684\u4e0d\u540c\u662f\uff1a\u90a3\u9898\u8ba9\u6211\u4eec\u6c42\u201c\u65b0\u7684\u6811\u4e2d\u4e24\u4e24\u70b9\u4e4b\u95f4\u8ddd\u79bb\u4e4b\u548c\u6700\u5c0f\u503c\u201d\uff0c\u5373 $\\displaystyle \\frac {\\sum_{i=1,j=1}^{i=n,j=n,i \\not = j} dist(i,j)} 2$ \u6700\u5c0f\u503c\uff1b\u800c\u8fd9\u9898\u8ba9\u6211\u4eec\u6c42\u201c\u65b0\u7684\u6811\u4e2d\u4e24\u4e24\u70b9\u4e4b\u95f4\u8ddd\u79bb\u7684\u6700\u5927\u503c\uff08\u5373\u76f4\u5f84\uff09\u7684\u6700\u5927\u503c\u201d\uff0c\u5373 $\\displaystyle max(dist(i,j))$ \u7684\u6700\u5927\u503c\u3002\n\u56de\u987e\u90a3\u9898\u7684\u505a\u6cd5\uff1a\u679a\u4e3e\u8fb9\uff0c\u8fde\u63a5\u5206\u5f00\u7684\u4e24\u68f5\u6811\u7684\u91cd\u5fc3\u3002\u8fd9\u542f\u53d1\u6211\u4eec\u601d\u8003\uff1a\u4f1a\u4e0d\u4f1a\u8fd9\u9898\u7684\u505a\u6cd5\u4e5f\u548c\u6811\u7684\u76f4\u5f84\u3001\u91cd\u5fc3\u7684\u4ec0\u4e48\u6027\u8d28\u6709\u5173\u5462\uff1f\n\u770b\u6570\u636e\u8303\u56f4\uff1a$2 \\leqslant n \\leqslant 2000$\u2026\u2026\u770b\u6765\u5fc5\u987b\u91c7\u7528 $\\Theta (N^2)$ \u7684\u505a\u6cd5\u3002\n\u9996\u5148\u80af\u5b9a\u662f\u8981\u679a\u4e3e\u5220\u9664\u7684\u8fb9\u3002\u5220\u9664\u8fd9\u6761\u8fb9\u4ee5\u540e\u539f\u6765\u7684\u6811\u5206\u6210\u4e86\u4e24\u68f5\u6811\u3002\u63a5\u4e0b\u6765\u5047\u8bbe\u6211\u4eec\u52a0\u5165\u4e86\u8fd9\u6761\u8fb9\uff0c\u79f0\u4e3a $add\\\\_ edge$\uff0c\u5206\u7c7b\u8ba8\u8bba\uff1a\n\n\n\u5982\u679c\u65b0\u7684\u76f4\u5f84\u6ca1\u6709\u7ecf\u8fc7\u8fd9\u6761\u8fb9\uff0c\u90a3\u4e48\u7b49\u4e8e\u65b0\u7684\u76f4\u5f84\u4e0d\u4f1a\u5927\u4e8e\u4e24\u68f5\u5206\u5f00\u7684\u6811\u7684\u76f4\u5f84\u2026\u2026\u8bf4\u660e\u6dfb\u52a0\u8fd9\u6761\u8fb9\u6ca1\u4ec0\u4e48\u610f\u4e49\u2026\u2026\u6240\u4ee5\u65e2\u7136\u6211\u4eec\u6dfb\u52a0\u4e86\u8fb9\uff0c\u90a3\u4e48\u65b0\u7684\u6811\u7684\u76f4\u5f84\u4e00\u5b9a\u8981\u7ecf\u8fc7\u8fd9\u6761\u8fb9\u3002\n\n\n\u65e2\u7136\u65b0\u7684\u6811\u76f4\u5f84\u901a\u8fc7 $add \\\\_ edge$\uff0c\u90a3\u4e48\u5c31\u662f\u5de6\u8fb9\u7684\u6811\u8fde\u5230 $add\\\\_ edge$ \u7684\u5de6\u8fb9\u7aef\u70b9\uff0c\u53f3\u8fb9\u7684\u6811\u8fde\u5230\u53f3\u8fb9\u7aef\u70b9\uff1b\u6211\u4eec\u53ef\u4ee5\u601d\u8003\uff1a\u5982\u4f55\u8ba9\u5de6\u8fb9\u7684\u6811\u3001\u53f3\u8fb9\u7684\u6811\u4e2d\uff0c\u8fde\u5230\u7684 $add\\\\_ edge$ \u7684\u7aef\u70b9\u80fd\u8d70\u7684\u6700\u957f\u8def\u5f84\u6700\u957f\u5462\uff1f\n\n\u201c\u6700\u957f\u201d\u7684\u4e0d\u5c31\u662f\u76f4\u5f84\u5417\uff1f\u6240\u4ee5 $add\\\\_ edge$ \u53ea\u9700\u8981\u8fde\u63a5\u5de6\u53f3\u4e24\u6811\u7684\u76f4\u5f84\u5c31\u53ef\u4ee5\u4e86\uff01\uff01\uff01\n\n\u6240\u4ee5\u53ea\u8981\u679a\u4e3e $add\\\\_ edge$\uff0c\u7136\u540e\u6c42\u5de6\u6811\u76f4\u5f84\u3001\u53f3\u6811\u76f4\u5f84\uff0c\u52a0\u4e0a\u8fd9\u6761\u8fb9\u957f\u5ea6\u5373\u53ef\u3002\nCode\nTopcoder \u7684\u7f16\u8bd1\u5668\u53c8\u51fa\u9505\u4e86\uff0c\u6781\u9650\u6570\u636e\u672c\u5730\u8dd1\u662f 0.18s\uff0c\u4f46\u662f\u4ea4\u4e0a\u53bb\u8d85\u65f6\u2026\u2026\uff08\u4e0a\u6b21\u4f3c\u4e4e\u67d0\u9898\u4e5f\u662f\u4e00\u6837\u7684\u60c5\u51b5\uff09\n#include &lt;bits\/stdc++.h&gt;\n#define CLEAR(_) memset(_,0,sizeof(_))\n#define CLEAR_MAX(_) memset(_,0x3f,sizeof(_))\n#define CLEAR_MIN(_) memset(_,0x80,sizeof(_))\n\nusing namespace std;\nconst int maxn=2005,maxe=4005;\nint n;\nint tot=0,lnk[maxn],nxt[maxe],son[maxe];\nlong long w[maxe];\nlong long ans;\nbool vis[maxn];\n\nclass LonglongestPathTree {\npublic:\n    long long getLength( vector &lt;int&gt; A, vector &lt;int&gt; B, vector &lt;int&gt; L ) ;\n};\n\ninline void add(int x,int y,int z){\n    tot++;son[tot]=y;w[tot]=z;nxt[tot]=lnk[x];lnk[x]=tot;\n}\ninline void init(){\n    tot=0;CLEAR(lnk);CLEAR(nxt);CLEAR(son);CLEAR(w);\n    ans=0;\n}\ninline long long Find(int x,int &amp;res){\n    vis[x]=true;res=x;\n    long long now_ret=0;\n    for (int i=lnk[x];i;i=nxt[i]) if (!vis[son[i]]){\n        int nnd;\n        long long nnf=Find(son[i],nnd)+w[i];\n        if (nnf&gt;now_ret) now_ret=nnf,res=nnd;\n    }\n    return now_ret;\n}\nlong long LonglongestPathTree::getLength(vector &lt;int&gt; A, vector &lt;int&gt; B, vector &lt;int&gt; L) {\n    init();\n    n=A.size()+1;\n    for (int i=0;i&lt;n-1;i++) add(A[i],B[i],L[i]),add(B[i],A[i],L[i]);\n    for (int i=0;i&lt;n-1;i++){\n        long long now=L[i],now1,now2;\n        int x=-1,y=-1;\n\n        CLEAR(vis);vis[B[i]]=true;\n        x=y=-1;\n        now1=Find(A[i],x);\n        CLEAR(vis);vis[B[i]]=true;\n        now2=Find(x,y);\n        now+=max(now1,now2);\n\n        CLEAR(vis);vis[A[i]]=true;\n        x=y=-1;\n        now1=Find(B[i],x);\n        CLEAR(vis);vis[A[i]]=true;\n        now2=Find(x,y);\n        now+=max(now1,now2);\n\n        ans=max(ans,now);\n    }\n    return ans;\n}","tags":[{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u56fe\u8bba\u7c7b\u578b\u9898","slug":"\u56fe\u8bba\u7c7b\u578b\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E5%9B%BE%E8%AE%BA%E7%B1%BB%E5%9E%8B%E9%A2%98\/"},{"name":"\u6570\u5b66\u9898","slug":"\u6570\u5b66\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E6%95%B0%E5%AD%A6%E9%A2%98\/"},{"name":"\u6700\u77ed\u8def","slug":"\u6700\u77ed\u8def","permalink":"https:\/\/skywt.cn\/tag\/%E6%9C%80%E7%9F%AD%E8%B7%AF\/"}],"categories":[]},{"title":"Topcoder SRM 634 Div2 T3 SpecialStrings \u9898\u89e3","date":"2018-09-02T20:59:33+08:00","path":"https:\/\/skywt.cn\/posts\/tc-634-dv2-t3","text":"Topcoder Single Round Match 634 Div 2 T3 SpecialStrings \u9898\u89e3\n\n\nTranslation\n\u5982\u679c\u4e00\u4e2a\u5b57\u7b26\u4e32 S \u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff0c\u5219\u6211\u4eec\u8bf4\u8fd9\u4e2a\u5b57\u7b26\u4e32\u662f\u201c\u7279\u6b8a\u7684\u201d\uff1a\n\n\u6bcf\u4e2a\u5b57\u7b26\u90fd\u662f 0 \u6216 1\uff1b\n\u5bf9\u4e8e\u6240\u6709 S = UV\uff0cU \u548c V \u90fd\u662f\u975e\u7a7a\u5b57\u7b26\u4e32\uff0cU \u90fd\u6309\u5b57\u5178\u5e8f\u4e25\u683c\u5c0f\u4e8e V\u3002\n\n\u4f8b\u5982\uff0c\u5b57\u7b26\u4e32 S = 00101 \u662f\u201c\u7279\u6b8a\u7684\u201d\uff0c\u56e0\u4e3a\u6211\u4eec\u77e5\u9053 0 &lt; 0101\uff0c00 &lt; 101\uff0c001 &lt; 01\uff0c\u4e14 0010 &lt; 1\u3002\n\u73b0\u5728\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 current\uff0c\u4fdd\u8bc1\u8fd9\u4e00\u5b9a\u662f\u4e2a\u7279\u6b8a\u7684\u5b57\u7b26\u4e32\u3002\u5047\u8bbe N \u662f current \u7684\u4f4d\u6570\u3002\u8003\u8651\u5217\u51fa\u6240\u6709\u957f\u5ea6\u4e3a N \u7684\u7279\u6b8a\u5b57\u7b26\u4e32\u7684\u8868\uff0c\u8ba1\u7b97\u5e76\u8fd4\u56de\u7b2c\u4e00\u4e2a current \u540e\u9762\u7684\u5b57\u7b26\u4e32\u3002\u5982\u679c current \u5df2\u7ecf\u662f\u6700\u540e\u4e00\u4e2a\u5219\u8fd4\u56de\u4e00\u4e2a\u7a7a\u4e32\u3002\n\u6570\u636e\u8303\u56f4\uff1a$1 \\leqslant N \\leqslant 50$\u3002\n\n\ncurrent will contain between 1 and 50 characters, inclusive.\ncurrent will be a special string.\nTime limit (s): 2.000\nMemory limit (MB): 256\n\n\nExamples\n\u6837\u4f8b\u96f6\uff1a\n\"01\"\nReturns: \"\"\n&quot;01&quot; \u662f\u552f\u4e00\u7684\u957f\u5ea6\u4e3a 2 \u7684\u7279\u6b8a\u4e32\u3002\n\n&quot;01&quot; is the only special string of length 2.\n\n\u6837\u4f8b\u4e00\uff1a\n\"00101\"\nReturns: \"00111\"\n\u957f\u5ea6\u4e3a 5 \u7684\u7279\u6b8a\u4e32\u6709\uff1a\"00001\"\uff0c\"00011\"\uff0c\"00101\"\uff0c\"00111\"\uff0c\"01011\"\uff0c\"01111\"\u3002\n\nThe special strings of length 5 are &quot;00001&quot;, &quot;00011&quot;, &quot;00101&quot;, &quot;00111&quot;, &quot;01011&quot;, &quot;01111&quot;.\n\n\u6837\u4f8b\u4e09\uff1a\n\"0010111\"\nReturns: \"0011011\"\nOriginal\n\nA string S is called special if it satisfies the following two properties:\n\nEach character in S is either '0' or '1'.\nWhenever S = UV where both U and V are nonempty strings, U is strictly smaller than V in lexicographic order.\n\nFor example, the string S = &quot;00101&quot; is special because we have &quot;0&quot; &lt; &quot;0101&quot;, &quot;00&quot; &lt; &quot;101&quot;, &quot;001&quot; &lt; &quot;01&quot;, and &quot;0010&quot; &lt; &quot;1&quot;.\nYou are given a string current that is guaranteed to be special. Let N be the length of current. Consider the lexicographically sorted list of all special strings of length N. Compute and return the string that comes immediatelly after current in this list. If current happens to be the last string in the list, return an empty string instead.\n\nAnalysis\n\uff08\u4e00\u5f00\u59cb\u6211\u5c45\u7136\u60f3\u5230\u4e86\u5bb9\u65a5\/\u4e8c\u9879\u5f0f\u53cd\u6f14\u2026\u2026 :new_moon_with_face: \uff09\n\n\u8fd9\u79cd\u9898\u76ee\u80af\u5b9a\u662f\u6784\u9020\u3002\u2014\u2014 Captain Slow\n\n\u9996\u5148\u66b4\u529b\u7684\u89e3\u6cd5\u80af\u5b9a\u8981\u8d85\u65f6\uff0c$1 \\leqslant N \\leqslant 50$\uff0c$2^{50}$ \u5df2\u7ecf\u662f\u4e00\u4e2a\u5929\u6587\u6570\u5b57\u4e86\uff0c\u66f4\u4f55\u51b5\u8981\u52a0\u4e0a check special string\u2026\u2026\n\u5148\u89c2\u5bdf\u6837\u4f8b\u91cc\u7684 special string\uff0c\u53ef\u4ee5\u53d1\u73b0\u89c4\u5f8b\uff1a\n\n\u6240\u6709 special string \u90fd\u4ee5 1 \u7ed3\u5c3e\uff1b\n\u6240\u6709 special string \u7684\u524d\u5bfc 0 \u6570\u91cf\u4e00\u5b9a\u6bd4\u540e\u9762\u8fde\u7eed\u7684 0 \u6700\u5927\u6570\u91cf\u5927\u3002\n\n\u55ef\uff0c\u77e5\u9053\u4e86\u8fd9\u4e2a\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053\uff1a\u4ece\u5b57\u7b26\u4e32\u7684\u53f3\u8fb9\u5f80\u5de6\u8fb9\u5f00\u59cb\u4e0d\u65ad\u628a 0 \u6539\u4e3a 1\uff0c\u8fd9\u6837\u6700\u540e\u603b\u4f1a\u5f97\u5230\u4e00\u4e2a special string\uff08\u5927\u4e0d\u4e86\u9664\u4e86\u524d\u5bfc\u96f6\u5168\u90fd\u6539\u6210 1\uff09\uff08\u5982\u679c\u5f97\u4e0d\u5230\u5c31\u8fd4\u56de\u7a7a\u4e32\u5457\uff09\u3002\n\u4f46\u662f\u8fd9\u6837\u5f97\u5230\u7684\u4e00\u4e2a special string \u5e76\u4e0d\u80fd\u4fdd\u8bc1\u662f current \u4e4b\u540e\u7684\u7b2c\u4e00\u4e2a\u3002\u6211\u4eec\u8981\u4ece\u5de6\u5230\u53f3\u91cd\u65b0\u4fee\u6b63\u4e00\u756a\u3002\u5177\u4f53\u65b9\u6cd5\u662f\uff1a\u4ece\u5de6\u5230\u53f3\uff0c\u9022 1 \u5c31\u6539\u6210 0 \u8bd5\u8bd5\uff0c\u4fdd\u8bc1\u6ee1\u8db3\uff1a\u5b83\u4ecd\u7136\u662f special string\uff0c\u5e76\u4e14\u5b57\u5178\u5e8f\u4e25\u683c\u5927\u4e8e current\u3002\u56e0\u4e3a\u6211\u4eec\u4f18\u5148\u4ece\u5de6\u8fb9\u628a 1 \u6539\u6210 0\uff0c\u4fdd\u8bc1\u4e86\u5b57\u5178\u5e8f\u6700\u5c0f\u3002\n\u4e8e\u662f\u7b97\u6cd5\u5206\u4e3a\u4e24\u4e2a\u6b65\u9aa4\uff1a\u4ece\u53f3\u5f80\u5de6\u628a 0 \u53d8\u6210 1\uff0c\u4ece\u5de6\u5f80\u53f3\u628a 1 \u53d8\u6210 0\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $\\Theta (N^2)$\u3002\n\u4e00\u5f00\u59cb\u8fd9\u4e2a\u795e\u5947\u7684\u60f3\u6cd5\u6211\u4e5f\u6ca1\u60f3\u5230\uff0c\u8fd8\u5728\u60f3\u4e8c\u9879\u5f0f\u53cd\u6f14 $QwQ$\uff0c\u76f4\u5230\u53bb he \u4e86\u67d0\u4e2a\u5927\u4f6c\u7684 solution\u2026\u2026\u8bdd\u8bf4\u8fd9\u79cd\u60f3\u6cd5\u771f\u7684\u5f88\u96be\u60f3\u5230\u554a\u2026\u2026\nCode\n#include &lt;bits\/stdc++.h&gt;\nusing namespace std;\nconst int maxn=55;\nint n;\nlong long num;\nstring a,ans;\n\nclass SpecialStrings {\npublic:\n    string findNext( string current ) ;\n};\ninline void write(long long x){\n    string tmp;\n    for (int i=n-1;i&gt;=0;i--) tmp+=(x&amp;((long long)1&lt;&lt;i))?'1':'0';\n    cout&lt;&lt;tmp&lt;&lt;endl;\n}\ninline bool check(long long x){\n    for (int i=1;i&lt;n;i++){\n        string aa=\"\",bb=\"\";\n        for (int j=n-1;j&gt;=i;j--) aa+=(x&amp;((long long)1&lt;&lt;j))?'1':'0';\n        for (int j=i-1;j&gt;=0;j--) bb+=(x&amp;((long long)1&lt;&lt;j))?'1':'0';\n        if (!(aa&lt;bb)) return false;\n    }\n    return true;\n}\nstring SpecialStrings::findNext(string current) {\n    n=current.length();a=current;\n    num=0;\n    for (int i=0;i&lt;n;i++) num=num*2+(current[i]-'0');\n    long long snum=num;\n    for (int i=0;i&lt;n;i++) if (!(num&amp;((long long)1&lt;&lt;i))){\n        a[n-i-1]='1';num+=(long long)1&lt;&lt;i;\n        if (check(num)) break;\n    }\n    if (!check(num)) return \"\";\n    for (int i=n-1;i&gt;=0;i--) if (num&amp;((long long)1&lt;&lt;i)){\n        long long nxtnum=num;\n        nxtnum-=(long long)1&lt;&lt;i;\n        if (nxtnum&lt;=snum) continue;\n        if (check(nxtnum)) num=nxtnum;\n    }\n    if (num&lt;=snum) return \"\";\n    char tmp[maxn];\n    for (int i=n-1;i&gt;=0;i--) tmp[i]=(num&amp;1)?'1':'0',num&gt;&gt;=1;\n    ans=\"\";\n    for (int i=0;i&lt;n;i++) ans+=tmp[i];\n    return ans;\n}","tags":[{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u6784\u9020","slug":"\u6784\u9020","permalink":"https:\/\/skywt.cn\/tag\/%E6%9E%84%E9%80%A0\/"}],"categories":[]},{"title":"C++ \u7ec8\u6781\u65f6\u95f4\u4f18\u5316\u6a21\u677f","date":"2018-09-04T12:52:31+08:00","path":"https:\/\/skywt.cn\/posts\/cpp-final-template","text":"\u4eca\u5929\u8003\u8bd5\u7684\u65f6\u5019\u9047\u5230\u4e00\u9898\u80cc\u5305\u9898\u76ee\uff0c\u6211\u76f4\u63a5\u6253\u4e86\u66b4\u529b\u7684 0\/1 \u80cc\u5305\uff0c\u7406\u8bba\u590d\u6742\u5ea6\u662f $\\Theta (N^3\\ast W)$\uff0c\u5927\u6982\u662f $10^9$ \u8fd9\u4e2a\u7ea7\u522b\u2026\u2026\u65f6\u9650 1s\uff0c\u4ea4\u4e0a\u53bb\u5c31\u5168\u90e8 TLE \u4e86\u2026\u2026\u7136\u540e\u6211\u5c31\u60f3\u8d77\u4e86\u8fd9\u4e2a\u7ec8\u6781\u4f18\u5316\u6a21\u677f\uff0c\u52a0\u4e0a\u4ee5\u540e\u5c45\u7136\u5168 A \u4e86\uff01\u65f6\u95f4\u5c45\u7136\u53ea\u6709 200ms \u5de6\u53f3\u2026\u2026\n$10^9$ \u7ea7\u522b\u5c45\u7136\u90fd\u53ef\u4ee5\u538b\u8fc7\u53bb\uff01\uff01\uff01\n\n#pragma GCC diagnostic error \"-std=c++11\"\n#pragma GCC target(\"avx\")\n#pragma GCC optimize(3)\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC optimize(\"inline\")\n#pragma GCC optimize(\"-fgcse\")\n#pragma GCC optimize(\"-fgcse-lm\")\n#pragma GCC optimize(\"-fipa-sra\")\n#pragma GCC optimize(\"-ftree-pre\")\n#pragma GCC optimize(\"-ftree-vrp\")\n#pragma GCC optimize(\"-fpeephole2\")\n#pragma GCC optimize(\"-ffast-math\")\n#pragma GCC optimize(\"-fsched-spec\")\n#pragma GCC optimize(\"unroll-loops\")\n#pragma GCC optimize(\"-falign-jumps\")\n#pragma GCC optimize(\"-falign-loops\")\n#pragma GCC optimize(\"-falign-labels\")\n#pragma GCC optimize(\"-fdevirtualize\")\n#pragma GCC optimize(\"-fcaller-saves\")\n#pragma GCC optimize(\"-fcrossjumping\")\n#pragma GCC optimize(\"-fthread-jumps\")\n#pragma GCC optimize(\"-funroll-loops\")\n#pragma GCC optimize(\"-fwhole-program\")\n#pragma GCC optimize(\"-freorder-blocks\")\n#pragma GCC optimize(\"-fschedule-insns\")\n#pragma GCC optimize(\"inline-functions\")\n#pragma GCC optimize(\"-ftree-tail-merge\")\n#pragma GCC optimize(\"-fschedule-insns2\")\n#pragma GCC optimize(\"-fstrict-aliasing\")\n#pragma GCC optimize(\"-fstrict-overflow\")\n#pragma GCC optimize(\"-falign-functions\")\n#pragma GCC optimize(\"-fcse-skip-blocks\")\n#pragma GCC optimize(\"-fcse-follow-jumps\")\n#pragma GCC optimize(\"-fsched-interblock\")\n#pragma GCC optimize(\"-fpartial-inlining\")\n#pragma GCC optimize(\"no-stack-protector\")\n#pragma GCC optimize(\"-freorder-functions\")\n#pragma GCC optimize(\"-findirect-inlining\")\n#pragma GCC optimize(\"-fhoist-adjacent-loads\")\n#pragma GCC optimize(\"-frerun-cse-after-loop\")\n#pragma GCC optimize(\"inline-small-functions\")\n#pragma GCC optimize(\"-finline-small-functions\")\n#pragma GCC optimize(\"-ftree-switch-conversion\")\n#pragma GCC optimize(\"-foptimize-sibling-calls\")\n#pragma GCC optimize(\"-fexpensive-optimizations\")\n#pragma GCC optimize(\"-funsafe-loop-optimizations\")\n#pragma GCC optimize(\"inline-functions-called-once\")\n#pragma GCC optimize(\"-fdelete-null-pointer-checks\")","tags":[{"name":"C++\u8bed\u8a00","slug":"C-\u8bed\u8a00","permalink":"https:\/\/skywt.cn\/tag\/C-%E8%AF%AD%E8%A8%80\/"},{"name":"OI\u5b66\u4e60","slug":"OI\u5b66\u4e60","permalink":"https:\/\/skywt.cn\/tag\/OI%E5%AD%A6%E4%B9%A0\/"}],"categories":[]},{"title":"\u659c\u7387\u4f18\u5316\u5c0f\u7ed3","date":"2018-09-06T20:47:51+08:00","path":"https:\/\/skywt.cn\/posts\/slope","text":"\u5728\u4e00\u7ef4\u7ebf\u6027\u52a8\u6001\u89c4\u5212\u91cc\uff0c\u6211\u4eec\u7ecf\u5e38\u89c1\u5230\u5f62\u5982 $f(i)=min\/max(f(j)+c_i)$\uff08\u5176\u5b9e\u53ef\u4ee5\u770b\u6210 $f(i)=min\/max(a_i+b_j)$ \uff09\u8fd9\u6837\u5f62\u5f0f\u7684\u8f6c\u79fb\u65b9\u7a0b\u3002\u6734\u7d20\u505a\u6cd5\u662f $\\Theta (N^2)$\u3002\u663e\u7136\u8fd9\u6837\u7684\u5f62\u5f0f\u53ef\u4ee5\u7528\u5355\u8c03\u961f\u5217\u7ef4\u62a4\uff0c\u4f18\u5316\u5230 $\\Theta (N)$\u3002\u4f46\u662f\u5982\u679c\u9047\u5230 $f(i)=min\/max(a_i\\ast b_j+c_i+d_j)$ \u8fd9\u6837\u7684\uff0c\u4f3c\u4e4e\u7528\u5355\u8c03\u961f\u5217\u5c31\u96be\u4ee5\u7ef4\u62a4\u4e86\u2026\u2026\u56e0\u4e3a $a_i\\ast b_j$ \u65e2\u4e0e $i$ \u6709\u5173\uff0c\u53c8\u4e0e $j$ \u6709\u5173\u3002\u8fd9\u65f6\u5019\u5c31\u8981\u7528\u5230\u53e6\u4e00\u79cd\u4f18\u5316\u65b9\u5f0f\uff1a\u659c\u7387\u4f18\u5316\u3002\n\n[notice]\u672c\u6587\u542b\u6709\u5927\u91cf KaTeX \u516c\u5f0f\uff0c\u8bf7\u786e\u4fdd\u6d4f\u89c8\u5668\u8d44\u78c1\u3002\n\u53ef\u80fd\u662f\u6211\u6240\u6709\u535a\u5ba2\u91cc\u516c\u5f0f\u6700\u591a\u7684\u4e00\u7bc7\uff0c\u5728\u7f16\u8f91\u672c\u6587\u7684\u65f6\u5019\uff0c\u7f16\u8f91\u5668\u5df2\u7ecf\u5361\u5f97\u4e0d\u6210\u6837\u5b50\u4e86\u2026\u2026[\/notice]\n\u6982\u8ff0\n\u4e0b\u9762\u6211\u4eec\u4ee5 $f(i)=a_i\\ast b_j+c_i+d_j$ \u8fd9\u4e2a\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e3a\u4f8b\u8bb2\u8bb2\u901a\u7528\u505a\u6cd5\uff08\u5982\u679c\u4e0d\u60f3\u770b\u53ef\u4ee5\u76f4\u63a5\u770b\u4f8b\u9898\uff09\u3002\n$f(i)=a_i\\ast b_j+c_i+d_j$ \u8fd9\u4e2a\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff0c\u65e2\u548c $i$ \u6709\u5173\u53c8\u548c $j$ \u6709\u5173\u3002\u7b80\u5355\u6765\u8bf4\uff0c\u8fd9\u4e2a\u65b9\u7a0b\u901a\u8fc7\u9002\u5f53\u7684\u8f6c\u6362\u53ef\u4ee5\u770b\u6210\u4e00\u6761\u76f4\u7ebf\uff0c\u4e00\u822c\u65b9\u6cd5\u662f\u4ee4 $x=b_j,y=d_j$\uff0c\u901a\u8fc7\u53d8\u5f62\u5c31\u53ef\u4ee5\u5f97\u5230\uff1a\ny=-a_i x+(f(i)-c_i)\n\u53ef\u4ee5\u770b\u5230\u8fd9\u5c31\u662f $y=kx+b$ \u7684\u5f62\u5f0f\uff0c\u4e5f\u5c31\u662f\u8bf4\u8fd9\u4e2a\u7b49\u5f0f\u8868\u793a\u7684\u662f\u4e00\u6761\u659c\u7387\u4e3a $-a_i$ \u5e76\u4e14\u622a\u8ddd\u4e3a $f(i)-c$ \u7684\u76f4\u7ebf\u3002\u65e2\u7136\u8981 $f(i)$ \u5c3d\u91cf\u5c0f\uff0c\u81ea\u7136\u8981\u4f7f\u8fd9\u6761\u76f4\u7ebf\u622a\u8ddd\u5c3d\u91cf\u5c0f\u3002\u73b0\u5728\u659c\u7387\u786e\u5b9a\u4e86\uff0c\u90a3\u4e48\u6211\u4eec\u8981\u627e\u4e4b\u524d\u7684\u53ef\u4ee5\u4f7f\u622a\u8ddd\u6700\u5c0f\u7684 $(b_j,d_j)$\u3002\u901a\u8fc7\u4e00\u4e2a\u5355\u8c03\u961f\u5217\u7ef4\u62a4\u4e0b\u51f8\u58f3\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 $\\Theta (1)$ \u65f6\u95f4\u5185\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u5177\u4f53\u65b9\u6cd5\u4e0b\u9762\u4f1a\u8bb2\u3002\n\u4f8b\u9898\nHNOI2008 \u73a9\u5177\u88c5\u7bb1TOY\n\u6d1b\u8c37\u9898\u76ee\u94fe\u63a5\uff1aHNOI2008 \u73a9\u5177\u88c5\u7bb1TOY\n\u9898\u76ee\u63cf\u8ff0\nP\u6559\u6388\u8981\u53bb\u770b\u5965\u8fd0\uff0c\u4f46\u662f\u4ed6\u820d\u4e0d\u4e0b\u4ed6\u7684\u73a9\u5177\uff0c\u4e8e\u662f\u4ed6\u51b3\u5b9a\u628a\u6240\u6709\u7684\u73a9\u5177\u8fd0\u5230\u5317\u4eac\u3002\u4ed6\u4f7f\u7528\u81ea\u5df1\u7684\u538b\u7f29\u5668\u8fdb\u884c\u538b\u7f29\uff0c\u5176\u53ef\u4ee5\u5c06\u4efb\u610f\u7269\u54c1\u53d8\u6210\u4e00\u5806\uff0c\u518d\u653e\u5230\u4e00\u79cd\u7279\u6b8a\u7684\u4e00\u7ef4\u5bb9\u5668\u4e2d\u3002P\u6559\u6388\u6709\u7f16\u53f7\u4e3a $1\\cdots N$ \u7684 $N$ \u4ef6\u73a9\u5177\uff0c\u7b2c $i$ \u4ef6\u73a9\u5177\u7ecf\u8fc7\u538b\u7f29\u540e\u53d8\u6210\u4e00\u7ef4\u957f\u5ea6\u4e3a $C_i$ .\u4e3a\u4e86\u65b9\u4fbf\u6574\u7406\uff0cP\u6559\u6388\u8981\u6c42\u5728\u4e00\u4e2a\u4e00\u7ef4\u5bb9\u5668\u4e2d\u7684\u73a9\u5177\u7f16\u53f7\u662f\u8fde\u7eed\u7684\u3002\u540c\u65f6\u5982\u679c\u4e00\u4e2a\u4e00\u7ef4\u5bb9\u5668\u4e2d\u6709\u591a\u4e2a\u73a9\u5177\uff0c\u90a3\u4e48\u4e24\u4ef6\u73a9\u5177\u4e4b\u95f4\u8981\u52a0\u5165\u4e00\u4e2a\u5355\u4f4d\u957f\u5ea6\u7684\u586b\u5145\u7269\uff0c\u5f62\u5f0f\u5730\u8bf4\u5982\u679c\u5c06\u7b2c $i$ \u4ef6\u73a9\u5177\u5230\u7b2c $j$ \u4e2a\u73a9\u5177\u653e\u5230\u4e00\u4e2a\u5bb9\u5668\u4e2d\uff0c\u90a3\u4e48\u5bb9\u5668\u7684\u957f\u5ea6\u5c06\u4e3a $x=j-i+\\sum\\limits_{k=i}^{j}C_k$ \u5236\u4f5c\u5bb9\u5668\u7684\u8d39\u7528\u4e0e\u5bb9\u5668\u7684\u957f\u5ea6\u6709\u5173\uff0c\u6839\u636e\u6559\u6388\u7814\u7a76\uff0c\u5982\u679c\u5bb9\u5668\u957f\u5ea6\u4e3a $x$ ,\u5176\u5236\u4f5c\u8d39\u7528\u4e3a $(X-L)^2$ .\u5176\u4e2d $L$ \u662f\u4e00\u4e2a\u5e38\u91cf\u3002P\u6559\u6388\u4e0d\u5173\u5fc3\u5bb9\u5668\u7684\u6570\u76ee\uff0c\u4ed6\u53ef\u4ee5\u5236\u4f5c\u51fa\u4efb\u610f\u957f\u5ea6\u7684\u5bb9\u5668\uff0c\u751a\u81f3\u8d85\u8fc7 $L$ \u3002\u4f46\u4ed6\u5e0c\u671b\u8d39\u7528\u6700\u5c0f.\u3002\n\u6570\u636e\u8303\u56f4\uff1a$1\\leqslant N\\leqslant 50000,1\\leqslant L,C_i\\leqslant 10^7$\u3002\n\u5206\u6790\n\u8fd9\u662f\u4e00\u9053\u659c\u7387\u4f18\u5316\u7684\u5165\u95e8\u9898\uff0c\u975e\u5e38\u5178\u578b\u3002\n\u9996\u5148\u6839\u636e\u9898\u76ee\u53ef\u4ee5\u63a8\u51fa\u4e00\u7ef4\u52a8\u6001\u89c4\u5212\u7684\u72b6\u6001\u8f6c\u79fb\uff1a\nf(i)=f(j)+(i-j+\\sum_{k=j}^{i}(C_k)-L-1)^2\n\u5230\u8fd9\u91cc\u53ef\u4ee5 $\\Theta(N^2)$ \u505a\u3002\u63a5\u4e0b\u6765\u524d\u7f00\u548c\u7d2f\u8ba1\u4e00\u4e0b\uff0c\u5f97\u5230\uff1a\nf(i)=f(j)+(i+sum_i-j-sum_{j-1}-L-1)^2\n\u65b9\u4fbf\u8d77\u89c1\uff0c\u4ee4 $A_i=i+sum_i,B_i=i+sum_{i-1}+L+1$\uff0c\u539f\u5f0f\u53c8\u53d8\u6210\uff1a\nf(i)=f(j)+(A_i-B_j)^2=f(j)+2A_iB_j+A_i^2+B_j^2 \\\\\n2A_iB_j+A_i^2+f(i)=f(j)+B_j^2\n\u73b0\u5728\u6211\u4eec\u4ee4 $x=B_j,y=f(j)+B_j^2$\uff0c\u90a3\u4e48\u5f97\u5230\uff1a\ny=2A_ix+(f(i)+A_i^2)\n\u53ef\u4ee5\u770b\u5230\u8fd9\u5c31\u662f $y=kx+b$ \u7684\u76f4\u7ebf\u8868\u8fbe\u5f0f\u5f62\u5f0f\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u770b\u505a\u4e00\u6761\u7ecf\u8fc7\u70b9 $(B_j,f(j)+B_j^2)$ \u5e76\u4e14\u659c\u7387\u4e3a $2A_i$ \u7684\u76f4\u7ebf\u3002\u90a3\u4e48\u73b0\u5728\u6211\u4eec\u8981\u8ba9 $f(i)$ \u5c3d\u91cf\u5c0f\uff0c\u4e5f\u5c31\u662f\u8fd9\u6761\u76f4\u7ebf\u5728 $y$ \u8f74\u4e0a\u7684\u622a\u8ddd\u5c3d\u91cf\u5c0f\u3002\n\u60f3\u8c61\u5728\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u91cc\u8fd9\u6837\u659c\u7387\u56fa\u5b9a\u7684\u8fd9\u6837\u4e00\u6761\u76f4\u7ebf\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4e00\u76f4\u5e73\u79fb\u5e73\u79fb\u5e73\u79fb\uff0c\u7b2c\u4e00\u4e2a\u4e0e\u8fd9\u6761\u76f4\u7ebf\u76f8\u4ea4\u7684 $(B_j,f(j)+B_j^2)$ \u7684\u70b9\u5c31\u662f\u6ee1\u8db3\u622a\u8ddd\u6700\u5c0f\u7684\u70b9\u3002\n\n\u5728\u4e0a\u56fe\u4e2d\uff0cA \u70b9\u65e2\u662f\u5f53\u524d\u6700\u5408\u9002\u7684\u70b9\u3002\u4f46\u662f\u600e\u4e48\u624d\u80fd $\\Theta (1)$ \u627e\u5230\u8fd9\u4e2a\u70b9\u5462\uff1f\n\u5176\u5b9e\u53ef\u4ee5\u7528\u5355\u8c03\u961f\u5217\u7ef4\u62a4\u4e00\u4e2a\u4e0b\u51f8\u58f3\uff0c\u5982\u4e0b\u56fe\uff1a\n\n\u6211\u4eec\u53ea\u5bf9\u8fd9\u4e2a\u51f8\u58f3\u4e0a\u7684\u70b9\u611f\u5174\u8da3\u3002\u90a3\u4e48\u5177\u4f53\u600e\u4e48\u7ef4\u62a4\u8fd9\u6837\u4e00\u4e2a\u51f8\u58f3\u5462\uff1f\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a\u5355\u8c03\u961f\u5217\uff0c\u5bf9\u4e8e\u5f53\u524d\u7684 $i$\uff0c\u6211\u4eec\u5148\u628a head \u5f00\u59cb\u4e0d\u7b26\u5408\u7684\u70b9\u90fd\u5220\u6389\uff0c\u5220\u5230 head \u4e3a\u6700\u4f18\u4e3a\u6b62\uff0c\u7136\u540e\u901a\u8fc7 head \u7b97\u51fa\u5f53\u524d\u7b54\u6848\uff1b\u7136\u540e\u628a\u4e0d\u7b26\u5408\u6761\u4ef6\u7684 tail \u90fd\u641e\u6389\uff0c\u518d\u52a0\u5165\u5f53\u524d\u7684\u70b9\u3002\u5f88\u7c7b\u4f3c\u8ba1\u7b97\u51e0\u4f55\u91cc\u6c42\u51f8\u5305\u3002\n\u5177\u4f53\u5b9e\u73b0\uff0c\u5047\u8bbe $slope(i,j)$ \u4ee3\u8868 $i,j$ \u70b9\u8fde\u8fb9\u7684\u659c\u7387\uff1a\n\u5220\u9664\u5934\u90e8\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c $slope(que_{head},que_{head+1})","tags":[{"name":"OI\u5b66\u4e60","slug":"OI\u5b66\u4e60","permalink":"https:\/\/skywt.cn\/tag\/OI%E5%AD%A6%E4%B9%A0\/"},{"name":"OI\u7b97\u6cd5","slug":"OI\u7b97\u6cd5","permalink":"https:\/\/skywt.cn\/tag\/OI%E7%AE%97%E6%B3%95\/"},{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u52a8\u6001\u89c4\u5212\u7c7b\u578b\u9898","slug":"\u52a8\u6001\u89c4\u5212\u7c7b\u578b\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB%E5%9E%8B%E9%A2%98\/"},{"name":"\u7ebf\u6027DP","slug":"\u7ebf\u6027DP","permalink":"https:\/\/skywt.cn\/tag\/%E7%BA%BF%E6%80%A7DP\/"}],"categories":[]},{"title":"HDU 5626 Clarke and points \u9898\u89e3\uff1a\u4e00\u9053\u5de7\u5999\u7684\u8d2a\u5fc3","date":"2018-09-10T20:25:23+08:00","path":"https:\/\/skywt.cn\/posts\/hdu5626","text":"Link: HDU 5626 Clarke and points\n\nProblem Description\nClarke is a patient with multiple personality disorder. One day he turned into a learner of geometric.\nHe did a research on a interesting distance called Manhattan Distance. The Manhattan Distance between point $A(x_A,y_A)$ and point $B(x_B,y_B)$ is $|x_A\u2212x_B|+|y_A\u2212y_B|$.\nNow he wants to find the maximum distance between two points of n points.\nInput\nThe first line contains a integer $T(1\u2264T\u22645)$, the number of test case.\nFor each test case, a line followed, contains two integers n,seed $(2\u2264n\u22641000000,1\u2264seed\u226410^9)$, denotes the number of points and a random seed.\nThe coordinate of each point is generated by the followed code.\nlong long seed;\ninline long long rand(long long l, long long r) {\n  static long long mo=1e9+7, g=78125;\n  return l+((seed*=g)%=mo)%(r-l+1);\n}\n\n\/\/ ...\n\ncin &gt;&gt; n &gt;&gt; seed;\nfor (int i = 0; i &lt; n; i++)\n  x[i] = rand(-1000000000, 1000000000),\n  y[i] = rand(-1000000000, 1000000000);\nOutput\nFor each test case, print a line with an integer represented the maximum distance.\nSample Input\n2\n3 233\n5 332\nSample Output\n1557439953\n1423870062\nTranslation\n\u7ed9\u4f60 N \u4e2a\u70b9\u7684\u5750\u6807\uff0c\u6c42\u51fa\u8fd9 N \u4e2a\u70b9\u7ec4\u6210\u7684\u70b9\u5bf9\u4e4b\u95f4\u66fc\u54c8\u987f\u8ddd\u79bb\u6700\u5927\u503c\u3002\n\u66fc\u54c8\u987f\u8ddd\u79bb\uff1a\n\nThe Manhattan Distance between point $A(x_A,y_A)$ and point $B(x_B,y_B)$ is $|x_A\u2212x_B|+|y_A\u2212y_B|$.\n\nAnalysis\n\u4e00\u770b\u5230\u8fd9\u9898\uff0c\u5f88\u5bb9\u6613\u4ee4\u4eba\u60f3\u8d77\u201c\u5e73\u9762\u6700\u8fd1\u70b9\u5bf9\u201d\u95ee\u9898\u3002\u4f46\u662f\u5b9e\u9645\u4e0a\u8fd9\u9898\u548c\u90a3\u9898\u6ca1\u6709\u4e1d\u6beb\u5173\u7cfb\u2026\u2026\n\u5176\u5b9e\u53ef\u4ee5\u89c2\u5bdf\u8fd9\u4e2a\u66fc\u54c8\u987f\u8ddd\u79bb\u516c\u5f0f\uff1a\n$$|x_A\u2212x_B|+|y_A\u2212y_B|$$\n\u90a3\u4e48\u53bb\u7edd\u5bf9\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u5206\u7c7b\u8ba8\u8bba\u56db\u79cd\u6700\u5927\u503c\u60c5\u51b5\uff1a\n$$ x_A-x_B+y_A-y_B \\\\\\\\\nx_B-x_A+y_A-y_B \\\\\\\\\nx_A-x_B+y_B-y_A \\\\\\\\\nx_B-x_A+y_B-y_A $$\n\u7ecf\u8fc7\u53d8\u5f62\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5b8c\u5168\u53ef\u4ee5\u4ee4 $A_i=X_i+Y_i,B_i=X_i-Y_i$\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u5728 $(max(A_i)-min(A_i),max(B_i)-min(B_i))$ \u4e4b\u4e2d\u4e86\u3002\nCode\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\nusing namespace std;\nconst int maxn=1000005;\nconst long long INF=1e9;\nint T,n,x[maxn],y[maxn];\nlong long seed;\nlong long A[maxn],B[maxn],maxa,mina,maxb,minb;\n\n\/\/ A[i]=Xi+Yi;\n\/\/ B[i]=Xi-Yi;\n\ninline long long rand(long long l, long long r) { \n    static long long mo=1e9+7, g=78125; \n    return l+((seed*=g)%=mo)%(r-l+1); \n}\n\ninline void build(int n,int seed){\n    for (int i=0;i&lt;n;i++)\n        x[i]=rand(-1000000000,1000000000),\n        y[i]=rand(-1000000000,1000000000),\n        A[i]=x[i]+y[i],maxa=max(maxa,A[i]),mina=min(mina,A[i]),\n        B[i]=x[i]-y[i],maxb=max(maxb,B[i]),minb=min(minb,B[i]);\n}\n\ninline void init(){\n    maxa=maxb=-INF;\n    mina=minb=INF;\n}\n\ninline int read(){\n    int ret=0,f=1;char ch=getchar();\n    while (ch&lt;'0'||ch&gt;'9') {if (ch=='-') f=-1;ch=getchar();}\n    while (ch&gt;='0'&amp;&amp;ch&lt;='9') ret=ret*10+ch-'0',ch=getchar();\n    return ret*f;\n}\n\nint main(){\n    T=read();\n    while (T--){\n        init();\n        n=read();seed=read();\n        build(n,seed);\n        printf(\"%lld\\n\",max(maxa-mina,maxb-minb));\n    }\n    return 0;\n}","tags":[{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u6570\u5b66\u9898","slug":"\u6570\u5b66\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E6%95%B0%E5%AD%A6%E9%A2%98\/"},{"name":"\u8d2a\u5fc3","slug":"\u8d2a\u5fc3","permalink":"https:\/\/skywt.cn\/tag\/%E8%B4%AA%E5%BF%83\/"}],"categories":[]},{"title":"HDU 6447 YJJ's Salesman \u9898\u89e3\uff1a\u6392\u5e8f+\u79bb\u6563+\u6811\u72b6\u6570\u7ec4","date":"2018-09-11T07:54:28+08:00","path":"https:\/\/skywt.cn\/posts\/hdu6447","text":"Problem Description\nYJJ is a salesman who has traveled through western country. YJJ is always on journey. Either is he at the destination, or on the way to destination.\nOne day, he is going to travel from city $A$ to southeastern city $B$. Let us assume that A is $(0,0)$ on the rectangle map and $B (10^9,10^9)$. YJJ is so busy so he never turn back or go twice the same way, he will only move to east, south or southeast, which means, if YJJ is at $(x,y)$ now $(0\\leqslant x\\leqslant 10^9,0\\leqslant y\\leqslant 10^9)$, he will only forward to $(x+1,y)$, $(x,y+1)$ or $(x+1,y+1)$.\n\nOn the rectangle map from $(0,0)$ to $(10^9,10^9)$, there are several villages scattering on the map. Villagers will do business deals with salesmen from northwestern, but not northern or western. In mathematical language, this means when there is a village $k$ on $(x_k,y_k)$ $(1\\leqslant x_k \\leqslant 10^9,1\\leqslant y_k\\leqslant 10^9)$, only the one who was from $(x_k\u22121,y_k\u22121)$ to $(x_k,y_k)$ will be able to earn $v_k$ dollars.(YJJ may get different number of dollars from different village.)\nYJJ has no time to plan the path, can you help him to find maximum of dollars YJJ can get.\nInput\nThe first line of the input contains an integer $T (1\\leqslant T\\leqslant 10)$,which is the number of test cases.\nIn each case, the first line of the input contains an integer $N (1\\leqslant N\\leqslant 10^5)$.The following $N$ lines, the $k$-th line contains 3 integers, $x_k,y_k,v_k (0\\leqslant v_k\\leqslant 10^3)$, which indicate that there is a village on $(x_k,y_k)$ and he can get $v_k$ dollars in that village.\nThe positions of each village is distinct.\nOutput\nThe maximum of dollars YJJ can get.\nSample Input\n1\n3\n1 1 1\n1 2 2\n3 3 1\nSample Output\n3\nTranslation\n\u5e73\u9762\u4e0a\u6709 N \u4e2a\u6751\u5e84\uff0cYJJ \u7ecf\u8fc7\u7b2c k \u4e2a\u6751\u5e84\u53ef\u4ee5\u5f97\u5230 $v_k$ \u7684\u94b1\u3002\n\u5982\u679c XJJ \u5f53\u524d\u5728 $(x,y)$\uff0c\u90a3\u4e48\u6bcf\u4e00\u79d2 TA \u53ea\u80fd\u8d70\u5230 $(x+1,y)$, $(x,y+1)$ \u6216\u8005 $(x+1,y+1)$\u3002\n\u5bf9\u4e8e\u7b2c k \u4e2a\u6751\u5e84\uff0c\u5176\u5904\u4e8e $(x_k,y_k)$\uff0c\u53ea\u6709 YJJ \u4ece $(x_k\u22121,y_k\u22121)$ \u8d70\u6765\u624d\u53ef\u4ee5\u5f97\u5230 $v_k$ \u7684\u94b1\u3002\n\u73b0\u5728\u8981\u6c42\u51fa TA \u6700\u591a\u53ef\u4ee5\u5f97\u5230\u591a\u5c11\u94b1\u3002\nAnalysis\n\u56e0\u4e3a\u8fd9\u79cd\u9898\u76ee\u6709\u6a2a\u5750\u6807\u3001\u7eb5\u5750\u6807\u4e24\u4e2a\u7ea6\u675f\u53d8\u91cf\uff0c\u6211\u4eec\u81ea\u7136\u60f3\u5230\u5bf9\u6a2a\u5750\u6807\u8fdb\u884c\u6392\u5e8f\uff1b\n\u6392\u5e8f\u4e4b\u540e\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651 y \u4e86\u3002\u6211\u4eec\u53d1\u73b0\u53ef\u4ee5\u679a\u4e3e\u4e00\u4e2a\u6751\u5e84 $P(x,y)$\uff0c\u90a3\u4e48\u5176\u5de6\u4e0b\u89d2\u7684\u6240\u6709\u6751\u5e84\u5230 $P$ \u90fd\u662f\u53ef\u884c\u7684\uff1b\u6240\u4ee5\u6211\u4eec\u9700\u8981\u6c42\u52a0\u548c\u3002\u6811\u72b6\u6570\u7ec4\u6216\u8005\u7ebf\u6bb5\u6811\u3002\n\u4f46\u662f y \u53c8\u5f88\u5927\uff0c\u6240\u4ee5\u5148\u79bb\u6563\uff0c\u518d\u6811\u72b6\u6570\u7ec4\/\u7ebf\u6bb5\u6811\u89e3\u51b3\u3002\u6ce8\u610f\u8fd9\u91cc\u8981\u7528\u5230\u6811\u72b6\u6570\u7ec4\u6c42\u533a\u95f4\u6700\u5927\u503c\u3002\n\u4ece @CaptainSlow \u90a3\u91cc\u5b66\u6765\u7684\u5947\u6280\u6deb\u5de7\uff0c\u7528\u547d\u540d\u7a7a\u95f4\u7684\u786e\u53ef\u4ee5\u8ba9\u4f60\u7684\u4ee3\u7801\u770b\u8d77\u6765\u5f88\u9ad8\u7aef\uff0c\u7279\u522b\u662f\u50cf\u7ebf\u6bb5\u6811\u3001\u6811\u72b6\u6570\u7ec4\u8fd9\u6837\u7684\u7b97\u6cd5\u5199\u5728\u4e00\u4e2a namespace \u91cc\u2026\u2026\nCode\n\u6211\u5f88\u61d2\u5730\u76f4\u63a5\u590d\u5236\u7ebf\u6bb5\u6811\u7684\u677f\u5b50\u4e86\u2026\u2026\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n#include&lt;vector&gt;\n#define CLEAR(_) memset(_,0,sizeof(_))\nusing namespace std;\nconst int maxn=200005;\n\nint T,n,ans,f[maxn];\nstruct Village{\n    int x,y,ys,w;\n};\nvector &lt;Village&gt; a;\n\nnamespace SegmentTree{\n    int tree[maxn*4],tag[maxn*4];\n    inline void clear(){\n        CLEAR(tree);CLEAR(tag);\n    }\n    inline void push_down(int tl,int tr,int p){\n        int mid=((tr-tl)&gt;&gt;1)+tl;\n        tree[p&lt;&lt;1]=max(tree[p&lt;&lt;1],tag[p]);\n        tag[p&lt;&lt;1]+=tag[p];\n        tree[(p&lt;&lt;1)+1]=max(tree[(p&lt;&lt;1)+1],tag[p]);\n        tag[(p&lt;&lt;1)+1]+=tag[p];\n        tag[p]=0;\n    }\n    inline void update(int sl,int sr,int tl,int tr,int delta,int p){\n        if (sl&lt;=tl&amp;&amp;sr&gt;=tr){\n            tree[p]=max(tree[p],delta);\n            tag[p]+=delta;\n            return;\n        }\n        push_down(tl,tr,p);\n        int mid=((tr-tl)&gt;&gt;1)+tl;\n        if (sl&lt;=mid) update(sl,sr,tl,mid,delta,p&lt;&lt;1);\n        if (mid&lt;sr)  update(sl,sr,mid+1,tr,delta,(p&lt;&lt;1)+1);\n        tree[p]=max(tree[p&lt;&lt;1],tree[(p&lt;&lt;1)+1]);\n    }\n    inline int query(int sl,int sr,int tl,int tr,int p){\n        if (sl&gt;sr) return 0;\n        if (sl&lt;=tl&amp;&amp;sr&gt;=tr) return tree[p];\n        int ret=0;\n        push_down(tl,tr,p);\n        int mid=((tr-tl)&gt;&gt;1)+tl;\n        if (sl&lt;=mid) ret=max(ret,query(sl,sr,tl,mid,p&lt;&lt;1));\n        if (mid&lt;sr)  ret=max(ret,query(sl,sr,mid+1,tr,(p&lt;&lt;1)+1));\n        return ret;\n    }\n}\n\ninline void init(){\n    ans=0;\n    a.clear();CLEAR(f);\n    SegmentTree::clear();\n}\n\ninline bool compare_x(Village aa,Village bb){\n    return (aa.x&lt;bb.x)||((aa.x==bb.x)&amp;&amp;(aa.y&gt;bb.y));\n}\ninline bool compare_y(Village aa,Village bb){\n    return aa.y&lt;bb.y;\n}\n\n\/* \n * \u8981\u5148\u5bf9 y \u5750\u6807\u79bb\u6563\u5316\uff0c\u4e0d\u7136\u6ca1\u6cd5\u641e\n *\/\ninline void discrete(){\n    sort(a.begin(),a.end(),compare_y);\n    int cnt=0;\n    for (int i=0;i&lt;a.size();i++){\n        cnt+=(bool)((i==0)||(a[i].y!=a[i-1].y));\n        a[i].ys=cnt;\n    }\n}\n\nint main(){\n    scanf(\"%d\",&amp;T);\n    while (T--){\n        init();\n        scanf(\"%d\",&amp;n);\n        for (int i=0;i&lt;n;i++){\n            int x,y,z;\n            scanf(\"%d%d%d\",&amp;x,&amp;y,&amp;z);\n            a.push_back((Village){x,y,0,z});\n        }\n        discrete();\n        sort(a.begin(),a.end(),compare_x);\n        for (int i=0;i&lt;n;i++){\n            f[i]=a[i].w+SegmentTree::query(1,a[i].ys-1,1,n*2,1);\n            \/\/ printf(\"F[%d]=%d\\n\",i,f[i]);\n            ans=max(ans,f[i]);\n            SegmentTree::update(a[i].ys,a[i].ys,1,n*2,f[i],1);\n        }\n        printf(\"%d\\n\",ans);\n    }\n    return 0;\n}","tags":[{"name":"C++\u8bed\u8a00","slug":"C-\u8bed\u8a00","permalink":"https:\/\/skywt.cn\/tag\/C-%E8%AF%AD%E8%A8%80\/"},{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u52a8\u6001\u89c4\u5212\u7c7b\u578b\u9898","slug":"\u52a8\u6001\u89c4\u5212\u7c7b\u578b\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB%E5%9E%8B%E9%A2%98\/"},{"name":"\u8d2a\u5fc3","slug":"\u8d2a\u5fc3","permalink":"https:\/\/skywt.cn\/tag\/%E8%B4%AA%E5%BF%83\/"}],"categories":[]},{"title":"POJ 3977 Subset \u9898\u89e3\uff1a\u6298\u534a\u641c\u7d22+\u4e8c\u5206\u67e5\u627e","date":"2018-09-11T19:58:02+08:00","path":"https:\/\/skywt.cn\/posts\/poj3977","text":"\u8fd9\u9898\u601d\u8def\u5f88\u7b80\u5355\uff0c\u4f46\u662f\u8c03\u8bd5\u82b1\u4e86\u6211\u4e00\u4e2a\u4e0b\u5348\u2026\u2026\u6700\u540e\u53d1\u73b0\u662f\u4e00\u79cd\u60c5\u51b5\u6ca1\u53d6 abs\u2026\u2026\uff08\u5410\u8840\uff09\n\u9898\u76ee\u94fe\u63a5\uff1aPOJ 3977 Subset\n\nDescription\nGiven a list of $N$ integers with absolute values no larger than $10^{15}$, find a non empty subset of these numbers which minimizes the absolute value of the sum of its elements. In case there are multiple subsets, choose the one with fewer elements.\nTime Limit: 30000MS\nMemory Limit: 65536K\nInput\nThe input contains multiple data sets, the first line of each data set contains $N \\leqslant 35$, the number of elements, the next line contains $N$ numbers no larger than $10^{15}$ in absolute value and separated by a single space. The input is terminated with $N = 0$.\nOutput\nFor each data set in the input print two integers, the minimum absolute sum and the number of elements in the optimal subset.\nSample Input\n1\n10\n3\n20 100 -100\n0\nSample Output\n10 1\n0 2\nAnalysis\n\u770b\u5230\u8fd9\u9898\u7684\u6570\u636e\u8303\u56f4\uff1a$N \\leqslant 35$\u2026\u2026\u5728\u6211\u77e5\u9053\u6298\u534a\u641c\u7d22\u8fd9\u4e2a\u73a9\u610f\u513f\u4e4b\u524d\uff0c\u6211\u5bf9\u8fd9\u79cd\u5927\u4e0d\u5927\u5c0f\u4e0d\u5c0f\u7684 Topcoder \u5f0f\u6570\u636e\u8303\u56f4\u662f\u624b\u8db3\u65e0\u63aa\u7684\uff0c\u56e0\u4e3a\u5982\u679c\u76f4\u63a5\u72b6\u538b\u66b4\u529b\u679a\u4e3e\u662f $2^{35}$\uff0c\u663e\u7136\u4e0d\u80fd\u627f\u53d7\uff1b\u4f46\u662f 35 \u8fd9\u4e2a\u6570\u5b57\u5bf9\u4e8e\u5176\u4ed6\u505a\u6cd5\u6765\u8bf4\u53c8\u592a\u5c0f\u4e86\u2026\u2026\n\u5982\u679c\u6211\u4eec\u80fd\u628a 35 \u6298\u534a\u8be5\u591a\u597d\uff01\u90a3 N \u5c31\u662f 16 \u6216\u8005 17\uff0c\u76f4\u63a5\u72b6\u538b\u6784\u9020\u5c31\u53ef\u4ee5\u627f\u53d7\u4e86\u3002\n\u6240\u4ee5\u8fd9\u5c31\u6709\u4e86\uff1a\u6298\u534a\u641c\u7d22\u3002\n\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e2a\u6570\u5217\u5206\u6210\u4e24\u534a\uff0c\u5148\u66b4\u529b\u6784\u9020\u53f3\u8fb9\u6240\u6709\u6570\u5b57\u7ec4\u5408\u7684\u52a0\u548c\u5e76\u4fdd\u5b58\u3001\u6392\u5e8f\uff0c\u7136\u540e\u66b4\u529b\u6784\u9020\u5de6\u8fb9\uff0c\u5bf9\u4e8e\u5de6\u8fb9\u6bcf\u4e2a\u7ec4\u5408\u52a0\u548c\u53ea\u8981\u53bb\u53f3\u8fb9\u4e8c\u5206\u67e5\u627e\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\u3002\nCode\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n\nconst long long maxn=40,maxs=400005,INF=(long long)1e15+100;\nlong long n,sl,sr,m;\nlong long a[maxn];\n\nstruct Element{\n    long long num,count;\n};\nElement s[maxs],ans;\n\ninline long long Abs(long long x){\n    return x&lt;0?-x:x;\n}\n\ninline bool compare(Element aa,Element bb){\n    return (aa.num&lt;bb.num)||((aa.num==bb.num)&amp;&amp;(aa.count&lt;bb.count));\n}\n\ninline Element find(long long x){\n    long long L=1,R=m;\n    Element ret;\n    ret.num=INF;ret.count=0;\n    while (L&lt;=R){\n        long long mid=((R-L)&gt;&gt;1)+L;\n        if ((Abs(s[mid].num+x)&lt;ret.num)||(Abs(s[mid].num+x)==ret.num&amp;&amp;s[mid].count&lt;ret.count)) ret=(Element){Abs(s[mid].num+x),s[mid].count};\n        if (s[mid].num&lt;-x) L=mid+1; else R=mid-1;\n    }\n    return ret;\n}\n\ninline void make_right(){\n    m=0;\n    for (long long i=1;i&lt;sr;i++){\n        long long now_sum=0,now_cnt=0;\n        for (long long j=0;j&lt;n\/2;j++) if (i&amp;(1&lt;&lt;j)) now_sum+=a[n-j],now_cnt++;\n        s[++m]=(Element){now_sum,now_cnt};\n    }\n}\n\ninline void make_left(){\n    sort(s+1,s+1+m,compare);\n    ans.num=INF;ans.count=0;\n    for (long long i=0;i&lt;sl;i++){\n        long long now_sum=0,now_cnt=0;\n        for (long long j=0;j&lt;n-(n\/2);j++) if (i&amp;(1&lt;&lt;j)) now_sum+=a[j+1],now_cnt++;\n        Element f=find(now_sum);\n        if ((f.num&lt;ans.num)||((f.num==ans.num)&amp;&amp;(f.count+now_cnt&lt;ans.count))) ans=(Element){f.num,f.count+now_cnt};\n        if (now_cnt==0) continue;\n        if ((Abs(now_sum)&lt;ans.num)||((Abs(now_sum)==ans.num)&amp;&amp;(now_cnt&lt;ans.count))) ans=(Element){Abs(now_sum),now_cnt};\n    }\n}\n\nint main(){\n    while (~scanf(\"%lld\",&amp;n)){\n        if (n==0) break;\n        for (long long i=1;i&lt;=n;i++) scanf(\"%lld\",&amp;a[i]);\n        sr=(long long)1&lt;&lt;(n\/2);\n        sl=(long long)1&lt;&lt;(n-(n\/2));\n        make_right();\n        make_left();\n        printf(\"%lld %lld\\n\",ans.num,ans.count);\n    }\n    return 0;\n}\n\u8b66\u544a @Feluamn\uff0c\u4ee5\u540e\u9047\u5230 WordPress \u4ee5\u53ca\u5404\u79cd\u7f51\u7ad9\u95ee\u9898\u4e0d\u8981\u6765\u627e\u6211\uff01\uff01\u4e0d\u7136\u6211\u7684\u65f6\u95f4\u5c31\u4f1a\u88ab\u4e00\u4e0b\u5348\u4e00\u4e0b\u5348\u5730\u7eed\u6389\u2026\u2026\u9664\u975e\u4f60\u8bf7\u6211\u559d\u661f\u5df4\u514b","tags":[{"name":"OI\u5b66\u4e60","slug":"OI\u5b66\u4e60","permalink":"https:\/\/skywt.cn\/tag\/OI%E5%AD%A6%E4%B9%A0\/"},{"name":"OI\u7b97\u6cd5","slug":"OI\u7b97\u6cd5","permalink":"https:\/\/skywt.cn\/tag\/OI%E7%AE%97%E6%B3%95\/"},{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u641c\u7d22","slug":"\u641c\u7d22","permalink":"https:\/\/skywt.cn\/tag\/%E6%90%9C%E7%B4%A2\/"},{"name":"\u4e8c\u5206\u67e5\u627e","slug":"\u4e8c\u5206\u67e5\u627e","permalink":"https:\/\/skywt.cn\/tag\/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE\/"},{"name":"\u6298\u534a\u641c\u7d22","slug":"\u6298\u534a\u641c\u7d22","permalink":"https:\/\/skywt.cn\/tag\/%E6%8A%98%E5%8D%8A%E6%90%9C%E7%B4%A2\/"}],"categories":[]},{"title":"POJ 3244 Difference between Triplets \u9898\u89e3\uff1a\uff08\u7ebf\u6bb5\u6811\u6216\u6811\u72b6\u6570\u7ec4\uff09\u6216\uff08\u6392\u5e8f + \u524d\u7f00\u548c\uff09","date":"2018-09-12T07:39:39+08:00","path":"https:\/\/skywt.cn\/posts\/poj3244","text":"\u5760\u75db\u82e6\u7684\u662f\uff0cPOJ \u7684\u8fa3\u9e21 G++ \u7f16\u8bd1\u5668\u4e0d\u652f\u6301 long long\uff0c\u5bb3\u5f97\u6211\u8c03\u8bd5\u8c03\u4e86\u534a\u5929\u2026\u2026\nDescription\nFor every pair of triplets, $T_a = (I_a, J_a, K_a)$ and $T_b = (I_b, J_b, K_b)$, we define the difference value between $T_a$ and $T_b$ as follows:\n$$ D(T_a, T_b) = \\max (I_a \u2212 I_b, J_a \u2212 J_b, K_a \u2212 K_b) \u2212 \\min (I_a \u2212 I_b, J_a \u2212 J_b, K_a \u2212 K_b) $$\nNow you are given $N$ triplets, could you write a program to calculate the sum of the difference values between every unordered pair of triplets?\n\nInput\nThe input consists of several test cases. \nEach test case begins with a line containing an integer $N$, denotes the number of triplets. Assume that we number the triplets as $T_1, T_2, \\dots , T_N$. Then, there are following $N$ lines, each line contains three integers, giving the elements of each triplet.\nA case with $N = 0$ indicates the end of the input.\nSample Input\n2\n1 2 3\n3 2 1\n3\n1 3 2\n4 0 7\n2 2 9\n0\nSample Output\n4\n20\nHint\nCase 1: $D(T_1,T_2)=4$\nCase 2: $D(T_1,T_2)+D(T_1,T_3)+D(T_2,T_3)=8+8+4=20$\nYou can assume that $N$, the number of triplets in each case, will not exceed 200,000 and the elements in triplets fit into $[-10^6,10^6]$.\nThe size of the input will not exceed 5 MB.\nAnalysis\nSolutoin #1\n\u5f88\u7c7b\u4f3c\u4e0a\u6b21\u7684HDU 5626 Clarke and points\u548cHDU 6447 YJJ\u2019s Salesman\u7684\u7ed3\u5408\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u5206\u7c7b\u8ba8\u8bba\uff08\u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u8f6e\u6362\u5bf9\u79f0\u5f0f\uff0c\u5176\u5b9e\u968f\u4fbf\u8003\u8651\u4e00\u79cd\u60c5\u51b5\u5c31\u53ef\u4ee5\u4e86\uff09\u3002\n\u5047\u8bbe $\\max (I_a \u2212 I_b, J_a \u2212 J_b, K_a \u2212 K_b) = I_a - I_b$\uff0c\u90a3\u4e48\u5c31\u6709\uff1a\n$$I_a-I_b>J_a-J_b,I_a-I_b>K_a-K_b$$\n\u53d8\u6362\u5f97\u5230\uff1a\n$$I_a-J_a>I_b-J_b,I_a-K_a-i_b-K_b$$\n\u4ee4 $A_i=I_i-J_i,B_i=I_i-K_i$\uff0c\u663e\u7136 $A_i>A_j,B_i>B_j$\u3002\n\u8fd9\u5c31\u8f6c\u6362\u6210\u533a\u95f4\u9009\u70b9\u95ee\u9898\u4e86\u3002\u53ea\u9700\u8981\u5148\u6309\u7167 $A_i$ \u6392\u5e8f\uff0c\u7136\u540e\u7528\u7ebf\u6bb5\u6811\u6216\u8005\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u4e0b\u5c31\u53ef\u4ee5\u4e86\uff5e\nSolution #2\n\u4e0a\u9762\u7684\u89e3\u6cd5\u663e\u7136\u592a\u9ebb\u70e6\u4e86\uff0c\u5176\u5b9e\u6709\u4e00\u79cd\u66f4\u52a0\u7cbe\u5999\u7684\u505a\u6cd5\u3002\n\u9996\u5148\u6211\u4eec\u8981\u77e5\u9053\u4e00\u4e2a\u8d85\u7ea7\u91cd\u8981\u7684\u516c\u5f0f\uff1a\n$$ \\max(a,b,c)-\\min(a,b,c) = \\frac {|a-b|+|b-c|+|c-a|} 2 $$\n\u6240\u4ee5\u53ef\u4ee5\u5f97\u5230\uff1a\n$$ D(T_a, T_b) = \\max (I_a \u2212 I_b, J_a \u2212 J_b, K_a \u2212 K_b) \u2212 \\min (I_a \u2212 I_b, J_a \u2212 J_b, K_a \u2212 K_b) \\\\\\\\\n= \\frac {|I_a-I_b-J_a+J_b| + |J_a-J_b-K_a-K_b| + |K_a-K_b-I_a+I_b|} 2 $$\n\u540c\u6837\u4ee4 $A_i=I_i-J_i,B_i=J_i-K_i,C_i=K_i-A_i$\uff0c\u6574\u7406\u5f97\u5230\uff1a\n$$ D(T_a,T_b)=\\frac {|A_a-A_b|+|B_a-B_b|+|C_a-C_b|} 2 $$\n\u6240\u4ee5\u53ea\u9700\u8981\u5bf9\u4e8e\u6bcf\u4e2a $A_i$\uff0c\u7d2f\u8ba1\u5b83\u4e0e\u6240\u6709\u5c0f\u4e8e\u5b83\u7684 $A_i$ \u4e4b\u5dee\u4e4b\u548c\uff0c\u5bf9\u4e8e $B_i$ \u548c $C_i$ \u540c\u7406\u3002\u5373\uff1a\n$$\\sum D(T_i,T_j) = \\frac {\\sum_{A_i< A_j} (A_j-A_i) +\\sum_{C_i< C_j} (C_j-C_i) + \\sum_{C_i< C_j} (C_j-C_i) } {2} $$\n\u8fd9\u4e2a\u5f88\u597d\u505a\uff0c\u7ef4\u62a4\u4e0b\u52a0\u548c\u5c31\u597d\u4e86\u3002\nCode\n\u7b2c\u4e00\u79cd\u89e3\u6cd5\u4ee3\u7801\u61d2\u5f97\u5199\u4e86\u2026\u2026\n\\\u4e0b\u9762\u662f\u89e3\u6cd5\u4e8c\u7684\u4ee3\u7801\u3002POJ \u8fd9\u9898\u63d0\u4ea4\u7684\u65f6\u5019\u5982\u679c\u8bed\u8a00\u9009\u62e9 G++ \u4f1a WA \u6389\uff0c\u4f46\u662f\u7528 C++ \u5c31\u8fc7\u4e86\u2026\u2026\u56f0\u6270\u4e86\u6211\u5f88\u957f\u65f6\u95f4\u2026\u2026\n\u55ef\uff0c\u539f\u6765\u5728 FAQ \u91cc\u9762\u8bf4\u4e86\uff1a\n\nPrior to the compiler upgrade in May 2009, we serviced C and C++ submissions using GCC 3.4.2. That version of GCC relies on the old MS VC++ 6 runtime library, which does not support the %lld and %llu specifiers for signed and unsigned long long types but allows the standard-incompliant %lf and %lg specifiers for floating-point types. The new GCC 4.4.0 comes with its own ISO C-conformant implementation of the printf function. Now you can use %lld and %llu with either C\/C++ compiler, but %lf and %lg only work with MS VC++ 2008 Express. As a rule of thumb, you should always use the %f and %g specifiers instead for floating-point types.\n\n\u2026\u53ef\u6015\u2026\u2026\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\nconst long long maxn=200005;\nlong long n,a[maxn],b[maxn],c[maxn];\nlong long ans=0;\n\nint main(){\n    for (;;){\n        scanf(\"%lld\",&amp;n);\n        if (n==0) break;\n        ans=0;\n\n        for (long long i=1;i&lt;=n;i++){\n            long long x,y,z;\n            scanf(\"%lld%lld%lld\",&amp;x,&amp;y,&amp;z);\n            a[i]=x-y,b[i]=y-z,c[i]=z-x;\n        }\n        sort(a+1,a+1+n);sort(b+1,b+1+n);sort(c+1,c+1+n);\n\n        long long sum_a=0,sum_b=0,sum_c=0;\n        for (long long i=1;i&lt;=n;i++){\n            ans+=a[i]*(i-1)-sum_a;\n            ans+=b[i]*(i-1)-sum_b;\n            ans+=c[i]*(i-1)-sum_c;\n            sum_a+=a[i];sum_b+=b[i];sum_c+=c[i];\n        }\n        printf(\"%lld\\n\",ans\/2);\n    }\n    return 0;\n}","tags":[{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u6570\u5b66\u9898","slug":"\u6570\u5b66\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E6%95%B0%E5%AD%A6%E9%A2%98\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"POJ 3465 Battle \u9898\u89e3\uff1a\u53ef\u201c\u53cd\u6094\u201d\u7684\u8d2a\u5fc3","date":"2018-09-14T07:45:57+08:00","path":"https:\/\/skywt.cn\/posts\/poj3465","text":"\u5f88\u591a\u9898\u76ee\u7684\u8d2a\u5fc3\u60f3\u6cd5\u90fd\u662f\u4e00\u4e2a\u7b80\u5355\u7c97\u66b4\u7684\u8d2a\u5fc3\u52a0\u4e0a\u53ef\u201c\u53cd\u6094\u201d\u7684\u64cd\u4f5c\u3002\u8fd9\u6837\u53ef\u4ee5\u786e\u4fdd\u7b54\u6848\u7684\u6b63\u786e\u6027\u3002\nDescription\nYou're Zhu Rengong, a formidable hero. After a number of challenging missions, you are finally facing the final Boss \u2013 a black dragon called Heilong. Due to his overwhelming power, you have to plan your actions carefully.\n\nYou have $H_1$ hit points (HP) at the beginning of the battle, and Heilong has $H_2$. Heilong attacks you each time you do an action, and deal $A_i$ points of damage in the $i$-th round. You have three kinds of actions.\n\nAttack. You attack Heilong, and do x points of damage.\nDefend. You focus on avoiding the attack of Heilong. This action nullifies Heilong's attack in this round.\nHeal. You heal yourself, adding y hit points to yourself. There is no upper bound on your HP.\n\nIf anyone's HP drop below or equal to 0, he dies. If you can't kill the dragon within N rounds, you will also die. So you need to know how many rounds you need to kill the black dragon. If you cannot kill him, you will have to calculate the maximal damage you can do on Heilong.\nLink\uff1aPOJ 3465 Battle\nInput\nThe first line contains five integers, $N, x, y, H_1, H_2. 1 \\leqslant N \\leqslant 10^5, 1 \\leqslant x,y \\leqslant 10^4, 1 \\leqslant H_1,H_2 \\leqslant 10^9$. Then follow $N$ lines, the $i$-th line contains one integer $A_{i-1}$. $1 \\leqslant A_{i-1} \\leqslant 10^4$.\nOutput\nIf you can kill Heilong, the first line of your output should be &quot;Win&quot;. Otherwise &quot;Lose&quot;.\nThe second line contains the number of rounds you need to kill Heilong if the first line is &quot;Win&quot;, or the maximal damage you can do if the first line is &quot;Lose&quot;.\nSample Input\nSample Input 1\n4 1 1 3 3\n1\n10\n1\n10\nSample Input 2\n4 1 1000 1 4\n1\n10\n1\n1\nSample Output\nSample Output 1\nWin\n4\nSample Output 2\nLose\n3\nHint\nIn Sample 1, you have to defend in the 2nd round, othewise you will die.\nIn Sample 2, you heal yourself in the first round, and keep attacking until N rounds expires.\nTranslation\n\u4f60\u662f\u4e3b\u4eba\u516c\uff08Zhu Rengong\uff1f\uff1f\uff1f\uff09\uff0c\u4f60\u8981\u548c\u4e00\u6761\u540d\u53eb\u9ed1\u9f99\u7684\u9ed1\u9f99\u6218\u6597\uff08\uff1f\uff1f\uff1f\uff09\uff0c\u6bcf\u8f6e\u4f60\u5148\u65bd\u5c55\u64cd\u4f5c\uff0c\u7136\u540e\u8f6e\u5230\u5b83\u3002\u4f60\u6709\u4e09\u79cd\u64cd\u4f5c\uff1a\n\n\u653b\u51fb\uff1a\u8ba9\u9ed1\u9f99\u8840\u91cf\u51cf\u53bb $x$\uff1b\n\u9632\u5fa1\uff1a\u62b5\u5fa1\u8fd9\u4e00\u8f6e\u9ed1\u9f99\u7684\u653b\u51fb\uff1b\n\u56de\u8840\uff1a\u56de\u590d $y$ \u70b9\u751f\u547d\u503c\u3002\n\n\u800c\u9ed1\u9f99\u6bcf\u4e00\u8f6e\u7684\u64cd\u4f5c\u53ea\u4f1a\u653b\u51fb\u4f60\u3002\u7b2c $i$ \u8f6e\u4f1a\u5bf9\u4f60\u9020\u6210 $A_i$ \u7684\u4f24\u5bb3\u3002\n\u4f60\u7684\u521d\u59cb\u8840\u91cf\u662f $H_1$\uff0c\u9ed1\u9f99\u662f $H_2$\uff0c\u8c01\u7684\u8840\u91cf\u5c0f\u4e8e\u7b49\u4e8e 0 \u4e86\u5c31\u6302\u4e86\u3002\u5982\u679c\u4f60\u4e0d\u80fd\u5728 $n$ \u8f6e\u4e4b\u5185\u6253\u8d25\u5b83\uff0c\u4f60\u4e5f\u4f1a\u81ea\u52a8\u6b7b\u4ea1\u3002\n\u95ee\u4f60\uff1a\u5982\u679c\u4f60\u53ef\u4ee5\u6253\u8d25\u5b83\uff0c\u6700\u5c11\u51e0\u8f6e\u53ef\u4ee5\u6253\u8d25\uff1b\u5982\u679c\u4e0d\u80fd\uff0c\u6700\u591a\u5bf9\u9ed1\u9f99\u9020\u6210\u591a\u5c11\u4f24\u5bb3\u3002\n\nAnalysis\n\u4e0d\u5f97\u4e0d\u8bf4\u5434\u8001\u5e08\u7cbe\u9009\u7684\u9898\u76ee\u4e0d\u4ec5\u96be\u5ea6\u9002\u4e2d\u800c\u4e14\u8fd8\u6bd4\u8f83\u6709\u610f\u601d\uff0c\u7b80\u76f4\u6bd4 XY \u9898\u4e0d\u77e5\u9053\u9ad8\u5230\u54ea\u91cc\u53bb\u4e86\uff08\u9003\u2026\u2026\n\u9996\u5148\u8fd9\u79cd\u9898\u76ee\u53ef\u80fd\u60f3\u5230\u662f\u52a8\u6001\u89c4\u5212\uff0c\u4f46\u662f\u53d1\u73b0\u8fd9\u4e2a\u5b9a\u4e49\u5b8c\u5168\u65e0\u4ece\u4e0b\u624b\u2026\u2026\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4e00\u4e0b\u8d2a\u5fc3\u3002\n\u89c2\u5bdf\u9898\u76ee\uff0c\u53ef\u4ee5\u53d1\u73b0\u9632\u5fa1\u548c\u6cbb\u7597\u662f\u4e00\u6837\u7684\uff0c\u9632\u5fa1\u5c31\u662f\u6cbb\u7597 $A_i$ \u7684\u8840\u91cf\uff0c\u800c\u6cbb\u7597\u5c31\u662f\u6cbb\u7597 $y$ \u7684\u8840\u91cf\uff08\u8fd9\u4e00\u70b9\u4e3a\u4e4b\u540e\u6a21\u62df\u63d0\u4f9b\u4e86\u65b9\u4fbf\uff09\u3002\n\u9996\u5148\uff0c\u6211\u4eec\u5c1d\u8bd5\u4e0d\u9632\u5fa1\u3001\u4e0d\u56de\u8840\uff0c\u53ea\u653b\u51fb\uff0c\u5982\u679c\u76f4\u63a5\u80fd\u628a\u9ed1\u9f99\u6253\u6b7b\uff0c\u5c31\u76f4\u63a5\u8f93\u51fa\u7b54\u6848\u4e86\u3002\u5982\u679c $n$ \u8f6e\u4e4b\u5185\u6ca1\u6709\u4eba\u6b7b\uff0c\u4f60\u80af\u5b9a\u8f93\u4e86\u3002\n\u63a5\u4e0b\u6765\u8003\u8651\uff1a\u4f46\u662f\u5982\u679c\u4e0d\u80fd\u628a\u9ed1\u9f99\u6253\u6b7b\uff0c\u5982\u4f55\u5904\u7406\u5462\uff1f\n\u6211\u4eec\u81ea\u7136\u60f3\u5230\uff1a\u524d\u9762\u4e0d\u8be5\u5168\u90e8\u90fd\u7528\u6765\u653b\u51fb\u554a\uff01\u5e94\u8be5\u62b5\u5fa1\u4e00\u4e0b\u9ed1\u9f99\u7684\u653b\u51fb\uff0c\u624d\u80fd\u8ba9\u81ea\u5df1\u5269\u4f59\u8840\u91cf\u66f4\u591a\uff0c\u6d3b\u5f97\u66f4\u4e45\uff0c\u4f24\u5bb3\u9ed1\u9f99\u66f4\u591a\uff0c\u6740\u6b7b\u9ed1\u9f99\u673a\u4f1a\u66f4\u5927\uff0c\u90a3\u4e48\u663e\u7136\u6211\u4eec\u60f3\u8981\u5728\u524d\u9762\u6311\u4e00\u8f6e\uff0c\u628a\u8fd9\u8f6e\u5bf9\u9ed1\u9f99\u7684\u653b\u51fb\u6539\u4e3a\u9632\u5fa1\uff08\u6216\u8005\u6cbb\u7597\uff0c\u4ee5\u4e0b\u7edf\u79f0\u201c\u62b5\u5fa1\u201d\uff09\uff0c\u8fd9\u6837\u624d\u53ef\u4ee5\u4f7f\u5f97\u81ea\u5df1\u201c\u6d3b\u5f97\u66f4\u4e45\u201d\u3002\n\u90a3\u4e48\u8981\u8ba9\u81ea\u5df1\u201c\u6d3b\u5f97\u66f4\u4e45\u201d\uff0c\u81ea\u7136\u8981\u8ba9\u81ea\u5df1\u5269\u4f59 HP \u8d8a\u5927\u8d8a\u597d\uff0c\u6240\u4ee5\u8fd9\u6b21\u62b5\u5fa1\u7684\u653b\u51fb $A_i$ \u4e5f\u8981\u5c3d\u91cf\u5927\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u4f18\u5148\u961f\u5217\u7ef4\u62a4\uff1a\n\u628a\u6bcf\u6b21\u73a9\u5bb6\u653b\u51fb\u3001\u9ed1\u9f99\u4e5f\u653b\u51fb\u7684\u8f6e\uff08\u9ed8\u8ba4\u60c5\u51b5\uff09\u90fd\u653e\u5230\u4f18\u5148\u961f\u5217\u91cc\uff0c\u4e00\u65e6\u5728 $n$ \u8f6e\u4e4b\u5185\u6b7b\u4e86\uff0c\u5c31\u627e\u5230\u4e4b\u524d\u9ed1\u9f99\u5bf9\u73a9\u5bb6\u9020\u6210\u4f24\u5bb3\u6700\u5927\u7684\u4e00\u8f6e\uff0c\u628a\u90a3\u4e00\u8f6e\u7684\u653b\u51fb\u6539\u4e3a\u62b5\u5fa1\u3002\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u5269\u4f59\u7684 HP \u6700\u5927\uff0c\u786e\u4fdd\u4e86\u89e3\u6700\u4f18\u3002\n\u5176\u5b9e\u8fd9\u5c31\u76f8\u5f53\u4e8e\u8d2a\u5fc3\u52a0\u4e0a\u4e86\u53cd\u6094\u7684\u64cd\u4f5c\uff0c\u662f\u4e00\u79cd\u5e38\u7528\u7684\u8d2a\u5fc3\u601d\u60f3\u3002\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\Theta (N\\log_2 N)$\u3002\nCode\n\u6c89\u8ff7\u5feb\u8bfb\uff0c\u65e0\u6cd5\u81ea\u62d4\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n#include&lt;queue&gt;\n#include&lt;vector&gt;\n\nusing namespace std;\nconst int maxn=100005;\nint n,x,y,h1,h2,ans=0,a[maxn];\nstruct Element{\n    int x,id;\n    bool operator &lt;(Element b)const{\n        return x&lt;b.x;\n    }\n};\npriority_queue &lt;Element&gt; heap;\n\ninline int read(){\n    int ret=0,f=1;char ch=getchar();\n    while (ch&lt;'0'||ch&gt;'9'){if (ch=='-') f=-1;ch=getchar();}\n    while (ch&gt;='0'&amp;&amp;ch&lt;='9') ret=ret*10+ch-'0',ch=getchar();\n    return ret*f;\n}\n\nint main(){\n    n=read();x=read();y=read();h1=read();h2=read();\n    for (int i=1;i&lt;=n;i++) a[i]=read();\n    int now1=h1,now2=h2,lst=0;\n    for (int i=1;i&lt;=n;i++){\n        now2-=x;\n        if (now2&lt;=0){\n            printf(\"Win\\n%d\\n\",i);\n            return 0;\n        }\n        now1-=a[i];heap.push((Element){a[i],i});\n        if (now1&lt;=0){\n            ans=h2-now2;lst=i;\n            break;\n        }\n    }\n    if (now1&gt;0) {printf(\"Lose\\n%d\\n\",ans);return 0;}\n    while (!heap.empty()){\n        Element now=heap.top();heap.pop();\n        now1+=max(y,now.x);\n        now2+=x;\n        for (int i=lst+1;i&lt;=n;i++){\n            now2-=x;\n            if (now2&lt;=0){\n                printf(\"Win\\n%d\\n\",i);\n                return 0;\n            }\n            now1-=a[i];heap.push((Element){a[i],i});\n            if (now1&lt;=0){\n                ans=max(ans,h2-now2);lst=i;\n                break;\n            }\n            if (i==n) ans=max(ans,h2-now2),lst=n;\n        }\n        if (lst&gt;=n) break;\n    }\n    printf(\"Lose\\n%d\\n\",ans);\n    return 0;\n}","tags":[{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u8d2a\u5fc3","slug":"\u8d2a\u5fc3","permalink":"https:\/\/skywt.cn\/tag\/%E8%B4%AA%E5%BF%83\/"}],"categories":[]},{"title":"NOIP \u521d\u8d5b\u9898\u76ee\u6574\u7406\uff08C++\uff09","date":"2018-09-26T07:52:17+08:00","path":"https:\/\/skywt.cn\/posts\/noip-precontest","text":"\u636e\u8bf4\u4eca\u5e74\u6240\u6709\u5b66\u6821\u90fd\u6ca1\u6709\u63a8\u8350\u540d\u989d\uff1f\uff1f\uff1f\n\n\u9009\u62e9\/\u95ee\u9898\u6c42\u89e3\u90e8\u5206\n\u7b97\u6cd5\/\u6570\u636e\u7ed3\u6784\u7cfb\u5217\n\u6392\u5e8f\u4e0e\u590d\u6742\u5ea6\nCCF \u53ef\u559c\u6b22\u4e86 :new_moon_with_face:\n\n\n\u5728\u5404\u79cd\u67e5\u627e\u7b97\u6cd5\u4e2d\uff0c\u5e73\u5747\u67e5\u627e\u957f\u5ea6\uff08\u4e0e\u5173\u952e\u5b57\u6bd4\u8f83\u6b21\u6570\u7684\u671f\u671b\u503c\uff09\u4e0e\u67e5\u627e\u8868\u4e2d\u5143\u7d20\u4e2a\u6570n\u65e0\u5173\u7684\u67e5\u627e\u65b9\u6cd5\u662f\nA\u3001\u987a\u5e8f\u67e5\u627e\nB\u3001\u6563\u5217\u67e5\u627e\nC\u3001\u6298\u534a\u67e5\u627e\nD\u3001\u52a8\u6001\u67e5\u627e\n\n\n\u7b54\u6848\uff1aB\n\u89e3\u6790\uff1a\n\u987a\u5e8f\u67e5\u627e\u662f $O(n)$ \u7684\uff0c\u6298\u534a\u67e5\u627e\uff08\u5373\u4e8c\u5206\u67e5\u627e\uff09\u662f $\\log(n)$ \u7684\uff0c\u663e\u7136\u90fd\u4e0e $n$ \u6709\u5173\u3002\n\u52a8\u6001\u67e5\u627e\u957f\u5ea6\u662f\u4e0d\u786e\u5b9a\u7684\uff08\u5176\u5b9e\u548c\u4f7f\u7528\u54ea\u79cd\u52a8\u6001\u67e5\u627e\u6709\u5173\uff09\u3002\u800c\u6563\u5217\u67e5\u627e\u5b9e\u8d28\u4e0a\u5c31\u662f\u54c8\u5e0c\u3002\n\n\n\u9009\u62e9\u5408\u9002\u7684\u6563\u5217\u51fd\u6570 $h(key)$\uff0c\u6563\u5217\u6cd5\u7684\u67e5\u627e\u6548\u7387\u671f\u671b\u662f $\\Theta(1)$\u3002\u5b83\u51e0\u4e4e\u4e0e\u5173\u952e\u5b57\u7684\u7a7a\u95f4\u5927\u5c0f\u65e0\u5173\uff0c\u4e5f\u9002\u5408\u4e8e\u5173\u952e\u5b57\u76f4\u63a5\u6bd4\u8f83\u8ba1\u7b97\u91cf\u5927\u7684\u95ee\u9898\u3002[1]\n\n\n\n\u5728\u5f85\u6392\u5e8f\u7684\u6570\u636e\u8868\u5df2\u7ecf\u4e3a\u6709\u5e8f\u65f6\uff0c\u4e0b\u5217\u6392\u5e8f\u7b97\u6cd5\u4e2d\u82b1\u8d39\u65f6\u95f4\u53cd\u800c\u591a\u7684\u662f\uff08\uff09\u3002\nA\u3001\u5806\u6392\u5e8f\nB\u3001\u5e0c\u5c14\u6392\u5e8f\nC\u3001\u5192\u6ce1\u6392\u5e8f\nD\u3001\u5feb\u901f\u6392\u5e8f\n\n\n\u7b54\u6848\uff1aD\n\u89e3\u6790\uff1a\n\u5806\u6392\u5e8f\uff0c\u82b1\u8d39\u65f6\u95f4\u663e\u7136\u4e0d\u6539\u53d8\uff0c\n\u5e0c\u5c14\u6392\u5e8f\u548c\u63d2\u5165\u6392\u5e8f\u90fd\u4e0d\u4e00\u5b9a\uff0c\u56e0\u4e3a\u6709\u53ef\u80fd\u4ece\u524d\u5f80\u540e\u3001\u4ece\u540e\u5f80\u524d\u6bd4\u8f83\uff0c\u6709\u4e24\u79cd\u60c5\u51b5\u3002\n\u6211\u4eec\u90fd\u5b66\u8fc7\uff0c\u5feb\u901f\u6392\u5e8f\u5728\u6570\u636e\u6709\u5e8f\u7684\u65f6\u5019\u4f1a\u9000\u5316\u6210 $O(n^2)$\uff08\u4e5f\u5c31\u662f\u6700\u5dee\u60c5\u51b5\uff09\u3002\n\n\n\u5feb\u901f\u6392\u5e8f\u662f\u628a\u6570\u5217\u6309\u4e00\u4e2a\u67a2\u7ebd\u503c\u5206\u6210\u4e24\u90e8\u5206\u5206\u522b\u6392\u5e8f\uff0c\u6240\u4ee5\u6548\u7387\u9ad8\u3002\u4f46\u662f\u82e5\u539f\u6570\u636e\u4e3a\u6709\u5e8f\uff0c\u5e76\u4e14\u9009\u62e9\u7684\u67a2\u7ebd\u503c\u4e3a\u7b2c\u4e00\u4e2a\u6570\u65f6\uff0c\u90a3\u5728\u5206\u5757\u65f6\u4f1a\u5c06\u4e00\u4e2a\u7b2c\u4e00\u4e2a\u6570\u524d\u9762\u7684\u6570\uff08\u4e5f\u5c31\u662f\u6ca1\u6709\uff09\u5206\u4e3a\u4e00\u5757\uff0c\u5c06\u9664\u7b2c\u4e00\u4e2a\u6570\u7684\u6240\u6709\u6570\u5206\u6210\u4e86\u53e6\u4e00\u5757\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u6bcf\u4e00\u6b21\u5206\u5757\u90fd\u53ea\u51cf\u5c11\u4e86\u4e00\u4e2a\u503c\uff0c\u800c\u6bcf\u6b21\u5206\u5757\u7684\u65f6\u95f4\u4e3aO\uff08N\uff09\uff0c\u6240\u4ee5\u603b\u65f6\u95f4\u4e3aO\uff08N^2\uff09\u3002[2]\n\n\n\n\u5728\u5f85\u6392\u5e8f\u7684\u6570\u636e\u8868\u5df2\u7ecf\u4e3a\u6709\u5e8f\u65f6\uff0c\u4e0b\u5217\u6392\u5e8f\u7b97\u6cd5\u4e2d\u65f6\u95f4\u590d\u6742\u5ea6\u4f1a\u51cf\u5c11\u7684\u662f\uff08\uff09\nA\u3001  \u5806\u6392\u5e8f\nB\u3001\u5e0c\u5c14\u6392\u5e8f\nC\u3001\u5192\u6ce1\u6392\u5e8f\nD\u3001\u63d2\u5165\u6392\u5e8f\n\n\n\u7b54\u6848\uff1aBD\n\u89e3\u6790\uff1a\nA\uff1a\u5806\u6392\u5e8f\uff0c\u590d\u6742\u5ea6\u4e0e\u6570\u636e\u8868\u662f\u5426\u6709\u5e8f\u65e0\u5173\uff1b\nB\uff1a\u5e0c\u5c14\u6392\u5e8f\uff08\u662f\u5bf9\u63d2\u5165\u6392\u5e8f\u7684\u4e00\u4e2a\u4f18\u5316\uff09\uff0c\u663e\u7136\u4f1a\u51cf\u5c11\u7684\uff0c\u964d\u4e3a $\\Theta (n)$\nC\uff1a\u5192\u6ce1\u6392\u5e8f\uff0c\u6bd4\u8f83\u6b21\u6570\u4e0d\u53d8\uff1b\nD\uff1a\u4e5f\u964d\u4e3a $\\Theta (n)$\u3002\n\n\u5173\u4e8e\u5192\u6ce1\u6392\u5e8f\uff0c\u5176\u6b65\u9aa4\u662f\uff1a\n\n\n\u6bd4\u8f83\u76f8\u90bb\u7684\u5143\u7d20\u3002\u5982\u679c\u7b2c\u4e00\u4e2a\u6bd4\u7b2c\u4e8c\u4e2a\u5927\uff0c\u5c31\u4ea4\u6362\u4ed6\u4eec\u4e24\u4e2a\u3002\n\u5bf9\u6bcf\u4e00\u5bf9\u76f8\u90bb\u5143\u7d20\u505a\u540c\u6837\u7684\u5de5\u4f5c\uff0c\u4ece\u5f00\u59cb\u7b2c\u4e00\u5bf9\u5230\u7ed3\u5c3e\u7684\u6700\u540e\u4e00\u5bf9\u3002\u5728\u8fd9\u4e00\u70b9\uff0c\u6700\u540e\u7684\u5143\u7d20\u5e94\u8be5\u4f1a\u662f\u6700\u5927\u7684\u6570\u3002\n\u9488\u5bf9\u6240\u6709\u7684\u5143\u7d20\u91cd\u590d\u4ee5\u4e0a\u7684\u6b65\u9aa4\uff0c\u9664\u4e86\u6700\u540e\u4e00\u4e2a\u3002\n\u6301\u7eed\u6bcf\u6b21\u5bf9\u8d8a\u6765\u8d8a\u5c11\u7684\u5143\u7d20\u91cd\u590d\u4e0a\u9762\u7684\u6b65\u9aa4\uff0c\u76f4\u5230\u6ca1\u6709\u4efb\u4f55\u4e00\u5bf9\u6570\u5b57\u9700\u8981\u6bd4\u8f83\u3002\n\n\n\n\n\u4e0b\u5217\u5173\u4e8e\u6392\u5e8f\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff08\uff09\u3002\nA\u3001  \u63d2\u5165\u6392\u5e8f\u3001\u5192\u6ce1\u6392\u5e8f\u662f\u7a33\u5b9a\u7684\nB\u3001  \u9009\u62e9\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n^2)$\nC\u3001  \u9009\u62e9\u6392\u5e8f\u3001\u5e0c\u5c14\u6392\u5e8f\u3001\u5feb\u901f\u6392\u5e8f\u3001\u5806\u6392\u5e8f\u662f\u4e0d\u7a33\u5b9a\u7684\nD\u3001  \u5e0c\u5c14\u6392\u5e8f\u3001\u5feb\u901f\u6392\u5e8f\u3001\u5806\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log n)$\n\n\n\u7b54\u6848\uff1aABC\n\u89e3\u6790\uff1a\n\n\n\u662f\u5426\u7a33\u5b9a\u770b\u6392\u5e8f\u540e\u539f\u6765\u76f8\u7b49\u4e24\u6570\u662f\u5426\u4f1a\u4ea4\u6362\u4f4d\u7f6e\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u4e0d\u662f\u76f8\u90bb\u4e24\u6570\u6bd4\u8f83\u4ea4\u6362\u7684\u5f80\u5f80\u662f\u4e0d\u7a33\u5b9a\u3002shell \u662f $O(n^{1.3})$\uff0c\u4e00\u822c\u8fbe\u4e0d\u5230 $O(n\\log n)$\n\u2014\u2014\u6765\u81ea\u8001\u5e08\u7684\u5b98\u65b9\u9898\u89e3\u2026\u2026\n\n\u63d2\u5165\u6392\u5e8f\u3001\u5192\u6ce1\u6392\u5e8f\u90fd\u662f\u76f8\u90bb\u6570\u5b57\u6bd4\u8f83\u4ea4\u6362\u7684\uff0c\u6240\u4ee5\u7a33\u5b9a\uff1b\u800c\u9009\u6392\u3001shell\u3001\u5feb\u6392\u3001\u5806\u6392\u90fd\u4e0d\u662f\u3002\n\u7ef4\u57fa\u767e\u79d1\u4e0a\u5176\u5b9e\u8bf4 shell \u590d\u6742\u5ea6\u662f $\\Theta(n \\log^2 n)$\u3002\u603b\u4e4b\u4e0d\u53ef\u80fd\u662f $\\Theta (n\\log n)$\u3002\n\n\u56fe\u8bba\n\n\n\u5047\u8bbe\u6211\u4eec\u7528 $d=(a_1,a_2,\\dots,,a_5)$\uff0c\u8868\u793a\u65e0\u5411\u56fe $G$ \u76845\u4e2a\u9876\u70b9\u7684\u5ea6\u6570\uff0c\u4e0b\u9762\u7ed9\u51fa\u7684\u54ea\uff08\u4e9b\uff09\u7ec4 $d$ \u503c\u5408\u7406\uff08\uff09\nA\u3001${5,4,4,3,1}$\nB\u3001${4,2,2,1,1}$\nC\u3001${3,3,3,2,2}$\nD\u3001${2,2,2,2,2}$\n\n\n\u7b54\u6848\uff1aBD\n\u89e3\u6790\uff1a\u5176\u5b9e\u4e00\u5f00\u59cb\u770b\u5230\u8fd9\u9898\u53ef\u80fd\u4f1a\u753b\u56fe\uff0c\u4f46\u662f\u6700\u540e\u53d1\u73b0\u53ef\u4ee5\u76f4\u63a5\u5229\u7528\u65e0\u5411\u56fe\u7684\u4e00\u6761\u6027\u8d28\uff1a\u6240\u6709\u70b9\u7684\u5ea6\u6570\u4e4b\u548c\u4e3a\u5076\u6570\u3002\n\n\n\n\u4ee5\u4e0b\u5173\u4e8e\u56fe\u7684\u6b63\u786e\u8bf4\u6cd5\u662f\uff08\uff09\u3002\nA\u3001\u6240\u6709\u9876\u70b9\u7684\u5ea6\u6570\u4e4b\u548c\u7b49\u4e8e\u8fb9\u6570\u76842\u500d\nB\u3001\u6240\u6709\u9876\u70b9\u7684\u5ea6\u6570\u4e4b\u548c\u4e0d\u4e00\u5b9a\u7b49\u4e8e\u8fb9\u6570\u76842\u500d\nC\u3001\u4efb\u610f\u4e00\u4e2a\u56fe\u4e00\u5b9a\u6709\u5076\u6570\u4e2a\u5947\u70b9\nD\u3001\u5728\u6709\u5411\u56fe\u4e2d\u9876\u70b9\u7684\u5165\u5ea6\u4e4b\u548c\u7b49\u4e8e\u51fa\u5ea6\u4e4b\u548c\n\n\n\u7b54\u6848\uff1aACD\n\u89e3\u6790\uff1a\u8fd9\u9898\u4e0d\u96be\uff0c\u53ea\u8981\u753b\u51e0\u5f20\u56fe\u770b\u770b\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\n\n\u4e0b\u5217\u903b\u8f91\u8fd0\u7b97\u6b63\u786e\u7684\u662f\uff08\uff09\nA\u3001A\u2227(A\u2228B)=A\nB\u3001A\u2228(A\u2227B)=A\nC\u3001A\u2227(C\u2228B)=A\u2227B\u2228A\u2227C\nD\u3001A\u2228(B\u2227C)=(A\u2228B)\u2227(A\u2228C)\n\n\n\u7b54\u6848\uff1aABCD\n\u89e3\u6790\uff1a\n\u8fd9\u9898\u662f\u975e\u5e38\u5178\u578b\u7684\u201c\u903b\u8f91\u8fd0\u7b97\u8868\u8fbe\u5f0f\u6bd4\u8f83\u201d\u3002\u4e00\u4e2a\u5f88\u795e\u5947\u7684\u505a\u6cd5\u5c31\u662f\uff1a\u53ef\u4ee5\u628a\u53c2\u6570\u770b\u6210\u96c6\u5408\uff0c$\u2227$ \u4e0e $\u2228$ \u5206\u522b\u770b\u6210\u96c6\u5408\u7684 $\u2229$ \u4e0e $\u222a$\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u753b\u97e6\u6069\u56fe\u7684\u65b9\u5f0f\u5224\u65ad\u4e86\uff01\n\u90a3\u4e48\u6211\u4eec\u601d\u8003\uff1a\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u628a $\u2227$ \u4e0e $\u2228$ \u5206\u522b\u770b\u6210\u96c6\u5408\u7684 $\u2229$ \u4e0e $\u222a$ \u5462\uff1f\u6839\u636e\u610f\u601d\u6765\u7406\u89e3\uff0c\u201c\u4e0e\u201d\u53ef\u4ee5\u7406\u89e3\u4e3a\u201c\u4e24\u4e2a\u96c6\u5408\u91cc\u90fd\u6709\u201d\uff0c\u4e5f\u5c31\u662f\u4ea4\uff1b\u201c\u6216\u201d\u53ef\u4ee5\u7406\u89e3\u4e3a\u201c\u4e24\u4e2a\u96c6\u5408\u4e4b\u4e00\u6709\u6216\u90fd\u6709\u201d\uff0c\u81ea\u7136\u5c31\u662f\u96c6\u5408\u5e76\u4e86\u3002\n\n\n\n\u65e0\u5411\u56fe $G=(V,E)$\uff0c\u5176\u4e2d $V={a,b,c,d,e,f}$\uff0c$E={(a,b),(a,e),(a,c),(b,e),(c,f),(f,d),(e,d)}$\u3002\u5bf9\u8be5\u56fe\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u5f97\u5230\u7684\u9876\u70b9\u5e8f\u5217\u6b63\u786e\u7684\u662f\uff08\uff09\u3002\nA\u3001$a,b,e,c,d,f$\nB\u3001$a,c,f,e,b,d$\nC\u3001$a,e,b,c,f,d$\nD\u3001$a,b,e,d,f,c$\n\n\n\u7b54\u6848\uff1aD\n\u89e3\u6790\uff1a\u56fe\u753b\u51fa\u6765\u662f\u8fd9\u6837\u7684\uff1a\ngraph TD;\na---b\na---e\na---c\nb---e\nc---f\nf---d\ne---d\n\u9700\u8981\u6ce8\u610f\u7684\u662f C \u9009\u9879\uff0c$a,e,b,c,f,d$\uff0c\u5176\u5b9e\u5f53 $b$ \u70b9\u201c\u65e0\u8def\u53ef\u8d70\u201d\u65f6\u5e76\u975e\u4f1a\u8d70\u56de $a$ \u70b9\uff0c\u800c\u662f\u4ece $e$ \u70b9\u7ee7\u7eed\u5411 $d$ \u70b9\u8d70\u3002\u53ea\u8981\u7a0d\u5fae\u6ce8\u610f\u4e0b\u5c31\u597d\u4e86\u3002\n\n\n\n\u4e0b\u5217\u5173\u4e8e\u56fe\u7684\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff1a\nA\u3001\u6b27\u62c9\u56fe\u7684\u6bcf\u4e00\u4e2a\u9876\u70b9\u90fd\u80fd\u4f5c\u4e3a\u67d0\u6761\u6b27\u62c9\u95ed\u8ff9\u7684\u8d77\u70b9:\nB\u3001 \u4e00\u4e2a\u56fe\u6709\u6b27\u62c9\u95ed\u8ff9\u5f53\u4e14\u4ec5\u5f53\u8be5\u56fe\u6709\u96f6\u4e2a\u5947\u70b9\nC\u3001 \u82e5\u4e00\u4e2a\u65e0\u5411\u56fe\u6709\u5947\u6570\u6761\u8fb9\uff0c\u5219\u5b83\u5fc5\u7136\u4e0d\u662f\u4e8c\u5206\u56fe\nD\u3001\u82e5 G \u662f\u6c49\u5bc6\u5c14\u987f\u56fe\uff0c\u5219\u5bf9 G \u4e0a\u7684\u6c49\u5bc6\u5c14\u987f\u5708 C\uff0c\u4efb\u610f\u5220\u53bb n \u4e2a\u70b9\uff0c\u6700\u591a\u53ef\u5c06 C \u5212\u5206\u4e3a n \u6bb5\uff0c\u53cd\u4e4b\u4ea6\u7136\n\n\n\n\u7b54\u6848\uff1aA\n\n\n\u89e3\u6790\uff1a\n\u8fd9\u79cd\u5b9a\u4e49\u9898\u76ee\u6700\u70e6\u4e86\u2026\u2026\nB \u56e0\u4e3a\u6ca1\u6709\u8bf4\u662f\u8054\u901a\u56fe\uff0c\u6240\u4ee5\u662f\u9519\u7684\uff08\u5751\u70b9\uff09\u3002\nC \u663e\u7136\u662f\u9519\u7684\uff0c\u4e8c\u5206\u56fe\u7684\u5b9a\u4e49\u662f\u201c\u9876\u70b9\u96c6V\u53ef\u5206\u5272\u4e3a\u4e24\u4e2a\u4e92\u4e0d\u76f8\u4ea4\u7684\u5b50\u96c6\uff0c\u5e76\u4e14\u56fe\u4e2d\u6bcf\u6761\u8fb9\u4f9d\u9644\u7684\u4e24\u4e2a\u9876\u70b9\u90fd\u5206\u5c5e\u4e8e\u8fd9\u4e24\u4e2a\u4e92\u4e0d\u76f8\u4ea4\u7684\u5b50\u96c6\uff0c\u4e24\u4e2a\u5b50\u96c6\u5185\u7684\u9876\u70b9\u4e0d\u76f8\u90bb\u3002\u201d\nD \u4e5f\u662f\u9519\u7684\uff0c\u524d\u9762\u534a\u53e5\u662f\u5bf9\u7684\uff0c\u9519\u5c31\u9519\u5728\u201c\u53cd\u4e4b\u4ea6\u7136\u201d\uff0c\u8fd9\u4e2a\u4e8b\u5b9e\u7684\u9006\u547d\u9898\u663e\u7136\u662f\u4e0d\u6210\u7acb\u7684\u3002\n\n\u8865\u5145\u4e00\u4e0b\u76f8\u5173\u6982\u5ff5\uff1a\n\n\u54c8\u5bc6\u987f\u56fe\uff08Hamiltonian path \u6216 Traceable path\uff09\u662f\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u7531\u5929\u6587\u5b66\u5bb6\u54c8\u5bc6\u987f\u63d0\u51fa\uff0c\u7531\u6307\u5b9a\u7684\u8d77\u70b9\u524d\u5f80\u6307\u5b9a\u7684\u7ec8\u70b9\uff0c\u9014\u4e2d\u7ecf\u8fc7\u6240\u6709\u5176\u4ed6\u8282\u70b9\u4e14\u53ea\u7ecf\u8fc7\u4e00\u6b21\u3002\u5728\u56fe\u8bba\u4e2d\u662f\u6307\u542b\u6709\u54c8\u5bc6\u987f\u56de\u8def\u7684\u56fe\uff0c\u95ed\u5408\u7684\u54c8\u5bc6\u987f\u8def\u5f84\u79f0\u4f5c\u54c8\u5bc6\u987f\u56de\u8def\uff08Hamiltonian cycle\uff09\uff0c\u542b\u6709\u56fe\u4e2d\u6240\u6709\u9876\u70b9\u7684\u8def\u5f84\u79f0\u4f5c\u54c8\u5bc6\u987f\u8def\u5f84\u3002\n\n\n\n\u6570\u636e\u7ed3\u6784\n\n\n\u82e5\u5df2\u77e5\u4e00\u4e2a\u6808\u7684\u5165\u6808\u987a\u5e8f $1,2,3,\\dots,n$\uff0c\u5176\u8f93\u51fa\u5e8f\u5217\u4e3a $P_1,P_2,P_3,\\dots,P_n$\uff08\u5b83\u662f\u8f93\u5165\u5e8f\u5217\u7684\u4e00\u4e2a\u6392\u5e8f\uff09\uff0c\u5219\u5728\u8f93\u51fa\u5e8f\u5217\u4e2d\u53ef\u80fd\u51fa\u73b0\u7684\u60c5\u51b5\u662f\uff08\uff09\nA\u3001$Pj","tags":[{"name":"OI\u5b66\u4e60","slug":"OI\u5b66\u4e60","permalink":"https:\/\/skywt.cn\/tag\/OI%E5%AD%A6%E4%B9%A0\/"},{"name":"OI\u7b97\u6cd5","slug":"OI\u7b97\u6cd5","permalink":"https:\/\/skywt.cn\/tag\/OI%E7%AE%97%E6%B3%95\/"},{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"}],"categories":[]},{"title":"gdb \u8c03\u8bd5\u7684\u4f7f\u7528","date":"2018-09-27T10:03:29+08:00","path":"https:\/\/skywt.cn\/posts\/gdb","text":"Linux \u4e0b\u6ca1\u6709 Dev-cpp\uff0c\u6bcf\u6b21\u9047\u5230\u60f3\u8981\u8c03\u8bd5\u7684\u4ee3\u7801\u5c31\u662f\u5760\u75db\u82e6\u7684\u3002\u6240\u4ee5\u6211\u4eec\u8fd8\u662f\u5f97\u5b66\u70b9 gdb \u8c03\u8bd5\u7684\u547d\u4ee4\u3002\n\u9996\u5148\u6267\u884c g++ a.cpp -g\uff0c\u751f\u6210 a.out \u6216\u8005 a.exe\uff1b\n\u6267\u884c gdb a.out\uff0c\u51fa\u73b0\u4e00\u5927\u6bb5\u4ecb\u7ecd\uff0c\u8fdb\u5165 gdb \u8c03\u8bd5\u3002\n\n\nl \uff08list\uff09\u8f93\u51fa\u7a0b\u5e8f\uff08\u6bcf\u6b21\u8f93\u51fa 10 \u884c\u7a0b\u5e8f\uff0c\u5982\u679c\u8981\u7ee7\u7eed\u8f93\u51fa\u53ef\u4ee5\u7ee7\u7eedl\uff09\nr \uff08run\uff09\u8fd0\u884c\u8c03\u8bd5\u7a0b\u5e8f\uff0c\u5982\u679c\u8bbe\u7f6e\u4e86\u65ad\u70b9\u4f1a\u663e\u793a\u73b0\u5728\u8fd0\u884c\u5230\u54ea\u91cc\uff0c\u5982\u679c\u6ca1\u6709\u5219\uff08\u53ef\u80fd\uff09\u4f1a\u76f4\u63a5\u663e\u793a\u51fa\u7a0b\u5e8f RE \u7684\u5730\u65b9\nb 10 \uff08breakpoint\uff09\u8bbe\u7f6e\u65ad\u70b9\uff08Breakpoint\uff09\u5728\u7b2c 10 \u884c\np a \uff08print\uff09\u8f93\u51fa a \u53d8\u91cf\u7684\u503c\nc \uff08continue\uff09\u5728\u7a0b\u5e8f\u5728\u65ad\u70b9\u5904\u505c\u4e0b\u65f6\u4f7f\u5176\u7ee7\u7eed\nn \uff08next\uff09\u4e0b\u4e00\u6b65\uff0c\u5355\u6761\u8bed\u53e5\u6267\u884c\nbt \u67e5\u770b\u51fd\u6570\u5806\u6808\n\u76f4\u63a5\u56de\u8f66\uff1a\u91cd\u590d\u4e0a\u6b21\u547d\u4ee4\nq \uff08quit\uff09\u9000\u51fa gdb\n\n\u5f53\u7136\u8fd8\u662f\u8f93\u51fa\u76d1\u6d4b\u548c gdb \u8c03\u8bd5\u914d\u5408\u4f7f\u7528\u6548\u679c\u66f4\u4f73\uff5e","tags":[{"name":"OI\u5b66\u4e60","slug":"OI\u5b66\u4e60","permalink":"https:\/\/skywt.cn\/tag\/OI%E5%AD%A6%E4%B9%A0\/"},{"name":"\u65e5\u5e38\u641e\u673a","slug":"\u65e5\u5e38\u641e\u673a","permalink":"https:\/\/skywt.cn\/tag\/%E6%97%A5%E5%B8%B8%E6%90%9E%E6%9C%BA\/"},{"name":"\u9ed1\u79d1\u6280","slug":"\u9ed1\u79d1\u6280","permalink":"https:\/\/skywt.cn\/tag\/%E9%BB%91%E7%A7%91%E6%8A%80\/"},{"name":"Linux","slug":"Linux","permalink":"https:\/\/skywt.cn\/tag\/Linux\/"},{"name":"\u5e38\u7528Linux\u547d\u4ee4","slug":"\u5e38\u7528Linux\u547d\u4ee4","permalink":"https:\/\/skywt.cn\/tag\/%E5%B8%B8%E7%94%A8Linux%E5%91%BD%E4%BB%A4\/"}],"categories":[]},{"title":"\u6570\u4f4d DP \u5165\u95e8\uff1aHDU 3555 Bomb","date":"2018-09-27T13:40:40+08:00","path":"https:\/\/skywt.cn\/posts\/hdu-3555","text":"\u7b80\u5355\u6765\u8bf4\uff0c\u6570\u4f4d DP \u5927\u6982\u5c31\u662f\u628a\u4e00\u4e2a\u6570\u5b57\u62c6\u5f00\u6309\u4f4d\u8fdb\u884c DP \u7684\u4e00\u79cd\u601d\u60f3\u3002\nHDU 3555 Bomb\n\nThe counter-terrorists found a time bomb in the dust. But this time the terrorists improve on the time bomb. The number sequence of the time bomb counts from 1 to N. If the current number sequence includes the sub-sequence &quot;49&quot;, the power of the blast would add one point.\nNow the counter-terrorist knows the number N. They want to know the final points of the power. Can you help them?\n\n\nHint\n\u6570\u4f4d DP \u7684\u5178\u578b\u5165\u95e8\u9898\uff0c\u89e3\u6cd5\u5f88\u591a\u3002\nAnalysis #1\n\u8fd9\u9898\u201c\u5305\u542b 49 \u7684\u6570\u5b57\u6570\u91cf\u201d\u6bd4\u8f83\u96be\u6784\u9020\uff0c\u6240\u4ee5\u6211\u4eec\u51b3\u5b9a\u6784\u9020\u201c\u4e0d\u5305\u542b 49 \u7684\u6570\u5b57\u6570\u91cf\u201d\u3002\nDP \u6784\u9020\nF[i][j]\uff1a\u6700\u9ad8\u4f4d\u4e3a j \u7684 i \u4f4d\u6570\u5b57\u4e2d\u4e0d\u5305\u542b 49 \u7684\u6570\u5b57\u6570\u91cf\u3002\n$$F(i,j) = \\sum_{k\\in [0,9]}^{k \\not = 9 \\text{\u6216} j \\not = 4} F(i-1,k)$$\ninline void make_dp(){\n    for (int i=0;i&lt;=9;i++) f[1][i]=1;\n    for (int i=2;i&lt;=22;i++)\n    for (int j=0;j&lt;=9;j++)\n    for (int k=0;k&lt;=9;k++){\n        if (j==4&amp;&amp;k==9) continue;\n        f[i][j]+=f[i-1][k];\n    }\n}\n\u7b54\u6848\u7d2f\u8ba1\n\u9996\u5148\u5c06\u6570\u5b57\u6309\u4f4d\u5206\u79bb\uff0c\u7136\u540e\u6309\u4f4d\u7edf\u8ba1\u3002\n\u5bf9\u4e8e\u4ece\u9ad8\u5230\u4f4e\u7b2c $i$ \u4f4d\u6570\u5b57 $A_i$\uff0c\u9996\u5148\u80af\u5b9a\u8981\u7d2f\u8ba1\u4e0a $\\sum_{j=0}^{j < A_i} F(i,j)$\uff0c\u4e5f\u5c31\u662f\u8fd9\u4e00\u4f4d\u5c0f\u4e8e $A_i$ \u7684\u6570\u5b57\u6570\u91cf\u3002\u81f3\u4e8e\u8fd9\u4e00\u4f4d\u7b49\u4e8e $A_i$ \u7684\u60c5\u51b5\uff0c\u5c31\u662f\u4e4b\u540e\u5904\u7406\u7684\u4e86\u3002\u6240\u4ee5\u9700\u8981\u5224\u65ad\u4e00\u4e0b\uff1a\u5982\u679c\u51fa\u73b0\u4e86 49 \u8fd9\u4e2a\u6570\u5b57\u5c31\u9000\u51fa\u3002\ninline int calculate(int x){\n    int ret=0;\n    spread_number(x);\n    for (int i=a[0];i&gt;=1;i--){\n        for (int j=0;j&lt;a[i];j++) ret+=f[i][j];\n        if (a[i]==9&amp;&amp;a[i+1]==4) break;\n    }\n    return ret;\n}\n\u4ee3\u7801\n\/*\n * Vjudge CONTEST257056 \u6570\u4f4dDP\u4e13\u9898\u7ec3\u4e60\n * B - Bomb\n * 180927 By SkyWT\n *\/\n\n#include&lt;cstdio&gt;\n#include&lt;iostream&gt;\n#include&lt;cstring&gt;\n#include&lt;string&gt;\n#include&lt;cmath&gt;\n#include&lt;algorithm&gt;\n#include&lt;vector&gt;\n#include&lt;queue&gt;\n#include&lt;stack&gt;\n#include&lt;map&gt;\n\nusing namespace std;\n\n#define memset_clear(_) memset(_,0,sizeof(_))\n#define memset_clear_tre(_) memset(_,1,sizeof(_))\n#define memset_clear_reg(_) memset(_,-1,sizeof(_))\n#define memset_clear_max(_) memset(_,0x3f,sizeof(_))\n#define memset_clear_min(_) memset(_,0x80,sizeof(_))\n#define sqr(_) ((_)*(_))\n\n#define write(_) cout&lt;&lt;#_&lt;&lt;\" = \"&lt;&lt;_&lt;&lt;endl\n#define write_2(_,__) cout&lt;&lt;#_&lt;&lt;\" = \"&lt;&lt;_&lt;&lt;\" , \"&lt;&lt;#__&lt;&lt;\" = \"&lt;&lt;__&lt;&lt;endl\n#define write_3(_,__,___) cout&lt;&lt;#_&lt;&lt;\" = \"&lt;&lt;_&lt;&lt;\" , \"&lt;&lt;#__&lt;&lt;\" = \"&lt;&lt;__&lt;&lt;\" , \"&lt;&lt;#___&lt;&lt;\" = \"&lt;&lt;___&lt;&lt;endl\n\n#define int long long\n\ninline int read(){\n    int ret=0,f=1;char ch=getchar();\n    while (ch&lt;'0'||ch&gt;'9'){if (ch=='-') f=-1;ch=getchar();}\n    while (ch&gt;='0'&amp;&amp;ch&lt;='9') ret=ret*10+ch-'0',ch=getchar();\n    return ret*f;\n}\n\nint T,n;\nint f[25][11],a[25];\n\ninline void make_dp(){\n    for (int i=0;i&lt;=9;i++) f[1][i]=1;\n    for (int i=2;i&lt;=22;i++)\n    for (int j=0;j&lt;=9;j++)\n    for (int k=0;k&lt;=9;k++){\n        if (j==4&amp;&amp;k==9) continue;\n        f[i][j]+=f[i-1][k];\n    }\n}\n\ninline void spread_number(int x){\n    memset_clear(a);\n    while (x) a[++a[0]]=x%10,x\/=10;\n}\n\ninline int calculate(int x){\n    int ret=0;\n    spread_number(x);\n    for (int i=a[0];i&gt;=1;i--){\n        for (int j=0;j&lt;a[i];j++) ret+=f[i][j];\n        if (a[i]==9&amp;&amp;a[i+1]==4) break;\n    }\n    return ret;\n}\n\nsigned main(){\n    make_dp();\n    T=read();\n    while (T--){\n        n=read();\n        printf(\"%lld\\n\",n+1-calculate(n+1));\n    }\n    return 0;\n}\nAnalysis #2\n\u8fd9\u79cd\u65b9\u6cd5\u76f8\u8f83\u4e0a\u4e00\u79cd\uff0c\u7a7a\u95f4\u548c\u65f6\u95f4\u4e0a\u53ea\u8fbe\u5230\u4e86\u5e38\u6570\u7684\u4f18\u5316\u3002\u4e0d\u8fc7\u8fd8\u662f\u503c\u5f97\u7814\u7a76\u4e0b\uff5e\nDP \u6784\u9020\n\u8fd9\u4e2a DP \u7684\u5b9a\u4e49\u6bd4\u521a\u624d\u7684\u8981\u7b80\u5355\u4e00\u70b9\uff1a\n\nF[i][0]\uff1a\u6570\u5b57\u957f\u5ea6\u4e3a i\uff0c\u9996\u4f4d\u4e3a\u4efb\u610f\u6570\u5b57\uff0c\u4e0d\u5305\u542b 49 \u7684\u6570\u5b57\u6570\u91cf\nF[i][1]\uff1a\u6570\u5b57\u957f\u5ea6\u4e3a i\uff0c\u9996\u4f4d\u4e3a 9\uff0c\u4e0d\u5305\u542b 49 \u7684\u6570\u5b57\u6570\u91cf\nF[i][2]\uff1a\u6570\u5b57\u957f\u5ea6\u4e3a i\uff0c\u5305\u542b 49 \u7684\u6570\u91cf\n\n\u8f6c\u79fb\u65b9\u7a0b\u5982\u4e0b\uff1a\n$$F(i,0)=F(i-1,0)\\ast 10-F(i-1,1)$$\n\uff08\u5f88\u597d\u7406\u89e3\uff0c\u8981\u51cf\u53bb\u51fa\u73b0\u4e86 49  \u7684\u60c5\u51b5\uff09\n$$F(i,1)=F(i-1,0)$$\n$$F(i,2)=F(i-1,2)\\ast 10+F(i-1,1)$$\n\uff08\u8981\u52a0\u4e0a\u8fd9\u4f4d\u4e3a 4\u3001\u540e\u4e00\u4f4d\u4e3a 9 \u7684\u60c5\u51b5\uff09\n\u7b54\u6848\u7d2f\u8ba1\n\u7b54\u6848\u7684\u7d2f\u8ba1\u548c\u4e0a\u9762\u89e3\u6cd5\u5dee\u4e0d\u591a\u3002\nAnalysis #3\n\u8fd9\u9898\u5176\u5b9e\u8fd8\u53ef\u4ee5\u7528\u8bb0\u5fc6\u5316\u641c\u7d22\u3002\u6570\u4f4d DP \u7528\u8bb0\u5fc6\u5316\u641c\u7d22\u89e3\u51b3\u4f1a\u5f88\u65b9\u4fbf\uff5e\n\u4ee3\u7801\n\u4ee5\u4e0b\u662f HEXU \u5927\u4f6c\u7684\u4ee3\u7801\u2026\u2026\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\nusing namespace std;\n#define ll long long\nconst int N = 100 + 5;\n\nll f[N][N];\nint digit[N];\n\nll dfs(int pos, int flag, int limit) {\n    if (pos &lt;= 0) return 1;\n    if (! limit &amp;&amp; f[pos][flag] != -1) return f[pos][flag];\n    int up = limit ? digit[pos] : 9; ll cur = 0;\n\n    for (int i = 0; i &lt;= up; ++ i) {\n        if (flag == 1 &amp;&amp; i == 9) continue;\n        cur += dfs(pos - 1, i == 4, limit &amp;&amp; i == up);\n    }\n    return limit ? cur : f[pos][flag] = cur;\n}\n\nll Solve(ll x) {\n    memset(digit, 0, sizeof(digit)); int len = 0;\n    for (; x; x \/= 10) digit[++ len] = x % 10;\n    return dfs(len, 0, 1);\n}\n\nint main(void) {\n    memset(f, -1, sizeof(f));\n    int T; scanf(\"%d\", &amp;T);\n    while (T --) {\n        ll r; scanf(\"%lld\", &amp;r);\n        printf(\"%lld\\n\", r + 1 - Solve(r));\n    }\n    return 0;\n}","tags":[{"name":"OI\u5b66\u4e60","slug":"OI\u5b66\u4e60","permalink":"https:\/\/skywt.cn\/tag\/OI%E5%AD%A6%E4%B9%A0\/"},{"name":"OI\u7b97\u6cd5","slug":"OI\u7b97\u6cd5","permalink":"https:\/\/skywt.cn\/tag\/OI%E7%AE%97%E6%B3%95\/"},{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u52a8\u6001\u89c4\u5212\u7c7b\u578b\u9898","slug":"\u52a8\u6001\u89c4\u5212\u7c7b\u578b\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB%E5%9E%8B%E9%A2%98\/"},{"name":"\u6570\u4f4dDP","slug":"\u6570\u4f4dDP","permalink":"https:\/\/skywt.cn\/tag\/%E6%95%B0%E4%BD%8DDP\/"}],"categories":[]},{"title":"\u9ad8\u65af\u6d88\u5143\u5165\u95e8","date":"2018-09-28T07:36:15+08:00","path":"https:\/\/skywt.cn\/posts\/gaussian-elimination","text":"\u6570\u5b66\u4e0a\uff0c\u9ad8\u65af\u6d88\u5143\u6cd5\uff08Gaussian Elimination\uff09\uff0c\u662f\u7ebf\u6027\u4ee3\u6570\u4e2d\u7684\u4e00\u4e2a\u7b97\u6cd5\uff0c\u53ef\u7528\u6765\u4e3a\u7ebf\u6027\u65b9\u7a0b\u7ec4\u6c42\u89e3\uff0c\u6c42\u51fa\u77e9\u9635\u7684\u79e9\uff0c\u4ee5\u53ca\u6c42\u51fa\u53ef\u9006\u65b9\u9635\u7684\u9006\u77e9\u9635\u3002\u5f53\u7528\u4e8e\u4e00\u4e2a\u77e9\u9635\u65f6\uff0c\u9ad8\u65af\u6d88\u5143\u6cd5\u4f1a\u4ea7\u751f\u51fa\u4e00\u4e2a\u884c\u68af\u9635\u5f0f\u3002\n\u89e3\u591a\u5143\u65b9\u7a0b\u7ec4\u7279\u522b\u65b9\u4fbf\u3002\n\n\u4ece\u65b9\u7a0b\u7ec4\u5230\u77e9\u9635\n\u5f88\u591a\u9898\u76ee\u91cc\u6211\u4eec\u4f1a\u9047\u5230\u4e00\u79cd\u5947\u602a\u7684 DP\uff0c\u5c31\u662f\u4f60\u53ea\u77e5\u9053 DP \u91cc\u5404\u4e2a\u72b6\u6001\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u4f46\u662f\u4e0d\u77e5\u9053\u5176\u4e2d\u4efb\u610f\u4e00\u4e2a\u7684\u503c\uff0c\u5e76\u4e14\u4e00\u65e6\u77e5\u9053\u4efb\u610f\u4e00\u4e2a\u7684\u503c\u5176\u5b9e\u5c31\u53ef\u4ee5\u6c42\u51fa\u6240\u6709\u2026\u2026\u8fd9\u79cd\u5c34\u5c2c\u7684\u60c5\u51b5\u5176\u5b9e\u53ef\u4ee5\u8868\u793a\u6210\u8fd9\u6837\u7684\u591a\u5143\u65b9\u7a0b\u7ec4\uff1a\n$$\n\\begin{alignedat}{3}\n2&x+ &3&y+ &&z = 7 \\\\\n3&x+ &4&y+ &&z = 10 \\\\\n&x+ &&y+ &5&z = 3\n\\end{alignedat}\n$$\n\u5f88\u663e\u7136\uff0c\u4e0a\u9762\u8fd9\u4e2a\u65b9\u7a0b\u7ec4\u662f\u6709\u89e3\u7684\uff0c\u5bb9\u6613\u89e3\u5f97\uff1a\n$$\n\\begin{cases}\nx=2 \\\\\ny=1 \\\\\nz=0\n\\end{cases}\n$$\n\u90a3\u4e48\u80fd\u4e0d\u80fd\u5f52\u7eb3\u51fa\u4e00\u79cd\u901a\u6cd5\u6765\u89e3\u51b3\u8fd9\u7c7b\u95ee\u9898\u5462\uff1f\u6211\u4eec\u9700\u8981\u7528\u5230\u9ad8\u65af\u6d88\u5143\uff08Gaussian Elimination\uff09\u3002\n\n\u6570\u5b66\u4e0a\uff0c\u9ad8\u65af\u6d88\u5143\u6cd5\uff08Gaussian Elimination\uff09\uff0c\u662f\u7ebf\u6027\u4ee3\u6570\u4e2d\u7684\u4e00\u4e2a\u7b97\u6cd5\uff0c\u53ef\u7528\u6765\u4e3a\u7ebf\u6027\u65b9\u7a0b\u7ec4\u6c42\u89e3\uff0c\u6c42\u51fa\u77e9\u9635\u7684\u79e9\uff0c\u4ee5\u53ca\u6c42\u51fa\u53ef\u9006\u65b9\u9635\u7684\u9006\u77e9\u9635\u3002\u5f53\u7528\u4e8e\u4e00\u4e2a\u77e9\u9635\u65f6\uff0c\u9ad8\u65af\u6d88\u5143\u6cd5\u4f1a\u4ea7\u751f\u51fa\u4e00\u4e2a\u884c\u68af\u9635\u5f0f\u3002\n\n\u5728\u6b64\u4e4b\u524d\uff0c\u6211\u4eec\u8fd8\u662f\u8bf7\u51fa\u6211\u4eec\u7684\u8001\u670b\u53cb\uff1a\u77e9\u9635\u3002\n\u4e0a\u9762\u7684\u65b9\u7a0b\u7ec4\uff0c\u628a\u7cfb\u6570\u62ff\u51fa\u6765\uff0c\u7528\u77e9\u9635\u8868\u793a\u5c31\u662f\uff1a\n$$\n\\begin{bmatrix}\n2 & 3 & 1 & 7 \\\\\n3 & 4 & 1 & 10 \\\\\n1 & 1 & 5 & 3\n\\end{bmatrix}\n$$\n\u53ef\u4ee5\u628a\u8fd9\u4e2a\u77e9\u9635\u5206\u5f00\u770b\uff1a\u5de6\u8fb9\u4e00\u4e2a 3\u00d73 \u7684\u77e9\u9635\u548c\u53f3\u8fb9\u4e00\u5217\u3002\n\u6211\u4eec\u9700\u8981\u628a\u5de6\u8fb9\u7684 3\u00d73 \u77e9\u9635\u901a\u8fc7\u201c\u67d0\u79cd\u795e\u79d8\u7684\u53d8\u6362\u201d\u5316\u6210\u5982\u4e0b\u6240\u793a\u7684\u5355\u4f4d\u77e9\u9635\uff0c\u8fd9\u65f6\u5019\u53f3\u8fb9\u4e00\u5217\u7684\u4e09\u4e2a\u503c\u5c31\u662f $x,y,z$ \u5206\u522b\u5bf9\u5e94\u7684\u503c\u4e86\u3002\n$$\n\\begin{bmatrix}\n1 & 0 & 0 & 2 \\\\\n0 & 1 & 0 & 1\\\\\n0 & 0 & 1 & 0\n\\end{bmatrix}\n$$\n\u8fd9\u4e2a\u77e9\u9635\u53eb\u505a\u201c\u7b80\u5316\u884c\u68af\u9635\u5f0f\u201d\u3002\n\u6d88\u5143\n\u4ece\u524d\u7684\u6d88\u5143\n\u90a3\u4e48\u5982\u4f55\u8fdb\u884c\u201c\u795e\u79d8\u7684\u53d8\u6362\u201d\u5462\uff1f\u56de\u60f3\u4e00\u4e0b\u6211\u4eec\u5728\u4e0d\u77e5\u9053\u77e9\u9635\u4e4b\u524d\u8fd9\u4e2a\u65b9\u7a0b\u7ec4\u662f\u600e\u4e48\u89e3\u7684\uff1a\n$$\n\\begin{alignedat}{3}\n2&x+ &3&y+ &&z = 7 \\\\\n3&x+ &4&y+ &&z = 10 \\\\\n&x+ &&y+ &5&z = 3\n\\end{alignedat}\n$$\n\u9996\u5148\uff0c\u2460\u5f0f\u00d75-\u2462\u5f0f\uff0c\u2461\u5f0f\u00d75-\u2462\u5f0f\uff0c\u8fd9\u6837\u53ef\u4ee5\u6d88\u53bb $z$ \u4e86\u3002\u5f97\u5230\uff1a\n$$\n\\begin{alignedat}{3}\n9&x+ &14&y = 32 \\\\\n14&x+ &19&y = 47\n\\end{alignedat}\n$$\n\u63a5\u4e0b\u6765\u6211\u4eec\u7ee7\u7eed\u6d88\u5143\uff0c\u2461\u5f0f\u00d7$\\displaystyle \\frac {14} {19}$-\u2460\u5f0f\u5f97\u5230\uff1a\n$$\\frac {14x* 14} {19}-9x=47*\\frac {14} {19}-32$$\n\u7b80\u5316\u4e00\u4e0b\u53ef\u4ee5\u5f97\u5230\uff1a\n$$x=2$$\n\u592a\u68d2\u4e86\uff01\u6211\u4eec\u5f97\u51fa\u4e86\u4e00\u4e2a\u89e3\uff01\u5176\u4ed6\u7684 $y,z$ \u90fd\u53ef\u4ee5\u63a8\u51fa\u6765\u4e86\u3002\n\u5176\u5b9e\u4e0a\u9762\u7684\u8fd9\u79cd\u65b9\u6cd5\u5f52\u7eb3\u4e00\u4e0b\u5c31\u662f\u9ad8\u65af\u6d88\u5143\u3002\n\u77e9\u9635\u4e0a\u7684\u9ad8\u65af\u6d88\u5143\n\u9ad8\u65af\u6d88\u5143\u8fd9\u4e2a\u65b9\u6cd5\u65e0\u975e\u5c31\u662f\u628a\u4e0a\u9762\u90a3\u4e2a\u5957\u5230\u77e9\u9635\u91cc\u3002\u524d\u9762\u5df2\u7ecf\u63d0\u5230\uff0c\u628a\u5de6\u8fb9\u7684 3\u00d73 \u77e9\u9635\u53d8\u6362\u6210\u5355\u4f4d\u77e9\u9635\uff0c\u6784\u9020\u201c\u7b80\u5316\u884c\u68af\u9635\u5f0f\u201d\u3002\u5177\u4f53\u5982\u4f55\u64cd\u4f5c\u5462\uff1f\n\u5176\u5b9e\u548c\u4e0a\u9762\u51e0\u4e2a\u5f0f\u5b50\u7684\u53d8\u6362\u4e00\u6a21\u4e00\u6837\u2026\u2026\n\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\n$$\n\\begin{bmatrix}\n2 & 3 & 1 & 7 \\\\\n3 & 4 & 1 & 10 \\\\\n1 & 1 & 5 & 3\n\\end{bmatrix}\n$$\n\u9996\u5148\uff0c\u7b2c\u4e00\u884c\u00d75-\u7b2c\u4e09\u884c\uff0c\u7b2c\u4e8c\u884c\u00d75-\u7b2c\u4e09\u884c\uff0c\u8fd9\u6837\u53ef\u4ee5\u8ba9\u7b2c\u4e00\u3001\u7b2c\u4e8c\u884c\u7684\u7b2c\u4e09\u4e2a\u6570\u5b57\u90fd\u53d8\u62100\u3002\u5f97\u5230\uff1a\n$$\n\\begin{bmatrix}\n9 & 14 & 1 & 32 \\\\\n14 & 19 & 1 & 47 \\\\\n1 & 1 & 5 & 3\n\\end{bmatrix}\n$$\n\u7136\u540e\u7b2c\u4e8c\u884c\u00d7$\\displaystyle \\frac {14} {19}$-\u7b2c\u4e00\u884c\u5f97\u5230\uff1a\n$$\n\\begin{bmatrix}\n9 & 14 & 0 & 32 \\\\\n25 & 0 & 0 & 50 \\\\\n1 & 1 & 5 & 3\n\\end{bmatrix}\n$$\n\u5f53\u7136\u8fd9\u65f6\u5019\u867d\u7136\u53ef\u4ee5\u77e5\u9053 $x=2$\uff0c\u4f46\u662f\u8fd9\u5e76\u4e0d\u662f\u6211\u4eec\u6240\u60f3\u8981\u7684\u201c\u7b80\u5316\u884c\u68af\u9635\u5f0f\u201d\u3002\u6211\u4eec\u53ef\u4ee5\u7ee7\u7eed\uff1a\u4ea4\u6362\u7b2c\u4e00\u884c\u548c\u7b2c\u4e8c\u884c\uff0c\u540c\u65f6\u5bf9\u7b2c\u4e00\u884c\u53ef\u4ee5\u5904\u7406\u4e0b\uff1a\n$$\n\\begin{bmatrix}\n1 & 0 & 0 & 2 \\\\\n9 & 14 & 0 & 32 \\\\\n1 & 1 & 5 & 3\n\\end{bmatrix}\n$$\n\u7b2c\u4e8c\u884c\u53ef\u4ee5\u51cf\u53bb\u7b2c\u4e00\u884c\u00d79\uff0c\u987a\u4fbf\u5316\u7b80\u5f97\u5230\uff1a\n$$\n\\begin{bmatrix}\n1 & 0 & 0 & 2 \\\\\n0 & 1 & 0 & 1 \\\\\n1 & 1 & 5 & 3\n\\end{bmatrix}\n$$\n\u7b2c\u4e09\u884c\u540c\u65f6\u51cf\u53bb\u7b2c\u4e00\u884c\u3001\u7b2c\u4e8c\u884c\uff0c\u5f97\u5230\uff1a\n$$\n\\begin{bmatrix}\n1 & 0 & 0 & 2 \\\\\n0 & 1 & 0 & 1 \\\\\n0 & 0 & 1 & 0\n\\end{bmatrix}\n$$\n\u5927\u529f\u544a\u6210\uff01\u6211\u4eec\u5f97\u5230\u4e86 $x=2,y=1,z=0$\u3002\n\u795e\u79d8\u7684\u53d8\u6362\u64cd\u4f5c\n\u4ece\u4e0a\u9762\u7684\u4f8b\u5b50\u53ef\u4ee5\u770b\u51fa\uff0c\u548c\u89e3\u65b9\u7a0b\u7ec4\u7c7b\u4f3c\uff0c\u6211\u4eec\u7528\u5230\u4e86\u4ee5\u4e0b\u51e0\u79cd\u64cd\u4f5c\uff1a\n\n\u4ea4\u6362\u77e9\u9635\u7684\u67d0\u4e24\u884c\uff1b\n\u5c06\u67d0\u4e00\u884c\u7ffb\u500d\uff1b\n\u5c06\u4e00\u884c\u51cf\u53bb\u53e6\u4e00\u884c\u3002\n\n\u53ef\u4ee5\u8bc1\u660e\uff0c\u901a\u8fc7\u8fd9\u6837\u7684\u53d8\u6362\uff0c\u77e9\u9635\u8868\u8fbe\u7684\u5173\u7cfb\u4ecd\u7136\u4e0d\u53d8\u3002\n\u5947\u602a\u7684\u60c5\u51b5\uff1f\n\u6709\u65f6\u5019\u5f97\u5230\u7684\u77e9\u9635\u4f1a\u662f\u8fd9\u6837\u7684\uff1a\n$$\n\\begin{bmatrix}\n1 & 0 & 0 & 2 \\\\\n0 & 1 & 0 & 1 \\\\\n0 & 0 & 0 & 0\n\\end{bmatrix}\n$$\n\u6700\u540e\u4e00\u884c\u5168\u90fd\u662f 0\uff0c\u4f3c\u4e4e\u96be\u4ee5\u5316\u6210\u7b80\u5316\u884c\u68af\u9635\u5f0f\u3002\u8fd9\u5c31\u8bf4\u660e $z$ \u8fd9\u4e2a\u672a\u77e5\u6570\u6709\u65e0\u7a77\u591a\u4e2a\u89e3\u3002\n\u7c7b\u4f3c\u5730\uff0c\u5982\u679c\u662f\u8fd9\u6837\u7684\uff1a\n$$\n\\begin{bmatrix}\n1 & 0 & 0 & 2 \\\\\n0 & 1 & 0 & 1 \\\\\n0 & 0 & 0 & 5\n\\end{bmatrix}\n$$\n\u663e\u7136\uff0c$z$ \u65e0\u89e3\u3002","tags":[{"name":"OI\u5b66\u4e60","slug":"OI\u5b66\u4e60","permalink":"https:\/\/skywt.cn\/tag\/OI%E5%AD%A6%E4%B9%A0\/"},{"name":"OI\u7b97\u6cd5","slug":"OI\u7b97\u6cd5","permalink":"https:\/\/skywt.cn\/tag\/OI%E7%AE%97%E6%B3%95\/"},{"name":"\u6570\u8bba","slug":"\u6570\u8bba","permalink":"https:\/\/skywt.cn\/tag\/%E6%95%B0%E8%AE%BA\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"\u77e9\u9635\u4e58\u6cd5\u5728\u52a8\u6001\u89c4\u5212\u4e2d\u7684\u5e94\u7528","date":"2018-10-02T18:54:50+08:00","path":"https:\/\/skywt.cn\/posts\/matrix-multiply-in-dp","text":"$$\n\\begin{bmatrix}\nx_{11} & x_{12} & x_{13} \\\\\nx_{21} & x_{22} & x_{23} \\\\\nx_{31} & x_{32} & x_{33}\n\\end{bmatrix}\n$$\n\n\u6bcf\u589e\u52a0\u4e00\u4e2a\u7ef4\u5ea6\uff0c\u4e16\u754c\u4fbf\u4f1a\u589e\u52a0\u65e0\u9650\u7684\u7f8e\u611f\u3002\n\n\n\u4ece Fibonacci \u6570\u5217\u5f00\u59cb\n\u77e9\u9635\u4e58\u6cd5\u5e94\u7528\u7684\u5165\u95e8\u9898\u3002\n\u5982\u679c\u628a $F_n$ \u653e\u5728\u77e9\u9635\u91cc\uff0c\u6784\u9020\u51fa\u4e00\u4e2a 1\u00d72 \u7684\u77e9\u9635 $\\begin{bmatrix}  F_{n-1} & F_{n-2}\\end{bmatrix}$\uff0c\u5c31\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u8f6c\u79fb\u77e9\u9635\uff1a\n$$\n\\begin{bmatrix}\nF_{n-1} & F_{n-2}\n\\end{bmatrix}\n\\ast\n\\begin{bmatrix}\n1 & 1 \\\\\n1 & 0\n\\end{bmatrix} =\n\\begin{bmatrix}\nF_{n-1}+F_{n-2}  & F_{n-1}\n\\end{bmatrix} =\n\\begin{bmatrix}\nF_{n} & F_{n-1}\n\\end{bmatrix}\n$$\n\u8fd9\u91cc $\\begin{bmatrix}  1 & 1 \\\\  1 & 0\\end{bmatrix}$ \u5c31\u662f\u8f6c\u79fb\u77e9\u9635\u3002\u4e5f\u5c31\u662f\u8bf4\u53ea\u9700\u8981\u5c06\u6784\u9020\u7684 $\\begin{bmatrix}   F_{n-1} & F_{n-2}\\end{bmatrix}$ \u4e58\u4ee5\u8f6c\u79fb\u77e9\u9635\u5c31\u53ef\u4ee5\u5f97\u5230 $\\begin{bmatrix}   F_{n} & F_{n-1}\\end{bmatrix}$\u3002\u663e\u7136\u53ef\u4ee5\u7528\u5feb\u901f\u5e42\u4f18\u5316\u4e86\u3002\n\u5176\u5b9e\u4e5f\u53ef\u4ee5\u5199\u6210 4\u00d74 \u7684\u77e9\u9635\u8fdb\u884c\u63a8\u5bfc\uff1a\n$$\n\\displaystyle\n\\begin{bmatrix}\nF_{n+1} & F_n \\\\\nF_n & F_{n-1}\n\\end{bmatrix} =\n\\begin{bmatrix}\n1 & 1 \\\\\n1 & 0\n\\end{bmatrix}^n =\n\\underbrace{\n\\begin{bmatrix}\n1 & 1 \\\\\n1 & 0\n\\end{bmatrix}\n\\begin{bmatrix}\n1 & 1 \\\\\n1 & 0\n\\end{bmatrix}\\cdots\n\\begin{bmatrix}\n1 & 1 \\\\\n1 & 0\n\\end{bmatrix}\n}_ {\\text{n times}}\n$$\n\u62d3\u5c55\u4e00\u4e0b\uff1f\n\u7531\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u6269\u5c55\u4e00\u4e0b\uff1a\u5bf9\u4e8e\u8fd9\u6837\u7684\u9012\u63a8\u5f0f\uff1a\n$$F_{n}=F_{n-1}+F_{n-2}+\\dots+F_{n-k}$$\n\u6211\u4eec\u5176\u5b9e\u90fd\u53ef\u4ee5\u901a\u8fc7\u6784\u9020\u77e9\u9635\u7684\u65b9\u6cd5\u6765\u4f18\u5316\uff0c\u5feb\u901f\u8ba1\u7b97 $F_n$\u3002\n\uff08\u4e0d\u8fc7\u5f88\u591a\u7b80\u5355\u7684\u9012\u63a8\u5f0f\u4e5f\u53ef\u4ee5\u6c42\u901a\u9879\u516c\u5f0f\u2026\u2026\uff09\nPOJ 3233 Matrix Power Series\nDescription\nLink\uff1a POJ 3233 Matrix Power Series\n\nGiven a $n \u00d7 n$  matrix $A$ and a positive integer $k$, find the sum $S = A + A^2 + A^3 + \\dots + A^k$.\n$n \\leqslant 30$, $k \\leqslant 10^9$ and $m < 10^4$.\n\nHint\n\u4e00\u9053\u6bd4\u8f83\u5178\u578b\u7684\u77e9\u9635\u4e58\u6cd5\u4f18\u5316\u9012\u63a8\u7684\u9898\u76ee\u3002\u6709\u5f88\u591a\u65b9\u6cd5\u3002\nAnalysis #1\n\u5148\u628a\u77e9\u9635 $A$ \u770b\u6210\u4e00\u4e2a\u6570\u5b57\u3002\u7531\u9898\u53ef\u77e5\uff1a\n$$F(n)=A + A^2 + A^3 + \\dots + A^n$$\n\u90a3\u4e48\n$$F(n)=A \\ast F(n-1) + A$$\n\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u8f6c\u79fb\u77e9\u9635\uff1a\n$$\n\\begin{bmatrix}\nA^{n-1} & F_{n-1} \\\\\n0 & 1\n\\end{bmatrix} \\ast \n\\begin{bmatrix}\nA & A \\\\\n0 & 1\n\\end{bmatrix} =\n\\begin{bmatrix}\nA^{n} & F_{n} \\\\\n0 & 1\n\\end{bmatrix}\n$$\n\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u53d1\u73b0\uff1a\n$$\n\\begin{bmatrix}\nA & A \\\\\n0 & 1\n\\end{bmatrix} \\ast\n\\begin{bmatrix}\nA & A \\\\\n0 & 1\n\\end{bmatrix} =\n\\begin{bmatrix}\nA^2 & A^2+A \\\\\n0 & 1\n\\end{bmatrix}\n$$\n\u5219\uff1a\n$$\nS=\n\\begin{bmatrix}\nA & A \\\\\n0 & 1\n\\end{bmatrix} ^k\n$$\n\u5199\u4e00\u4e2a\u4e00\u767e\u591a\u884c\u7684\u77e9\u9635\u5957\u77e9\u9635\u5feb\u901f\u5e42\u5c31\u53ef\u4ee5\u4e86\u3002\nAnalysis #2\n\u8fd9\u662f\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u3002\n$$F(n)=A + A^2 + A^3 + \\dots + A^n$$\n\n$n$ \u4e3a\u5076\u6570\uff1a\n\n$$F(n)=A+A^2+\\dots+A^{n\/2} +A^{n\/2}\\ast F(n\/2)$$\n\n$n$ \u4e3a\u5947\u6570\uff1a\n\n$$F(n)=A\\ast F(n-1)+A$$\n\u8fd9\u6837\u5176\u5b9e\u5c31\u662f\u5206\u6cbb\uff0c\u53ef\u4ee5 $\\log k$ \u6c42\u89e3\u3002\nAnalysis #3\n\u770b\u770b $F(n)=A\\ast F(n-1)+A$ \u8fd9\u4e2a\u9012\u63a8\u5f0f\uff0c\u8003\u8651\u7528\u5b83\u63a8\u901a\u9879\u516c\u5f0f\u3002\n$$F(n)+\\lambda = A\\ast F(n-1)+A +\\lambda$$\n\uff08\u6211\u4eec\u7528 $I$ \u8868\u793a\u5355\u4f4d\u77e9\u9635\uff09\n$$F(n)+\\lambda = A \\ast (F(n-1)+I+\\frac {\\lambda} {A})$$\n\u5f97 $\\displaystyle \\lambda = I+\\frac {\\lambda} A$ \uff0c\u89e3\u5f97 $\\displaystyle \\lambda =A\\ast (A-I)^{-1}$\n$(A-I)^{-1}$ \u5c31\u662f $A-I$ \u7684\u9006\u77e9\u9635\u3002\u56e0\u4e3a\u8fd9\u4e2a\u7ed9\u4f60\u7684\u77e9\u9635\u662f $n\\ast n$ \u7684\u65b9\u9635\uff0c\u6240\u4ee5\u5176\u5b9e\u53ef\u4ee5\u76f4\u63a5\u7528\u9ad8\u65af\u6d88\u5143\u6c42\u5176\u9006\u77e9\u9635\u3002\n\u63a5\u4e0b\u6765\u4ee4 $G(n)=F(n)+A\\ast (A-I)^{-1}$\uff0c\u90a3\u4e48\n$$G(n)=A\\ast G(n-1)$$\n\u5373\n$$G(n)=A^{n-1}\\ast G(1)$$\n\u77e9\u9635\u5feb\u901f\u5e42\u5373\u53ef\u6c42\u89e3\u3002\nCode\n\u6211\u53ea\u5199\u4e86\u7b2c\u4e00\u79cd\u601d\u8def\u7684\u4ee3\u7801\u2026\u2026\n\u8fd9\u9898\u4ee3\u7801\u6709\u4e2a\u5751\u70b9\uff0c\u5982\u679c\u5168\u90fd\u5f00 long long \u4f1a\u8fc7\u4e0d\u4e86\uff0c\u5fc5\u987b\u5f00 int \u8ba9\u5176\u81ea\u7136\u6ea2\u51fa\u2026\u2026\u53ef\u80fd\u6570\u636e\u6709\u70b9\u95ee\u9898[1]\u3002\n\uff08\u4e0d\u8fc7\u8c01\u80fd\u60f3\u5230\u6709\u4eba\u5c45\u7136\u6240\u6709\u4ee3\u7801\u524d\u9762\u90fd\u52a0 #define int long long \u7684\u2026\u2026\uff09\n\/*\n * Vjudge CONTEST244508 \u77e9\u9635\u4e58\u6cd5\u4e13\u9898\u8bad\u7ec3\n * POJ 3233\n * C - Matrix Power Series\n * 180929 By SkyWT\n *\/\n\n#include&lt;cstdio&gt;\n#include&lt;iostream&gt;\n#include&lt;cstring&gt;\n#include&lt;string&gt;\n#include&lt;cmath&gt;\n#include&lt;algorithm&gt;\n#include&lt;vector&gt;\n#include&lt;queue&gt;\n#include&lt;stack&gt;\n#include&lt;map&gt;\n\nusing namespace std;\n\n#define memset_clear(_) memset(_,0,sizeof(_))\n#define memset_clear_tre(_) memset(_,1,sizeof(_))\n#define memset_clear_reg(_) memset(_,-1,sizeof(_))\n#define memset_clear_max(_) memset(_,0x3f,sizeof(_))\n#define memset_clear_min(_) memset(_,0x80,sizeof(_))\n#define sqr(_) ((_)*(_))\n\n\/\/ #define int long long\n\nconst int maxn=35;\nint n,k,tt;\n\ninline int read(){\n    int ret=0,f=1;char ch=getchar();\n    while (ch&lt;'0'||ch&gt;'9'){if (ch=='-') f=-1;ch=getchar();}\n    while (ch&gt;='0'&amp;&amp;ch&lt;='9') ret=ret*10+ch-'0',ch=getchar();\n    return ret*f;\n}\n\nstruct matrix{\n    int a[maxn][maxn];\n    void init(){ \/\/ \u6784\u9020\u4e00\u4e2a\u5355\u4f4d\u77e9\u9635\n        memset(a,0,sizeof(a));\n        for (int i=0;i&lt;n;i++) a[i][i]=1;\n    }\n    void clear(){\n        memset(a,0,sizeof(a));\n    }\n    matrix operator +(matrix b){\n        matrix c;c.clear();\n        for (int i=0;i&lt;n;i++)\n        for (int j=0;j&lt;n;j++)\n            c.a[i][j]=a[i][j]+b.a[i][j];\n        return c;\n    }\n    matrix operator *(matrix b){\n        matrix c; c.clear();\n        for (int i=0;i&lt;n;i++)\n        for (int j=0;j&lt;n;j++)\n        for (int k=0;k&lt;n;k++)\n            c.a[i][j]=(c.a[i][j]+a[i][k]*b.a[k][j]%tt)%tt;\n        return c;\n    }\n    matrix operator ^(int b){\n        matrix ret; ret.init();\n        matrix w;   w.clear();\n        for (int i=0;i&lt;2;i++)\n        for (int j=0;j&lt;2;j++)\n            w.a[i][j]=a[i][j];\n        while (b){\n            if (b&amp;1) ret=ret*w;\n            w=w*w;b&gt;&gt;=1;\n        }\n        return ret;\n    }\n}fst;\n\nstruct matrix_matrix{\n    matrix a[3][3];\n    void init(matrix number,bool flag){\n        if (flag){\n            a[0][0].init();a[1][1].init();\n            a[0][1].clear();a[1][0].clear();\n        } else {\n            a[0][0]=a[0][1]=number;\n            a[1][0].clear();a[1][1].init();\n        }\n    }\n    void clear(){\n        a[0][0].clear();a[0][1].clear();\n        a[1][0].clear();a[1][1].clear();\n    }\n    matrix_matrix operator *(matrix_matrix b){\n        matrix_matrix c; c.clear();\n        for (int i=0;i&lt;2;i++)\n        for (int j=0;j&lt;2;j++)\n        for (int k=0;k&lt;2;k++)\n            c.a[i][j]=(c.a[i][j]+a[i][k]*b.a[k][j]);\n        return c;\n    }\n    matrix_matrix operator ^(int b){\n        matrix tmp;\n        matrix_matrix ret;ret.init(tmp,true);\n        matrix_matrix w;w.init(fst,false);\n        while (b){\n            if (b&amp;1) ret=ret*w;\n            w=w*w;b&gt;&gt;=1;\n        }\n        return ret;\n    }\n    void write(){\n        for (int i=0;i&lt;n;i++){\n            for (int j=0;j&lt;n;j++) printf(\"%d \",a[0][1].a[i][j]%tt);\n            printf(\"\\n\");\n        }\n    }juzhegn\n};\n\nsigned main(){\n    n=read();k=read();tt=read();\n    for (int i=0;i&lt;n;i++)\n    for (int j=0;j&lt;n;j++)\n        fst.a[i][j]=read()%tt;\n    matrix_matrix now;\n    now.init(fst,false);\n    now=now^k;\n    now.write();\n    return 0;\n}\nHDU 2065 &quot;\u7ea2\u8272\u75c5\u6bd2&quot;\u95ee\u9898\nDescription\nLink\uff1aHDU 2065 &quot;\u7ea2\u8272\u75c5\u6bd2&quot;\u95ee\u9898\n\n\u533b\u5b66\u754c\u53d1\u73b0\u7684\u65b0\u75c5\u6bd2\u56e0\u5176\u8513\u5ef6\u901f\u5ea6\u548c Internet \u4e0a\u4f20\u64ad\u7684\u201c\u7ea2\u8272\u75c5\u6bd2\u201d\u4e0d\u76f8\u4e0a\u4e0b\uff0c\u88ab\u79f0\u4e3a\u201c\u7ea2\u8272\u75c5\u6bd2\u201d\u3002\u7ecf\u7814\u7a76\u53d1\u73b0\uff0c\u8be5\u75c5\u6bd2\u53ca\u5176\u53d8\u79cd\u7684 DNA \u7684\u4e00\u6761\u5355\u94fe\u4e2d\uff0c\u80de\u5627\u5576\u3001\u817a\u5627\u5576\u5747\u662f\u6210\u5bf9\u51fa\u73b0\u7684\u3002\n\u73b0\u5728\u6709\u4e00\u957f\u5ea6\u4e3aN\u7684\u5b57\u7b26\u4e32\uff0c\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff1a\n\n\u5b57\u7b26\u4e32\u4ec5\u7531 A,B,C,D \u56db\u4e2a\u5b57\u6bcd\u7ec4\u6210\uff1b\nA \u51fa\u73b0\u5076\u6570\u6b21\uff08\u4e5f\u53ef\u4ee5\u4e0d\u51fa\u73b0\uff09\uff1b\nC \u51fa\u73b0\u5076\u6570\u6b21\uff08\u4e5f\u53ef\u4ee5\u4e0d\u51fa\u73b0\uff09\u3002\n\n\u8ba1\u7b97\u6ee1\u8db3\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\u4e2a\u6570\u3002\n\u5f53 N=2 \u65f6\uff0c\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\u6709\u5982\u4e0b 6 \u4e2a\uff1aBB,BD,DB,DD,AA,CC\u3002\n\u7531\u4e8e\u8fd9\u4e2a\u6570\u636e\u80af\u80fd\u975e\u5e38\u5e9e\u5927\uff0c\u4f60\u53ea\u8981\u7ed9\u51fa\u6700\u540e\u4e24\u4f4d\u6570\u5b57\u5373\u53ef\u3002\n\nHint\n\u77e9\u9635\u4f18\u5316 DP \u7684\u5178\u578b\u3002\n\u5bf9\u4e8e\u524d\u9762\u4e00\u9898\u9012\u63a8\u7684\u9898\u76ee\uff0c\u6211\u4eec\u5c1a\u53ef\u76f4\u63a5\u7528\u6c42\u901a\u9879\u7684\u6570\u5b66\u65b9\u6cd5\uff0c\u4f46\u662f\u8fd9\u9898\u4f3c\u4e4e\u4e0d\u884c\u4e86\u2026\u2026\nAnalysis #1\n\u9996\u5148\u53ef\u4ee5\u60f3\u5230 F[i] \u8868\u793a\u957f\u5ea6\u4e3a i \u7684\u5b57\u7b26\u4e32\uff0c\u5076\u6570\u4e2a A \u5e76\u4e14\u5076\u6570\u4e2a C \u7684\u6570\u91cf\u3002\u4f46\u662f\u76f4\u63a5\u8fd9\u6837\u5b9a\u4e49\u663e\u7136\u662f\u6ca1\u6cd5\u76f4\u63a5\u72b6\u6001\u8f6c\u79fb\u7684\u2026\u2026\n\u6211\u4eec\u81ea\u7136\u60f3\u5230\u5206\u522b\u5728 DP \u72b6\u6001\u91cc\u8bb0\u5f55\u4e0b A \u548c C \u4e86\u3002\n\u4e3a\u4e86\u65b9\u4fbf\u653e\u8fdb\u77e9\u9635\u91cc\uff0c\u6211\u4eec\u5c3d\u91cf\u5b9a\u4e49\u6210\u4e00\u4e2a\u4e8c\u7ef4\u7684\uff1aF[i][0\/1\/2\/3]\uff0ci \u8868\u793a\u5b57\u7b26\u4e32\u957f\u5ea6\u4e3a i\uff0c\u7b2c\u4e8c\u7ef4\u8ba8\u8bba\u4e00\u4e0b\uff1a\n\nA \u548c C \u5747\u51fa\u73b0\u4e86\u5076\u6570\u6b21\uff1b\nA \u51fa\u73b0\u4e86\u5076\u6570\u6b21\uff0cC \u51fa\u73b0\u4e86\u5947\u6570\u6b21\uff1b\nA \u51fa\u73b0\u4e86\u5947\u6570\u6b21\uff0cC \u51fa\u73b0\u4e86\u5076\u6570\u6b21\uff1b\nA \u548c C \u5747\u51fa\u73b0\u5947\u6570\u6b21\u3002\n\n\u90a3\u4e48\u5c31\u6709\u5982\u4e0b\u8f6c\u79fb\u65b9\u7a0b\uff1a\n$$\nF(i,0)=2\\ast F(i-1,0) + F(i-1,1) + F(i-1,2) \\\\\nF(i,1)=2\\ast F(i-1,1) + F(i-1,0) + F(i-1,3) \\\\\nF(i,2)=2\\ast F(i-1,2) + F(i-1,0) + F(i-1,3) \\\\\nF(i,3)=2\\ast F[i-1,3] + F(i-1,1) + F(i-1,2)\n$$\n\u8ba9\u6211\u4eec\u5bf9\u9f50\u4e00\u4e0b\uff0c\u4ee5\u4fbf\u4e8e\u540e\u7eed\u7684\u63a8\u5bfc\uff1a\n$$\nF(i,0)=2\\ast F(i-1,0) + 1\\ast F(i-1,1) + 1\\ast F(i-1,2) + 0\\ast F(i-1,3) \\\\\nF(i,1)=1\\ast F(i-1,0) + 2\\ast F(i-1,1) + 0\\ast F(i-1,2) + 1\\ast F(i-1,3) \\\\\nF(i,2)=1\\ast F(i-1,0) + 0\\ast F(i-1,0) + 2\\ast F(i-1,2) + 1\\ast F(i-1,3) \\\\\nF(i,3)=0\\ast F(i-1,0) + 1\\ast F(i-1,1) + 1\\ast F(i-1,2) + 2\\ast F(i-1,3)\n$$\n\u73b0\u5728\u8003\u8651\u901a\u8fc7\u77e9\u9635\u8f6c\u79fb\u3002\u5047\u8bbe\u6211\u4eec\u628a $F(i,j)$ \u770b\u6210\u5982\u4e0b\u77e9\u9635\uff1a\n$$\n\\begin{bmatrix}\nF(i,0) \\\\\nF(i,1) \\\\\nF(i,2) \\\\\nF(i,3)\n\\end{bmatrix}\n$$\n\u73b0\u5728\u6211\u4eec\u9700\u8981\u8f6c\u79fb\u6210\u8fd9\u6837\u5b50\uff1a\n$$\n\\begin{bmatrix}\n2\\ast F(i-1,0) + 1\\ast F(i-1,1) + 1\\ast F(i-1,2) + 0\\ast F(i-1,3) \\\\\n1\\ast F(i-1,0) + 2\\ast F(i-1,1) + 0\\ast F(i-1,2) + 1\\ast F(i-1,3) \\\\\n1\\ast F(i-1,0) + 0\\ast F(i-1,0) + 2\\ast F(i-1,2) + 1\\ast F(i-1,3) \\\\\n0\\ast F(i-1,0) + 1\\ast F(i-1,1) + 1\\ast F(i-1,2) + 2\\ast F(i-1,3)\n\\end{bmatrix}\n$$\n\u5176\u5b9e\u8f6c\u79fb\u77e9\u9635\u5df2\u7ecf\u5f88\u663e\u7136\u4e86\uff0c\u5c31\u662f\u90a3\u51e0\u4e2a\u7cfb\u6570\u6784\u6210\u7684\u77e9\u9635\uff1a\n$$\n\\begin{bmatrix}\n2 & 1 & 1 & 0 \\\\\n1 & 2 & 0 & 1 \\\\\n1 & 0 & 2 & 1 \\\\\n0 & 1 & 1 & 2\n\\end{bmatrix}\n$$\n\u73b0\u5728\u8fd8\u6709\u4e2a\u5fae\u5c0f\u7684\u95ee\u9898\uff0c\u8fd9\u4e2a\u77e9\u9635\u662f 4\u00d74 \u7684\uff0c\u4f46\u662f\u539f\u6765\u662f 4\u00d71 \u7684\u2026\u20264 \u884c 1 \u5217\u7684\u77e9\u9635\u53ef\u4e0d\u80fd\u4e0e 4 \u884c 4 \u5217\u7684\u77e9\u9635\u76f8\u4e58\u3002\u6211\u4eec\u53ea\u80fd\u628a 4\u00d71 \u7684\u77e9\u9635\u5199\u6210 1\u00d74 \u7684\uff1a\n$$\n\\begin{bmatrix}\nF(i,0) & F(i,1) & F(i,2) & F(i,3)\n\\end{bmatrix}\n$$\n\uff08\u53ef\u4ee5\u53d1\u73b0\u8fd9\u662f\u4e00\u4e2a\u6cbf\u201d\u4e3b\u5bf9\u89d2\u7ebf\u201c\u5bf9\u79f0\u7684\u77e9\u9635\uff09\n\u63a5\u4e0b\u6765\u8003\u8651\u4e0b\u521d\u59cb\u77e9\u9635\uff0c\u4e0d\u96be\u5f97\u51fa\u7b54\u6848\uff1a\n$$\n\\begin{bmatrix}\n2 & 1 & 1 & 0\n\\end{bmatrix} \\ast\n\\begin{bmatrix}\n2 & 1 & 1 & 0 \\\\\n1 & 2 & 0 & 1 \\\\\n1 & 0 & 2 & 1 \\\\\n0 & 1 & 1 & 2\n\\end{bmatrix} ^{n-1} =\n\\begin{bmatrix}\nF(n,0) & F(n,1) & F(n,2) & F(n,3)\n\\end{bmatrix}\n$$\n\u77e9\u9635\u5feb\u901f\u5e42\u4f18\u5316\u5373\u53ef\u3002\nAnalysis #2\n\u7f51\u4e0a\u9898\u89e3\u641c\u5f97\uff1a\u6cf0\u52d2\u7ea7\u6570\uff1f\u4e0d\u4f1a\u3002\nCode\n\u9700\u8981\u6ce8\u610f\u9898\u76ee\u7684\u8f93\u5165\u683c\u5f0f\uff1a\n\n\u6bcf\u7ec4\u8f93\u5165\u7684\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570 T\uff0c\u8868\u793a\u6d4b\u8bd5\u5b9e\u4f8b\u7684\u4e2a\u6570\u3002\u4e0b\u9762\u662f T \u884c\u6570\u636e\uff0c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570 $N (1\\leqslant N","tags":[{"name":"OI\u5b66\u4e60","slug":"OI\u5b66\u4e60","permalink":"https:\/\/skywt.cn\/tag\/OI%E5%AD%A6%E4%B9%A0\/"},{"name":"OI\u7b97\u6cd5","slug":"OI\u7b97\u6cd5","permalink":"https:\/\/skywt.cn\/tag\/OI%E7%AE%97%E6%B3%95\/"},{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u52a8\u6001\u89c4\u5212\u7c7b\u578b\u9898","slug":"\u52a8\u6001\u89c4\u5212\u7c7b\u578b\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB%E5%9E%8B%E9%A2%98\/"},{"name":"\u6570\u5b66\u9898","slug":"\u6570\u5b66\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E6%95%B0%E5%AD%A6%E9%A2%98\/"}],"categories":[]},{"title":"LightOJ 1073 DNA Sequence \u9898\u89e3\uff1a\u5b57\u7b26\u4e32+\u72b6\u538b DP+\u5b57\u7b26\u4e32\u538b\u4f4d\/\u641c\u7d22","date":"2018-10-04T14:46:25+08:00","path":"https:\/\/skywt.cn\/posts\/lightoj-1073","text":"Description\nLink: LightOJ 1873 DNA Sequence\n\nYou are given a list of strings over the alphabet A (for adenine), C (cytosine), G (guanine), and T (thymine), and your task is to find the shortest string (which is typically not listed) that contains all given strings as substrings. If there are several such strings of shortest length, find the smallest in alphabetical\/lexicographical order.\nTime Limit:  4 second(s)\nMemory Limit:  32 MB\n\n\nInput\n\nInput starts with an integer  T (\u2264 35), denoting the number of test cases.\nEach case starts with an integer denoting the number of strings  n (1 \u2264 n \u2264 15) in a single line. Then these  n  strings  (1 \u2264 length \u2264 100)  follow, one on each line, and they consist of the letters  'A', 'C', 'G'  and  'T'  only.\n\nOutput\n\nFor each case, print the case number and the shortest (and lexicographically smallest) string according to the description above.\n\nSample Input\n2\n2\nTGCACA\nCAT\n3\nTAC\nACT\nCTA\nOutput for Sample Input\nCase 1: TGCACAT\nCase 2: ACTAC\nTranslation\n\u7ed9\u4f60 N \u4e2a\u53ea\u5305\u542b A\u3001C\u3001G\u3001T \u56db\u79cd\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\uff0c\u4f60\u8981\u627e\u51fa\u4e00\u4e2a\u6700\u77ed\u7684\u5b57\u7b26\u4e32 s\uff0c\u4f7f\u5f97\u6240\u6709 N \u4e2a\u5b57\u7b26\u4e32\u90fd\u662f s \u7684\u5b50\u4e32\u3002\u5728\u6ee1\u8db3 s \u6700\u77ed\u7684\u524d\u63d0\u4e0b\u8981\u4f7f\u5f97 s \u7684\u5b57\u5178\u5e8f\u6700\u5c0f\u3002\nAnalysis\n\u72b6\u538b DP\uff1f\n\u9996\u5148\u5982\u679c\u8fd9\u4e9b\u5b57\u7b26\u4e32\u6709\u5305\u542b\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u76f4\u63a5\u628a\u88ab\u5305\u542b\u7684\u5b57\u7b26\u4e32\u5168\u90fd\u53bb\u6389\u3002\n\u89c2\u5bdf\u6570\u636e\u8303\u56f4\uff1a$1\\leqslant n\\leqslant 15$\uff0c$n$ \u975e\u5e38\u5c0f\uff0c\u53ef\u4ee5\u8003\u8651\u4ece\u72b6\u538b DP \u5165\u624b\u3002\n\u7531\u4e8e\u9898\u76ee\u8981\u6c42\u6211\u4eec\u9996\u5148\u7b54\u6848\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u6700\u5c0f\uff0c\u5176\u6b21\u5176\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u6211\u4eec\u81ea\u7136\u60f3\u5230\u5b9a\u4e49 F[i][j] \u8868\u793a\u72b6\u6001\u4e3a i \u5e76\u4e14\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e3a j \u7684\u6700\u4f18\u5b57\u7b26\u4e32\u3002\n\u90a3\u4e48\u6211\u4eec\u9700\u8981\u63d0\u524d\u9884\u5904\u7406\u4e00\u4e2a\u4e1c\u897f\uff1ap[i][j] \u8868\u793a\u7b2c i \u4e2a\u5b57\u7b26\u4e32\u540e\u9762\u63a5\u4e0a\u7b2c j \u4e2a\u5b57\u7b26\u4e32\uff0c\u6700\u957f\u7684\u91cd\u5408\u4e32\uff08\u5373\u4e32 i \u7684\u540e\u7f00\u4e0e\u4e32 j \u7684\u524d\u7f00\u7684\u6700\u957f\u516c\u5171\u90e8\u5206\uff09\uff0c\u4f8b\u5982 ABCDE \u4e0e CDEFG \u7684\u7ed3\u679c\u662f CDE\u3002\n\uff08\u5728\u5b9e\u9645\u5904\u7406\u7684\u65f6\u5019\uff0c\u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u5904\u7406\u7684 forp[i][j] \u662f\u7b2c j \u4e2a\u5b57\u7b26\u4e32\u53bb\u6389\u524d\u9762\u6240\u8ff0\u7684\u201c\u6700\u957f\u91cd\u5408\u4e32\u201d\u4e4b\u540e\u7684\u4e32\u3002\u5373\u4e0a\u8ff0\u4f8b\u5b50\u7ed3\u679c\u4e3a FG\uff09\n\u5904\u7406\u597d\u8fd9\u4e2a\u4e1c\u897f\u5c31\u53ef\u4ee5\u8fdb\u884c DP \u4e86\uff0c\u679a\u4e3e\u72b6\u6001\u8f6c\u79fb\u5c31\u662f\u5728\u4e4b\u524d\u72b6\u6001\u7684\u5b57\u7b26\u4e32\u540e\u9762\u52a0\u4e0a\u67d0\u4e2a\u5b57\u7b26\u4e32\uff0c\n\u5185\u5b58\u7206\u70b8\u2026\u2026\n\u4f46\u662f\u4ec5\u4ec5\u8fd9\u6837\u662f\u4e0d\u884c\u7684\uff0cF \u6570\u7ec4\uff08string \u7c7b\u578b\uff09\u9700\u8981\u5f00\u5230 f[(1&lt;&lt;15)][15]\uff0c\u800c length&lt;=100\uff0c\u800c\u4e14\u8fd9\u9898\u5185\u5b58\u9650\u5236\u662f 32M\uff01\n\u4ed4\u7ec6\u601d\u8003\u53ef\u4ee5\u53d1\u73b0\uff0cDP \u6570\u7ec4\u4e0d\u9700\u8981 F[i][j]\uff0c\u53ea\u9700\u8981 F[i] \u5373\u53ef\uff0c\u518d\u5f00\u4e2a lst[i] \u8bb0\u5f55 i \u72b6\u6001\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e32\u7f16\u53f7\u5c31\u884c\u4e86\u3002\n\u8fd8\u662f\u5185\u5b58\u7206\u70b8\u2026\u2026\n\u8fd9\u6837\u4ecd\u7136\u4f1a MLE\u2026\u2026\uff08\u5361\u5185\u5b58\u6ca1\u7d20\u8d28\uff09\n\u90a3\u4e48\u63a5\u4e0b\u6765\u6709\u4e24\u79cd\u529e\u6cd5\uff1a\n\u65b9\u6cd5\u4e4b\u4e00\u662f\uff1a\u6ce8\u610f\u5230\u6240\u6709\u5b57\u7b26\u4e32\u91cc\u53ea\u6709 4 \u79cd\u5b57\u7b26\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5b57\u7b26\u4e32\u8fdb\u884c\u538b\u4f4d\uff0c\u8fd9\u6837\u5185\u5b58\u662f\u53ef\u4ee5\u63a5\u53d7\uff0c\u4f46\u662f\u5199\u8d77\u6765\u975e\u5e38\u9ebb\u70e6\uff08\u6211\u7684\u4ee3\u7801\u8fd8 TLE \u4e86\u2026\u2026\uff09\u2026\u2026\n\u65b9\u6cd5\u4e8c\uff1a\u4ed4\u7ec6\u5206\u6790\uff0c\u53d1\u73b0\u6211\u4eec\u5355\u7eaf\u8bb0\u5f55\u5b57\u7b26\u4e32\u662f\u5f88\u76f2\u76ee\u7684\uff0c\u8fd9\u4e9b\u5b57\u7b26\u4e32\u90fd\u7531\u90a3 15 \u4e2a\u5b57\u7b26\u4e32\u62fc\u63a5\u800c\u6765\uff0c\u8fd9\u6837\u8bb0\u5f55\u767d\u767d\u591a\u82b1\u4e86\u5f88\u591a\u5185\u5b58\uff1b\u5176\u5b9e\u53ef\u4ee5\u628a\u4e00\u4e2a\u5b57\u7b26\u4e32\u7531\u90a3\u4e9b\u5b57\u7b26\u4e32\u62fc\u63a5\u800c\u6210\u770b\u6210\u4e00\u4e2a\u6570\u5217\uff0c\u90a3\u6211\u4eec\u53ea\u8981\u8bb0\u5f55\u8fd9\u4e2a\u6570\u5217\u5c31\u53ef\u4ee5\u4e86\uff1b\n\u8fdb\u4e00\u6b65\u53d1\u73b0\uff0c\u5176\u5b9e F[i][j] \u53ef\u4ee5\u53ea\u8bb0\u5f55\u957f\u5ea6\uff0cpre[i][j] \u8bb0\u5f55\u524d\u9a71\uff08\u5373 F[i][j] \u8fd9\u4e2a\u72b6\u6001\u662f\u4ece\u54ea\u91cc\u4fee\u6b63\u800c\u6765\uff09\uff0c\u8fd9\u6837\u53ea\u8981\u6700\u540e\u8fdb\u884c\u4e00\u6b21\u641c\u7d22\u5c31\u53ef\u4ee5\u5f97\u5230\u6574\u4e2a\u6570\u5217\u3002\n\u6700\u5c0f\u5b57\u5178\u5e8f\n\u8fd9\u6837\u8fd8\u6709\u4e2a\u95ee\u9898\uff1a\u600e\u6837\u4f7f\u5f97\u6700\u7ec8\u5b57\u7b26\u4e32\u5b57\u5178\u5e8f\u6700\u5c0f\u5462\uff1f\n\u8003\u8651\u5bf9\u4e8e\u4e00\u4e2a\u72b6\u6001 $D$\uff0c\u53ef\u4ee5\u628a\u6240\u6709\u80fd\u8f6c\u79fb\u5230\u5b83\u7684\u72b6\u6001\u5411\u5b83\u5efa\u8fb9\u3002\u8fd9\u6837\u4fbf\u5f62\u6210\u4e86\u4e00\u4e2a DAG\u3002\u6240\u4ee5\u6700\u540e\u53ea\u9700\u8981\u8fdb\u884c\u4e00\u6b21\u66b4\u641c\u5373\u53ef\u3002\n\u53ea\u8981\u5199\u4e2a\u8fd1\u4e24\u767e\u884c\u7684\u72b6\u538b DP + \u66b4\u641c\u5c31\u53ef\u4ee5\u4e86\u3002\nCode\n\u7559\u5751\u5f85\u8865\u2026\u2026","tags":[{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u52a8\u6001\u89c4\u5212\u7c7b\u578b\u9898","slug":"\u52a8\u6001\u89c4\u5212\u7c7b\u578b\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB%E5%9E%8B%E9%A2%98\/"},{"name":"\u72b6\u538bDP","slug":"\u72b6\u538bDP","permalink":"https:\/\/skywt.cn\/tag\/%E7%8A%B6%E5%8E%8BDP\/"}],"categories":[]},{"title":"\u5206\u4eab\u51e0\u9053 NOIP \u521d\u8d5b\u7684\u5947\u8469\u9898\u76ee","date":"2018-10-08T18:06:57+08:00","path":"https:\/\/skywt.cn\/posts\/noip-precontest-qipa","text":"\u5feb\u770b\u770b CCF \u662f\u600e\u4e48\u628a\u521d\u8d5b\u5b8c\u6210\u8111\u7b4b\u6025\u8f6c\u5f2f\u7ade\u8d5b\u7684\u2026\u2026\n\n\u5b59\u67d0\u548c\u5f20\u67d0\u662f\u8003\u53e4\u5b66\u5bb6\u8001\u674e\u7684\u5b66\u751f\u3002\u6709\u4e00\u5929\uff0c\u8001\u674e\u62ff\u4e86\u4e00\u4ef6\u53e4\u7269\u6765\u8003\u9a8c\u4e24\u4eba\uff0c\u4e24\u4eba\u90fd\u65e0\u6cd5\u9a8c\u8bc1\u51fa\u6765\u8fd9\u4ef6\u53e4\u7269\u8bd5\u8c01\u7684\u3002\u8001\u674e\u544a\u8bc9\u4e86\u5b59\u67d0\u62e5\u6709\u8005\u7684\u59d3\uff0c\u544a\u8bc9\u5f20\u67d0\u62e5\u6709\u8005\u7684\u540d\uff0c\u5e76\u4e14\u5728\u7eb8\u6761\u4e0a\u5199\u4e0b\u4ee5\u4e0b\u51e0\u4e2a\u4eba\u7684\u4eba\u540d\uff0c\u95ee\u4ed6\u4eec\u77e5\u9053\u8c01\u624d\u662f\u62e5\u6709\u8005\uff1f\n\u7eb8\u6761\u4e0a\u7684\u540d\u5b57\u6709\uff1a\u6c88\u4e07\u4e09\u3001\u5cb3\u98de\u3001\u5cb3\u4e91\u3001\u5f20\u98de\u3001\u5f20\u826f\u3001\u5f20\u9e4f\u3001\u8d75\u62ec\u3001\u8d75\u4e91\u3001\u8d75\u9e4f\u3001\u6c88\u62ec\u3002\n\n\u5b59\u67d0\u8bf4\uff1a\u5982\u679c\u6211\u4e0d\u77e5\u9053\u7684\u8bdd\uff0c\u5f20\u67d0\u80af\u5b9a\u4e5f\u4e0d\u77e5\u9053\u3002\n\u5f20\u67d0\u8bf4\uff1a\u521a\u624d\u6211\u4e0d\u77e5\u9053\uff0c\u542c\u5b59\u67d0\u4e00\u8bf4\uff0c\u6211\u73b0\u5728\u77e5\u9053\u4e86\u3002\n\u5b59\u67d0\u8bf4\uff1a\u54e6\uff0c\u90a3\u6211\u4e5f\u77e5\u9053\u4e86\u3002\n\n\u8bf7\u95ee\uff1a\u90a3\u4ef6\u53e4\u7269\u662f\u8c01\u7684\uff1f\n\nA\u3001\u8d75\u62ec\nB\u3001\u5cb3\u98de\nC\u3001\u5cb3\u4e91\nD\u3001\u8d75\u9e4f\n\n\n\u7b54\u6848\uff1aB\n\u89e3\u6790\uff1a\n\n\n\n\u7531\u7b2c\u4e00\u53e5\u5b59\u67d0\u8bf4\uff1a\u5b59\u67d0\u4e0d\u77e5\u9053\uff0c\u8fd8\u80fd\u786e\u5b9a\u5f20\u67d0\u80af\u5b9a\u4e5f\u4e0d\u77e5\u9053\u3002\u53ef\u4ee5\u77e5\u9053\u5f20\u67d0\u62ff\u5230\u7684\u540d\u5b57\u80af\u5b9a\u4e0d\u662f\u201c\u4e07\u4e09\u201d\u3001\u201c\u826f\u201d\uff1b\u800c\u4e14\u53ef\u4ee5\u786e\u5b9a\u5b59\u67d0\u77e5\u9053\u7684\u59d3\u80af\u5b9a\u4e0d\u662f\u201c\u6c88\u201d\u548c\u201c\u5f20\u201d\uff0c\u5219\u5269\u4e0b\u7684\u540d\u5b57\u8fd8\u6709\uff1a\u8d75\u62ec\u3001\u8d75\u4e91\u3001\u8d75\u9e4f\uff1b\u5cb3\u98de\u3001\u5cb3\u4e91\u3002\n\u7531\u7b2c\u4e8c\u53e5\u5f20\u67d0\u8bf4\uff1a\u542c\u5b59\u67d0\u4e00\u8bf4\uff0c\u4ed6\u77e5\u9053\u4e86\u3002\u53ef\u4ee5\u786e\u5b9a\u4ed6\u77e5\u9053\u7684\u90a3\u4e2a\u540d\u5b57\u4e0d\u662f\u201c\u4e91\u201d\uff0c\uff08\u5982\u679c\u662f\u201c\u4e91\u201d\uff0c\u542c\u5f20\u67d0\u8bf4\u4e86\u4e4b\u540e\u4ed6\u8fd8\u662f\u4e0d\u80fd\u786e\u5b9a\u7b54\u6848\uff0c\u56e0\u4e3a\u5e26\u201c\u4e91\u201d\u7684\u540d\u5b57\u6709\u4e24\u4e2a\uff09\u3002\u5269\u4e0b\u7684\u540d\u5b57\u8fd8\u6709\uff1a\u8d75\u62ec\u3001\u8d75\u9e4f\uff1b\u5cb3\u98de\u3002\n\u7b2c\u4e09\u53e5\u5b59\u67d0\u8bf4\uff0c\u4ed6\u4e5f\u77e5\u9053\u4e86\uff0c\u53ef\u4ee5\u786e\u5b9a\u662f\u201c\u5cb3\u98de\u201d\uff08\u5982\u679c\u662f\u4e24\u4e2a\u201c\u8d75\u201d\u59d3\u7684 \u201c\u8d75\u62ec\u201d \u6216\u8005\u662f \u201c\u8d75\u9e4f\u201d\uff0c\u5219\u5b59\u67d0\u8fd8\u662f\u5224\u65ad\u4e0d\u51fa\u6765\uff09\n\n\u6545\u7b54\u6848\u4e3a\uff1aB\u3001\u5cb3\u98de\u3002\nfrom: 1\n\n\n\n\u65b9\u9759\u662f\u4e00\u4e2a\u5f88\u7231\u770b\u4e66\u7684\u5b69\u5b50\uff0c\u5728\u5979\u7684\u4e66\u67b6\u4e0a\uff0c\u6446\u6ee1\u4e86\u5404\u79cd\u5b66\u79d1\u7684\u4e66\u7c4d\uff0c\u5176\u4e2d\u7684\u4e00\u4e2a\u65b9\u683c\u91cc\uff0c\u6446\u7684\u90fd\u662f\u5386\u53f2\u7c7b\u4e66\u7c4d\u3002\u5728\u8fd9\u4e2a\u65b9\u683c\u91cc\uff0c\u65b9\u9759\u6309\u5386\u53f2\u7684\u5148\u540e\u987a\u5e8f\u4ece\u5de6\u5230\u53f3\u6446\u653e\u7740\uff0c\u56e0\u4e3a\u6446\u653e\u7684\u65f6\u95f4\u8fc7\u957f\u751f\u4e86\u86c0\u866b\u3002\u5176\u4e2d\u7684\u4e00\u672c\u300a\u4e2d\u56fd\u5386\u53f2\u300b\uff0c\u5206\u4e3a\u56db\u4e66\uff1b\u6bcf\u4e00\u672c\u7684\u603b\u539a\u5ea6\u6709 5 \u5398\u7c73\uff0c\u5c01\u9762\u4e0e\u5c01\u5e95\u7684\u5404\u81ea\u539a\u5ea6\u4e3a 0.5 \u5398\u7c73\u3002\u5982\u679c\u86c0\u866b\u4ece\u7b2c\u4e00\u672c\u7684\u7b2c\u4e00\u9875\u5f00\u59cb\u54ac\uff0c\u76f4\u5230\u7b2c\u56db\u672c\u7684\u6700\u540e\u4e00\u9875\uff0c\u4f60\u80fd\u7b97\u51fa\u8fd9\u53ea\u86c0\u866b\u54ac\u7684\u8ddd\u79bb\u662f\u591a\u5c11\u5398\u7c73\u5417\uff1f\nA\u300111\nB\u300113\nC\u300123\nD\u300124\n\n\n\u7b54\u6848\uff1aB\n\u89e3\u6790\uff1a\u975e\u5e38\u5751\u7684\u4e00\u9898\u3002\n\n\n13 \u5398\u7c73\u3002\u5f88\u591a\u4eba\u8ba4\u4e3a\u662f 23 \u5398\u7c73\uff0c\u5176\u5b9e\u662f\u9519\u8bef\u7684\uff0c\u56e0\u4e3a\u65b9\u9759\u662f\u4ece\u5de6\u5230\u53f3\u6446\u653e\u7684\uff0c\u800c\u4e66\u53c8\u662f\u4ece\u5de6\u5411\u53f3\u7ffb\u7684\uff0c\u6240\u4ee5\u662f 13 \u5398\u7c73\u3002\nfrom: 2\n\n\n\n\u5408\u5531\u6f14\u51fa\u5728\u5373\uff0c\u4e00\u540d\u56e2\u5458\u75c5\u5012\u4e86\uff0c\u4e0d\u80fd\u53c2\u52a0\u3002\u6307\u6325\u6392\u4e86\u4e00\u4e0b\u961f\u4f0d\uff0c\u5982\u679c10\u4eba\u4e00\u6392\uff0c\u6709\u4e00\u6392\u5c11\u4e00\u4eba\uff0c\u5982\u679c12\u4eba\u4e00\u6392\uff0c\u6709\u4e00\u6392\u8fd8\u662f\u5c11\u4e00\u4eba\uff0c\u5982\u679c15\u4eba\u4e00\u6392\uff0c\u6709\u4e00\u6392\u4ecd\u5c11\u4e00\u4eba\u3002\u8bf7\u95ee\u8fd9\u4e2a\u672a\u4e0a\u767e\u4eba\u7684\u5408\u5531\u56e2\u5171\u6709\u591a\u5c11\u4eba\uff1f\nA\u300159\nB\u300160\nC\u300161\nD\u300162\n\n\n\u7b54\u6848\uff1aC\n\u89e3\u6790\uff1a\u975e\u5e38\u53d8\u6001\uff0c\u672c\u6765\u7b97\u51fa\u6765\u662f 59 \u4eba\uff0c\u4f46\u662f\u8981\u52a0\u4e0a\u4e00\u4e2a\u75c5\u53f7\u548c\u6307\u6325\uff01\uff01\uff01\n","tags":[{"name":"OI\u5b66\u4e60","slug":"OI\u5b66\u4e60","permalink":"https:\/\/skywt.cn\/tag\/OI%E5%AD%A6%E4%B9%A0\/"},{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"}],"categories":[]},{"title":"\uff08\u8f6c\uff09\u516b\u5927\u6392\u5e8f\u7b97\u6cd5\u7a33\u5b9a\u6027\u5206\u6790","date":"2018-10-11T07:37:23+08:00","path":"https:\/\/skywt.cn\/posts\/sorting-algorithm-stability","text":"\u8f6c\u81ea\u77e5\u4e4e\uff1a\u516b\u5927\u6392\u5e8f\u7b97\u6cd5\u7a33\u5b9a\u6027\u5206\u6790\uff0c\u539f\u6765\u7a33\u5b9a\u6027\u662f\u8fd9\u4e2a\u610f\u601d\u2026\u2026\n\u8fd9\u662f \u20ac\u20acF \u975e\u5e38\u559c\u6b22\u7684\u6392\u5e8f\u7a33\u5b9a\u6027\u5206\u6790\u2026\u2026\n\u7a33\u5b9a\u6027\u5b9a\u4e49\uff1a \u6392\u5e8f\u524d\u540e\u4e24\u4e2a\u76f8\u7b49\u7684\u6570\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u53d8\uff0c\u5219\u7b97\u6cd5\u7a33\u5b9a\u3002\n\u7a33\u5b9a\u6027\u7684\u597d\u5904\uff1a \u4ece\u4e00\u4e2a\u952e\u4e0a\u6392\u5e8f\uff0c\u7136\u540e\u518d\u4ece\u53e6\u4e00\u4e2a\u952e\u4e0a\u6392\u5e8f\uff0c\u7b2c\u4e00\u4e2a\u952e\u6392\u5e8f\u7684\u7ed3\u679c\u53ef\u4ee5\u4e3a\u7b2c\u4e8c\u4e2a\u952e\u6392\u5e8f\u6240\u7528\u3002\n\u5404\u6392\u5e8f\u7b97\u6cd5\u7684\u7a33\u5b9a\u6027\uff1a\n\n\u5806\u6392\u5e8f\u3001\u5feb\u901f\u6392\u5e8f\u3001\u5e0c\u5c14\u6392\u5e8f\u3001\u76f4\u63a5\u9009\u62e9\u6392\u5e8f\u4e0d\u662f\u7a33\u5b9a\u7684\u6392\u5e8f\u7b97\u6cd5\uff1b\n\u57fa\u6570\u6392\u5e8f\u3001\u5192\u6ce1\u6392\u5e8f\u3001\u76f4\u63a5\u63d2\u5165\u6392\u5e8f\u3001\u6298\u534a\u63d2\u5165\u6392\u5e8f\u3001\u5f52\u5e76\u6392\u5e8f\u662f\u7a33\u5b9a\u7684\u6392\u5e8f\u7b97\u6cd5\u3002\n\n\n\u4e00\u3001\u5192\u6ce1\u6392\u5e8f\n\n\n\u5c0f\u7684\u5143\u7d20\u5f80\u524d\u8c03\u6216\u8005\u628a\u5927\u7684\u5143\u7d20\u5f80\u540e\u8c03\uff1b\n\n\n\u6bd4\u8f83\u662f\u76f8\u90bb\u7684\u4e24\u4e2a\u5143\u7d20\u6bd4\u8f83\uff0c\u4ea4\u6362\u4e5f\u53d1\u751f\u5728\u8fd9\u4e24\u4e2a\u5143\u7d20\u4e4b\u95f4\uff1b\n\n\u7a33\u5b9a\u6392\u5e8f\u7b97\u6cd5\u3002\n\n\u4e8c\u3001\u9009\u62e9\u6392\u5e8f\n\n\n\u6bcf\u4e2a\u4f4d\u7f6e\u9009\u62e9\u5f53\u524d\u5143\u7d20\u6700\u5c0f\u7684\uff1b\n\n\n\u5728\u4e00\u8d9f\u9009\u62e9\u4e2d\uff0c\u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u4e00\u4e2a\u5143\u7d20\u5c0f\uff0c\u800c\u8be5\u5c0f\u7684\u5143\u7d20\u53c8\u51fa\u73b0\u5728\u4e00\u4e2a\u548c\u5f53\u524d\u5143\u7d20\u76f8\u7b49\u7684\u5143\u7d20\u540e\u9762\uff0c\u90a3\u4e48\u4ea4\u6362\u540e\u7a33\u5b9a\u6027\u5c31\u88ab\u7834\u574f\u4e86\uff1b\n\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5e8f\u52175 8 5 2 9\uff0c \u6211\u4eec\u77e5\u9053\u7b2c\u4e00\u904d\u9009\u62e9\u7b2c1\u4e2a\u5143\u7d205\u4f1a\u548c2\u4ea4\u6362\uff0c\u90a3\u4e48\u539f\u5e8f\u5217\u4e2d2\u4e2a5\u7684\u76f8\u5bf9\u524d\u540e\u987a\u5e8f\u5c31\u88ab\u7834\u574f\u4e86\uff1b\n\n\u4e0d\u7a33\u5b9a\u7684\u6392\u5e8f\u7b97\u6cd5\u3002\n\n\u4e09\u3001\u63d2\u5165\u6392\u5e8f\n\n\n\u5df2\u7ecf\u6709\u5e8f\u7684\u5c0f\u5e8f\u5217\u7684\u57fa\u7840\u4e0a\uff0c\u4e00\u6b21\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\uff1b\n\n\n\u60f3\u8981\u63d2\u5165\u7684\u5143\u7d20\u548c\u5df2\u7ecf\u6709\u5e8f\u7684\u6700\u5927\u8005\u5f00\u59cb\u6bd4\u8d77\uff0c\u5982\u679c\u6bd4\u5b83\u5927\u5219\u76f4\u63a5\u63d2\u5165\u5728\u5176\u540e\u9762\uff0c\u5426\u5219\u4e00\u76f4\u5f80\u524d\u627e\u76f4\u5230\u627e\u5230\u5b83\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\uff1b\n\n\n\u5982\u679c\u78b0\u89c1\u4e00\u4e2a\u548c\u63d2\u5165\u5143\u7d20\u76f8 \u7b49\u7684\uff0c\u90a3\u4e48\u63d2\u5165\u5143\u7d20\u628a\u60f3\u63d2\u5165\u7684\u5143\u7d20\u653e\u5728\u76f8\u7b49\u5143\u7d20\u7684\u540e\u9762\uff1b\n\n\n\u76f8\u7b49\u5143\u7d20\u7684\u524d\u540e\u987a\u5e8f\u6ca1\u6709\u6539\u53d8\uff1b\n\n\u7a33\u5b9a\u6392\u5e8f\u7b97\u6cd5\u3002\n\n\u56db\u3001\u5feb\u901f\u6392\u5e8f\n\n\n\u4e24\u4e2a\u65b9\u5411\uff0c\u5de6\u8fb9\u7684i\u4e0b\u6807\u4e00\u76f4\u5f80\u53f3\u8d70\uff0c\u5f53a[i] &lt;= a[center_index]\uff0c\u5176\u4e2d center_index \u662f\u4e2d\u67a2\u5143\u7d20\u7684\u6570\u7ec4\u4e0b\u6807\uff0c\u4e00\u822c\u53d6\u4e3a\u6570\u7ec4\u7b2c0\u4e2a\u5143\u7d20\u3002\u800c\u53f3\u8fb9\u7684j\u4e0b\u6807\u4e00\u76f4\u5f80\u5de6\u8d70\uff0c\u5f53a[j] &gt; a[center_index]\uff1b\n\n\n\u5982\u679ci\u548cj\u90fd\u8d70\u4e0d\u52a8\u4e86\uff0ci &lt;= j, \u4ea4\u6362a[i]\u548ca[j],\u91cd\u590d\u4e0a\u9762\u7684\u8fc7\u7a0b\uff0c\u76f4\u5230i&gt;j\uff1b\n\n\n\u4ea4\u6362 a[j] \u548c a[center_index]\uff0c\u5b8c\u6210\u4e00\u8d9f\u5feb\u901f\u6392\u5e8f\uff1b\n\n\n\u5728\u4e2d\u67a2\u5143\u7d20\u548c a[j] \u4ea4\u6362\u7684\u65f6\u5019\uff0c\u5f88\u6709\u53ef\u80fd\u628a\u524d\u9762\u7684\u5143\u7d20\u7684\u7a33\u5b9a\u6027\u6253\u4e71\uff0c\u6bd4\u5982\u5e8f\u5217\u4e3a 5 3 3 4 3 8 9 10 11\uff0c \u73b0\u5728\u4e2d\u67a2\u5143\u7d205\u548c3(\u7b2c5\u4e2a\u5143\u7d20\uff0c\u4e0b\u6807\u4ece1\u5f00\u59cb\u8ba1)\u4ea4\u6362\u5c31\u4f1a\u628a\u5143\u7d203\u7684\u7a33\u5b9a\u6027\u6253\u4e71\uff1b\n\n\n\u4e0d\u7a33\u5b9a\u53d1\u751f\u5728\u4e2d\u67a2\u5143\u7d20\u548ca[j] \u4ea4\u6362\u7684\u65f6\u523b\uff1b\n\n\u4e0d\u7a33\u5b9a\u7684\u6392\u5e8f\u7b97\u6cd5\u3002\n\n\u4e94\u3001\u5f52\u5e76\u6392\u5e8f\n\n\n\u628a\u5e8f\u5217\u9012\u5f52\u5730\u5206\u6210\u77ed\u5e8f\u5217\uff0c\u9012\u5f52\u51fa\u53e3\u662f\u77ed\u5e8f\u5217\u53ea\u67091\u4e2a\u5143\u7d20(\u8ba4\u4e3a\u76f4\u63a5\u6709\u5e8f)\u6216\u80052\u4e2a\u5e8f\u5217(1\u6b21\u6bd4\u8f83\u548c\u4ea4\u6362),\u7136\u540e\u628a\u5404\u4e2a\u6709\u5e8f\u7684\u77ed\u5e8f\u5217\u5408\u5e76\u6210\u4e00\u4e2a\u6709\u5e8f\u7684\u957f\u5e8f\u5217\uff0c\u4e0d\u65ad\u5408\u5e76\u76f4\u5230\u539f\u5e8f\u5217\u5168\u90e8\u6392\u597d\u5e8f\uff1b\n\n\n\u5408\u5e76\u8fc7\u7a0b\u4e2d\u6211\u4eec\u53ef\u4ee5\u4fdd\u8bc1\u5982\u679c\u4e24\u4e2a\u5f53\u524d\u5143\u7d20\u76f8\u7b49\u65f6\uff0c\u6211\u4eec\u628a\u5904\u5728\u524d\u9762\u7684\u5e8f\u5217\u7684\u5143\u7d20\u4fdd\u5b58\u5728\u7ed3 \u679c\u5e8f\u5217\u7684\u524d\u9762\uff0c\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\u7a33\u5b9a\u6027\uff1b\n\n\u7a33\u5b9a\u6392\u5e8f\u7b97\u6cd5\u3002\n\n\u516d\u3001\u5e0c\u5c14\u6392\u5e8f(shell)\n\n\n\u6309\u7167\u4e0d\u540c\u6b65\u957f\u5bf9\u5143\u7d20\u8fdb\u884c\u63d2\u5165\u6392\u5e8f\uff1b\n\n\n\u5f53\u521a\u5f00\u59cb\u5143\u7d20\u5f88\u65e0\u5e8f\u7684\u65f6\u5019\uff0c\u6b65\u957f\u6700\u5927\uff0c\u6240\u4ee5\u63d2\u5165\u6392\u5e8f\u7684\u5143\u7d20\u4e2a\u6570\u5f88\u5c11\uff0c\u901f\u5ea6\u5f88\u5feb\uff1b\n\n\n\u5f53\u5143\u7d20\u57fa\u672c\u6709\u5e8f\u4e86\uff0c\u6b65\u957f\u5f88\u5c0f\uff0c \u63d2\u5165\u6392\u5e8f\u5bf9\u4e8e\u6709\u5e8f\u7684\u5e8f\u5217\u6548\u7387\u5f88\u9ad8\uff1b\n\n\n\u6240\u4ee5\uff0c\u5e0c\u5c14\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4f1a\u6bd4o(n^2)\u597d\u4e00\u4e9b\n\n\n\u7531\u4e8e\u591a\u6b21\u63d2\u5165\u6392\u5e8f\uff0c\u6211\u4eec\u77e5\u9053\u4e00\u6b21\u63d2\u5165\u6392\u5e8f\u662f\u7a33\u5b9a\u7684\uff0c\u4e0d\u4f1a\u6539\u53d8\u76f8\u540c\u5143 \u7d20\u7684\u76f8\u5bf9\u987a\u5e8f\uff0c\u4f46\u5728\u4e0d\u540c\u7684\u63d2\u5165\u6392\u5e8f\u8fc7\u7a0b\u4e2d\uff0c\u76f8\u540c\u7684\u5143\u7d20\u53ef\u80fd\u5728\u5404\u81ea\u7684\u63d2\u5165\u6392\u5e8f\u4e2d\u79fb\u52a8\uff0c\u6700\u540e\u5176\u7a33\u5b9a\u6027\u5c31\u4f1a\u88ab\u6253\u4e71\uff1b\n\n\u4e0d\u7a33\u5b9a\u7684\u6392\u5e8f\u7b97\u6cd5\u3002\n\n\u4e03\u3001\u57fa\u6570\u6392\u5e8f\n\n\n\u6309\u7167\u4f4e\u4f4d\u5148\u6392\u5e8f\uff0c\u7136\u540e\u6536\u96c6\uff1b\u518d\u6309\u7167\u9ad8\u4f4d\u6392\u5e8f\uff0c\u7136\u540e\u518d\u6536\u96c6\uff1b\u4f9d\u6b21\u7c7b\u63a8\uff0c\u76f4\u5230\u6700\u9ad8\u4f4d\uff1b\n\n\n\u6709\u65f6\u5019\u6709\u4e9b\u5c5e\u6027\u662f\u6709\u4f18\u5148\u7ea7\u987a\u5e8f\u7684\uff0c\u5148\u6309\u4f4e\u4f18\u5148\u7ea7\u6392\u5e8f\uff0c\u518d\u6309\u9ad8\u4f18 \u5148\u7ea7\u6392\u5e8f\uff0c\u6700\u540e\u7684\u6b21\u5e8f\u5c31\u662f\u9ad8\u4f18\u5148\u7ea7\u9ad8\u7684\u5728\u524d\uff0c\u9ad8\u4f18\u5148\u7ea7\u76f8\u540c\u7684\u4f4e\u4f18\u5148\u7ea7\u9ad8\u7684\u5728\u524d\uff1b\n\n\n\u7528\u4e8e\u6574\u6570\uff1b\n\n\n\u9700\u8981\u8f83\u591a\u7684\u5b58\u50a8\u7a7a\u95f4\uff1b\n\n\n\u57fa\u4e8e\u5206\u522b\u6392\u5e8f\uff0c\u5206\u522b\u6536\u96c6\uff1b\n\n\u7a33\u5b9a\u6392\u5e8f\u7b97\u6cd5\u3002\n\n\u516b\u3001\u5806\u6392\u5e8f\n\n\n\u662f\u9009\u62e9\u6392\u5e8f\u7684\u4e00\u79cd\uff1b\n\n\n\u5806\u7684\u7ed3\u6784\u662f\u8282\u70b9i\u7684\u5b69\u5b50\u4e3a2i\u548c2i+1\u8282\u70b9\uff0c\u5927\u9876\u5806\u8981\u6c42\u7236\u8282\u70b9\u5927\u4e8e\u7b49\u4e8e\u51762\u4e2a\u5b50\u8282\u70b9\uff0c\u5c0f\u9876\u5806\u8981\u6c42\u7236\u8282\u70b9\u5c0f\u4e8e\u7b49\u4e8e\u51762\u4e2a\u5b50\u8282\u70b9\uff0c\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\uff1b\n\n\n\u5728\u4e00\u4e2a\u957f\u4e3an \u7684\u5e8f\u5217\uff0c\u5806\u6392\u5e8f\u7684\u8fc7\u7a0b\u662f\u4ece\u7b2cn\/2\u5f00\u59cb\u548c\u5176\u5b50\u8282\u70b9\u51713\u4e2a\u503c\u9009\u62e9\u6700\u5927(\u5927\u9876\u5806)\u6216\u8005\u6700\u5c0f(\u5c0f\u9876\u5806),\u8fd93\u4e2a\u5143\u7d20\u4e4b\u95f4\u7684\u9009\u62e9\u5f53\u7136\u4e0d\u4f1a\u7834\u574f\u7a33\u5b9a\u6027\u3002\u4f46\u5f53\u4e3an \/2-1, n\/2-2, \u20261\u8fd9\u4e9b\u4e2a\u7236\u8282\u70b9\u9009\u62e9\u5143\u7d20\u65f6\uff0c\u5c31\u4f1a\u7834\u574f\u7a33\u5b9a\u6027\u3002\u6709\u53ef\u80fd\u7b2cn\/2\u4e2a\u7236\u8282\u70b9\u4ea4\u6362\u628a\u540e\u9762\u4e00\u4e2a\u5143\u7d20\u4ea4\u6362\u8fc7\u53bb\u4e86\uff0c\u800c\u7b2cn\/2-1\u4e2a\u7236\u8282\u70b9\u628a\u540e\u9762\u4e00\u4e2a\u76f8\u540c\u7684\u5143\u7d20\u6ca1 \u6709\u4ea4\u6362\uff0c\u90a3\u4e48\u8fd92\u4e2a\u76f8\u540c\u7684\u5143\u7d20\u4e4b\u95f4\u7684\u7a33\u5b9a\u6027\u5c31\u88ab\u7834\u574f\u4e86\uff1b\n\n\u4e0d\u7a33\u5b9a\u7684\u6392\u5e8f\u7b97\u6cd5\u3002\n\n\u4e5d\u3001\u5404\u6392\u5e8f\u7b97\u6cd5\u7684\u4f18\u52a3\u5bf9\u7167\u8868\n\n\n\n\u6392\u5e8f\u7b97\u6cd5\n\u6700\u4f18\u65f6\u95f4\u590d\u6742\u5ea6\n\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\n\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\n\u7a7a\u95f4\u590d\u6742\u5ea6\n\u7a33\u5b9a\u6027\n\n\n\n\n\u63d2\u5165\u6392\u5e8f\n$\\Theta(n)$\n$\\Theta(n^2)$\n$\\Theta(n^2)$\n$\\Theta(1)$\n\u7a33\u5b9a\n\n\n\u5e0c\u5c14\u6392\u5e8f\n$\\Theta(n)$\n$\\Theta(n\\log n)$\n$\\Theta(\u7384\u5b66)$\n$\\Theta(1)$\n\u4e0d\u7a33\u5b9a\n\n\n\u9009\u62e9\u6392\u5e8f\n$\\Theta(n^2)$\n$\\Theta(n^2)$\n$\\Theta(n^2)$\n$\\Theta(1)$\n\u4e0d\u7a33\u5b9a\n\n\n\u5806\u6392\u5e8f\n$\\Theta(n\\log n)$\n$\\Theta(n\\log n)$\n$\\Theta(n\\log n)$\n$\\Theta(1)$\n\u4e0d\u7a33\u5b9a\n\n\n\u5192\u6ce1\u6392\u5e8f\n$\\Theta(n)$\n$\\Theta(n^2)$\n$\\Theta(n^2)$\n$\\Theta(1)$\n\u7a33\u5b9a\n\n\n\u5feb\u901f\u6392\u5e8f\n$\\Theta(n\\log n)$\n$\\Theta(n\\log n)$\n$\\Theta(n^2)$\n$\\Theta(\\log n)$\n\u4e0d\u7a33\u5b9a\n\n\n\u5feb\u901f\u6392\u5e8f\n$\\Theta(n\\log n)$\n$\\Theta(n\\log n)$\n$\\Theta(n\\log n)$\n$\\Theta(n\\log n)$\n\u7a33\u5b9a\n\n\n\u57fa\u6570\u6392\u5e8f\n$\\Theta(d(n+rd))$\n$\\Theta(d(r+n))$\n$\\Theta(d(r+n))$\n$\\Theta(rd+n)$\n\u7a33\u5b9a\n\n\n\n\uff08\u57fa\u6570\u6392\u5e8f\u7684\u590d\u6742\u5ea6\u4e2d\uff0cr \u4ee3\u8868\u5173\u952e\u8bcd\u57fa\u6570\uff0cd \u4ee3\u8868\u957f\u5ea6\uff0cn \u4ee3\u8868\u5173\u952e\u8bcd\u4e2a\u6570\uff09\n\uff08\u539f\u56fe\uff1ahttps:\/\/pic1.zhimg.com\/80\/v2-e3a121dea092f9ec2ef727ceab030aad_hd.jpg \uff09\nFrom: https:\/\/zhuanlan.zhihu.com\/p\/36120420","tags":[{"name":"OI\u5b66\u4e60","slug":"OI\u5b66\u4e60","permalink":"https:\/\/skywt.cn\/tag\/OI%E5%AD%A6%E4%B9%A0\/"},{"name":"OI\u7b97\u6cd5","slug":"OI\u7b97\u6cd5","permalink":"https:\/\/skywt.cn\/tag\/OI%E7%AE%97%E6%B3%95\/"}],"categories":[]},{"title":"\u725b\u5ba2\u7ec3\u4e60\u8d5b 17 F \u73a9\u6e38\u620f \u9898\u89e3\uff1a\u795e\u5947\u7684\u535a\u5f08","date":"2018-10-19T20:25:11+08:00","path":"https:\/\/skywt.cn\/posts\/nowcoder-17f","text":"Description\n\u725b\u5ba2\u7ec3\u4e60\u8d5b 17 F \u3010\u73a9\u6e38\u620f\u3011\uff1aLink\n\u7ed9\u5b9a\u4e24\u4e2a\u4e32 S \u548c T\uff0c|S| &gt;= |T|\u3002alice \u548c bob \u8f6e\u6d41\u64cd\u4f5c\u4e32 S\uff0cbob \u5148\u624b\u3002\n\u5bf9\u4e8e\u6bcf\u6b21\u64cd\u4f5c\uff0calice \u6216 bob \u4f1a\u9009\u62e9\u5220\u6389 S \u7684\u7b2c\u4e00\u4f4d\u6216\u6700\u540e\u4e00\u4f4d\u3002\u5f53\u64cd\u4f5c\u4ee5\u540e\u7684\u4e32\u7684\u957f\u5ea6\u7b49\u4e8e |T| \u65f6\uff0c\u6e38\u620f\u505c\u6b62\u3002\u5982\u679c\u505c\u6b62\u65f6\u7684\u4e32=T\uff0c\u5219 alice \u83b7\u80dc\uff0c\u5426\u5219 bob \u83b7\u80dc\u3002\u95ee\u5728 alice \u548c bob \u5747\u91c7\u53d6\u6700\u4f18\u7b56\u7565\u7684\u60c5\u51b5\u4e0b\uff0c\u8c01\u8d62\uff1f\n\n\u6570\u636e\u8303\u56f4\uff1a\n1 &lt;= |S| &lt;= |T| &lt;= 500000\uff0cS\u548cT\u5747\u7531\u5c0f\u5199\u5b57\u6bcd\u6784\u6210\n\u5b57\u7b26\u4e32\u603b\u957f\u5ea6 &lt;= 1000000\n\u6570\u636e\u7ec4\u6570 &lt;= 1000\nHint\n\u535a\u5f08\u7c7b\u578b\u7684\u9898\u76ee\uff0c\u8fd8\u662f\u9700\u8981\u4ed4\u7ec6\u5206\u6790\u7684\u3002\nAnalysis\nbob \u5148\u624b\uff0c\u4ed6\u60f3\u8981\u8ba9\u6700\u540e\u7684\u4e32\u4e0d\u7b49\u4e8e T\u3002\n\u65e2\u7136\u8d77\u59cb\u5b57\u7b26\u4e32\u662f S\uff0c\u7ec8\u6b62\u5b57\u7b26\u4e32\u662f T\uff0c\u5219\u8981\u5220\u53bb |S|-|T| \u4e2a\u5b57\u7b26\uff08\u4e3a\u4e86\u65b9\u4fbf\uff0c\u4e0b\u9762\u8bbe k=|S|-|T|\uff09\u3002\n\u7531\u4e8e\u8fd9\u4e2a\u6e38\u620f\u7684\u6761\u4ef6\u8bbe\u5b9a\u4f7f\u5f97\u540e\u624b\u5904\u4e8e\u52a3\u52bf\uff0c\u6211\u4eec\u5c1d\u8bd5\u4ece\u540e\u624b\u7684\u89d2\u5ea6\u5206\u6790\u2026\u2026\n\u9996\u5148\u6211\u4eec\u77e5\u9053\uff1a\u5982\u679c\u5b57\u7b26\u4e32\u7b49\u4e8e T \u53ef\u4ee5\u6ee1\u8db3\uff0c\u6700\u7ec8\u5b57\u7b26\u4e32\u80af\u5b9a\u5728\u8d77\u59cb\u5b57\u7b26\u4e32\u4e2d\u95f4\u6216\u8005\u4e2d\u95f4\u504f\u5de6\u4e00\u4e2a\u5b57\u7b26\u6216\u8005\u504f\u53f3\u4e00\u4e2a\u5b57\u7b26\u3002\u5982\u4e0d\u7136\uff0c\u5148\u624b\u80af\u5b9a\u53ef\u4ee5\u7387\u5148\u628a\u8fd9\u4e2a\u6700\u7ec8\u5b57\u7b26\u4e32\u53d6\u6389\uff0c\u5c31\u6ca1\u6709\u4e0e T \u76f8\u7b49\u7684\u53ef\u80fd\u4e86\u3002\n\u6240\u4ee5\u5728\u4e0a\u8ff0\u6761\u4ef6\u6ee1\u8db3\u60c5\u51b5\u4e0b\uff0c\u540e\u624b\u7684\u6700\u4f18\u7b56\u7565\u80af\u5b9a\u662f\u5bf9\u79f0\u53d6\u5b57\u7b26\uff1a\u5373\u5bf9\u65b9\u53d6\u5de6\u81ea\u5df1\u5c31\u53d6\u53f3\uff0c\u5bf9\u65b9\u53d6\u53f3\u81ea\u5df1\u5c31\u53d6\u5de6\u3002\u56e0\u4e3a\u540e\u624b\u8981\u4fdd\u8bc1\u5de6\u8fb9\u53d6\u4e86\u7684\u5b57\u7b26\u548c\u53f3\u8fb9\u53d6\u4e86\u7684\u5b57\u7b26\u6570\u91cf\u4e4b\u5dee\u4e0d\u5927\u4e8e 1\uff0c\u5426\u5219\u548c\u524d\u9762\u4e00\u6837\uff0c\u5148\u624b\u80af\u5b9a\u53ef\u4ee5\u7387\u5148\u628a\u8fd9\u4e2a\u6700\u7ec8\u5b57\u7b26\u4e32\u53d6\u6389\uff0c\u5c31\u6ca1\u6709\u4e0e T \u76f8\u7b49\u7684\u53ef\u80fd\u4e86\u3002\n\u77e5\u9053\u4e86\u8fd9\u4e24\u4e2a\u201c\u5927\u4f53\u7b56\u7565\u201d\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5bf9\u4e34\u7ec8\u72b6\u6001\u5206\u6790\u4e86\u3002\n\u63a5\u4e0b\u6765\u5c31\u662f\u6700\u7ec8\u53d6\u5230\u4e2d\u95f4\uff0c\u5947\u5076\u7684\u95ee\u9898\u3002\u5206\u5947\u5076\u8ba8\u8bba\uff1a\n\n\u5047\u8bbe k \u662f\u5947\u6570\uff1a\u90a3\u4e48\u6700\u540e\u4e00\u6b65\u80af\u5b9a\u662f\u5148\u624b\u64cd\u4f5c\uff0c\u4e5f\u5c31\u662f\u4e0d\u60f3\u8ba9\u4e24\u5b57\u7b26\u4e32\u76f8\u7b49\u7684\u4eba\u3002\u540e\u624b\u7684\u6700\u4f18\u64cd\u4f5c\u662f\uff0c\u5148\u624b\u600e\u4e48\u53d6\uff0c\u540e\u624b\u5c31\u4ece\u53e6\u4e00\u7aef\u5bf9\u79f0\u53d6\u3002\u90a3\u4e48\u6700\u540e\u8981\u8ba9\u5b57\u7b26\u4e32\u76f8\u7b49\uff0c\u5fc5\u987b\u8ba9\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5\u90fd\u6ee1\u8db3\uff0c\u8fd9\u6837\u6700\u540e\u4e00\u6b65\u624d\u65e0\u8bba\u600e\u4e48\u53d6\u90fd\u4f1a\u76f8\u7b49\uff1b\u5426\u5219\u5c31\u4e0d\u4f1a\u76f8\u7b49\uff1a\n\n\u5de6\u8fb9\u53d6\u4e86 [k\/2] \u4e2a\uff0c\u53f3\u8fb9\u53d6\u4e86 [k\/2]+1 \u4e2a\uff0c\u6700\u540e\u7684\u5b57\u7b26\u4e32\u7b49\u4e8e T\uff1b\n\u5de6\u8fb9\u53d6\u4e86 [k\/2]+1 \u4e2a\uff0c\u53f3\u8fb9\u53d6\u4e86 [k\/2] \u4e2a\uff0c\u6700\u540e\u7684\u5b57\u7b26\u4e32\u7b49\u4e8e T\uff1b\n\n\u5047\u8bbe k \u662f\u5076\u6570\uff1a\u6700\u540e\u4e00\u6b65\u540e\u624b\u64cd\u4f5c\uff0c\u540e\u624b\u8d62\u53c8\u6709\u51e0\u79cd\u60c5\u51b5\uff1a\n\n\u5de6\u8fb9\u548c\u53f3\u8fb9\u90fd\u53d6\u4e86 [k\/2] \u4e2a\uff0c\u6700\u540e\u5b57\u7b26\u4e32\u7b49\u4e8e T\uff1b\n\u5de6\u8fb9 [k\/2]-1 \u4e2a\uff0c\u53f3\u8fb9 [k\/2]+1 \u4e2a\uff0c\u6700\u540e\u7684\u5b57\u7b26\u4e32\u7b49\u4e8e T\uff1b\u5e76\u4e14\u5de6\u8fb9 [k\/2]+1 \u53f3\u8fb9 [k\/2]-1 \u6700\u540e\u7684\u5b57\u7b26\u4e32\u4e5f\u7b49\u4e8e T\u3002\u8fd9\u6837\u7684\u65b9\u6cd5\u8ba9\u5148\u624b\u65e0\u8bba\u6700\u540e\u600e\u4e48\u53d6\uff0c\u540e\u624b\u90fd\u6709\u529e\u6cd5\u8d62\u3002\n\n\n\u5f88\u591a\u9898\u89e3\u90fd\u8bf4\u8981\u7528 KMP\uff0c\u5176\u5b9e\u5e76\u4e0d\u9700\u8981\uff0c\u53ea\u8981\u8fdb\u884c $\\Theta (N)$ \u7684\u4e00\u6b21\u5b57\u7b26\u4e32\u6bd4\u8f83\u5373\u53ef\u3002\nCode\n#include&lt;cstdio&gt;\n#include&lt;iostream&gt;\n#include&lt;cstring&gt;\n#include&lt;string&gt;\n#include&lt;algorithm&gt;\n\nusing namespace std;\n#define int long long\n\nconst int maxlen=1e6+5;\nint T;\nint len1,len2;\nchar s[maxlen],t[maxlen];\n\ninline bool check(int x){\n    for (int i=0;i&lt;len2;i++) if (x+i&gt;=len1 || s[x+i]!=t[i]) return false;\n    return true;\n}\n\nsigned main(){\n    scanf(\"%lld\",&amp;T);\n    while (T--){\n        scanf(\"%s%s\",s,t);\n        len1=strlen(s);\n        len2=strlen(t);\n        if (len1==len2&amp;&amp;check(0)) {printf(\"Alice\\n\");continue;}\n        bool ans;\n        if ((len1-len2)&amp;1) ans=check((len1-len2)\/2)&amp;&amp;check((len1-len2)\/2+1);\n        else ans=check((len1-len2)\/2)||(check((len1-len2)\/2-1)&amp;&amp;check((len1-len2)\/2+1));\n        if (ans) printf(\"Alice\\n\"); else printf(\"Bob\\n\");\n    }\n    return 0;\n}","tags":[{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u535a\u5f08","slug":"\u535a\u5f08","permalink":"https:\/\/skywt.cn\/tag\/%E5%8D%9A%E5%BC%88\/"}],"categories":[]},{"title":"C++ \u624b\u5199 Bitset \u4ee3\u7801\u6a21\u677f","date":"2018-10-27T08:49:40+08:00","path":"https:\/\/skywt.cn\/posts\/bitset","text":"\u5f15\u8a00\nBitset \u662f\u4e00\u79cd\u5229\u7528\u5bf9\u5e03\u5c14\u6570\u7ec4\u538b\u4f4d\u5b58\u50a8\u7684\u65b9\u6cd5\uff0c\u8fbe\u5230\u4f18\u5316\u65f6\u95f4\u5e38\u6570\u3001\u7a7a\u95f4\u5e38\u6570\u7684\u76ee\u7684\u7684\u9ed1\u79d1\u6280\u3002\u5229\u7528 Bitset\uff0c\u53ef\u4ee5\u65b9\u4fbf\u5730\u5bf9\u5e03\u5c14\u6570\u7ec4\u8fdb\u884c\u6309\u4f4d\u903b\u8f91\u8fd0\u7b97\uff0c\u4f18\u5316 32 \u6216 64 \u7684\u5e38\u6570\u3002\u5728\u67d0\u4e9b\u7d20\u8d28\u6781\u5dee\u7684\u5361\u5e38\u9898\u4e2d\u8fd0\u7528\u4f1a\u6709\u5947\u6548\u3002\n\nBitset \u53ef\u4ee5\u76f4\u63a5\u5f53\u505a\u5e03\u5c14\u6570\u7ec4\u4f7f\u7528\u3002C++ STL \u4e2d\u4e5f\u5185\u7f6e\u4e86 Bitset\uff0c\u7136\u800c\u7531\u4e8e\u5e38\u6570\u8f83\u5927\uff0c\u4e0d\u5982\u624b\u5199\u7684 Bitset \u4f18\u79c0\u3002\n\u4ee3\u7801\u6a21\u677f\n Github Link\n\u6ce8\u610f\uff1a\u5982\u679c\u9700\u8981\u6539\u4e3a 64 \u4f4d Bitset\uff0c\u9700\u8981\u628a __builtin_popcount() \u51fd\u6570\u6539\u4e3a __builtin_popcountll() \uff08\u6216\u8005\u76f4\u63a5\u624b\u5199\uff5e\uff09\u3002\nstruct bitset{\n    static const int maxn=35,maxm=30;\n    int set[maxn];\n\n    inline void clear(){\n        memset(set,0,sizeof(set));\n    }\n\n    inline bool operator [](int index){\n        index--;\n        return (set[index\/maxm]&gt;&gt;index%maxm)&amp;1;\n    }\n\n    inline void set_value(int index,int value){\n        index--;\n        if (value) set[index\/maxm]|=(int)1&lt;&lt;index%maxm; else set[index\/maxm]&amp;=~((int)1&lt;&lt;index%maxm);\n    }\n\n    inline void merge(bitset &amp;b){\n        for (int i=0;i&lt;maxn;i++) set[i]|=b.set[i];\n    }\n\n    inline int count(){\n        int ret=0;\n        for (int i=0;i&lt;maxn;i++) ret+=__builtin_popcount(set[i]);\n        return ret;\n    }\n};","tags":[{"name":"C++\u8bed\u8a00","slug":"C-\u8bed\u8a00","permalink":"https:\/\/skywt.cn\/tag\/C-%E8%AF%AD%E8%A8%80\/"},{"name":"OI\u5b66\u4e60","slug":"OI\u5b66\u4e60","permalink":"https:\/\/skywt.cn\/tag\/OI%E5%AD%A6%E4%B9%A0\/"}],"categories":[]},{"title":"\u77e9\u9635\u4e58\u6cd5\u5728\u56fe\u8bba\u4e2d\u7684\u7b80\u5355\u5e94\u7528","date":"2018-10-30T20:15:04+08:00","path":"https:\/\/skywt.cn\/posts\/matrix-multiply-in-graph","text":"\u77e9\u9635\u4e58\u6cd5\u7684\u5f88\u591a\u5e94\u7528\u90fd\u662f\u56f4\u7ed5\u77e9\u9635\u4e58\u6cd5\u7684\u5b9a\u4e49\u5f0f\u5c55\u5f00\u7684\uff1a\n$$C[i,j]=\\sum_{k=1}^{b} A[i,k]\\ast B[k,j]$$\n\u672c\u8d28\u4e0a\u662f\u4e00\u79cd\u52a8\u6001\u89c4\u5212\u5427\u3002\n\n\u4ee3\u7801\u6a21\u677f\n\u77e9\u9635\u5404\u79cd\u64cd\u4f5c\u7684\u4ee3\u7801\u6a21\u677f\u2026\u2026\n Github Link\nstruct matrix{\n    static const int maxn=55;\n    int n,m,a[maxn][maxn];\n\n    matrix(){\n        memset(a,0,sizeof(a));n=m=0;\n    }\n\n    void set_zero(int x,int y){\n        n=x;m=y;\n        memset(a,0,sizeof(a));\n    }\n\n    void set_unit(int x,int y){\n        n=x;m=y;\n        memset(a,0,sizeof(a));\n        for (int i=0;i&lt;min(n,m);i++) a[i][i]=1;\n    }\n\n    bool operator ==(matrix &amp;b){\n        if (n!=b.n || m!=b.m) return false;\n        for (int i=0;i&lt;n;i++){\n            for (int j=0;j&lt;n;j++){\n                if (a[i][j]!=b.a[i][j]) return false;\n            }\n        }\n        return true;\n    }\n\n    bool operator !=(matrix &amp;b){\n        return !(*this == b);\n    }\n\n    matrix operator +(matrix &amp;b){\n        matrix ret;ret.set_zero(n,m);\n        for (int i=0;i&lt;n;i++){\n            for (int j=0;j&lt;m;j++){\n                ret.a[i][j]=(a[i][j]+b.a[i][j])%tt;\n            }\n        }\n        return ret;\n    }\n\n    matrix operator -(matrix &amp;b){\n        matrix ret;ret.set_zero(n,m);\n        for (int i=0;i&lt;n;i++){\n            for (int j=0;j&lt;m;j++){\n                ret.a[i][j]=(a[i][j]-b.a[i][j]+tt)%tt;\n            }\n        }\n        return ret;\n    }\n\n    matrix operator *(matrix &amp;b){\n        matrix ret;ret.set_zero(n,b.m);\n        for (int k=0;k&lt;m;k++){\n            for (int i=0;i&lt;n;i++){\n                for (int j=0;j&lt;b.m;j++){\n                    ret.a[i][j]=(ret.a[i][j]+a[i][k]*b.a[k][j]%tt)%tt;\n                }\n            }\n        }\n        return ret;\n    }\n\n    matrix operator ^(int b){\n        matrix ret;ret.set_unit(n,m);\n        matrix w;w=*this;\n        while (b){\n            if (b&amp;1) ret=ret*w;\n            b&gt;&gt;=1;w=w*w;\n        }\n        return ret;\n    }\n\n    int count_sum(){\n        int ret=0;\n        for (int i=0;i&lt;n;i++){\n            for (int j=0;j&lt;m;j++){\n                ret=(ret+a[i][j])%tt;\n            }\n        }\n        return ret;\n    }\n};\nHDU 2157 How many ways??\n  HDU 2157 Link\nDescription\n\u6625\u5929\u5230\u4e86\uff0cHDU \u6821\u56ed\u91cc\u5f00\u6ee1\u4e86\u82b1\uff0c\u59f9\u7d2b\u5ae3\u7ea2\uff0c\u975e\u5e38\u7f8e\u4e3d\u3002\u8471\u5934\u662f\u4e2a\u7231\u82b1\u7684\u4eba\uff0c\u770b\u7740\u6821\u82b1\u6821\u8349\u7ade\u76f8\u5f00\u653e\uff0c\u6f2b\u6b65\u6821\u56ed\uff0c\u5fc3\u60c5\u4e5f\u53d8\u5f97\u8212\u7545\u3002\u4e3a\u4e86\u591a\u770b\u770b\u8fd9\u8ff7\u4eba\u7684\u6821\u56ed\uff0c\u8471\u5934\u51b3\u5b9a\uff0c\u6bcf\u6b21\u4e0a\u8bfe\u90fd\u8d70\u4e0d\u540c\u7684\u8def\u7ebf\u53bb\u6559\u5ba4\uff0c\u4f46\u662f\u7531\u4e8e\u65f6\u95f4\u95ee\u9898\uff0c\u6bcf\u6b21\u53ea\u80fd\u7ecf\u8fc7 k \u4e2a\u5730\u65b9\uff0c\u6bd4\u65b9\u8bf4\uff0c\u8fd9\u6b21\u8471\u5934\u51b3\u5b9a\u7ecf\u8fc7 2 \u4e2a\u5730\u65b9\uff0c\u90a3\u4ed6\u53ef\u4ee5\u5148\u53bb\u95ee\u9f0e\u5e7f\u573a\u770b\u770b\u55b7\u6cc9\uff0c\u518d\u53bb\u6559\u5ba4\uff0c\u4e5f\u53ef\u4ee5\u5148\u5230\u4f53\u80b2\u573a\u8dd1\u51e0\u5708\uff0c\u518d\u5230\u6559\u5ba4\u3002\u4ed6\u975e\u5e38\u60f3\u77e5\u9053\uff0c\u4ece A \u70b9\u6070\u597d\u7ecf\u8fc7 k \u4e2a\u70b9\u5230\u8fbe B \u70b9\u7684\u65b9\u6848\u6570\uff0c\u5f53\u7136\u8fd9\u4e2a\u6570\u6709\u53ef\u80fd\u975e\u5e38\u5927\uff0c\u6240\u4ee5\u4f60\u53ea\u8981\u8f93\u51fa\u5b83\u6a21\u4e0a 1000 \u7684\u4f59\u6570\u5c31\u53ef\u4ee5\u4e86\u3002\u4f60\u80fd\u5e2e\u5e2e\u4ed6\u4e48\uff1f\uff1f\u4f60\u53ef\u51b3\u5b9a\u4e86\u8471\u5934\u4e00\u5929\u80fd\u770b\u591a\u5c11\u6821\u82b1\u54e6\u3002\nInput\n\u8f93\u5165\u6570\u636e\u6709\u591a\u7ec4\uff0c\u6bcf\u7ec4\u7684\u7b2c\u4e00\u884c\u662f 2 \u4e2a\u6574\u6570 $n, m(0 < n ","tags":[{"name":"OI\u5b66\u4e60","slug":"OI\u5b66\u4e60","permalink":"https:\/\/skywt.cn\/tag\/OI%E5%AD%A6%E4%B9%A0\/"},{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u6570\u5b66\u9898","slug":"\u6570\u5b66\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E6%95%B0%E5%AD%A6%E9%A2%98\/"}],"categories":[]},{"title":"CodeForces 447E - DZY Loves Fibonacci Numbers \u9898\u89e3\uff1a\u7ebf\u6bb5\u6811","date":"2019-01-29T20:01:45+08:00","path":"https:\/\/skywt.cn\/posts\/cf447e","text":"Description\nLink\nIn mathematical terms, the sequence $F_n$ of Fibonacci numbers is defined by the recurrence relation\n$$F_1\u2009=\u20091; F_2\u2009=\u20091; F_n\u2009=\u2009F_{n\u2009-\u20091}\u2009+\u2009F_{n\u2009-\u20092} (n\u2009>\u20092)$$\nDZY loves Fibonacci numbers very much. Today DZY gives you an array consisting of n integers: $a_1,\u2009a_2,\u2009\\dots,\u2009a_n$. Moreover, there are $m$ queries, each query has one of the two types:\n\n\nFormat of the query &quot;1 l r&quot;. In reply to the query, you need to add $F_{i\u2009-\u2009l\u2009+\u20091}$ to each element $a_i$, where $l\u2009\\leq\u2009i\u2009\\leq\u2009r$.\nFormat of the query &quot;2 l r&quot;. In reply to the query you should output the value of  modulo $1000000009 (10^9\u2009+\u20099)$.\n\nHelp DZY reply to all the queries.\n\ntime limit per test: 4 seconds\nmemory limit per test: 256 megabytes\ninput: standard input\noutput: standard output\n\nInput\nThe first line of the input contains two integers $n$ and $m (1\u2009\u2264\u2009n,\u2009m\u2009\u2264\u2009300000)$. The second line contains $n$ integers $a_1,\u2009a_2,\u2009\\dots,\u2009a_n$ ($1\u2009\u2264\u2009a_i\u2009\u2264\u200910^9$) \u2014 initial array $a$.\nThen, $m$ lines follow. A single line describes a single query in the format given in the statement. It is guaranteed that for each query inequality $1\u2009\u2264\u2009l\u2009\u2264\u2009r\u2009\u2264\u2009n$ holds.\nOutput\nFor each query of the second type, print the value of the sum on a single line.\nExamples\ninput\n4 4\n1 2 3 4\n1 1 4\n2 1 4\n1 2 4\n2 1 3\n\noutput\n17\n12\n\nNote\nAfter the first query, $a\u2009=\u2009[2,\u20093,\u20095,\u20097]$.\nFor the second query, $sum\u2009=\u20092\u2009+\u20093\u2009+\u20095\u2009+\u20097\u2009=\u200917$.\nAfter the third query, $a\u2009=\u2009[2,\u20094,\u20096,\u20099]$.\nFor the fourth query, $sum\u2009=\u20092\u2009+\u20094\u2009+\u20096\u2009=\u200912$.\nTranslation\n\u9898\u610f\uff1a\u7ed9\u51fa\u4e00\u4e2a\u6570\u7ec4 $a_i$\uff0c\u73b0\u5728\u6709 $m$ \u4e2a\u64cd\u4f5c\uff0c\u6bcf\u4e2a\u64cd\u4f5c\u7ed9\u51fa L \u548c R\uff0c\u53ef\u80fd\u662f\u5c06\u8fd9\u4e2a\u533a\u95f4\u91cc\u6240\u6709\u6570\u5b57\u52a0\u4e0a\u6590\u6ce2\u90a3\u5951\u6570\u5217\u5bf9\u5e94\u7684\u9879\uff08\u7b2c $i$ \u4e2a\u6570\u5b57\u52a0 $F_{i-L+1}$\uff09\uff0c\u6216\u8005\u662f\u67e5\u8be2\u8fd9\u4e2a\u533a\u95f4\u6240\u6709\u503c\u4e4b\u548c\u3002\nAnalysis\n\u80af\u5b9a\u60f3\u5230\u7528\u7ebf\u6bb5\u6811\u3002\u4f46\u662f\u4e00\u822c\u7684\u7ebf\u6bb5\u6811\u53ea\u80fd\u7ef4\u62a4\u52a0\u548c\uff0c\u9700\u8981\u8003\u8651\u5982\u4f55\u5bf9\u6590\u6ce2\u90a3\u5951\u6570\u5217\u4e5f\u6784\u9020 lazy tag\u3002\u53ef\u4ee5\u53d1\u73b0\u4ee5\u4e0b\u4e24\u4e2a\u7ed3\u8bba\uff1a\n\n\u5982\u679c\u53ea\u5b58\u6570\u5217\u7684\u524d\u4e24\u9879 a \u548c b\uff0c\u53ef\u4ee5\u63a8\u51fa\u8fd9\u4e2a\u6570\u5217\uff0c\u5305\u62ec\u53ef\u4ee5 $\\Theta(1)$ \u63a8\u51fa\u7b2c $n$ \u9879\u548c\u524d $n$ \u9879\u4e4b\u548c\u3002\u5217\u8868\u53ef\u4ee5\u53d1\u73b0\u89c4\u5f8b\uff1a\n\n\n\n\n1\n2\n3\n4\n5\n...\nn\n\n\n\n\na\nb\na+b\na+2b\n2a+3b\n...\n$F_{n-2}a+F_{n-1}b$\n\n\n\n\uff08$F_i$ \u8868\u793a\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7b2c $i$ \u9879\uff09\n\n\u5982\u4f55 $\\Theta(1)$ \u6c42\u548c\uff1f\n\n$$Sum = \\sum_{i=1}^{n} a\\ast F_{n-2}+b\\ast F_{n-1} = a\\ast sum_{n-2} +b\\ast sum_{n-1}+a$$\n\uff08$sum_i$ \u8868\u793a\u6590\u6ce2\u90a3\u5951\u524d $i$ \u9879\u524d\u7f00\u548c\uff09\n\n\u8fd9\u6837\u7684\u6570\u5217\u5177\u6709\u53ef\u52a0\u6027\uff0c\u4e5f\u5c31\u662f lazy tag \u5982\u679c\u76f4\u63a5\u7d2f\u8ba1\u4e0d\u4f1a\u6709\u95ee\u9898\u3002\n\n\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u5199\u4e00\u4e2a Fibonacci \u76f8\u5173\u7684\u6a21\u5757\uff1a\nnamespace Fibonacci{\n    int f[maxn],sum[maxn];\n\n    inline void build(){\n        f[1]=f[2]=1;sum[1]=1;sum[2]=2;\n        for (int i=3;i&lt;=N;i++) f[i]=(f[i-1]+f[i-2])%tt,sum[i]=(sum[i-1]+f[i])%tt;\n    }\n\n    inline int query(int a,int b,int n){\n        if (n==0) return 0; else\n        if (n==1) return a%tt; else\n        if (n==2) return b%tt; else\n        return (f[n-2]*a%tt+f[n-1]*b%tt)%tt;\n    }\n\n    inline int get_sum(int a,int b,int n){\n        if (n==0) return 0; else\n        if (n==1) return a%tt; else\n        if (n==2) return (a+b)%tt; else\n        return (a*sum[n-2]%tt+b*sum[n-1]%tt+a%tt)%tt;\n    }\n}\n\u90a3\u4e48\u63a5\u4e0b\u6765\u6211\u4eec\u53ef\u4ee5\u5199\u4e00\u4e2a\u53d8\u5f02\u7684\u7ebf\u6bb5\u6811\u4e86\u3002\u6253\u4e24\u4e2a\u70c2\u6807\u8bb0 tag_a \u548c tag_b \u5206\u522b\u8868\u793a\u6570\u5217\u7b2c\u4e00\u9879\u548c\u7b2c\u4e8c\u9879\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cupdate \u64cd\u4f5c\u65f6\u5728\u5411\u4e0b\u201c\u5206\u5272\u201d\u7684\u65f6\u5019\u9700\u8981\u7279\u522b\u6ce8\u610f\u4e0b\u6570\u5217\u5de6\u7aef\u70b9\u7684\u4e24\u79cd\u60c5\u51b5\u3002\n\u5efa\u6811\u662f\u4e0d\u9700\u8981\u7684\uff0c\u53ef\u4ee5\u5047\u88c5\u539f\u6765\u7684\u5e8f\u5217\u5168\u662f 0\uff0c\u8be2\u95ee\u7684\u65f6\u5019\u518d\u524d\u7f00\u548c\u7d2f\u52a0\u3002\u53ef\u4ee5\u5c11\u5199\u4e00\u4e2a build \u4e86\uff5e\nCode\n\u5199\u8fd9\u9898\u9700\u8981\u8010\u5fc3\u2026\u2026\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n#include&lt;vector&gt;\n\nusing namespace std;\n#define int long long\n\nconst int maxn=300005,N=300000;\nconst int tt=1000000009;\n\ninline int read(){\n    int ret=0,f=1;char ch=getchar();\n    while (ch&lt;'0'||ch&gt;'9') {if (ch=='-') f=-1;ch=getchar();}\n    while (ch&gt;='0'&amp;&amp;ch&lt;='9') ret=ret*10+ch-'0',ch=getchar();\n    return ret*f;\n}\n\ninline void plus_mod(int &amp;x,int y){\n    x=(x+y)%tt;\n}\n\nnamespace Fibonacci{\n    int f[maxn],sum[maxn];\n\n    inline void build(){\n        f[1]=f[2]=1;sum[1]=1;sum[2]=2;\n        for (int i=3;i&lt;=N;i++) f[i]=(f[i-1]+f[i-2])%tt,sum[i]=(sum[i-1]+f[i])%tt;\n    }\n\n    inline int query(int a,int b,int n){\n        if (n==0) return 0; else\n        if (n==1) return a%tt; else\n        if (n==2) return b%tt; else\n        return (f[n-2]*a%tt+f[n-1]*b%tt)%tt;\n    }\n\n    inline int get_sum(int a,int b,int n){\n        if (n==0) return 0; else\n        if (n==1) return a%tt; else\n        if (n==2) return (a+b)%tt; else\n        return (a*sum[n-2]%tt+b*sum[n-1]%tt+a%tt)%tt;\n    }\n}\n\n#define ls ((p&lt;&lt;1))\n#define rs ((p&lt;&lt;1)+1)\n#define mid (((tr-tl)&gt;&gt;1)+tl)\n\nnamespace SegmentTree{\n    int sum[maxn*4];\n    int tag_a[maxn*4],tag_b[maxn*4];\n\n    inline void push_down(int tl,int tr,int p){\n        int as=Fibonacci::query(tag_a[p],tag_b[p],mid+1-tl+1);\n        int bs=Fibonacci::query(tag_a[p],tag_b[p],mid+2-tl+1);\n        plus_mod(sum[ls],Fibonacci::get_sum(tag_a[p],tag_b[p],mid-tl+1));\n        plus_mod(sum[rs],Fibonacci::get_sum(as,bs,tr-(mid+1)+1));\n        plus_mod(tag_a[ls],tag_a[p]); plus_mod(tag_b[ls],tag_b[p]);\n        plus_mod(tag_a[rs],as); plus_mod(tag_b[rs],bs);\n        tag_a[p]=tag_b[p]=0;\n    }\n\n    inline void update(int sl,int sr,int tl,int tr,int p,int a,int b,int st){\n        if (sl&lt;=tl &amp;&amp; tr&lt;=sr){\n            plus_mod(sum[p],Fibonacci::get_sum(a,b,tr-tl+1));\n            plus_mod(tag_a[p],a); plus_mod(tag_b[p],b);\n            return;\n        }\n        push_down(tl,tr,p);\n        int as,bs;\n        if (sl&lt;=mid  ){\n            update(sl,sr,tl,mid,ls,a,b,st);\n            as=Fibonacci::query(a,b,mid+1-max(sl,tl)+1);\n            bs=Fibonacci::query(a,b,mid+2-max(sl,tl)+1);\n        } else {\n            as=a;bs=b;\n        }\n        if (mid+1&lt;=sr) update(sl,sr,mid+1,tr,rs,as,bs,mid+1);\n        sum[p]=(sum[ls]+sum[rs])%tt;\n    }\n\n    inline int query(int sl,int sr,int tl,int tr,int p){\n        if (sl&lt;=tl &amp;&amp; tr&lt;=sr) return sum[p];\n        push_down(tl,tr,p);\n        int ret=0;\n        if (sl&lt;=mid  ) plus_mod(ret,query(sl,sr,tl,mid,ls));\n        if (mid+1&lt;=sr) plus_mod(ret,query(sl,sr,mid+1,tr,rs));\n        return ret%tt;\n    }\n}\n\nint n,m;\nint a[maxn],sum[maxn];\n\nsigned main(){\n    Fibonacci::build();\n    n=read();m=read();\n    for (int i=1;i&lt;=n;i++) a[i]=read(),sum[i]=(sum[i-1]+a[i])%tt;\n    for (int i=1;i&lt;=m;i++){\n        int opt=read(),x=read(),y=read();\n        if (opt==1){\n            SegmentTree::update(x,y,1,n,1,1,1,x);\n        } else if (opt==2){\n            int ans=SegmentTree::query(x,y,1,n,1);\n            printf(\"%lld\\n\",(ans+sum[y]-sum[x-1]+tt)%tt);\n        }\n    }\n    return 0;\n}\n\u9893\u4e86\u534a\u4e2a\u5b66\u671f\u6587\u5316\u8bfe\uff0c\u8be5\u56de\u6765\u9893 OI \u4e86 :new_moon_with_face:\n\u6211\u7684\u535a\u5ba2\u5e76\u6ca1\u6709\u5f03\u5751\uff01","tags":[{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u6570\u5b66\u9898","slug":"\u6570\u5b66\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E6%95%B0%E5%AD%A6%E9%A2%98\/"},{"name":"\u6570\u636e\u7ed3\u6784","slug":"\u6570\u636e\u7ed3\u6784","permalink":"https:\/\/skywt.cn\/tag\/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\/"}],"categories":[]},{"title":"CodeForces 295E - Yaroslav and Points \u9898\u89e3\uff1a\u53c8\u662f\u7ebf\u6bb5\u6811\uff01","date":"2019-01-30T21:20:52+08:00","path":"https:\/\/skywt.cn\/posts\/cf295e","text":"Description\nYaroslav has n points that lie on the $Ox$ axis. The coordinate of the first point is $x_1$, the coordinate of the second point is $x_2$, ..., the coordinate of the n-th point is \u2014 $x_n$. Now Yaroslav wants to execute $m$ queries, each of them is of one of the two following types:\n\nMove the $p_j$-th point from position $x_{p_j}$ to position $x_{p_j}\u2009+\u2009d_j$. At that, it is guaranteed that after executing such query all coordinates of the points will be distinct.\nCount the sum of distances between all pairs of points that lie on the segment $[l_j,\u2009r_j] (l_j\u2009\u2264\u2009r_j)$. In other words, you should count the sum of: $\\displaystyle \\sum_{l_j\\leq x_p\\leq x_q\\leq r_j} (x_q-x_p)$\nHelp Yaroslav.\nLink\n\ntime limit per test: 5 seconds\nmemory limit per test: 256 megabytes\ninput: standard input\noutput: standard output\n\nInput\nThe first line contains integer $n$ \u2014 the number of points ($1\u2009\u2264\u2009n\u2009\u2264\u200910^5$). The second line contains distinct integers $x_1,\u2009x_2,\u2009\\dots ,\u2009x_n$ \u2014 the coordinates of points ($|x_i|\u2009\u2264\u200910^9$).\nThe third line contains integer $m$ \u2014 the number of queries ($1\u2009\u2264\u2009m\u2009\u2264\u200910^5$). The next $m$ lines contain the queries. The $j$-th line first contains integer $t_j$ ($1\u2009\u2264\u2009t_j\u2009\u2264\u20092$) \u2014 the query type. If $t_j\u2009=\u20091$, then it is followed by two integers $p_j$ and $d_j$ ($1\u2009\u2264\u2009p_j\u2009\u2264\u2009n,\u2009|d_j|\u2009\u2264\u20091000$). If $t_j\u2009=\u20092$, then it is followed by two integers $l_j$ and $r_j$ ($-\u200910^9\u2009\u2264\u2009l_j\u2009\u2264\u2009r_j\u2009\u2264\u200910^9$).\nIt is guaranteed that at any moment all the points have distinct coordinates.\nOutput\nFor each type 2 query print the answer on a single line. Print the answers in the order, in which the queries follow in the input.\nPlease, do not use the %lld specifier to read or write 64-bit integers in C++. It is preferred to use the cin, cout streams of the %I64d specifier.\nExamples\nInput\n8\n36 50 28 -75 40 -60 -95 -48\n20\n2 -61 29\n1 5 -53\n1 1 429\n1 5 130\n2 -101 -71\n2 -69 53\n1 1 404\n1 5 518\n2 -101 53\n2 50 872\n1 1 -207\n2 -99 -40\n1 7 -389\n1 6 -171\n1 2 464\n1 7 -707\n1 1 -730\n1 1 560\n2 635 644\n1 7 -677\n\nOutput\n176\n20\n406\n1046\n1638\n156\n0\n\nTranslation\n\u9898\u610f\uff1a\u4e00\u7ef4\u6570\u8f74\u4e0a\u6709 $n$ \u4e2a\u70b9\uff0c\u6bcf\u4e2a\u70b9\u6709\u5750\u6807 $x_i$\uff0c\u73b0\u5728\u5bf9\u8fd9\u4e2a\u6570\u8f74\u4e0a\u7684\u70b9\u6709\u4e24\u79cd\u64cd\u4f5c\uff1a\n\n\u6539\u53d8\u67d0\u4e2a\u5750\u6807 $x_i$\uff0c\u5c06\u5176\u589e\u52a0 $d$\uff08\u6bcf\u6b21\u64cd\u4f5c d \u4e0d\u540c\uff09\uff1a\n\u67e5\u8be2 $[L_i,R_i]$ \u533a\u95f4\u5185\u7684 $\\sum_{x_i>x_j} x_i-x_j$\uff0c\u4e5f\u5c31\u662f\u4e24\u4e24\u70b9\u5bf9\u8ddd\u79bb\u4e4b\u548c\u3002\n\nAnalysis\n\u53c8\u53cc\u53d2\u53d5\u662f\u7ebf\u6bb5\u6811\u3002\n\u53ef\u4ee5\u5199\u4e2a\u5355\u70b9\u4fee\u6539\u533a\u95f4\u67e5\u8be2\u7684\u7ebf\u6bb5\u6811\u3002\u9996\u5148\u7531\u4e8e\u6570\u636e\u89c4\u6a21\u8fc7\u5927\uff0c\u9700\u8981\u79bb\u6563\u5316\uff0c\u628a\u64cd\u4f5c\u79bb\u7ebf\u4e0b\u6765\uff0c\u628a\u6240\u6709\u53ef\u80fd\u51fa\u73b0\u7684\u503c\uff08\u5305\u62ec\u521d\u59cb\u3001\u4fee\u6539\u548c\u67e5\u8be2\uff09\u5168\u90fd\u79bb\u6563\u3002\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e8e\u8fd9\u4e2a\u4e00\u7ef4\u6570\u8f74\u5efa\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u5982\u679c\u6709\u5219\u503c\u4e3a 1\uff0c\u5426\u5219\u4e3a 0\u3002\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e2a\u533a\u95f4\uff08\u7ebf\u6bb5\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\uff09\uff0c\u9700\u8981\u5b58\u50a8\u4ee5\u4e0b\u4e09\u4e2a\u4fe1\u606f\uff1a\n\n$sum_p$\uff1a\u8fd9\u4e2a\u533a\u95f4\u4e2d\u6240\u6709\u70b9\u5750\u6807\u4e4b\u548c\uff1b\n$tree_p$\uff1a\u8fd9\u4e2a\u533a\u95f4\u4e2d\u7684 $\\sum_{x_i>x_j} x_i-x_j$\uff1b\n$num_p$\uff1a\u8fd9\u4e2a\u533a\u95f4\u4e2d\u70b9\u7684\u6570\u91cf\u3002\n\u63a5\u4e0b\u6765\u9700\u8981\u8003\u8651\u5982\u4f55\u5408\u5e76\u3002\u5bf9\u4e8e $sum_p$ \u548c $num_p$ \u90fd\u53ef\u4ee5\u5b50\u6811\u5bf9\u5e94\u76f4\u63a5\u76f8\u52a0\uff0c\u53ea\u6709 $tree_p$ \u6bd4\u8f83\u9ebb\u70e6\uff1a\n\n$$tree_p=\\sum_{x_i>x_j} x_i-x_j = \\sum_{i=1}^n \\sum_{j=1}^n x_i - \\sum_{i=1}^n \\sum_{j=1}^n x_j$$\n\u6240\u4ee5\u5408\u5e76\u7684\u65f6\u5019\uff08\u5047\u8bbe ls \u662f\u5de6\u513f\u5b50\uff0crs \u662f\u53f3\u513f\u5b50\uff09\uff1a\n$$tree_p=tree_{ls}+tree_{rs}+num_{ls}\\ast sum_{rs}+num_{rs}\\ast sum_{ls}$$\nCode\n\u5177\u4f53\u5199\u8d77\u6765\u8981\u8003\u8651\u4e00(\u5f88)\u70b9(\u591a)\u7ec6\u8282 :new_moon_with_face: \u3002\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n#include&lt;vector&gt;\n#include&lt;map&gt;\n\nusing namespace std;\n#define int long long\n\ninline int read(){\n    int ret=0,f=1;char ch=getchar();\n    while (ch&lt;'0'||ch&gt;'9') {if (ch=='-') f=-1;ch=getchar();}\n    while (ch&gt;='0'&amp;&amp;ch&lt;='9') ret=ret*10+ch-'0',ch=getchar();\n    return ret*f;\n}\n\nconst int maxn=2e5+5;\nconst pair&lt;int,int&gt; zero_pair=make_pair(0,0);\nint n,m,N;\nmap&lt;int,int&gt; to;\nint numto[maxn*2],sx[maxn];\n\n#define ls ((p&lt;&lt;1))\n#define rs ((p&lt;&lt;1)+1)\n#define mid (((tr-tl)&gt;&gt;1)+tl)\n\nstruct sts{\n    int x,y,z;\n}zero_sts=(sts){0,0,0};\n\nnamespace SegmentTree{\n    int tree[maxn*4],sum[maxn*4],num[maxn*4];\n\n    inline void change(int x,int delta,int tl,int tr,int p){\n        if (x==tl &amp;&amp; tl==tr){\n            sum[p]+=delta*numto[x];\n            num[p]+=delta;\n            return;\n        }\n        if (x&lt;=mid  ) change(x,delta,tl,mid,ls);\n        if (mid+1&lt;=x) change(x,delta,mid+1,tr,rs);\n        num[p]=num[ls]+num[rs];\n        tree[p]=tree[ls]+tree[rs]+num[ls]*sum[rs]-num[rs]*sum[ls];\n        sum[p]=sum[rs]+sum[ls];\n        \/\/ printf(\"[%lld,%lld]: sum=%lld tree=%lld num=%lld\\n\",tl,tr,sum[p],tree[p],num[p]);\n    }\n\n    inline sts query(int sl,int sr,int tl,int tr,int p){\n        if (sl&lt;=tl &amp;&amp; tr&lt;=sr){\n            \/\/ printf(\"tl=%lld tr=%lld sum=%lld tree=%lld num=%lld\\n\",tl,tr,sum[p],tree[p],num[p]);\n            return (sts){sum[p],tree[p],num[p]};\n        }\n        sts ret1=zero_sts,ret2=zero_sts;\n        if (sl&lt;=mid  ) ret1=query(sl,sr,tl,mid,ls);\n        if (mid+1&lt;=sr) ret2=query(sl,sr,mid+1,tr,rs);\n        sts ret=(sts){ret1.x+ret2.x,  ret1.y+ret2.y+ret1.z*ret2.x-ret2.z*ret1.x,  ret1.z+ret2.z};\n        \/\/ printf(\"query (%lld %lld %lld %lld) : sum=%lld tree=%lld num=%lld\\n\",sl,sr,tl,tr,ret.x,ret.y,ret.z);;\n        return ret;\n    }\n}\n\nstruct opt{\n    int x,y,z;\n}opts[maxn];\n\nsigned main(){\n    n=read();\n    vector&lt;int&gt; vec;vec.clear();\n    for (int i=1;i&lt;=n;i++) numto[i]=sx[i]=read(),vec.push_back(numto[i]);\n    m=read();\n    for (int i=1;i&lt;=m;i++){\n        opts[i].x=read(),opts[i].y=read(),opts[i].z=read();\n        if (opts[i].x==1) numto[opts[i].y]+=opts[i].z,vec.push_back(numto[opts[i].y]);\n        else vec.push_back(opts[i].y),vec.push_back(opts[i].z);\n    }\n    sort(vec.begin(),vec.end());unique(vec.begin(),vec.end()); N=vec.size();\n    for (int i=1;i&lt;=N;i++) numto[i]=vec[i-1],to[numto[i]]=i;\/\/,cout&lt;&lt;i&lt;&lt;\" --&gt; \"&lt;&lt;vec[i-1]&lt;&lt;endl;\n\n    for (int i=1;i&lt;=n;i++) SegmentTree::change(to[sx[i]],1,1,N,1);\n    for (int i=1;i&lt;=m;i++){\n        if (opts[i].x==1){\n            SegmentTree::change(to[sx[opts[i].y]],-1,1,N,1);\n            sx[opts[i].y]+=opts[i].z;\n            SegmentTree::change(to[sx[opts[i].y]],1,1,N,1);\n        } else {\n            sts ans=SegmentTree::query(to[opts[i].y],to[opts[i].z],1,N,1);\n            printf(\"%lld\\n\",ans.y);\n            \/\/ printf(\" - %lld %lld %lld\\n\",ans.x,ans.y,ans.z);\n        }\n    }\n    return 0;\n}","tags":[{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u6570\u5b66\u9898","slug":"\u6570\u5b66\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E6%95%B0%E5%AD%A6%E9%A2%98\/"},{"name":"\u6570\u636e\u7ed3\u6784","slug":"\u6570\u636e\u7ed3\u6784","permalink":"https:\/\/skywt.cn\/tag\/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\/"}],"categories":[]},{"title":"CodeForces 614E - Necklace \u9898\u89e3\uff1a\u6784\u9020","date":"2019-01-31T13:39:21+08:00","path":"https:\/\/skywt.cn\/posts\/cf614e","text":"Description\nLink\nIvan wants to make a necklace as a present to his beloved girl. A necklace is a cyclic sequence of beads of different colors. Ivan says that necklace is beautiful relative to the cut point between two adjacent beads, if the chain of beads remaining after this cut is a palindrome (reads the same forward and backward).\n\n\n\n\nIvan has beads of n colors. He wants to make a necklace, such that it's beautiful relative to as many cuts as possible. He certainly wants to use all the beads. Help him to make the most beautiful necklace.\n\ntime limit per test: 2 seconds\nmemory limit per test: 256 megabytes\ninput: standard input\noutput: standard output\n\nInput\nThe first line of the input contains a single number $n (1\u2009\u2264\u2009n\u2009\u2264\u200926)$ \u2014 the number of colors of beads. The second line contains after n positive integers $a_i$   \u2014 the quantity of beads of $i$-th color. It is guaranteed that the sum of $a_i$ is at least 2 and does not exceed 100\u2009000.\nOutput\nIn the first line print a single number \u2014 the maximum number of beautiful cuts that a necklace composed from given beads may have. In the second line print any example of such necklace.\nEach color of the beads should be represented by the corresponding lowercase English letter (starting with a). As the necklace is cyclic, print it starting from any point.\nExamples\nInput #1\n3\n4 2 1\n\nOutput #1\n1\nabacaba\n\nInput #2\n1\n4\n\nOutput #2\n4\naaaa\n\nInput #3\n2\n1 1\n\nOutput #3\n0\nab\n\nNote\nIn the first sample a necklace can have at most one beautiful cut. The example of such a necklace is shown on the picture.\nIn the second sample there is only one way to compose a necklace.\nTranslation\n\u9898\u610f\uff1a\u7ed9\u4f60 n \u79cd\u5b57\u7b26\uff0c\u8bf7\u4f60\u786e\u5b9a\u4e00\u4e2a\u6392\u5217\u987a\u5e8f\uff0c\u628a\u5b83\u4eec\u6392\u6210\u4e00\u4e2a\u73af\u3002\u5982\u679c\u5728\u8fd9\u4e2a\u73af\u4e0a\u67d0\u4f4d\u7f6e\u5207\u4e00\u5200\u5f62\u6210\u7684\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f\u56de\u6587\u4e32\uff0c\u5219\u8bf4\u8fd9\u4e2a\u5207\u5272\u662f beautiful cut\uff0c\u73b0\u5728\u9700\u8981\u4f60\u6392\u6210\u7684\u73af\u80fd\u5207\u51fa\u6700\u591a\u7684 beautiful cut\uff0c\u5e76\u4e14\u8981\u6c42\u8f93\u51fa\u8fd9\u4e2a\u73af\u3002\nAnalysis\n\u76f4\u63a5\u8003\u8651\u6700\u540e\u5f62\u6210\u7684\u4e00\u4e2a\u73af\uff0c\u5982\u679c\u6211\u4eec\u5728 a \u4f4d\u7f6e\u5207\u4e00\u5200\u53ef\u4ee5\u5f62\u6210\u4e00\u4e2a\u56de\u6587\u4e32\uff0c\u5728 b \u4f4d\u7f6e\u4e5f\u53ef\u4ee5\uff0c\u90a3\u4e48\u5728 a \u5173\u4e8e b \u5bf9\u79f0\u7684\u4f4d\u7f6e\u4e5f\u4e00\u5b9a\u53ef\u4ee5\uff0c\u5728 b \u5173\u4e8e a \u5bf9\u79f0\u7684\u4f4d\u7f6e\u4e5f\u4e00\u5b9a\u53ef\u4ee5\u2026\u2026\u8fd9\u6837\u6574\u4e2a\u73af\u4f1a\u88ab\u5206\u4e3a\u51e0\u7b49\u5206\u3002\u4e0d\u96be\u53d1\u73b0\uff0c\u6bcf\u4e00\u4efd\u7684\u957f\u5ea6\u5c31\u662f\u6240\u6709\u79cd\u7c7b\u5b57\u7b26\u6570\u91cf\u7684 gcd\u3002\n\u63a5\u4e0b\u6765\u9700\u8981\u8003\u8651\u6bcf\u6bb5\u5982\u4f55\u6784\u9020\u3002\u4e3a\u4e86\u5173\u4e8e\u5207\u5272\u70b9\u5bf9\u79f0\uff0c\u6bcf\u6bb5\u5fc5\u987b\u5448 abc-cba-abc-cba-... \u6392\u5217\uff0c\u6700\u540e\u56de\u5230 abc\u3002\n\u4f46\u662f\uff01\u5982\u679c\u6709\u5947\u6570\u6bb5\uff0c\u6700\u540e\u5c31\u4e0d\u80fd\u56de\u5230 abc\uff08\u6700\u540e\u5230 abc \u4f4d\u7f6e\u8f6e\u5230\u7684\u662f cba\uff09\u3002\u8fd9\u65f6\u5019\u5c31\u8981\u6c42\u6bcf\u4e00\u6bb5\u4e5f\u662f\u56de\u6587\u4e32\uff0c\u8fd9\u6837\u624d\u80fd\u4fdd\u8bc1 abc \u548c cba \u76f8\u540c\u3002\n\u4e0d\u96be\u53d1\u73b0\uff0c\u53ea\u5141\u8bb8\u6709\u4e00\u4e2a $a_i$ \u4e3a\u5947\u6570\uff0c\u5982\u679c\u6709\u4e24\u4e2a\u5c31\u4e3a 0 \u4e86\u3002\u5206\u6709\u65e0\u5947\u6570\u8003\u8651\uff1a\n\n\u6709\u4e00\u4e2a\u5947\u6570\uff1a\u6bcf\u6bb5\u90fd\u662f\u56de\u6587\u7684\uff0c\u8fd9\u4e2a\u5947\u6570\u7684\u5b57\u6bcd\u5fc5\u7136\u653e\u5728\u6bcf\u6bb5\u4e2d\u95f4\uff1b\n\u5168\u5076\u6570\uff1a\u6bcf\u6bb5\u4efb\u610f\uff0c\u53ea\u8981\u5173\u4e8e\u5207\u5272\u70b9\u5bf9\u79f0\u5373\u53ef\u3002\n\nCode\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n#include&lt;vector&gt;\n#include&lt;queue&gt;\n\nusing namespace std;\n#define int long long\n\ninline int read(){\n    int ret=0,f=1;char ch=getchar();\n    while (ch&lt;'0'||ch&gt;'9') {if (ch=='-') f=-1;ch=getchar();}\n    while (ch&gt;='0'&amp;&amp;ch&lt;='9') ret=ret*10+ch-'0',ch=getchar();\n    return ret*f;\n}\n\nconst int maxn=30;\n\nint n;\nint a[maxn];\n\ninline void imp(){\n    printf(\"0\\n\");\n    for (int i=1;i&lt;=n;i++){\n        for (int j=1;j&lt;=a[i];j++) putchar(i+'a'-1);\n    }\n    printf(\"\\n\");\n}\n\ninline int gcd(int x,int y){\n    return y?gcd(y,x%y):x;\n}\n\nsigned main(){\n    n=read();bool flg=false,no=false;\n    for (int i=1;i&lt;=n;i++){\n        a[i]=read();\n        if ((a[i]&amp;1) &amp;&amp; flg) no=true;\n        if (a[i]&amp;1) flg=true;\n    }\n    if (no){\n        imp();\n        return 0;\n    }\n    if (n==1){\n        printf(\"%lld\\n\",a[1]);\n        for (int i=1;i&lt;=a[1];i++) putchar('a');\n        printf(\"\\n\");\n        return 0;\n    }\n\n    int g;\n    g=a[1];\n    for (int i=2;i&lt;=n;i++) g=gcd(g,a[i]);\n    if (!flg){\n        printf(\"%lld\\n\",g);\n        string otp1=\"\",opt2=\"\";\n        for (int i=1;i&lt;=n;i++){\n            for (int j=1;j&lt;=a[i]\/g;j++) otp1+=(char)(i+'a'-1);\n        }\n        for (int i=n;i&gt;=1;i--){\n            for (int j=1;j&lt;=a[i]\/g;j++) opt2+=(char)(i+'a'-1);\n        }\n        for (int i=1;i&lt;=g;i++) if (i&amp;1) cout&lt;&lt;otp1; else cout&lt;&lt;opt2;\n        printf(\"\\n\");\n    } else {\n        printf(\"%lld\\n\",g);\n        string opt=\"\";int mid;\n        for (int i=1;i&lt;=n;i++) if (a[i]&amp;1) {mid=i;break;}\n        for (int i=1;i&lt;=n;i++) if (i!=mid){\n            for (int j=1;j&lt;=a[i]\/g\/2;j++) opt+=(char)(i+'a'-1);\n        }\n        for (int i=1;i&lt;=a[mid]\/g;i++) opt+=(char)(mid+'a'-1);\n        for (int i=n;i&gt;=1;i--) if (i!=mid){\n            for (int j=1;j&lt;=a[i]\/g\/2;j++) opt+=(char)(i+'a'-1);\n        }\n        for (int i=1;i&lt;=g;i++) cout&lt;&lt;opt;\n        printf(\"\\n\");\n    }\n    return 0;\n}","tags":[{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u6784\u9020","slug":"\u6784\u9020","permalink":"https:\/\/skywt.cn\/tag\/%E6%9E%84%E9%80%A0\/"},{"name":"CodeForces","slug":"CodeForces","permalink":"https:\/\/skywt.cn\/tag\/CodeForces\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"Hello 2019\uff01","date":"2019-01-01T00:00:47+08:00","path":"https:\/\/skywt.cn\/posts\/hello-2019","text":"\n\u7559\u4e00\u70b9\u70b9\u7684\u8ddd\u79bb\uff0c\u8ba9\u6211\u4e0e\u4e16\u754c\u5206\u79bb\n\u66fe\u7ecf\u56f0\u6270\u6211\u7684\u6050\u60e7\uff0c\u6d88\u5931\u5728\u6211\u56de\u5fc6\n\u591c\u91cc\u51b0\u51b7\u7684\u7a7a\u6c14\uff0c\u6211\u7ec8\u4e8e\u80fd\u547c\u5438\n\u6211\u7559\u4e0b\u81ea\u5df1\u7684\u8fc7\u53bb\uff0c\u62b9\u6389\u773c\u6cea\u7684\u75d5\u8ff9\n","tags":[],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"\u6709\u4e00\u53f0 VPS \u53ef\u4ee5\u505a\u54ea\u4e9b\u4e8b\uff1f","date":"2019-02-02T20:49:20+08:00","path":"https:\/\/skywt.cn\/posts\/vps-can-do","text":"2019.10.09 Upd\uff1a\u8fd9\u7bc7\u6587\u7ae0\u5f03\u5751\u5566\uff0c\u4ee5\u540e\u76f4\u63a5\u653e\u5728  Lab \u9875\u9762\u91cc\u4e86\u3002\n\u8fd9\u7bc7\u6587\u7ae0\u4f5c\u4e3a\u6211\u7684\u9893\u5e9f\u6210\u679c\uff0c\u66a8\u840c\u65b0\u9893\u5e9f\u6307\u5357\u2026\u2026\u8bb0\u5f55\u4e0b\u6211\u7684 VPS \u4e0a\u5efa\u7684\u4e1c\u897f\u3002\n\u751f\u547d\u4e0d\u606f\uff0c\u6298\u817e\u4e0d\u6b62\uff01\n\nBWGONG \u670d\u52a1\u5668\u914d\u7f6e\u4fe1\u606f\uff1a\n\nPhysical Location: California, US\nOperating system: Centos 7.3 x86_64 bbr\nRAM: 1024 MB\nSWAP: 1283.99 MB\nDisk (\/): 20 GB\n\nALIYUN \u670d\u52a1\u5668\u914d\u7f6e\u4fe1\u606f\uff1a\n\nPhysical Location: Hangzhou, CN\nOperating system: Centos 7.3 x86_64\nRAM: 2048 MB\nSWAP: 1283.99 MB\nDisk (\/): 40 GB\n\n\u5f00\u59cb\u9a7e\u9a76\uff01\n\n\n\u642d\u5efa LNMP \u73af\u5883\uff0c\u5efa\u8bbe\u7f51\u7ad9\uff1b\nLNMP\uff1aLinux, Nginx, MySQL, PHP\uff08\u5f3a\u70c8\u63a8\u8350 Appnode \u6216\u8005 LNMP.org\uff09\n\n\n\u90e8\u7f72 WordPress \u7b49\u7f51\u7ad9\u535a\u5ba2\u5e73\u53f0\uff08\u5c31\u662f\u8fd9\u91cc\uff09\uff1b\n\n\n\u642d\u5efa\u79c1\u6709\u4e91\u76d8\uff08KODExpolorer \/ OwnCloud \/ NextCloud\uff09\uff1b\n\n\n\u642d\u5efa\u4e00\u4e2a\u8bba\u575b\uff08Flarum BBS\uff09\uff1b\n\n\n\u6258\u7ba1\u4e00\u4e2a\u56fe\u5e8a\uff08\u867d\u7136\u6211\u89c9\u5f97\u6709 WordPress \u4e86\u6ca1\u5fc5\u8981\uff09\uff1b\n\n\n\u6258\u7ba1\u5404\u79cd\u7f51\u7ad9\u7a0b\u5e8f\uff0c\u4f8b\u5982 Core Value Encoder \u7b49\u7b49\uff08\uff1f\uff1f\uff1f\uff09\uff1b\n\n\n\u751a\u81f3\u53ef\u4ee5\u6258\u7ba1\u4e00\u4e9b\u7f51\u9875\u6e38\u620f\uff08\u6bd4\u5982 A dark room\uff09\uff1b\n\n\n\u6587\u4ef6\u5206\u4eab\u7cfb\u7edf\uff08\u5b9a\u65f6\u5220\u9664\u3001\u9605\u540e\u5373\u711a\uff09\uff1b\n\n\n\u6587\u5b57\u9605\u540e\u5373\u711a\uff08\u4fe1\u606f\u5b89\u5168\u9632\u67e5\u8868\u7684\u6700\u4f73\u89e3\u51b3\u65b9\u6848\uff09\uff1b\n\n\n\u5728\u7ebf IDE\uff08\u6ca1\u51c6\u7528\u5f97\u4e0a\uff09\uff1b\n\n\n\u97f3\u4e50\u64ad\u653e\u5668\uff08Adams \u4e3b\u9898\u4f5c\u8005 Tokinx \u5199\u7684\uff0c\u989c\u503c\u8d85\u9ad8\uff09\uff1b\n\n\n\u7f51\u9875\u91c7\u96c6\u5668\uff08\u4e0d\u4f1a python \u722c\u866b\uff0c\u4e8e\u662f\u2026\u2026\uff09\uff1b\n\n\nnginx \u53cd\u5411\u4ee3\u7406\u5efa\u8bbe Google \u955c\u50cf\u7ad9\uff08\u4ee5\u5907\u4e0d\u65f6\u4e4b\u9700\u2026\u2026\uff09\uff1b\n\nnodeppt\uff08\u6bd4\u4ec0\u4e48\u5de8\u786c\u7684 PowerPoint \u4e0d\u77e5\u9053\u9ad8\u5230\u54ea\u91cc\u53bb\u4e86\uff09\uff1b\n\n\n\n\u5c0f\u98de\u673a\u670d\u52a1\u7aef\uff1b\n\n\n\u4f5c\u4e3a FTP \u670d\u52a1\u5668\u5b58\u50a8\u6587\u4ef6\uff08\u5176\u5b9e\u6709 KOD Cloud \u4e86\u8fd9\u4e2a\u6ca1\u5fc5\u8981\uff09\uff1b\n\n\nMinecraft \u670d\u52a1\u5668\uff1b\n\n\nhack.chat \u7b49\u5373\u65f6\u533f\u540d\u804a\u5929\u7cfb\u7edf\uff1b\n\n\n\u57df\u540d\u90ae\u7bb1\uff08me@skywt.cn\uff09\uff1b\n\n\n\u4f5c\u4e3a Git \u670d\u52a1\u5668\u6258\u7ba1\u4ee3\u7801\uff08\u751a\u81f3\u53ef\u4ee5\u642d\u5efa\u4e00\u4e2a GitLab\uff09\uff1b\n\n\n\u5229\u7528 Aria2+AriaNg\/WebUI-Aria2+Rclone \u642d\u5efa\u7f51\u76d8\u79bb\u7ebf\u4e0b\u8f7d\uff1b\n\n\n\u7528 Docker \u8fd0\u884c CoolQ\uff0c\u642d\u5efa QQ \u673a\u5668\u4eba\uff1b\n\n\n\u6700\u91cd\u8981\u7684\u7528\u9014\uff1a\u88c5\u903c\uff1b\n\n\u672a\u5b8c\u5f85\u7eed\u2026\n","tags":[{"name":"\u9ed1\u79d1\u6280","slug":"\u9ed1\u79d1\u6280","permalink":"https:\/\/skywt.cn\/tag\/%E9%BB%91%E7%A7%91%E6%8A%80\/"},{"name":"Linux","slug":"Linux","permalink":"https:\/\/skywt.cn\/tag\/Linux\/"},{"name":"vps","slug":"vps","permalink":"https:\/\/skywt.cn\/tag\/vps\/"},{"name":"\u670d\u52a1\u5668","slug":"\u670d\u52a1\u5668","permalink":"https:\/\/skywt.cn\/tag\/%E6%9C%8D%E5%8A%A1%E5%99%A8\/"},{"name":"centos","slug":"centos","permalink":"https:\/\/skywt.cn\/tag\/centos\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"\u628a Linux \u8fdb\u7a0b\u914d\u7f6e\u6210\u7cfb\u7edf\u670d\u52a1","date":"2019-02-03T19:22:44+08:00","path":"https:\/\/skywt.cn\/posts\/linux-process-to-service","text":"Linux \u4e0b\u6709\u4e9b\u65f6\u5019\u6211\u4eec\u8fd0\u884c\u4e00\u4e2a\u8fdb\u7a0b\u9700\u8981\u4e00\u76f4\u6302\u7740\uff08\u8fd9\u5c31\u662f VPS \u7684\u610f\u4e49\u554a\u2026\u2026\uff09\uff0c\u8fd9\u65f6\u5019\u9700\u8981\u628a\u524d\u53f0\u8fdb\u7a0b\u653e\u5230\u540e\u53f0\u53bb\u3002\u4e00\u822c\u53ef\u4ee5\u7528 screen\uff0c\u4f46\u662f\u5982\u679c\u8fd9\u79cd\u540e\u53f0\u8fdb\u7a0b\u6302\u591a\u4e86\uff0c\u6bcf\u4e2a\u90fd\u5f00\u4e00\u4e2a session \u4f1a\u5f88\u4e0d\u65b9\u4fbf\u3002\u524d\u51e0\u5929\u914d\u7f6e aria2 \u7684\u65f6\u5019\u770b\u5230\u4e00\u4e2a\u795e\u5947\u7684\u64cd\u4f5c\uff1a\u53ef\u4ee5\u914d\u7f6e\u6210\u4e00\u4e2a service\uff0c\u76f4\u63a5 service aria2c start\/stop\/restart \u5c31\u53ef\u4ee5\u4e86\uff01\n\n[notice]\u7ecf\u6d4b\u8bd5\uff0c\u6b64\u65b9\u6cd5\u5728 CentOS 7 \u53ef\u80fd\u65e0\u6548\u2026\u2026[\/notice]\n\u4ee5\u914d\u7f6e aria2c \u4e3a\u4f8b\uff0c\u5047\u8bbe\u6211\u4eec\u8981\u8fd0\u884c\u8fd9\u4e2a\u547d\u4ee4\uff08\u7a0b\u5e8f\uff09\uff0c\u5e76\u4e14\u653e\u5728\u540e\u53f0\uff1a\n\/usr\/local\/bin\/aria2c --conf-path=\/root\/.aria2\/aria2.conf -D\n\u53ef\u4ee5\u5199\u5982\u4e0b\u914d\u7f6e\u6587\u4ef6\uff1a\n#!\/bin\/sh\n### BEGIN INIT INFO\n# Provides: aria2\n# Required-Start: $remote_fs $network\n# Required-Stop: $remote_fs $network\n# Default-Start: 2 3 4 5\n# Default-Stop: 0 1 6\n# Short-Description: Aria2 Downloader\n### END INIT INFO\ncase \"$1\" in\nstart)\n echo -n \"Starting aria2c\"\n \/usr\/local\/bin\/aria2c --conf-path=\/root\/.aria2\/aria2.conf -D\n ;;\nstop)\n echo -n \"Shutting down aria2c\"\n killall aria2c ;;\nrestart)\n killall aria2c\n \/usr\/local\/bin\/aria2c --conf-path=\/root\/.aria2\/aria2.conf -D\n ;;\nesac\nexit\n\u628a\u6587\u4ef6\u4fdd\u5b58\u4e3a aria2c\uff0c\u7136\u540e\u7ed9\u4e88\u8fd0\u884c\u6743\u9650\uff1a\nchmod +x aria2c\n\u79fb\u52a8\u5230 \/etc\/init.d\/ \u76ee\u5f55\u4e0b\uff1a\nmv aria2c \/etc\/init.d\/\n\u4f7f\u7528\u65b9\u6cd5\uff1a\nservice aria2c start\nservice aria2c stop\nservice aria2c restart\n\u6765\u6e90\ncentos\u5b89\u88c5aria2 - \u4e91+\u793e\u533a - \u817e\u8baf\u4e91","tags":[{"name":"\u65e5\u5e38\u641e\u673a","slug":"\u65e5\u5e38\u641e\u673a","permalink":"https:\/\/skywt.cn\/tag\/%E6%97%A5%E5%B8%B8%E6%90%9E%E6%9C%BA\/"},{"name":"\u9ed1\u79d1\u6280","slug":"\u9ed1\u79d1\u6280","permalink":"https:\/\/skywt.cn\/tag\/%E9%BB%91%E7%A7%91%E6%8A%80\/"},{"name":"Linux","slug":"Linux","permalink":"https:\/\/skywt.cn\/tag\/Linux\/"},{"name":"vps","slug":"vps","permalink":"https:\/\/skywt.cn\/tag\/vps\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"CodeForces Round #488 Div2 \u9898\u89e3","date":"2019-03-19T16:12:32+08:00","path":"https:\/\/skywt.cn\/posts\/cf994","text":"\u8fd9\u662f\u6211\u7684\u535a\u5ba2\u53d1\u5e03\u7684\u7b2c 100 \u7bc7\u6587\u7ae0\uff01:tada:\nD - Open Communication\nDescription\n\u6709\u4e24\u4e2a\u73a9\u5bb6\uff0c\u7ed9\u51fa\u5206\u522b n \u548c m \u4e2a\u6570\u5bf9\uff0c$1\\leq n,m\\leq 12$\uff0c\u6240\u6709\u6570\u5b57\u90fd $\\in [0,9]$\uff0c\u5e76\u4e14\u4e00\u4e2a\u6570\u5bf9\u91cc\u7684\u6570\u5b57\u4e0d\u76f8\u540c\uff0c\u4e0d\u4f1a\u6709\u91cd\u590d\u7684\u6570\u5bf9\u3002\u73b0\u5728\u6709\u4e00\u4e2a\u201c\u5171\u4eab\u6570\u5b57\u201d\uff0c\u8fd9\u4e2a\u6570\u5b57\u5728 A \u73a9\u5bb6\u7684\u6570\u5bf9\u91cc\u548c B \u73a9\u5bb6\u7684\u6570\u5bf9\u91cc\u90fd\u81f3\u5c11\u51fa\u73b0\u4e00\u6b21\u3002\u5982\u679c\u4f60\u53ef\u4ee5\u63a8\u65ad\u51fa\u8fd9\u4e2a\u6570\u5b57\uff0c\u8f93\u51fa\u8fd9\u4e2a\u6570\u5b57\uff1b\u5982\u679c\u4f60\u65e0\u6cd5\u63a8\u65ad\u51fa\u8fd9\u4e2a\u6570\u5b57\uff0c\u4f46\u662f\u4f60\u786e\u4fe1\u4e24\u4e2a\u73a9\u5bb6\u90fd\u77e5\u9053\u8fd9\u4e2a\u6570\u5b57\uff0c\u8f93\u51fa 0\uff1b\u5982\u679c\u8fde\u73a9\u5bb6\u4e5f\u4e0d\u77e5\u9053\uff0c\u8f93\u51fa -1\u3002\n\n\uff08\u9898\u610f\u96be\u4ee5\u89e3\u91ca\uff0c\u5efa\u8bae\u53c2\u8003\u539f\u9898\u6837\u4f8b\uff1aLink\uff09\nTags\n\u5361\u9898\u610f\nAnalysis\n\u5176\u5b9e\u662f\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u9898\uff0c\u4e24\u4e24\u679a\u4e3e\u6570\u5bf9\uff0c\u5982\u679c\u53d1\u73b0 A \u4e2d\u67d0\u4e00\u4e2a\u6570\u5bf9\u4e0e B \u4e2d\u591a\u4e2a\u6570\u5bf9\u90fd\u6709\u6070\u597d\u4e00\u4e2a\u76f8\u540c\u7684\u6570\u5b57\u5c31\u662f -1\uff0c\u5982\u679c\u6bcf\u6b21\u679a\u4e3e\u5230 A \u4e2d\u4e00\u4e2a\u6570\u5bf9\uff0cB \u4e2d\u4e0e\u5176\u6709\u76f8\u540c\u6570\u5b57\u7684\u90fd\u53ea\u6709\u4e00\u4e2a\uff0c\u5219\u53ef\u4ee5\u786e\u5b9a\u53cc\u65b9\u77e5\u9053\uff0c\u8f93\u51fa 0\uff1b\u5982\u679c\u603b\u662f\u540c\u4e00\u4e2a\u6570\u5b57\uff0c\u5219\u786e\u5b9a\u8fd9\u4e2a\u6570\u5b57\u3002\nCode\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;vector&gt;\n#include&lt;algorithm&gt;\n\nusing namespace std;\n\nconst int maxn=20;\nint n,m,ans=1;\npair &lt;int,int&gt; a[maxn],b[maxn];\nbool is[15];\n\ninline int read(){\n    int ret=0,f=1;char ch=getchar();\n    while (ch&lt;'0'||ch&gt;'9') {if (ch=='-') f=-1;ch=getchar();}\n    while (ch&gt;='0'&amp;&amp;ch&lt;='9') ret=ret*10+ch-'0',ch=getchar();\n    return ret*f;\n}\n\ninline int have_same(pair&lt;int,int&gt; aa, pair&lt;int,int&gt; bb){\n    \/\/ cout&lt;&lt;aa.first&lt;&lt;\",\"&lt;&lt;aa.second&lt;&lt;\"  \"&lt;&lt;bb.first&lt;&lt;\",\"&lt;&lt;bb.second&lt;&lt;endl;\n    if (aa.first==bb.first &amp;&amp; aa.first!=bb.second &amp;&amp; aa.second!=bb.first &amp;&amp; aa.second!=bb.second) return aa.first;\n    if (aa.first!=bb.first &amp;&amp; aa.first==bb.second &amp;&amp; aa.second!=bb.first &amp;&amp; aa.second!=bb.second) return aa.first;\n    if (aa.first!=bb.first &amp;&amp; aa.first!=bb.second &amp;&amp; aa.second==bb.first &amp;&amp; aa.second!=bb.second) return aa.second;\n    if (aa.first!=bb.first &amp;&amp; aa.first!=bb.second &amp;&amp; aa.second!=bb.first &amp;&amp; aa.second==bb.second) return aa.second;\n    \/\/ cout&lt;&lt;\"NO\"&lt;&lt;endl;\n    return -1;\n}\n\nsigned main(){\n    n=read();m=read();\n    for (int i=1;i&lt;=n;i++){\n        int x=read(),y=read();\n        a[i]=make_pair(x,y);\n    }\n    for (int i=1;i&lt;=m;i++){\n        int x=read(),y=read();\n        b[i]=make_pair(x,y);\n    }\n\n    bool tmp[15];\n    for (int i=1;i&lt;=n;i++){\n        int cnt=0;\n        memset(tmp,0,sizeof(tmp));\n        for (int j=1;j&lt;=m;j++){\n            int now=have_same(a[i],b[j]);\n            is[now]=true;tmp[now]=true;\n        }\n        for (int j=1;j&lt;=9;j++) cnt+=tmp[j];\n        if (cnt&gt;1){\n            cout&lt;&lt;-1&lt;&lt;endl;\n            return 0;\n        }\n    }\n\n    for (int i=1;i&lt;=m;i++){\n        int cnt=0;\n        memset(tmp,0,sizeof(tmp));\n        for (int j=1;j&lt;=n;j++){\n            int now=have_same(a[j],b[i]);\n            tmp[now]=true;\n        }\n        for (int j=1;j&lt;=9;j++) cnt+=tmp[j];\n        if (cnt&gt;1){\n            cout&lt;&lt;-1&lt;&lt;endl;\n            return 0;\n        }\n    }\n\n    int all_cnt=0;\n    for (int i=1;i&lt;=9;i++) {all_cnt+=is[i];if (is[i]) ans=i;}\n    if (all_cnt&gt;1) cout&lt;&lt;0&lt;&lt;endl; else cout&lt;&lt;ans&lt;&lt;endl;\n    return 0;\n}\nE - Careful Maneuvering\nDescription\n\u4e00\u4e2a\u5e73\u9762\u4e0a\u6709 n \u8258\u98de\u8239\u4f4d\u4e8e $(-100,y_{1,i})$\uff0c\u53e6\u5916\u6709 m \u8258\u98de\u8239\u4f4d\u4e8e $(100,y_{2,i})$\uff0c\u73b0\u5728\u9700\u8981\u8ba9\u4f60\u786e\u5b9a\u4e24\u4e2a\u70b9 $(0,y_1)$ \u548c $(0,y_2)$\uff0c\u6bcf\u8258\u5b87\u5b99\u98de\u8239\u540c\u65f6\u5411\u4e24\u4e2a\u70b9\u53d1\u5c04\u6fc0\u5149\uff0c\u5c04\u4e2d\u5176\u4ed6\u98de\u8239\u5373\u6467\u6bc1\uff0c\u9700\u8981\u4f7f\u5f97\u6700\u540e\u80fd\u6467\u6bc1\u7684\u5b87\u5b99\u98de\u8239\u6570\u91cf\u5c3d\u91cf\u591a\u3002\u8f93\u51fa\u6700\u591a\u88ab\u6467\u6bc1\u7684\u98de\u8239\u6570\u91cf\u3002$1\\leq n,m\\leq 60, |y_{1,i}|,|y_{2,i}| \\leq 10000$\u3002\nTags\n\u8d2a\u5fc3 \u66b4\u529b \u538b\u4f4d\u5b58\u50a8\nAnalysis\n\u6ce8\u610f\u5230 n \u548c m \u6700\u5927 60\uff0c\u90a3\u4e48\u5b8c\u5168\u53ef\u4ee5\u5bf9\u4e8e\u5de6\u8fb9\u548c\u53f3\u8fb9\u80fd\u88ab\u70b8\u6389\u7684\u5c0f\u98de\u673a\u538b\u4f4d\u5b58\u50a8\u4e00\u4e0b\u3002\u76f4\u63a5\u66b4\u529b\u679a\u4e3e\uff0c\u5bf9\u4e8e\u5de6\u53f3\u4e00\u5bf9\u5c0f\u98de\u673a\uff0c\u7d2f\u8ba1\u4e8e\u628a\u5b83\u4eec\u4e00\u6b21\u6027\u8f70\u6389\u7684\u70b9\u653e\u7f6e\u4f4d\u7f6e\uff0c\u8fd9\u6837\u4f1a\u5f62\u6210 n\u00d7m \u4e2a\u70b9\uff0c\u90a3\u4e48\u6700\u540e\u518d $\\Theta(n^2)$ \u679a\u4e3e\u70b9\u5373\u53ef\u3002\n\u9700\u8981\u6ce8\u610f\u7684\u5751\uff1a\u6709\u98de\u8239\u5750\u6807\u91cd\u590d\u60c5\u51b5\uff0c\u538b\u4f4d\u7684\u65f6\u5019\u9700\u8981\u5224\u65ad\u67d0\u4e00\u4f4d\u4e3a 0 \u518d\u7d2f\u8ba1\uff01\u5426\u5219\u5f88\u5bb9\u6613\u7206\u51fa\u53bb\u2026\u2026\nCode\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n#include&lt;vector&gt;\n\nusing namespace std;\n#define int long long\n\nconst int maxn=65;\nconst int maxx=40005,zero=20001;\n\ninline int read(){\n    int ret=0,f=1;char ch=getchar();\n    while (ch&lt;'0'||ch&gt;'9') {if (ch=='-') f=-1;ch=getchar();}\n    while (ch&gt;='0'&amp;&amp;ch&lt;='9') ret=ret*10+ch-'0',ch=getchar();\n    return ret*f;\n}\n\nint n,m,INF;\nint x[maxn],y[maxn];\nint ans=0;\n\npair&lt;int,int&gt; s[maxx]; \/\/ mid \u6269\u5c55\u4e24\u500d\nint nxt[maxx];\n\nint pop_count(int x){\n    int ret=0;\n    while (x) ret+=x&amp;1,x&gt;&gt;=1;\n    return ret;\n}\n\nsigned main(){\n    n=read();m=read();\n    for (int i=0;i&lt;n;i++) x[i]=read();\n    for (int i=0;i&lt;m;i++) y[i]=read();\n    sort(x,x+n);sort(y,y+m);\n    \/\/ for (int i=0;i&lt;n;i++) printf(\"%lld \",x[i]);printf(\"\\n\");\n    \/\/ for (int i=0;i&lt;m;i++) printf(\"%lld \",y[i]);printf(\"\\n\");\n    for (int i=0;i&lt;n;i++){\n        for (int j=0;j&lt;m;j++){\n            int mid=(x[i]+y[j])+zero;\n            if ((s[mid].first&amp;(1LL&lt;&lt;i))==0)  s[mid].first +=1LL&lt;&lt;i;\n            if ((s[mid].second&amp;(1LL&lt;&lt;j))==0) s[mid].second+=1LL&lt;&lt;j;\n        }\n    }\n    memset(nxt,63,sizeof(nxt));\n    INF=nxt[0];\n    int st=INF,lst=INF;\n    for (int i=-20000;i&lt;=20000;i++) if (s[i+zero].first!=0){\n        if (st==INF) st=i+zero,lst=i; else nxt[lst+zero]=i+zero,lst=i;\n    }\n    for (int i=st;i!=INF;i=nxt[i]){\n        for (int j=st;j!=INF;j=nxt[j]){\n            int num1=s[i].first  | s[j].first;\n            int num2=s[i].second | s[j].second;\n            \/\/ ans=max(ans,(int)__builtin_popcountll(num1)+__builtin_popcountll(num2));\n            ans=max(ans,(int)pop_count(num1)+(int)pop_count(num2));\n        }\n    }\n    printf(\"%lld\\n\",ans);\n    return 0;\n}\n\nF - Compute Power\nDescription\n\u6709 n \u4e2a\u4efb\u52a1\uff0c\u6bcf\u4e2a\u4efb\u52a1\u9700\u8981\u8ba1\u7b97\u673a $a_i$ \u7684\u529f\u7387\uff0c\u5e76\u4e14\u8981\u542f\u7528 $b_i$ \u4e2a\u5904\u7406\u5668\u3002\u4f60\u6709\u8db3\u591f\u7684\u65e0\u9650\u5904\u7406\u5668\u8ba1\u7b97\u673a\uff0c\u6bcf\u53f0\u8ba1\u7b97\u673a\u53ef\u4ee5\u6267\u884c 1 \u4e2a\u6216 2 \u4e2a\u4efb\u52a1\uff0c\u4f46\u662f\u7b2c\u4e8c\u4e2a\u4efb\u52a1\u7684\u529f\u7387\u4e0d\u80fd\u8d85\u8fc7\u7b2c\u4e00\u4e2a\u4efb\u52a1\u3002\u4f60\u9700\u8981\u5b89\u6392\u4e00\u4e0b\uff0c\u4f7f\u5f97\u6700\u540e\u6240\u6709\u8ba1\u7b97\u673a\u7684\u7b2c\u4e00\u4e2a\u4efb\u52a1\u5e73\u5747\u529f\u7387\u6700\u5c0f\u3002\u201c\u5e73\u5747\u529f\u7387\u201d\u5b9a\u4e49\u4e3a\uff1a\u529f\u7387\u603b\u548c\u9664\u4ee5\u5904\u7406\u5668\u603b\u548c\u3002\u8f93\u51fa\u5e73\u5747\u529f\u7387\u4e58\u4ee5 1000 \u5411\u4e0a\u53d6\u6574\u3002$1\\leq n\\leq 50, 1\\leq a_i\\leq 10^8, 1\\leq b_i\\leq 100$\u3002\nTags\nDP \u4e8c\u5206\nAnalysis\n\u8fd9\u9898\u5c31\u662f 0\/1 \u5206\u6570\u89c4\u5212\u7684\u53d8\u5f62\u9898\uff0c\u540c\u6837\u662f\u9009\u51fa m \u4e2a\u7269\u54c1\u4f7f\u5f97 $\\frac {\\sum a_i} {\\sum b_i}$ \u5c3d\u91cf\u5c0f\u3002\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u9700\u8981\u8003\u8651\u7b2c\u4e8c\u4e2a\u4efb\u52a1\uff0c\u8fd9\u4e2a\u76f4\u63a5\u6392\u5e8f\u5373\u53ef\u89e3\u51b3\uff1a$a_i$ \u5148\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u53ef\u4ee5\u5b9a\u4e49 F[i][j] \u8868\u793a\u524d i \u4e2a\u4efb\u52a1\u5269\u4f59 j \u4e2a\u672a\u5904\u7406\uff08\u8fd9 j \u4e2a\u4efb\u52a1\u53ef\u4ee5\u88ab\u63a5\u4e0b\u6765\u7684\u8ba1\u7b97\u673a\u201c\u8ba4\u9886\u201d\u4e3a\u7b2c\u4e8c\u4e2a\u4efb\u52a1\uff0c\u65e2\u7136 $a_i$ \u4e3a\u5347\u5e8f\uff09\u3002\n\u4f46\u662f\u53c8\u4f1a\u51fa\u73b0\u4e00\u4e2a\u95ee\u9898\uff1a\u6709\u5f88\u591a $a_i$ \u662f\u76f8\u540c\u7684\u3002\u7b2c\u4e00\u4e2a\u4efb\u52a1\u529f\u7387\u5fc5\u987b\u4e25\u683c\u5927\u4e8e\u7b2c\u4e8c\u4e2a\uff0c\u4e0d\u80fd\u76f8\u540c\u3002\u53ef\u4ee5\u6539\u4e00\u4e0b\u8fd9\u4e2a DP \u5b9a\u4e49\uff1aF[i][j][k] \u8868\u793a\u524d i \u4e2a\u4efb\u52a1\uff0c\u5269\u4f59 j \u4e2a\u548c $a_i$ \u4e0d\u4e00\u6837\u7684\u548c k \u4e2a\u548c $a_i$ \u4e00\u6837\u7684\u3002\u72b6\u6001\u8f6c\u79fb\u5f88\u5bb9\u6613\u5f97\u5230\u3002\n\u6ce8\u610f\u5411\u4e0a\u53d6\u6574\uff08C++ \u51fd\u6570\u662f ceil()\uff09\u2026\u2026\nCode\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n#include&lt;vector&gt;\n#include&lt;cmath&gt;\n\n#define int long long\nusing namespace std;\n\ninline int read(){\n    int ret=0,f=1;char ch=getchar();\n    while (ch&lt;'0'||ch&gt;'9') {if (ch=='-') f=-1;ch=getchar();}\n    while (ch&gt;='0'&amp;&amp;ch&lt;='9') ret=ret*10+ch-'0',ch=getchar();\n    return ret*f;\n}\n\nconst int maxn=55;\nconst double eps=1e-5,INF=1.0e9;\nint n;\ndouble ans=-1.0;\ndouble f[maxn][maxn][maxn];\n\n\/\/f[i][j][k]: \u524d i \u4e2a\u4efb\u52a1\uff0c\u5269\u4f59 j \u4e2a\u548c a[i] \u4e0d\u4e00\u6837\u7684\u548c k \u4e2a\u548c a[i] \u4e00\u6837\u7684\n\npair&lt;int,int&gt; tasks[maxn];\n\nbool check(double now){\n    for (int i=0;i&lt;=n;i++) for (int j=0;j&lt;=n;j++) for (int k=0;k&lt;=n;k++) f[i][j][k]=INF;\n    f[0][0][0]=0.0;\n    for (int i=1;i&lt;=n;i++)\n    for (int j=0;j&lt;=i;j++)\n    for (int k=0;k&lt;=i;k++) if (f[i-1][j][k]!=INF){\n        double delta=(double)tasks[i].first-now*(double)tasks[i].second;\n        if (tasks[i-1].first==tasks[i].first || i==1){\n            f[i][j][k]=min(f[i][j][k],f[i-1][j][k]+delta);\n            if (j-1&gt;=0) f[i][j-1][k]=min(f[i][j-1][k],f[i-1][j][k]+delta);\n            f[i][j][k+1]=min(f[i][j][k+1],f[i-1][j][k]);\n        } else {\n            if (j+k&lt;=n) f[i][j+k][0]=min(f[i][j+k][0],f[i-1][j][k]+delta);\n            if (j+k-1&gt;=0 &amp;&amp; j+k-1&lt;=n) f[i][j+k-1][0]=min(f[i][j+k-1][0],f[i-1][j][k]+delta);\n            if (j+k&lt;=n) f[i][j+k][1]=min(f[i][j+k][1],f[i-1][j][k]);\n        }\n    }\n    return f[n][0][0]&lt;0.0;\n}\n\nbool cmp(pair&lt;int,int&gt; aa,pair&lt;int,int&gt; bb){\n    return aa.first&lt;bb.first;\n}\n\nsigned main(){\n    n=read();\n    for (int i=1;i&lt;=n;i++) tasks[i].first=read();\n    for (int i=1;i&lt;=n;i++) tasks[i].second=read();\n    sort(tasks+1,tasks+1+n,cmp);\n    double L=0.0001,R=1.0e8;\n    while (L&lt;=R){\n        double mid=(L+R)\/2.0;\n        if (check(mid)) R=mid-eps; else ans=mid,L=mid+eps;\n    }\n    \/\/ printf(\"%.16f\\n\",ans);\n    printf(\"%lld\\n\",(int)ceil(ans*1000.0));\n    return 0;\n}","tags":[{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u8d2a\u5fc3","slug":"\u8d2a\u5fc3","permalink":"https:\/\/skywt.cn\/tag\/%E8%B4%AA%E5%BF%83\/"},{"name":"CodeForces","slug":"CodeForces","permalink":"https:\/\/skywt.cn\/tag\/CodeForces\/"},{"name":"\u5361\u9898\u610f","slug":"\u5361\u9898\u610f","permalink":"https:\/\/skywt.cn\/tag\/%E5%8D%A1%E9%A2%98%E6%84%8F\/"},{"name":"\u66b4\u529b","slug":"\u66b4\u529b","permalink":"https:\/\/skywt.cn\/tag\/%E6%9A%B4%E5%8A%9B\/"},{"name":"\u538b\u4f4d\u5b58\u50a8","slug":"\u538b\u4f4d\u5b58\u50a8","permalink":"https:\/\/skywt.cn\/tag\/%E5%8E%8B%E4%BD%8D%E5%AD%98%E5%82%A8\/"},{"name":"DP","slug":"DP","permalink":"https:\/\/skywt.cn\/tag\/DP\/"},{"name":"\u4e8c\u5206","slug":"\u4e8c\u5206","permalink":"https:\/\/skywt.cn\/tag\/%E4%BA%8C%E5%88%86\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"\u89e3\u51b3 vscode \u9884\u7f16\u8bd1\u4fe1\u606f\uff08ipch \u6587\u4ef6\uff09\u5360\u7528\u8fc7\u5927\u95ee\u9898","date":"2019-03-21T10:17:02+08:00","path":"https:\/\/skywt.cn\/posts\/vscode-ipch-too-large","text":"\u4eca\u5929\u53d1\u73b0 vscode \u5de5\u4f5c\u533a\u76ee\u5f55\u4e0b\u6709\u4e00\u4e2a .vscode \u9690\u85cf\u76ee\u5f55\uff0c\u91cc\u9762\u6709\u5927\u91cf\u7684 ipch \u6587\u4ef6\uff0c\u800c\u4e14\u5360\u7528\u5b58\u50a8\u7a7a\u95f4\u90fd\u5f88\u5927\u3002\u6211\u7684\u5de5\u4f5c\u533a\u4e00\u5171\u4ee3\u7801\u5360\u4e86\u4e0d\u8db3 300MB\uff0c\u4f46\u662f\u90a3\u4e2a\u6587\u4ef6\u5939\u5360\u4e86\u8db3\u8db3 2.2GB\uff01\n\u70b9\u8fdb\u53bb\u53ef\u4ee5\u53d1\u73b0\uff0c\u4f3c\u4e4e\u90fd\u662f\u9488\u5bf9\u67d0\u4e2a\u4ee3\u7801\u751f\u6210\u7684\u3002\u6bd4\u5982\u5199\u4e86\u4e2a\u5f88\u957f\u7684\u4ee3\u7801\uff0c\u5b83\u5c31\u7ed9\u6211\u751f\u6210\u4e86 170+MB \u7684 ipch\u2026\u2026\n\n\n\u7ffb\u4e86\u4e0b\u8bbe\u7f6e\uff0c\u8fd9\u4e2a\u76ee\u5f55\u662f\u4e00\u4e9b\u9884\u7f16\u8bd1\u5934\u6587\u4ef6\uff08cached precompiled headers \uff09\uff0c\u548c Intelli Sense \u62d3\u5c55\u76f8\u5173\u3002vscode \u7684 Intelli Sense \u7684\u786e\u5f3a\u5927\uff0c\u4f46\u662f\u8fd9\u4e2a\u6587\u4ef6\u5927\u5c0f\u4e5f\u592a\u53ef\u6015\u4e86\uff0c\u6211\u8fd8\u662f git \u4ed3\u5e93\uff0c\u8fd9\u8981\u4e0a\u4f20\u591a\u4e45\u2026\u2026\n\u6709\u4ec0\u4e48\u7528\uff1f\n\u4e0a\u7f51\u67e5\u4e86\u4e00\u4e0b\uff0c\u8fd9\u4e9b\u6587\u4ef6\u662f Intelli Sense \u7684\u7f13\u5b58\uff0c\u53ef\u4ee5\u5927\u5927\u63d0\u9ad8\u89e3\u6790\u5668\u7684\u901f\u5ea6\u3002\n\u80fd\u5220\u9664\u5417\uff1f\nStackoverflow \u4e0a\u627e\u5230\u4e86\u8fd9\u4e2a\u95ee\u9898\uff1aIs it safe to delete the \u201cipch\u201d folder - Precompiled headers?\n\u770b\u8d77\u6765\u8fd9\u4e2a\u6587\u4ef6\u662f\u53ef\u4ee5\u76f4\u63a5\u5220\u9664\u7684\u3002\u5220\u9664\u4ee5\u540e\uff0c\u4e0b\u6b21\u6253\u5f00\u4f1a\u91cd\u65b0\u751f\u6210\u2026\u2026\u6240\u4ee5\u6700\u597d\u8fd8\u662f\u5728 git add \u4e4b\u524d\u5220\u9664\u5427\u3002\n\u80fd\u9650\u5236\u5927\u5c0f\u5417\uff1f\n\u8bbe\u7f6e\u91cc\u6709\u8fd9\u4e2a\u9009\u9879\uff1a\n\n\u6216\u8005\u5728 config.json \u4e2d\u52a0\u5165\uff1a\n\"C_Cpp.intelliSenseCacheSize\": 64\n\u662f\u53ef\u4ee5\u8bbe\u7f6e\u5927\u5c0f\u9650\u5236\u7684\uff0c\u9ed8\u8ba4 5120MB \u4e5f\u592a\u4e27\u5fc3\u75c5\u72c2\u4e86\u70b9\u2026\u2026\n\u8fd8\u53ef\u4ee5\u53c2\u8003\uff1aHow to prevent or remove Visual Studio ipch\/pch folders from the project","tags":[{"name":"\u65e5\u5e38\u641e\u673a","slug":"\u65e5\u5e38\u641e\u673a","permalink":"https:\/\/skywt.cn\/tag\/%E6%97%A5%E5%B8%B8%E6%90%9E%E6%9C%BA\/"},{"name":"vscode","slug":"vscode","permalink":"https:\/\/skywt.cn\/tag\/vscode\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"\u6811\u94fe\u5256\u5206\uff08Heavy-Light Decomposition\uff09\u5c0f\u7ed3","date":"2019-03-21T10:26:12+08:00","path":"https:\/\/skywt.cn\/posts\/heavy-light-decomposition","text":"\u6811\u94fe\u5256\u5206\uff0c\u53ef\u4ee5\u628a\u4e00\u68f5\u6811\u5212\u5206\u6210\u591a\u6761\u94fe\uff0c\u5bf9\u4e8e\u6bcf\u6761\u94fe\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7b49\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u7ef4\u62a4\uff0c\u5c06\u6811\u5f62\u7ed3\u6784\u7684\u95ee\u9898\u8f6c\u5316\u3002\n\u5e38\u89c1\u7684\u65b9\u6cd5\u662f\u8f7b\u91cd\u94fe\u5256\u5206\uff0c\u5373 Heavy-Light Decomposition\u3002\n\n[notice]\u8fd9\u662f\u4e00\u7bc7\u610f\u8bc6\u6d41\u5f0f\u7684\u603b\u7ed3\uff0c\u5982\u679c\u8981\u5165\u95e8\u6811\u94fe\u5256\u5206\u8bf7\u4e0d\u8981\u770b\u8fd9\u7bc7\u2026\u2026[\/notice]\n\u524d\u7f6e\u77e5\u8bc6\nLCA\u3001\u7ebf\u6bb5\u6811\u2026\u2026\n\u4e00\u4e9b\u5b9a\u4e49\n\u9700\u8981\u6784\u9020\u5982\u4e0b\u6570\u7ec4\uff1a\n\nsize[x]\uff1a\u4ee5 x \u4e3a\u6839\u7684\u5b50\u6811\u7684\u8282\u70b9\u603b\u6570\uff1b\ndeep[x]\uff1ax \u7684\u6df1\u5ea6\uff1b\nson[x]\uff1ax \u901a\u8fc7\u91cd\u94fe\u901a\u5411\u7684\u513f\u5b50\u8282\u70b9\uff1b\nfa[x]\uff1ax \u7684\u7236\u8282\u70b9\uff1b\ntop[x]\uff1ax \u6240\u5728\u91cd\u94fe\u7684\u9876\u7aef\u8282\u70b9\uff1b\nid[x]\uff1a\u8282\u70b9 x \u5728\u7ebf\u6bb5\u6811\u4e2d\u7684\u4e0b\u6807\u4f4d\u7f6e\uff1b\nv[x]\uff1a\u8282\u70b9 x \u7684\u6743\u503c\uff08\u5bf9\u4e8e\u8fb9\u6743\uff0c\u53ef\u4ee5\u628a\u8fb9\u7684\u6743\u503c\u5f52\u5c5e\u4e8e\u5176\u4e0b\u9762\u7684\u70b9\uff0c\u8f6c\u5316\u4e3a\u70b9\u6743\u5904\u7406\uff09\u3002\n\n\u53e6\u5efa\u4e00\u68f5\u7ebf\u6bb5\u6811\u5b58\u50a8\u91cd\u94fe\u4fe1\u606f\u3002\n\u5982\u679c v \u662f u \u7684\u513f\u5b50\u4e2d size \u6700\u5927\u7684\u4e00\u4e2a\uff0c\u5219 (u,v) \u662f\u91cd\u8fb9\uff0cv \u662f u \u7684\u91cd\u513f\u5b50\uff0cu \u901a\u5411\u7684\u5176\u4ed6\u513f\u5b50\u662f\u8f7b\u8fb9\u3002\n\u8fde\u7eed\u7684\u91cd\u8fb9\u5f62\u6210\u91cd\u94fe\u3002\u901a\u8fc7 id[] \u53ef\u4ee5\u5c06\u4e00\u6761\u91cd\u94fe\u6620\u5c04\u5230\u7ebf\u6bb5\u6811\u4e0a\u7684\u4e00\u6761\u7ebf\u6bb5\u3002\n\u5173\u4e8e\u590d\u6742\u5ea6\u7684\u7ed3\u8bba\n\u7ed3\u8bba\u4e00\uff1a \u5982\u679c $(u,v)$ \u4e3a\u8f7b\u8fb9\uff0c\u5219 size[v] \u4e0d\u4f1a\u5927\u4e8e size[u]\/2\u3002\n\u7ed3\u8bba\u4e8c\uff1a \u91cd\u94fe\u548c\u8f7b\u8fb9\u7684\u6570\u91cf\u7ea7\u76f8\u5f53\u3002\n\u7531\u6b64\u53ef\u4ee5\u5f97\u5230\uff1a\n\u7ed3\u8bba\u4e09\uff1a \u4ece\u67d0\u4e00\u4e2a\u70b9\u5230\u6839\u4e0a\u7ecf\u8fc7\u7684\u91cd\u94fe\u6216\u8f7b\u8fb9\u7684\u603b\u6570\u5728 $\\log (n)$ \u7ea7\u522b\u3002\u8fd9\u662f\u6811\u94fe\u5256\u5206\u7684\u6838\u5fc3\u3002\n\u636e\u6b64\uff0c\u5bf9\u4e8e\u4e00\u6761\u94fe\u4e0a\u7684\u64cd\u4f5c\u53ef\u4ee5\u505a\u5230 $\\log(n)$\u3002\u5bf9\u4e8e\u94fe\u4e0a\u7684\u4fee\u6539\uff0c\u6574\u6761\u91cd\u94fe\u53ef\u4ee5\u5bf9\u5e94\u7ebf\u6bb5\u6811\u7684\u4e00\u4e2a\u533a\u95f4\uff0c\u5b58\u50a8 top[] \u53ef\u4ee5\u5b9e\u73b0\u76f4\u63a5\u8c03\u5230\u91cd\u94fe\u9876\u7aef\uff0c\u8fbe\u5230\u4f18\u5316\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u76ee\u7684\u3002\n\u5b9e\u73b0\n\u7b2c\u4e00\u904d DFS \u6784\u9020\u51fa size[],son[],fa[],deep[]\uff0c\u7b2c\u4e8c\u904d DFS \u9020\u51fa top[],id[]\u3002\n\u5bf9\u4e8e\u4e24\u70b9\u7684\u8def\u5f84\u4fee\u6539\uff0c\u76f4\u63a5\u6c42\u51fa LCA \u540e\u4e00\u76f4\u5f80\u4e0a\u8df3\u5373\u53ef\u3002\n\u5bf9\u4e8e\u5b50\u6811\u4fee\u6539\uff0c\u76f4\u63a5\u5f53\u6210 DFS \u5e8f\u5904\u7406\u3002\n\u5bf9\u4e8e\u6784\u9020 id[] \u7684 DFS  \u9700\u8981\u6ce8\u610f\uff1a\u672c\u8d28\u4e0a id[] \u662f\u4e00\u4e2a\u65f6\u95f4\u6233\uff0c\u5373 DFS \u5e8f\u3002\u4e3a\u4e86\u4f7f\u5f97\u91cd\u8fb9\u5728\u9020\u51fa\u6765\u7684\u5e8f\u4e2d\u8fde\u7eed\uff0c\u4fbf\u4e8e\u7ebf\u6bb5\u6811\u7684\u5904\u7406\uff0c\u5728\u904d\u5386\u7684\u65f6\u5019\u8981\u5148\u904d\u5386\u91cd\u513f\u5b50\u3002\u6d89\u53ca\u5b50\u6811\u7684\u64cd\u4f5c\u4e5f\u4f1a\u65b9\u4fbf\u5f88\u591a\u3002\n\u4ee3\u7801\n\u6d1b\u8c37\u6a21\u677f\u9898 P3384\uff1a\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n#include&lt;vector&gt;\n#include&lt;cmath&gt;\n\nusing namespace std;\n\/\/ #define int long long\n\ninline int read(){\n    int ret=0,f=1;char ch=getchar();\n    while (ch&lt;'0'||ch&gt;'9') {if (ch=='-') f=-1;ch=getchar();}\n    while (ch&gt;='0'&amp;&amp;ch&lt;='9') ret=ret*10+ch-'0',ch=getchar();\n    return ret*f;\n}\n\nconst int maxn=1e5+5;\nconst int maxe=2*maxn;\n\nint n,m,root,tt;\n\nvoid add(int &amp;x,int y){\n    x=(x+y%tt)%tt;\n}\n\nclass SegmentTree{\n\n    #define mid (((tr-tl)&gt;&gt;1)+tl)\n    #define ls ((p&lt;&lt;1))\n    #define rs ((p&lt;&lt;1)+1)\n\n    private:\n        int tree[maxn*4],tag[maxn*4];\n\n        void push_down(int tl,int tr,int p){\n            add(tree[ls],tag[p]*(mid-tl+1)%tt);\n            add(tag[ls],tag[p]);\n            add(tree[rs],tag[p]*(tr-(mid+1)+1)%tt);\n            add(tag[rs],tag[p]);\n            tag[p]=0;\n        }\n\n    public:\n        SegmentTree(){\n            memset(tree,0,sizeof(tree));\n            memset(tag,0,sizeof(tag));\n        }\n\n        void update(int x,int tl,int tr,int p,int delta){\n            if (tl==tr &amp;&amp; tl==x){\n                add(tree[p],delta);\n                return;\n            }\n            push_down(tl,tr,p);\n            if (x&lt;=mid  ) update(x,tl,mid,ls,delta);\n            if (mid+1&lt;=x) update(x,mid+1,tr,rs,delta);\n            tree[p]=(tree[ls]+tree[rs])%tt;\n        }\n\n        void update(int sl,int sr,int tl,int tr,int p,int delta){\n            if (sl&lt;=tl &amp;&amp; tr&lt;=sr){\n                add(tree[p],(tr-tl+1)*delta%tt);\n                add(tag[p],delta);\n                return;\n            }\n            push_down(tl,tr,p);\n            if (sl&lt;=mid  ) update(sl,sr,tl,mid,ls,delta);\n            if (mid+1&lt;=sr) update(sl,sr,mid+1,tr,rs,delta);\n            tree[p]=(tree[ls]+tree[rs])%tt;\n        }\n\n        int query(int x,int tl,int tr,int p){\n            if (tl==tr &amp;&amp; x==tl) return tree[p]%tt;\n            push_down(tl,tr,p);\n            int ret=0;\n            if (x&lt;=mid  ) add(ret,query(x,tl,mid,ls));\n            if (mid+1&lt;=x) add(ret,query(x,mid+1,tr,rs));\n            return ret;\n        }\n\n        int query(int sl,int sr,int tl,int tr,int p){\n            if (sl&lt;=tl &amp;&amp; tr&lt;=sr) return tree[p]%tt;\n            push_down(tl,tr,p);\n            int ret=0;\n            if (sl&lt;=mid  ) add(ret,query(sl,sr,tl,mid,ls));\n            if (mid+1&lt;=sr) add(ret,query(sl,sr,mid+1,tr,rs));\n            return ret;\n        }\n};\n\nint tot=0,lnk[maxn],nxt[maxe],to[maxe];\nint size[maxn],deep[maxn],fa[maxn];\nint v[maxn];\n\nvoid add_edge(int x,int y){\n    tot++;to[tot]=y;\n    nxt[tot]=lnk[x];lnk[x]=tot;\n}\n\nint f[maxn][25];\n\nint get_lca(int x,int y){\n    if (deep[x]&lt;deep[y]) swap(x,y);\n    for (int i=23;i&gt;=0;i--) if (deep[f[x][i]] &gt;= deep[y]) x=f[x][i];\n    if (x==y) return x;\n    for (int i=23;i&gt;=0;i--) if (f[x][i]!=f[y][i]) x=f[x][i],y=f[y][i];\n    return fa[x];\n}\n\nnamespace HLD{\n    int son[maxn],top[maxn],id[maxn];\n\n    void make_tree(int x){\n        size[x]=1;\n        f[x][0]=fa[x];for (int i=1;i&lt;=23;i++) f[x][i]=f[f[x][i-1]][i-1];\n        int max_size=0,k=-1;\n        for (int i=lnk[x];i;i=nxt[i]) if (to[i]!=fa[x]){\n            fa[to[i]]=x;deep[to[i]]=deep[x]+1;\n            make_tree(to[i]);\n            size[x]+=size[to[i]];\n            if (size[to[i]]&gt;max_size) max_size=size[to[i]],k=to[i];\n        }\n        if (k!=-1) son[x]=k;\n    }\n\n    void make_chain(int x){\n        id[x]=++id[0];\n        if (son[fa[x]]!=x) top[x]=x; else top[x]=top[fa[x]];\n        if (son[x]) make_chain(son[x]);\n        for (int i=lnk[x];i;i=nxt[i]) if (to[i]!=fa[x] &amp;&amp; to[i]!=son[x]){\n            make_chain(to[i]);\n        }\n    }\n\n    void change_single(int x,int l,int delta,SegmentTree &amp;tree){\n        while (x!=l){\n            if (top[x]!=x){\n                if (deep[top[x]]&gt;=deep[l]) tree.update(id[top[x]]+1,id[x],1,n,1,delta),x=top[x];\n                else tree.update(id[l]+1,id[x],1,n,1,delta),x=l;\n            } else tree.update(id[x],1,n,1,delta),x=fa[x];\n        }\n        tree.update(id[x],1,n,1,delta);\n    }\n\n    void change_chain(int x,int y,int delta,SegmentTree &amp;tree){\n        int l=get_lca(x,y);\n        change_single(x,l,delta,tree);\n        change_single(y,l,delta,tree);\n        tree.update(id[l],1,n,1,-delta);\n    }\n\n    int query_single(int x,int l,SegmentTree &amp;tree){\n        int ret=0;\n        while (x!=l){\n            if (top[x]!=x){\n                if (deep[top[x]]&gt;=deep[l]) add(ret,tree.query(id[top[x]]+1,id[x],1,n,1)),x=top[x];\n                else add(ret,tree.query(id[l]+1,id[x],1,n,1)),x=l;\n            } else add(ret,tree.query(id[x],1,n,1)),x=fa[x];\n        }\n        add(ret,tree.query(id[x],1,n,1));\n        return ret;\n    }\n\n    int query_chain(int x,int y,SegmentTree &amp;tree){\n        int l=get_lca(x,y);\n        return (query_single(x,l,tree)+query_single(y,l,tree)-tree.query(id[l],1,n,1)+tt)%tt;\n    }\n\n    void change_subtree(int x,int delta,SegmentTree &amp;tree){\n        tree.update(id[x],id[x]+size[x]-1,1,n,1,delta);\n    }\n\n    int query_subtree(int x,SegmentTree &amp;tree){\n        return tree.query(id[x],id[x]+size[x]-1,1,n,1);\n    }\n}\n\nSegmentTree tree;\n\nsigned main(){\n    n=read(),m=read(),root=read(),tt=read();\n    for (int i=1;i&lt;=n;i++) v[i]=read();\n    for (int i=1;i&lt;n;i++){\n        int x=read(),y=read();\n        add_edge(x,y);add_edge(y,x);\n    }\n\n    deep[root]=1;\n    HLD::make_tree(root);\n    HLD::make_chain(root);\n\n    for (int i=1;i&lt;=n;i++) tree.update(HLD::id[i],1,n,1,v[i]);\n\n    while (m--){\n        int opt=read(),x,y,z;\n        switch(opt){\n            case 1:\n                x=read(),y=read(),z=read()%tt;\n                HLD::change_chain(x,y,z,tree);\n                break;\n            case 2:\n                x=read(),y=read();\n                printf(\"%d\\n\",HLD::query_chain(x,y,tree));\n                break;\n            case 3:\n                x=read(),z=read()%tt;\n                HLD::change_subtree(x,z,tree);\n                break;\n            case 4:\n                x=read();\n                printf(\"%d\\n\",HLD::query_subtree(x,tree));\n                break;\n        }\n    }\n\n    return 0;\n}","tags":[{"name":"OI\u5b66\u4e60","slug":"OI\u5b66\u4e60","permalink":"https:\/\/skywt.cn\/tag\/OI%E5%AD%A6%E4%B9%A0\/"},{"name":"OI\u7b97\u6cd5","slug":"OI\u7b97\u6cd5","permalink":"https:\/\/skywt.cn\/tag\/OI%E7%AE%97%E6%B3%95\/"},{"name":"\u6811\u5f62\u7ed3\u6784","slug":"\u6811\u5f62\u7ed3\u6784","permalink":"https:\/\/skywt.cn\/tag\/%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"\u795d\u81ea\u5df1\u751f\u65e5\u5feb\u4e50\u2026\u2026","date":"2019-04-07T06:12:00+08:00","path":"https:\/\/skywt.cn\/posts\/happy-birthday","text":"16 \u5c81\uff0c\u518d\u51fa\u53d1\uff01\n\n","tags":[{"name":"\u751f\u6d3b","slug":"\u751f\u6d3b","permalink":"https:\/\/skywt.cn\/tag\/%E7%94%9F%E6%B4%BB\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"\u5410\u69fd\uff1a\u522b\u518d\u7528 Freenom \u7684 .tk \u7cfb\u5217\u57df\u540d\u4e86","date":"2019-07-28T19:23:03+08:00","path":"https:\/\/skywt.cn\/posts\/dont-use-freenom-domains","text":"\u6628\u5929\u67d0\u540c\u5b66\u90e8\u7f72\u5728\u6211\u670d\u52a1\u5668\u4e0a\u7684\u7f51\u7ad9 bartholomew.cf \u7a81\u7136\u4e0a\u4e0d\u53bb\u4e86\uff0c\u8bbf\u95ee\u4e0d\u662f\u63d0\u793a 502 \u9519\u8bef\u5c31\u662f\u8df3\u8f6c\u5230 Freenom \u7684\u9875\u9762\uff08\u5927\u8086\u5ba3\u4f20 Freenom DNS\uff09\u3002\n\u4e00\u5f00\u59cb\u4ee5\u4e3a\u670d\u52a1\u5668\u53c8\u51fa\u4e86\u4ec0\u4e48\u4e8b\u60c5\uff0cSSH \u4e0a\u770b\u770b\u597d\u50cf\u6ca1\u4ec0\u4e48\u5f02\u5e38\u3002\u518d\u770b Cloudflare\uff0c\u6628\u5929\u665a\u4e0a\u5f00\u59cb\u6d41\u91cf\u4e3a 0 \u4e86\uff0c\u610f\u8bc6\u5230\u4e8b\u60c5\u4e0d\u5bf9\u2026\u2026\n\u767b\u4e0a Freenom \u57df\u540d\u7ba1\u7406\u7684\u540e\u53f0\uff0c\u795e\u5947\u7684\u4e8b\u60c5\u53d1\u751f\u4e86\u2026\u2026\n\n\n\u4e4b\u524d\u6ce8\u518c\u7684 bartholomew.cf \u57df\u540d\u5c45\u7136\u51ed\u7a7a\u6d88\u5931\uff1f\uff1f\uff1f\n\u6ca1\u6709\u4efb\u4f55\u63d0\u9192\uff0c\u65e2\u6ca1\u6709\u53d1\u90ae\u4ef6\uff0c\u7528\u6237\u540e\u53f0\u4e5f\u6ca1\u6709\u4efb\u4f55\u6d88\u606f\uff0c\u5c31\u597d\u50cf\u4ece\u6765\u4e0d\u66fe\u6ce8\u518c\u8fc7\u8fd9\u4e2a\u57df\u540d\u4e00\u6837\u3002\n\u5e94\u8be5\u662f\u6ce8\u518c\u57df\u540d\u7684\u65f6\u5019\u6ce8\u518c\u7684\u662f\u4e00\u5e74\uff0c\u73b0\u5728\u65f6\u95f4\u5230\u4e86\uff0c\u5c1d\u8bd5\u91cd\u65b0\u6ce8\u518c\u57df\u540d\uff0c\u66f4\u795e\u5947\u7684\u4e00\u5e55\u53d1\u751f\u4e86\uff1a\n\n\u6ce8\u518c\u57df\u540d\u7684\u9875\u9762\uff0cbartholomew.cf \u5c45\u7136\u88ab\u91cd\u65b0\u6807\u4ef7\u4e3a 9.95 \u7f8e\u5200\u2026\u2026\uff08\u8fd9\u4e2a\u5b9a\u4ef7\u6bd4\u5e02\u9762\u4e0a .com \u548c .cn \u90fd\u8d35\u4e86\uff01\uff01\uff09\n\u539f\u6765 Freenom \u7684\u5957\u8def\u662f\uff1a\u514d\u8d39\u4f7f\u7528\u57df\u540d\u4e00\u5e74\uff0c\u4e00\u5e74\u5230\u4e86\u5c31\u81ea\u52a8\u9000\u56de\u57df\u540d\uff0c\u60f3\u8981\u7ee7\u7eed\u4f7f\u7528\u5c31\u8981\u4ed8\u94b1\u2026\u2026\uff08\u6211\u8bb0\u5f97\u6ce8\u518c\u7684\u65f6\u5019\u627f\u8bfa\u8fc7\u5230\u671f\u514d\u8d39\u65e0\u9650\u7eed\u8d39\u7684\u5427\uff1f\uff1f\uff01\uff09\n\u8fd9\u4e2a\u5957\u8def\u73a9\u5f97\u771f\u53ef\u4ee5\uff0c\u6b63\u5e38\u60c5\u51b5\u4e0b\u4e00\u5e74\u7cbe\u5fc3\u7167\u6599\u81ea\u5df1\u7684\u535a\u5ba2\uff0c\u641c\u7d22\u5f15\u64ce\u5df2\u7ecf\u57fa\u672c\u6293\u53d6\u4e86\u8fd9\u4e2a\u535a\u5ba2\u7684\u5927\u591a\u9875\u9762\uff0c\u751a\u81f3\u53ef\u80fd\u535a\u5ba2\u94fe\u63a5\u88ab\u5f88\u591a\u5730\u65b9\u5f15\u7528\uff0c\u73b0\u5728\u57df\u540d\u6ca1\u6536\u610f\u5473\u7740\u4e4b\u524d\u505a\u7684 SEO \u548c\u94fe\u63a5\u7684\u5f15\u7528\u5168\u90e8\u4f5c\u5e9f\u2026\u2026\uff08\u751a\u81f3\u4e0d\u8ba9\u4f60 301 \u91cd\u5b9a\u5411\u4fdd\u7559\u641c\u7d22\u5f15\u64ce\u7684\u6743\u91cd\uff09\uff08\u53ef\u601c\u7684 Vanququ\uff09\n\u4e8e\u662f\u7814\u7a76\u4e86\u4e00\u756a\u7528\u6237\u534f\u8bae\uff1a\n\n\nFailure to transfer out of Free Domain.\nIf you terminate your use of FREE DOMAIN and this agreement pursuant to section 11.3 and do not transfer out of FREE DOMAIN in accordance with the provisions set forth in section 11.3 or upgrade to one of our paid services, you agree that any and all of your right, title and interest in and to the domain name provided to you pursuant to this agreement will be forfeited to Freenom, and that we may hold, cancel, sell, transfer or otherwise assign or dispose of the domain name at our discretion.\n\n\n\u610f\u601d\u662f\u57df\u540d\u5230\u671f\u4e86\u6ca1\u6709\u8f6c\u51fa\u57df\u540d\uff08\uff1f\uff1f\uff1f\uff09\u6216\u8005\u5347\u7ea7\u4ed8\u8d39\u670d\u52a1\uff0c\u5219\u8868\u793a\u60a8\u540c\u610f Freenom \u6ca1\u6536\u8fd9\u4e2a\u57df\u540d\u7684\u6240\u6709\u6743\u76ca\uff0c\u5e76\u4e14 Freenom \u6709\u6743\u81ea\u7531\u5904\u7f6e\u8fd9\u4e2a\u57df\u540d\u2026\u2026balabala\u2026\u2026\n\u55ef\uff0c\u53e6\u4e00\u4e2a\u540c\u5b66\u7684 captainslow.cf \u7b49\u5230 22\/07\/2020 \u4e5f\u8981\u5230\u671f\u4e86\u2026\u2026\u6293\u7d27\u4e70\u4e2a\u4ed8\u8d39\u7684\u6b63\u5e38\u57df\u540d\u5427\u2026\u2026\n\n\u514d\u8d39\u7684\u624d\u662f\u6700\u6602\u8d35\u7684\u3002\n\n\uff08\u7a81\u7136\u66f4\u65b0\u4e00\u7bc7\u535a\u5ba2\u8bc1\u660e\u6211\u8fd8\u6d3b\u7740\uff09\n\/\/ Upd\uff1a\u65b0\u57df\u540d\u662f bariona.cn\n\/\/ Upd2\uff1acaptainslow.cf \u7684\u65b0\u57df\u540d\u662f capata.wang","tags":[{"name":"\u65e5\u5e38\u641e\u673a","slug":"\u65e5\u5e38\u641e\u673a","permalink":"https:\/\/skywt.cn\/tag\/%E6%97%A5%E5%B8%B8%E6%90%9E%E6%9C%BA\/"},{"name":"\u7f51\u7edc","slug":"\u7f51\u7edc","permalink":"https:\/\/skywt.cn\/tag\/%E7%BD%91%E7%BB%9C\/"},{"name":"\u5410\u69fd","slug":"\u5410\u69fd","permalink":"https:\/\/skywt.cn\/tag\/%E5%90%90%E6%A7%BD\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"NOI Linux \u98df\u7528\u6307\u5357","date":"2019-09-10T21:00:13+08:00","path":"https:\/\/skywt.cn\/posts\/noi-linux-guide","text":"\n\u6211\u5bb6\u8de8\u4e0a\u4e86\u201c\u4fe1\u606f\u9ad8\u901f\u8def\u201d\n\u201c\u592a\u597d\u5566\uff01\u5927\u597d\u5566\uff01\u201d\u542c\u5988\u5988\u8bf4\uff0c\u6211\u5bb6\u7684\u7535\u8111\u8de8\u4e0a\u4e86\u4fe1\u606f\u9ad8\u901f\u8def\uff0c\u6211\u60c5\u4e0d\u81ea\u7981\u5730\u6b22\u547c\u8d77\u6765\u3002\u7535\u8111\u7f51\u7edc\u8fd9\u4e2a\u65b0\u9c9c\u73a9\u610f\u513f\u5230\u5e95\u662f\u4ec0\u4e48\u5462\uff1f\n\u2026\u2026\n\n\u4ee5\u8bbd NOI Linux \u7684\u590d\u53e4\u30029102 \u5e74\u4e86\u5c45\u7136\u8fd8\u5728 Ubuntu 14.04\u2026\u2026\n\nXJ \u673a\u623f\u5b9e\u884c\u4e25\u683c\u7ba1\u7406\uff0c\u88ab\u8feb Windows7 \u548c NOILinux \u4e8c\u9009\u4e00\u3002\u672c\u6765\u6211\u89c9\u5f97 NOILinux\uff0832 \u4f4d\u7684\u2026\u2026\uff09\u5e76\u4e0d\u662f\u8bbe\u8ba1\u7ed9\u4eba\u7528\u7684\uff0c\u6211\u4f1a\u6beb\u4e0d\u72b9\u8c6b\u9009\u62e9\u4e86 Win7,\u4f46\u662f Linux \u53ef\u4ee5\u6ca1\u6709\u786c\u76d8\u4fdd\u62a4\u2026\u2026\u6240\u4ee5\u88ab\u8feb\u8e0f\u4e0a NOILinux \u8fd9\u6761\u8d3c\u8239\u4e86\u2026\u2026\n\u7136\u800c ubuntu 14.04 \u88ab CCF \u6539\u5f97\u9762\u76ee\u5168\u975e\uff0c\u52a0\u4e0a 32 \u4f4d\u7b49\u590d\u53e4\u7684\u56e0\u7d20\uff0c\u88c5\u4ec0\u4e48\u90fd\u6709\u4e00\u5927\u5806\u95ee\u9898\u2026\u2026\u975e\u4eba\u4e16\u6240\u582a\uff01\n\u6d4f\u89c8\u5668\n\u4e2a\u4eba\u504f\u7231 Firefox\u3002\u7136\u800c noilinux \u81ea\u5e26\u7684\u6216\u8005\u76f4\u63a5 apt \u5b89\u88c5\u90fd\u662f\u8fdc\u53e4\u7248\u672c\u2026\u2026\n\u6b63\u786e\u7684\u5b89\u88c5\u59ff\u52bf\u662f\uff1a\u5148\u53bb firefox \u5b98\u7f51\u4e0b\u8f7d\u5b89\u88c5\u5305\uff0c\u89e3\u538b\u5f97\u5230\u4e00\u4e2a firefox \u6587\u4ef6\u5939\u3002\u53bb\u66ff\u6362\u5b89\u88c5\u76ee\u5f55\u4e0b\u7684 firefox\uff1a\nsudo rm -rf \/usr\/lib\/firefox\nsudo mv .\/firefox \/usr\/lib\/\n\u518d\u542f\u52a8\n\u7f16\u8f91\u5668\nVSCode\nNOILinux \u5185\u7f6e\u7684\u7f16\u8f91\u5668\u597d\u50cf\u53ea\u6709 emacs\u3001vim \u548c gedit \u662f\u80fd\u7528\u7684\u2026\u2026\n\u6211\u504f\u8981 vscode\uff01\nvscode 1.36 \u53ca\u4ee5\u540e\u7684\u7248\u672c\u4e0d\u518d\u652f\u6301 32bit linux \u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u53bb\u4e0b\u8f7d 1.35 \u7248\u672c\u2026\u2026\uff08\u8fd8\u597d\u662f May 2019 \u7684\uff0c\u4e0d\u7b97\u592a\u8fdc\u53e4\uff09\nhttps:\/\/code.visualstudio.com\/updates\/v1_35\n\u4e0b\u8f7d\u5b8c\u662f\u4e2a deb \u6587\u4ef6\uff0c\u7136\u800c noilinux \u9609\u5272\u4e86 GUI \u7684\u201c\u8f6f\u4ef6\u5305\u5b89\u88c5\u7a0b\u5e8f\u201d\u2026\u2026\u6240\u4ee5\u6211\u4eec\u8981\u7528\u8fd9\u4e2a\u547d\u4ee4\u624b\u52a8\u5b89\u88c5\uff1a\nsudo dpkg -i code_1.35.1-1560349847_i386\nTypora\n\u6839\u636e https:\/\/support.typora.io\/Typora-on-Linux\/ \u7684\u6307\u5f15\uff1a\nwget -qO - https:\/\/typora.io\/linux\/public-key.asc | sudo apt-key add -\n\n# add Typora's repository\nsudo add-apt-repository 'deb https:\/\/typora.io\/linux .\/'\nsudo apt-get update\n\n# install typora\nsudo apt-get install typora\n\u4e00\u4e9b\u5de5\u5177\ngit\n\u76f4\u63a5 sudo apt-get install git \u4f1a\u5b89\u88c5\u8fdc\u53e4\u7248\u672c\u7684\u2026\u2026\uff08vscode \u8868\u793a\u770b\u4e0d\u4e0b\u53bb\u4e86\uff09\n\u6240\u4ee5\uff1a\nsudo add-apt-repository ppa:git-core\/ppa\nsudo apt-get update\nsudo apt-get install git\nexfat filesystem\n\u8fd9\u4e2a\u662f\u6709\u4e9b U \u76d8\u7684\u6587\u4ef6\u7cfb\u7edf\uff0cubuntu \u9ed8\u8ba4\u6ca1\u6709\u7684\uff0c\u63d2\u5165 exfat \u6587\u4ef6\u7cfb\u7edf\u7684 U \u76d8\u4f1a\u6302\u8f7d\u5931\u8d25\uff0c\u663e\u793a\uff1a\n\nmount: unknown filesystem type 'exfat'\n\n\u89e3\u51b3\u65b9\u6cd5\uff1a\nsudo apt-get install exfat-fuse exfat-utils\n\u4e3b\u9898&amp;\u7f8e\u5316\nUnity-tweak-tool\n\u9996\u5148\u5f53\u7136\u662f unity-tweak-tool \u5566\uff1a\nsudo apt-get install unity-tweak-tool\n\u76f4\u63a5\u5b89\u88c5\u5b8c\u8fd0\u884c\u53d1\u73b0\u5f39\u51fa\u7a97\u53e3\uff1a\n\nThe following schema is missing\ncom.canonical.unity.webapps\nIn order to work properly, Unity Tweak Tool recommends you install the necessary packages\n\n\u770b\u63d0\u793a\u5c31\u77e5\u9053\u6ca1\u5b89\u88c5 com.canonical.unity.webapps \u8fd9\u4e2a\u5305\u3002\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u5b89\u88c5\uff1a\nsudo apt-get install unity-webapps-common\nFlatabulous\n\u4e3b\u9898\u548c\u56fe\u6807\u5305\uff0c\u8fd9\u4e2a\u548c\u6b63\u5e38 ubuntu \u65e0\u5f02\u3002\uff08\u957f\u8212\u4e00\u53e3\u6c14\uff09\nsudo add-apt-repository ppa:noobslab\/themes\nsudo apt-get update\nsudo apt-get install flatabulous-theme\n\nsudo add-apt-repository ppa:noobslab\/icons\nsudo apt-get update\nsudo apt-get install ultra-flat-icons\n\u81f3\u6b64\uff0c\u4f60\u7684 noilinux \u80fd\u7528\u4e86\uff01\uff01\uff01","tags":[{"name":"\u65e5\u5e38\u641e\u673a","slug":"\u65e5\u5e38\u641e\u673a","permalink":"https:\/\/skywt.cn\/tag\/%E6%97%A5%E5%B8%B8%E6%90%9E%E6%9C%BA\/"},{"name":"Linux","slug":"Linux","permalink":"https:\/\/skywt.cn\/tag\/Linux\/"},{"name":"noilinux","slug":"noilinux","permalink":"https:\/\/skywt.cn\/tag\/noilinux\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"CodeForces 1215E Marbles \u9898\u89e3","date":"2019-09-28T19:10:00+08:00","path":"https:\/\/skywt.cn\/posts\/cf1215e","text":"Description\n\u7ed9\u51fa\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6570\u5217\uff0c$2\\leq n\\leq 4\\ast 10^5$\uff0c\u6bcf\u4e2a\u6570\u5b57 $a_i$ \u90fd\u5728 $[1,20]$ \u5185\u3002\n\u53ef\u4ee5\u5bf9\u8fd9\u4e2a\u6570\u5217\u4e2d\u76f8\u90bb\u7684\u4e24\u4e2a\u6570\u5b57\u4ea4\u6362\u4f4d\u7f6e\uff0c\u6700\u7ec8\u8981\u4f7f\u5f97\u76f8\u540c\u7684\u6570\u5b57\u90fd\u5728\u4e00\u8d77\u3002\n\u6c42\u6700\u5c0f\u4ea4\u6362\u6b21\u6570\u3002\nLink\n\nTags\n\u72b6\u538bDP\nAnalysis\n$a_i \\in [1,20]$\uff0c\u5f88\u660e\u663e\u53ef\u4ee5\u7528\u72b6\u538b DP\u3002\n\u9996\u5148\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a\u91cd\u8981\u7684\u6027\u8d28\uff1a\u5982\u679c\u4ea4\u6362\u76f8\u90bb\u7684\u4e24\u6570\uff0c\u5176\u4ed6\u6240\u6709\u6570\u5b57\u7684\u76f8\u5bf9\u4f4d\u7f6e\u662f\u4e0d\u53d8\u7684\u3002\u6839\u636e\u8fd9\u4e2a\u6027\u8d28\uff0c\u5728\u4ea4\u6362\u7684\u65f6\u5019\u6211\u4eec\u5c31\u53ef\u4ee5\u5206\u5f00\u8003\u8651\u6bcf\u4e00\u79cd\u6570\u5b57\u3002  \n\u6570\u5b57\u53ea\u6709 20 \u79cd\uff0c\u5219\u6211\u4eec\u53ef\u4ee5\u4e00\u79cd\u6570\u5b57\u4e00\u79cd\u6570\u5b57\u8003\u8651\uff0c\u8bbe $F(mask)$ \u4e3a\u72b6\u6001\u4e3a $mask$ \u7684\u6700\u5c0f\u4ea4\u6362\u4f4d\u7f6e\u3002$mask$ \u5bf9\u5e94\u4f4d\u4e0a\u7684 0 \u6216 1 \u5206\u522b\u8868\u793a\u67d0\u79cd\u6570\u5b57\u662f\u5426\u5df2\u7ecf\u8003\u8651\u3002  \n\u63a5\u4e0b\u6765\u8003\u8651\u72b6\u6001\u8f6c\u79fb\uff0c\u8bbe\u73b0\u5728\u72b6\u6001\u5df2\u7ecf\u662f $mask$\uff0c\u9700\u8981\u65b0\u589e\u7684\u6570\u5b57\u662f $j$\uff08$mask$ \u4e2d\u5bf9\u5e94\u4f4d\u4e3a 0\uff09\u3002\u5219\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u628a\u6240\u6709 $j$ \u79fb\u52a8\u5230\u6700\u5de6\u8fb9\uff08\u5982\u679c\u6700\u4f18\u89e3\u4e2d\u6b64\u65f6 $j$ \u4e0d\u5728\u6700\u5de6\u8fb9\u600e\u4e48\u529e\uff1f\u5219\u5176\u4ed6\u72b6\u6001\u4f1a\u6db5\u76d6\u8fd9\u4e2a\u65b9\u6848\uff09\u3002  \n\u4e3a\u4e86\u5feb\u901f\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u9884\u5904\u7406\u4e00\u4e2a\u6570\u7ec4 $cnt(i,j)$ \u8868\u793a\u628a\u6240\u6709 $i$ \u6570\u5b57\u79fb\u52a8\u5230\u6240\u6709 $j$ \u6570\u5b57\u5de6\u8fb9\u7684\u6700\u5c0f\u4ea4\u6362\u6b21\u6570\u3002\u56e0\u4e3a\u7d2f\u52a0\u65f6\u4ea4\u6362\u5f7c\u6b64\u72ec\u7acb\uff0c\u9884\u5904\u7406\u65f6\u53ef\u4ee5\u770b\u6210\u4e00\u4e2a\u961f\u5217\u91cc\u53ea\u6709 $i$ \u548c $j$ \u4e24\u79cd\u6570\u5b57\uff0c\u90a3\u4e48\u6bcf\u4e2a i \u9700\u8981\u7684\u4ea4\u6362\u6b21\u6570\u5c31\u662f\u8fd9\u4e2a i \u4e4b\u524d j \u7684\u4e2a\u6570\u3002\n\u5219\u8f6c\u79fb\u65b9\u7a0b\u662f\uff1a\n$$F(mask+2^j)=F(mask)+\\sum_{k\\in mask} cnt(j,k)$$\n\u5b9e\u9645\u4e0a\u65f6\u95f4\u662f $\\Theta (2^{20} \\ast 20\\ast 20)$\uff0c\u4f30\u7b97\u6700\u591a\u5230 $4\\ast 10^8$ \u7684\u4e9a\u5b50\uff0c\u8fd8\u597d\u65f6\u9650\u662f 4s\u2026\u2026\nCode\n#include&lt;bits\/stdc++.h&gt;\nusing namespace std;\n\n#define int long long\n\ninline int read(){\n    int ret=0,f=1;char ch=getchar();\n    while (ch&lt;'0'||ch&gt;'9') {if (ch=='-') f=-1;ch=getchar();}\n    while (ch&gt;='0'&amp;&amp;ch&lt;='9') ret=ret*10+ch-'0',ch=getchar();\n    return ret*f;\n}\n\nconst int maxn=400005,maxc=22;\nconst int maxs=1048576+10;\nconst int INF=0x3f3f3f3f3f3f3f3f;\n\nint n,c=20,s=1&lt;&lt;20;\nint a[maxn];\nint cnt[maxc][maxc];\nint f[maxs];\nvector&lt;int&gt; vec[maxc];\n\nsigned main(){\n    n=read();\n    for (int i=1;i&lt;=n;i++) a[i]=read()-1,vec[a[i]].push_back(i);\n\n    for (int i=0;i&lt;c;i++) if (vec[i].size())\n        for (int j=0;j&lt;c;j++) if (vec[j].size() &amp;&amp; i!=j){\n            int t=0;\n            for (int k=0;k&lt;vec[i].size();k++){\n                while ((vec[j][t]&lt;vec[i][k]) &amp;&amp; (t+1&lt;vec[j].size())) t++;\n                cnt[i][j]+=t+(vec[j][t]&lt;vec[i][k]);\n            }\n        }\n    memset(f,0x3f,sizeof(f));\n    f[0]=0;\n    for (int i=0;i&lt;s;i++) if (f[i]!=INF){\n        for (int j=0;j&lt;c;j++) if ((i&amp;(1&lt;&lt;j))==0){\n            int nxt=i|(1&lt;&lt;j);\n            int sum=0;\n            for (int k=0;k&lt;c;k++) if (i&amp;(1&lt;&lt;k)) sum+=cnt[j][k];\n            f[nxt]=min(f[nxt],f[i]+sum);\n        }\n    }\n    printf(\"%lldn\",f[s-1]);\n    return 0;\n}\n\u597d\u50cf\u5f88\u957f\u65f6\u95f4\u6ca1\u5199\u6b63\u7ecf\u535a\u5ba2\u4e86\u6765\u7740\u2026\u2026","tags":[{"name":"OI\u5b66\u4e60","slug":"OI\u5b66\u4e60","permalink":"https:\/\/skywt.cn\/tag\/OI%E5%AD%A6%E4%B9%A0\/"},{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"\u52a8\u6001\u89c4\u5212\u7c7b\u578b\u9898","slug":"\u52a8\u6001\u89c4\u5212\u7c7b\u578b\u9898","permalink":"https:\/\/skywt.cn\/tag\/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B1%BB%E5%9E%8B%E9%A2%98\/"},{"name":"\u72b6\u538bDP","slug":"\u72b6\u538bDP","permalink":"https:\/\/skywt.cn\/tag\/%E7%8A%B6%E5%8E%8BDP\/"},{"name":"CodeForces","slug":"CodeForces","permalink":"https:\/\/skywt.cn\/tag\/CodeForces\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"CodeForces Round #581 Div2 \u9898\u89e3","date":"2019-09-30T18:19:59+08:00","path":"https:\/\/skywt.cn\/posts\/cf1204","text":"Codeforces Round #581 (Div. 2) \u6bd4\u8d5b\u94fe\u63a5\uff1aLInk\nC - Anna, Svyatoslav and Maps\nDescription\n\u7ed9\u51fa\u4e00\u5f20\u6709\u5411\u56fe\uff0c\u6bcf\u6761\u8fb9\u7684\u8fb9\u6743\u90fd\u662f 1\u3002\u7ed9\u51fa\u4e00\u4e2a m \u4e2a\u70b9\u7684\u8def\u5f84\u5e8f\u5217 $\\{p_i \\}$\uff0c\u8868\u793a\u4f9d\u6b21\u7ecf\u8fc7\u8fd9 m \u4e2a\u70b9\u7684\u8def\u5f84\u3002\u8def\u5f84\u5e8f\u5217\u4e2d\u76f8\u90bb\u5143\u7d20\u4e4b\u95f4\u6709\u8fb9\u76f8\u8fde\u3002\n\u73b0\u5728\u9700\u8981\u4f60\u627e\u51fa\u8fd9\u4e2a\u5e8f\u5217\u7684\u4e00\u4e2a\u6700\u77ed\u7684\u5b50\u5e8f\u5217 $\\{v_i \\}$\uff0c\u957f\u5ea6\u4e3a k\uff0c\u4f7f\u5f97\u7ecf\u8fc7\u8fd9 k \u4e2a\u70b9\u7684\u8def\u5f84\u4e5f\u7ecf\u8fc7 $\\{p_i \\}$ \u4e2d\u6240\u6709\u70b9\u3002\n\n\uff08\u96be\u4ee5\u63cf\u8ff0\u2026\u2026\uff09\n\nDefine the sequence $v_1,v_2,\\dots,v_k$ of $k$ vertexes as good, if $v$ is a subsequence of $p$, $v_1=p_1$, $v_k=p_m$, and $p$ is one of the shortest paths passing through the vertexes $v_1 ,\\dots, v_k$ in that order.\n\n\uff08\u9898\u76ee\u91cc\u8bf4\u662f\u65e0\u73af\u7684\uff0c\u4f46\u662f\u7ed9\u51fa\u6570\u636e\u5305\u62ec\u6837\u4f8b\u90fd\u662f\u6709\u73af\u7684\u2026\u2026\u6ca1\u641e\u61c2\u2026\u2026\uff09\n\u6570\u636e\u8303\u56f4\uff1a$2\\leq n\\leq 100, 2\\leq m\\leq 10^6$\u3002\nSolution #1\nVP \u7684\u65f6\u5019\u5199\u51fa\u6765\u7684\uff0c\u4f46\u662f\u6570\u7ec4\u5f00\u5c0f\u4e86 qwq \u4e00\u76f4\u663e\u793a WA \u4f46\u662f\u4e00\u76f4\u627e\u4e0d\u5230\u9519\u2026\u2026\n\u7ffb\u8bd1\u4e00\u4e0b\u9898\u610f\u65e0\u975e\u5c31\u662f\u8ba9\u6211\u4eec\u627e\u201c\u4e0d\u5fc5\u8981\u7684\u70b9\u201d\uff0c\u5373\u5728\u8def\u5f84\u4e2d\u5220\u9664\u4e4b\u540e\u6839\u636e\u4e4b\u524d\u548c\u4e4b\u540e\u7684\u70b9\u80fd\u63a8\u65ad\u51fa\u7684\u70b9\u3002\u65e2\u7136\u8d70\u7684\u662f\u6700\u77ed\u8def\uff0c\u80fd\u5220\u9664\u7684\u70b9\u81ea\u7136\u662f\u5728\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u70b9\u3002\n\u770b\u5230\u767e\u7ea7\u7684\u6570\u636e\u80af\u5b9a\u5148\u8dd1 Floyd\uff0c\u7136\u540e\u904d\u5386\u9898\u4e2d\u7684\u8def\u5f84\u3002\u7b54\u6848\u5e8f\u5217\u521d\u59cb\u53ea\u6709 p[1]\uff0c\u8bb0\u7b54\u6848\u5e8f\u5217\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u662f last\uff0c\u5219\u5bf9\u4e8e\u6bcf\u4e2a\u5143\u7d20\u53ea\u8981\u5224\u65ad\u662f\u5426\u5728\u6700\u77ed\u8def\u4e0a\u5373\u53ef\uff1a\n$$dist(last,p_{i+1}) == dist(last,p_i) + dist(p_i,p_{i+1})$$\nCode #1\n#include&lt;bits\/stdc++.h&gt;\nusing namespace std;\n\ninline int read(){\n    int ret=0,f=1;char ch=getchar();\n    while (ch&lt;'0'||ch&gt;'9') {if (ch=='-') f=-1;ch=getchar();}\n    while (ch&gt;='0'&amp;&amp;ch&lt;='9') ret=ret*10+ch-'0',ch=getchar();\n    return ret*f;\n}\n\nconst int INF=0x3f3f3f3f;\n\nconst int maxn=105;\nconst int maxm=1000005;\n\nint n,m;\nint dist[maxn][maxn];\n\nint p[maxm];\nvector&lt;int&gt; ans;\n\nvoid Floyd(){\n    for (int k=1;k&lt;=n;k++)\n        for (int i=1;i&lt;=n;i++)\n            for (int j=1;j&lt;=n;j++)\n                dist[i][j]=min(dist[i][j],dist[i][k]+dist[k][j]);\n}\n\nsigned main(){\n    n=read();\n    memset(dist,0x3f,sizeof(dist));\n    for (int i=1;i&lt;=n;i++) dist[i][i]=0;\n\n    char ch=getchar(); while (ch!='0'&amp;&amp;ch!='1') ch=getchar();\n    for (int i=1;i&lt;=n;i++)\n        for (int j=1;j&lt;=n;j++){\n            if (ch=='1') dist[i][j]=1;\n            if (i==n&amp;&amp;j==n) continue;\n            ch=getchar(); while (ch!='0'&amp;&amp;ch!='1') ch=getchar();\n        }\n    m=read();\n    for (int i=1;i&lt;=m;i++) p[i]=read();\n\n    Floyd();\n    int last=-1;\n    for (int i=1;i&lt;=m;i++){\n        if (i==1 || i==m) {\n            ans.push_back(p[i]);last=p[i];\n            continue;\n        }\n        if (dist[last][p[i+1]] == dist[last][p[i]]+dist[p[i]][p[i+1]]){continue;}\n        ans.push_back(p[i]);last=p[i];\n    }\n    printf(\"%d\\n\",(int)ans.size());\n    for (int i=0;i&lt;(int)ans.size();i++) printf(\"%d \",ans[i]);\n    printf(\"\\n\");\n    return 0;\n}\nSolution #2\n\uff08\u6765\u81ea CF \u5b98\u65b9 Tutorial\uff09\n\u5148\u8dd1 Floyd\uff08\u6216\u8005 DFS\u2026\u2026\uff09\uff0c\u4e00\u6837\u5148\u628a $p_1$ \u52a0\u5165\u7b54\u6848\uff0c\u7136\u540e\u904d\u5386 $p$ \u8def\u5f84\u65f6\u8bb0\u5f55 last \u5230\u5f53\u524d\u7684\u8def\u5f84\u957f\u5ea6\uff08\u56e0\u4e3a\u9898\u76ee\u4e2d\u4fdd\u8bc1 $p$ \u7684\u76f8\u90bb\u5143\u7d20\u4e4b\u95f4\u6709\u8fb9\uff09\uff0c\u5982\u679c $dist(last,p_i)$ \u5c0f\u4e8e\u8bb0\u5f55\u7684\u8def\u5f84\u957f\u5ea6\uff0c\u8bf4\u660e last \u5230\u8fd9\u4e2a\u70b9\u6709\u5176\u4ed6\u66f4\u77ed\u7684\u8def\u5f84\uff0c\u5219\u5fc5\u987b\u5728\u7b54\u6848\u5e8f\u5217\u52a0\u5165 $p_{i-1}$ \u4ee5\u786e\u4fdd\u6cbf $p$ \u8def\u5f84\u8d70\u3002\nCode #2\n#include&lt;bits\/stdc++.h&gt;\nusing namespace std;\n\ninline int read(){\n    int ret=0,f=1;char ch=getchar();\n    while (ch&lt;'0'||ch&gt;'9') {if (ch=='-') f=-1;ch=getchar();}\n    while (ch&gt;='0'&amp;&amp;ch&lt;='9') ret=ret*10+ch-'0',ch=getchar();\n    return ret*f;\n}\n\nconst int INF=0x3f3f3f3f;\n\nconst int maxn=105;\nconst int maxm=1e6+5;\n\nint n,m;\nint dist[maxn][maxn];\n\nint p[maxm];\nvector&lt;int&gt; ans;\n\nvoid Floyd(){\n    for (int k=1;k&lt;=n;k++)\n        for (int i=1;i&lt;=n;i++)\n            for (int j=1;j&lt;=n;j++)\n                dist[i][j]=min(dist[i][j],dist[i][k]+dist[k][j]);\n}\n\nsigned main(){\n    n=read();\n    memset(dist,0x3f,sizeof(dist));\n    for (int i=1;i&lt;=n;i++) dist[i][i]=0;\n\n    char ch=getchar(); while (ch!='0'&amp;&amp;ch!='1') ch=getchar();\n    for (int i=1;i&lt;=n;i++)\n        for (int j=1;j&lt;=n;j++){\n            if (ch=='1') dist[i][j]=1;\n            if (i==n&amp;&amp;j==n) continue;\n            ch=getchar(); while (ch!='0'&amp;&amp;ch!='1') ch=getchar();\n        }\n    m=read();\n    for (int i=1;i&lt;=m;i++) p[i]=read();\n\n    Floyd();\n    int last,cnt;\n    for (int i=1;i&lt;=m;i++){\n        cnt++;\n        if (i==1) {\n            ans.push_back(p[i]);last=p[i];cnt=0;\n        } else if (i!=2 &amp;&amp; dist[last][p[i]] &lt; cnt){\n            ans.push_back(p[i-1]);\n            last=p[i-1];cnt=1;\n        }\n    }\n    ans.push_back(p[m]);\n    printf(\"%d\\n\",(int)ans.size());\n    for (int i=0;i&lt;(int)ans.size();i++) printf(\"%d \",ans[i]);\n    printf(\"\\n\");\n    return 0;\n}\nD1\/D2 -  Kirk and a Binary String\nDescription\n\u7ed9\u51fa\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684 0\/1 \u4e32 s\uff0c\u4f60\u9700\u8981\u627e\u51fa\u4e00\u4e2a\u957f\u5ea6\u76f8\u540c\u7684 0\/1 \u4e32 t\uff0c\u6ee1\u8db3\uff1a\n\n\u5bf9\u4e8e\u4efb\u610f $l$ \u548c $r$\uff08$1\\leq l \\leq r\\leq n$\uff09\uff0c\u6ee1\u8db3 $[l,r]$ \u533a\u95f4\u4e4b\u5185\u4e24\u4e2a\u4e32\u7684\u6700\u957f\u975e\u964d\u5b50\u5e8f\u5217\uff08LIS\uff09\u957f\u5ea6\u76f8\u7b49\uff1b\nt \u4e32\u4e2d 0 \u5c3d\u91cf\u591a\u3002\n\n\u6570\u636e\u8303\u56f4\uff1a$n\\leq 2000$\u3002\nSolution #1\n\uff08\u6765\u81ea https:\/\/blog.csdn.net\/nudt_spy\/article\/details\/99940916\uff09\n\u4ece\u540e\u5411\u524d\u8003\u8651\uff1a\n\n\u5bf9\u4e8e 0\uff1a\u5fc5\u7136\u662f\u67d0\u4e2a LIS \u7684\u4e00\u90e8\u5206\uff0c\u5982\u679c\u6539\u4e3a 1\uff0c\u5fc5\u7136\u4f1a\u7f29\u77ed LIS \u7684\u957f\u5ea6\uff081\uff09\uff1b\n\u5bf9\u4e8e 1\uff1a\n\n\u5982\u679c\u4ee5\u5b83\u4e3a\u8d77\u70b9\u7684\u533a\u95f4\u7684 LIS \u5305\u542b\u5b83\uff08\u663e\u7136\u8fd9\u4e2a\u533a\u95f4\u7684 LIS \u5168\u662f 1\uff09\uff0c\u5219\u628a\u5b83\u4fee\u6539\u4e3a 0 \u6ca1\u6709\u53d8\u5316\uff082\uff09\uff1b\n\u5982\u679c\u4ee5\u5b83\u4e3a\u8d77\u70b9\u7684\u533a\u95f4\u7684 LIS \u4e0d\u5305\u542b\u5b83\uff0c\u5219\u628a\u5b83\u6539\u4e3a 0 \u4f1a\u589e\u52a0 LIS \u957f\u5ea6\uff083\uff09\uff1b\n\n\n\u6240\u4ee5\u53ea\u6709\u7b2c\uff082\uff09\u79cd\u60c5\u51b5\u53ef\u4ee5\u4fee\u6539\u3002\u5982\u679c\u67d0\u4e2a\u533a\u95f4\u7684 LIS \u5168\u662f 1\uff0c\u5219\u8fd9\u4e2a\u533a\u95f4\u5fc5\u7136\u662f 1 \u7684\u6570\u91cf\u5927\u4e8e 0 \u7684\u6570\u91cf\uff0c\u5e76\u4e14 1 \u5f00\u5934\u3002\u6240\u4ee5\u53ea\u8981\u4ece\u540e\u5f80\u524d\u7edf\u8ba1\uff0c\u5982\u679c 1 \u7684\u6570\u91cf\u5927\u4e8e\u7b49\u4e8e 0 \u7684\u6570\u91cf\uff0c\u5219\u5141\u8bb8\u5c06 1 \u6539\u4e3a 0\u3002\n\uff08\u4e3a\u4ec0\u4e48\u4e0d\u8003\u8651\u5f62\u5982 10001111 \u7684\u6570\u5217\uff1f\uff08\u8fd9\u4e2a\u6570\u5217\u91cc LIS \u4f3c\u4e4e\u5e76\u4e0d\u662f\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff09\u5728\u4ece\u540e\u5411\u524d\u5904\u7406\u65f6\uff0c\u540e\u9762\u7684 1 \u90fd\u4f1a\u88ab\u641e\u6210 0\uff0c\u6362\u53e5\u8bdd\u8bf4\u6700\u7ec8 LIS \u5168\u662f 0 \u6216\u8005\u5168\u662f 1\uff09\nSolution #2\n\uff08\u6765\u81ea CF \u5b98\u65b9 Tutorial\uff09\n\u5982\u679c\u5bf9\u4e8e\u4e00\u4e2a 0\/1 \u4e32 $p$\uff0c\u6ca1\u6709\u4e32\u4e0e\u5b83\u6ee1\u8db3\u6761\u4ef6\u4e00\uff0c\u5219\u79f0\u8fd9\u4e2a\u4e32\u4e3a fixed \u4e32\u3002\u5219\u6709\u4ee5\u4e0b\u51e0\u6761\u4e8b\u5b9e\uff1a\n\n10 \u662f fixed \u7684\uff1b\n\u5982\u679c $p$ \u548c $q$ \u90fd\u662f fixed \u7684\uff0c\u5219 $pq$ \u4e5f\u662f fixed \u7684\uff1b\n\u5982\u679c $p$ \u662f fixed \u7684\uff0c\u90a3\u4e48 $1p0$ \u4e5f\u662f fixed \u7684\uff1b\n\u6bcf\u4e2a fixed \u4e32\u7684 0 \u548c 1 \u6570\u91cf\u76f8\u7b49\uff1b\n\u6bcf\u4e2a fixed \u4e32\u7684 LIS \u957f\u5ea6\u90fd\u662f\u5176\u4e00\u534a\uff0c\u5e76\u4e14\u53ea\u5305\u542b 0 \u6216\u8005\u53ea\u5305\u542b 1\uff1b\n\n\uff08\u8bc1\u660e\u53ef\u89c1\uff1ahttps:\/\/www.cnblogs.com\/yyf0309\/p\/11389504.html\uff09\n\u90a3\u4e48\u5bf9\u4e8e\u9898\u76ee\u4e2d\u6240\u7ed9\u7684 s\uff0c\u5176\u4e2d\u7684\u82e5\u5e72 fixed \u4e32\u662f\u4e0d\u80fd\u6539\u53d8\u7684\uff0c\u53ef\u4ee5\u4e0d\u8003\u8651\uff1b\n\u5219\u5269\u4e0b\u7684\u90e8\u5206\u90fd\u662f\u4e00\u6bb5\u6bb5 LIS\uff08\u5426\u5219\u5c31\u4f1a\u6709 10 \u5373 fixed string\uff09\u3002\u6240\u4ee5\u53ea\u8981\u5269\u4e0b\u7684\u90e8\u5206\u628a 1 \u6539\u6210 0\uff0c\u5404\u4e2a LIS \u90fd\u4e0d\u4f1a\u6539\u53d8\u3002\nCode #2\n#include&lt;bits\/stdc++.h&gt;\n\nusing namespace std;\n\ninline int read(){\n    int ret=0,f=1;char ch=getchar();\n    while (ch&lt;'0'||ch&gt;'9') {if (ch=='-') f=-1;ch=getchar();}\n    while (ch&gt;='0'&amp;&amp;ch&lt;='9') ret=ret*10+ch-'0',ch=getchar();\n    return ret*f;\n}\n\nconst int maxn=100005;\n\nint n;\nchar s[maxn];\nbool vis[maxn];\n\nsigned main(){\n    scanf(\"%s\",s+1); n=strlen(s+1);\n    for (int i=1;i&lt;=n;i++) if (i!=1 &amp;&amp; s[i-1]=='1' &amp;&amp; s[i]=='0'){\n        int l=i-1,r=i; vis[l]=vis[r]=true;\n        while (l-1&gt;=1&amp;&amp;s[l-1]=='1' &amp;&amp; r+1&lt;=n&amp;&amp;s[r+1]=='0') l--,r++,vis[l]=vis[r]=true;\n        for (;;){\n            if (l-1&gt;=1 &amp;&amp; vis[l-1]){\n                while (l-1&gt;=1 &amp;&amp; vis[l-1]) l--;\n                while (l-1&gt;=1&amp;&amp;s[l-1]=='1' &amp;&amp; r+1&lt;=n&amp;&amp;s[r+1]=='0') l--,r++,vis[l]=vis[r]=true;\n            } else break;\n        }\n        i=r;\n    }\n    for (int i=1;i&lt;=n;i++) if ((!vis[i]) &amp;&amp; s[i]=='1') s[i]='0';\n    printf(\"%s\\n\",s+1);\n    return 0;\n}\n1204E - Natasha, Sasha and the Prefix Sums\nDescription\n\u7ed9\u51fa $n$ \u548c $m$\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u957f\u5ea6\u4e3a $n+m$\u3001\u5305\u542b $n$ \u4e2a 1\u3001$m$ \u4e2a -1 \u7684\u6570\u5217\uff0c\u6709\u5176\u6700\u5927\u7684\u524d\u7f00\u548c\uff08\u5982\u679c\u5c0f\u4e8e 0 \u5219\u53d6 0\uff09\u3002\u5f62\u5f0f\u5316\u5730\u8bf4\uff0c\u5b9a\u4e49 $f(a)$ \u4e3a\u957f\u5ea6\u4e3a $l$ \u7684\u5e8f\u5217 $a_1,\\dots,a_l$ \u7684\u6700\u5927\u524d\u7f00\u548c\uff0c$l \\geq 0$\uff0c\u5219\uff1a\n$$f(a) = \\max (0, \\smash{\\displaystyle\\max_{1 \\leq i \\leq l}} \\sum_{j=1}^{i} a_j )$$\n\u9700\u8981\u6c42\u51fa\u5bf9\u4e8e\u6240\u6709\u8fd9\u6837\u7684\u6570\u5217\uff0c\u6700\u5927\u524d\u7f00\u548c\u4e4b\u548c\u3002\u6a21 998244853\u3002\n\u6570\u636e\u8303\u56f4\uff1a$0\\leq n,m\\leq 2000$\u3002\nSolution\n\uff08\u6765\u81ea CF \u5b98\u65b9 Tutorial\uff09\n\u9996\u5148\u6784\u9020\u4e00\u4e2a DP \u6570\u7ec4 $G(i,j)$\uff0c\u8868\u793a $n-i,m=j$ \u65f6\u6700\u5927\u524d\u7f00\u548c\u662f 0 \u7684\u6570\u7ec4\u6570\u91cf\u3002\n\n$i=0$ \u65f6\uff1a\u663e\u7136 $G(i,j)=1$\uff1b\n$i>j$ \u65f6\uff1a$G(i,j)=0$\uff1b\n\u5176\u4ed6\u60c5\u51b5\uff1a\u53ef\u4ee5\u4ece $G(i-1,j)$ \u4e2d\u8f6c\u79fb\uff1a\u76f4\u63a5\u5728\u6700\u540e\u52a0\u4e0a\u4e00\u4e2a 1\uff0c\u539f\u6765\u6700\u5927\u524d\u7f00\u548c\u662f 0 \u7684\u73b0\u5728\u8fd8\u662f 0\uff08\u56e0\u4e3a $x\\leq y$\uff09\uff0c$G(i,j-1)$ \u540c\u7406\u3002\n\u6240\u4ee5\uff1a$G(i,j)=G(i-1,j)+G(i,j-1)$\uff1b\n\u8fd9\u4e2a\u6570\u7ec4\u7684\u6784\u9020\u53ef\u4ee5\u89e3\u51b3 \u201c\u524d\u7f00\u548c\u5c0f\u4e8e 0 \u65f6\u53d6 0\u201d \u7684\u95ee\u9898\u3002\n\n\u5b9a\u4e49 $F(i,j)$ \u8868\u793a $n=i,m=j$ \u65f6\u7684\u7b54\u6848\uff08\u6700\u5927\u524d\u7f00\u548c\u4e4b\u548c\uff09\u3002\n\n$i=0$ \u65f6\uff1a\u663e\u7136 $F(i,j)=0$\uff1b\n$j=0$ \u65f6\uff1a\u663e\u7136 $F(i,j)=i$\uff1b\n\u8003\u8651\u5bf9\u4e8e $(i-1,j)$ \u7684\u6570\u5217\uff1a\u5728\u524d\u9762\u52a0\u4e0a\u4e00\u4e2a 1 \u5c31\u53ef\u4ee5\u53d8\u6210 $i,j$\uff0c\u8fd9\u6837\u7684\u6570\u5217\u6709 ${x+y-1 \\choose x}$ \u4e2a\uff0c\u5219\u8fd9\u4e00\u90e8\u5206\u7b54\u6848\u662f ${i+j-1 \\choose j} + F(x-1,y)$\uff1b\u540c\u6837\u5730\uff0c\u5bf9\u4e8e $(i,j-1)$ \u7684\u6570\u5217\u6709 ${i+j-1 \\choose i} - G(i,j-1)$ \u4e2a\uff08\u4e3a 0 \u7684\u4e0d\u80fd\u518d\u51cf\uff09\uff0c\u6bcf\u4e2a\u51cf\u53bb\u4e00\u4e2a 1\uff0c\u8fd9\u90e8\u5206\u7b54\u6848\u662f $F(i,j-1)-({i+j-1 \\choose i} - G(i,j-1))$\u3002\n\n$$F(i,j)={i+j-1 \\choose j} + F(x-1,y) + F(i,j-1)-({i+j-1 \\choose i} - G(i,j-1))$$\nCode\n#include&lt;bits\/stdc++.h&gt;\nusing namespace std;\n\n#define int long long\n\ninline int read(){\n    int ret=0,f=1;char ch=getchar();\n    while (ch&lt;'0'||ch&gt;'9') {if (ch=='-') f=-1;ch=getchar();}\n    while (ch&gt;='0'&amp;&amp;ch&lt;='9') ret=ret*10+ch-'0',ch=getchar();\n    return ret*f;\n}\n\nconst int tt=998244853;\nconst int maxn=2005;\n\nint n,m;\nint f[maxn][maxn],g[maxn][maxn];\nint c[maxn*2][maxn*2];\n\nvoid build_cons(){\n    c[1][0]=c[1][1]=1;\n    for (int i=2;i&lt;=n+m;i++){\n        c[i][0]=c[i][i]=1;\n        for (int j=1;j&lt;i;j++) c[i][j]=(c[i-1][j-1]+c[i-1][j])%tt;\n    }\n}\n\nsigned main(){\n    n=read(); m=read();\n\n    for (int i=0;i&lt;=n;i++)\n        for (int j=0;j&lt;=m;j++){\n            if (i==0) g[i][j]=1; else\n            if (i&gt;j) g[i][j]=0; else\n            g[i][j]=(g[i-1][j]+g[i][j-1])%tt;\n        }\n\n    build_cons();\n\n    for (int i=0;i&lt;=n;i++)\n        for (int j=0;j&lt;=m;j++){\n            if (i==0) f[i][j]=0; else\n            if (j==0) f[i][j]=i; else\n            f[i][j]=((c[i+j-1][j]+f[i-1][j])%tt+(f[i][j-1]-(c[i+j-1][i]-g[i][j-1])%tt+tt)%tt)%tt;\n        }\n\n    printf(\"%lld\\n\",f[n][m]);\n    return 0;\n}","tags":[{"name":"OI\u5b66\u4e60","slug":"OI\u5b66\u4e60","permalink":"https:\/\/skywt.cn\/tag\/OI%E5%AD%A6%E4%B9%A0\/"},{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"CodeForces","slug":"CodeForces","permalink":"https:\/\/skywt.cn\/tag\/CodeForces\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"CodeForces Round #578 Div2 \u9898\u89e3","date":"2019-10-02T19:57:36+08:00","path":"https:\/\/skywt.cn\/posts\/cf1200","text":"Codeforces Round #578 (Div. 2)\nD - White Lines\nDescription\n*1900\n\u7ed9\u51fa\u4e00\u4e2a $n\\ast m$ \u7684\u9ed1\u767d\u77e9\u9635\uff0c\u4f60\u53ef\u4ee5\u5c06\u4e00\u5757 $k\\ast k$ \u7684\u77e9\u5f62\u5168\u90e8\u53d8\u6210\u767d\u8272\u3002\n\u95ee\u4f60\u6267\u884c\u4e00\u6b21\u4e0a\u8ff0\u67d3\u8272\u4e4b\u540e\uff0c\u5168\u7a7a\u767d\u7684\u884c\u548c\u5168\u7a7a\u767d\u7684\u5217\u6570\u91cf\u603b\u548c\u7684\u6700\u5927\u503c\u3002\n\u6570\u636e\u8303\u56f4\uff1a$n,m\\leq 2000$\u3002\n\nSolution\n$Fl(i,j)$ \u8868\u793a\u64e6\u9664\u4e86\u7b2c $i$ \u884c $j$ \u5217\u5f00\u59cb\u6a2a\u7740\u7684 $k$ \u4e2a\u683c\u5b50\u4e4b\u540e\u8fd9\u4e00\u884c\u662f\u5426\u80fd\u4e3a\u7a7a\uff1b\n$Fc(i,j)$ \u8868\u793a\u64e6\u9664\u4e86\u7b2c $i$ \u884c $j$ \u5217\u5f00\u59cb\u7ad6\u7740\u7684 $k$ \u4e2a\u683c\u5b50\u4e4b\u540e\u8fd9\u4e00\u5217\u662f\u5426\u80fd\u4e3a\u7a7a\uff1b\n\u5bf9\u8fd9\u4e24\u4e2a\u505a\u524d\u7f00\u548c\uff0c\u7136\u540e\u679a\u4e3e\u5de6\u4e0a\u89d2\u5373\u53ef\u3002\nCode\n#include&lt;bits\/stdc++.h&gt;\nusing namespace std;\n\ninline int read(){\n    int ret=0,f=1;char ch=getchar();\n    while (ch&lt;'0'||ch&gt;'9') {if (ch=='-') f=-1;ch=getchar();}\n    while (ch&gt;='0'&amp;&amp;ch&lt;='9') ret=ret*10+ch-'0',ch=getchar();\n    return ret*f;\n}\n\nint read_ch(){\n    char ch=getchar();\n    while (ch!='B' &amp;&amp; ch!='W') ch=getchar();\n    return ch=='B';\n}\n\nconst int maxn=2005;\nint n,k,ben=0,ans=0;\nint a[maxn][maxn];\n\nint fl[maxn][maxn],suml[maxn][maxn];\nint fc[maxn][maxn],sumc[maxn][maxn];\n\nsigned main(){\n    n=read(); k=read();\n    for (int i=1;i&lt;=n;i++)\n        for (int j=1;j&lt;=n;j++)\n            a[i][j]=read_ch();\n\n    for (int i=1;i&lt;=n;i++){\n        int tl=-1,tr=-1;\n        for (int j=1;j&lt;=n;j++) if (a[i][j]) {tl=j;break;}\n        for (int j=n;j&gt;=1;j--) if (a[i][j]) {tr=j;break;}\n        if (tl==-1){\n            ben++;\n            continue;\n        }\n        if (tr-tl+1 &gt; k) continue;\n        for (int j=tl-(k-(tr-tl+1));j&lt;=tl;j++) fl[i][j]=1;\n    }\n    for (int i=1;i&lt;=n;i++)\n        for (int j=1;j&lt;=n-k+1;j++)\n            suml[i][j]=suml[i-1][j]+fl[i][j];\n\n    for (int j=1;j&lt;=n;j++){\n        int tl=-1,tr=-1;\n        for (int i=1;i&lt;=n;i++) if (a[i][j]) {tl=i;break;}\n        for (int i=n;i&gt;=1;i--) if (a[i][j]) {tr=i;break;}\n        if (tl==-1){\n            ben++;\n            continue;\n        }\n        if (tr-tl+1 &gt; k) continue;\n        for (int i=tl-(k-(tr-tl+1));i&lt;=tl;i++) fc[i][j]=1;\n    }\n    for (int j=1;j&lt;=n;j++)\n        for (int i=1;i&lt;=n-k+1;i++)\n            sumc[i][j]=sumc[i][j-1]+fc[i][j];\n\n    for (int i=1;i&lt;=n-k+1;i++)\n        for (int j=1;j&lt;=n-k+1;j++){\n            ans=max(ans,ben + suml[i+k-1][j]-suml[i-1][j]+sumc[i][j+k-1]-sumc[i][j-1]);\n        }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\nE - Compress Words\nDescription\n*2000\n\u5b9a\u4e49\u5408\u5e76\u4e24\u4e2a\u5355\u8bcd\u4e3a\uff1a\u79fb\u9664\u540e\u4e00\u4e2a\u5355\u8bcd\u7684\u524d\u7f00\uff0c\u8fd9\u4e2a\u524d\u7f00\u548c\u524d\u4e00\u4e2a\u5355\u8bcd\u7684\u540e\u7f00\u76f8\u540c\u5e76\u4e14\u6700\u957f\u3002\u4f8b\u5982\uff1asample+please=samplease\u3002\n\u7ed9\u51fa n \u4e2a\u5355\u8bcd\uff0c\u4ece\u5de6\u5230\u53f3\u4e24\u4e24\u8fdb\u884c\u5408\u5e76\uff08\u5373\u5148\u5408\u5e76\u7b2c\u4e00\u4e2a\u548c\u7b2c\u4e8c\u4e2a\uff0c\u7136\u540e\u5c06\u7ed3\u679c\u5408\u5e76\u7b2c\u4e09\u4e2a\u2026\u2026\uff09\uff0c\u8f93\u51fa\u6240\u6709\u64cd\u4f5c\u5b8c\u6210\u540e\u7684\u7ed3\u679c\u3002$1\\leq n\\leq 10^5$\uff0c\u6240\u6709\u5355\u8bcd\u603b\u957f\u5ea6\u4e0d\u8d85\u8fc7 $10^6$\u3002\nSolution #1\n\uff08\u6765\u81ea\uff1ahttps:\/\/www.luogu.org\/blog\/Soulist\/solution-cf1200e\uff09\n\u611f\u89c9\u8fd9\u9898\u5b57\u7b26\u4e32\u54c8\u5e0c\u7684\u505a\u6cd5\u6bd4\u8f83\u7b80\u5355\u2026\u2026\n\u5bf9\u65b0\u52a0\u5165\u7684\u5b57\u7b26\u4e32\u76f4\u63a5\u679a\u4e3e\u5176\u524d\u7f00\u548c\u539f\u4e32\u7684\u540e\u7f00\uff0c\u7136\u540e\u53cc\u6a21\u54c8\u5e0c\u5224\u65ad\u76f8\u540c\u2026\u2026\n\uff08\u636e\u8bf4 CF \u5199\u54c8\u5e0c\u5f88\u5bb9\u6613\u88ab hack\uff1f\uff09\nCode #1\n#include&lt;bits\/stdc++.h&gt;\nusing namespace std;\n\n#define int long long\n\ninline int read(){\n    int ret=0,f=1;char ch=getchar();\n    while (ch&lt;'0'||ch&gt;'9') {if (ch=='-') f=-1;ch=getchar();}\n    while (ch&gt;='0'&amp;&amp;ch&lt;='9') ret=ret*10+ch-'0',ch=getchar();\n    return ret*f;\n}\n\nconst int maxn=10005,maxlen=1e6+5,LEN=1e6;\nconst int tt=1e9+7;\nconst int hv[2]={1926,817};\n\nint n;\nchar s[maxlen],ans[maxlen];\nint len=0;\n\nint qsm[2][maxlen];\n\nsigned main(){\n    n=read();\n    qsm[0][0]=qsm[1][0]=1;\n    for (int i=1;i&lt;=LEN;i++) qsm[0][i]=qsm[0][i-1]*hv[0]%tt,qsm[1][i]=qsm[1][i-1]*hv[1]%tt;\n\n    while (n--){\n        scanf(\"%s\",s+1); int nowlen=strlen(s+1);\n        int hash1[2],hash2[2],now=0;\n        hash1[0]=hash1[1]=hash2[0]=hash2[1]=0;\n        for (int i=1;i&lt;=min(nowlen,len);i++){\n            for (int k=0;k&lt;2;k++){\n                hash1[k]=(hash1[k]*hv[k]+s[i])%tt;\n                hash2[k]=(hash2[k]+ans[len-i+1]*qsm[k][i-1])%tt;\n            }\n            if (hash1[0]==hash2[0] &amp;&amp; hash1[1]==hash2[1]) now=i;\n        }\n        for (int i=now+1;i&lt;=nowlen;i++) ans[++len]=s[i];\n    }\n    for (int i=1;i&lt;=len;i++) putchar(ans[i]);\n    printf(\"\\n\");\n    return 0;\n}\nSolution #2\n\uff08\u6765\u81ea CF \u5b98\u65b9 Tutorial\uff09\n\u7528 KMP \u7684\u89e3\u6cd5\u9700\u8981\u5bf9 KMP \u7684\u539f\u7406\u7b49\u6709\u6bd4\u8f83\u6df1\u5165\u7684\u8ba4\u77e5\uff08\u6bd4\u5982\u6211\u5c31\u6ca1\u60f3\u51fa\u6765\uff08\u5410\u8840\uff09\uff09\u3002\nKMP \u4e2d next \u8868\u793a\u7684\u5c31\u662f\u6700\u957f\u76f8\u540c\u524d\u7f00\u548c\u540e\u7f00\u7684\u957f\u5ea6\uff0c\u6240\u4ee5\u53ea\u8981\u628a\u4e24\u4e2a\u4e32\u5148\u62fc\u5728\u4e00\u8d77\uff0c\u4f7f\u8981\u627e\u524d\u7f00\u7684\u5728\u524d\u9762\u3001\u8981\u627e\u540e\u7f00\u7684\u5728\u540e\u9762\uff0c\u7136\u540e\u518d\u6784\u9020\u4e00\u904d next \u6570\u7ec4\u4e0d\u5c31\u884c\u4e86\uff1f\uff1f\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684 next \u5c31\u662f\u7b54\u6848\u3002\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5c06\u4e24\u4e2a\u5b57\u7b26\u4e32\u201c\u62fc\u5728\u4e00\u8d77\u201d\u65f6\u8981\u5728\u4e2d\u95f4\u52a0\u4e00\u4e2a\u7279\u6b8a\u7684\u5b57\u7b26\uff08\u6bd4\u5982@\uff09\uff0c\u4ee5\u786e\u4fdd\u524d\u7f00\u548c\u540e\u7f00\u4e0d\u4f1a\u8d8a\u8fc7\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\u5982\u679c\u65b0\u52a0\u5165\u7684\u4e32\u957f\u5ea6\u6bd4\u5df2\u5408\u5e76\u7684\u66f4\u5927\uff0c\u53ef\u4ee5\u628a\u524d\u9762\u622a\u6389\uff0c\u53ea\u7559\u540e\u9762\u548c\u5df2\u5408\u5e76\u7684\u957f\u5ea6\u4e00\u6837\u7684\u540e\u7f00\u3002\nF - Graph Traveler\nDescription\n*1500\n\u7ed9\u51fa\u4e00\u5f20\u6709\u5411\u56fe\uff0c\u53ef\u80fd\u6709\u91cd\u8fb9\u3001\u81ea\u73af\u3002\u6bcf\u4e2a\u70b9\u6709\u70b9\u6743 $k_i$\uff0c\u70b9 $i$ \u6709 $m_i$ \u6761\u51fa\u8fb9\uff0c\u8fde\u5411\u7684\u70b9\u5206\u522b\u8bb0\u4e3a $e_i[0],e_i[1],\\dots,e_i[m_i-1]$\u3002\n\u4f60\u53ef\u4ee5\u5f00\u59cb\u4e00\u4e2a Graph Traveler \u7684\u6e38\u620f\uff0c\u89c4\u5219\uff08\u6b65\u9aa4\uff09\u5982\u4e0b\uff1a\n\n\u9009\u5b9a\u4e00\u4e2a\u8d77\u70b9\u548c\u4e00\u4e2a\u6574\u6570 $c$\uff1b\n\u5f53\u8bbf\u95ee\u5230 $i$ \u70b9\u65f6\uff08\u5305\u62ec\u8d77\u70b9\uff09\uff0c\u5c06 $c$ \u52a0\u4e0a $k_i$\uff1b\n\u8bbe $x$ \u6ee1\u8db3 $x \u2261 c \\pmod {m_i}$\uff0c$0\\leq x\\leq m_i-1$\uff0c\u5219\u63a5\u4e0b\u6765\u8d70\u5411\u70b9 $e_i[x]$\u3002\n\n\u663e\u7136\u6b65\u9aa4 2 \u548c 3 \u4f1a\u9677\u5165\u5faa\u73af\u3002\u73b0\u5728\u7ed9\u51fa $q$ \u7ec4\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u5982\u679c\u4ece\u7ed9\u5b9a\u7684\u70b9 $x$ \u4ee5\u7ed9\u5b9a\u7684\u6570\u5b57 $y$ \u5f00\u59cb\uff0c\u591a\u5c11\u70b9\u4f1a\u88ab\u7ecf\u8fc7\u65e0\u6570\u6b21\u3002\n\u6570\u636e\u8303\u56f4\uff1a$1\\leq n\\leq 1000, 1\\leq m_i\\leq 10, -10^9\\leq k_i\\leq 10^9, 1\\leq m_i\\leq 10$\uff1b\n$1\\leq q\\leq 10^5, -10^9\\leq y\\leq 10^9$\u3002\nSolution\n\u5982\u679c\u76f4\u63a5\u66b4\u529b\u6c42\u89e3\uff0c\u6211\u4eec\u80af\u5b9a\u60f3\u8981\u7684\u662f\u8bb0\u5f55\u4e00\u4e2a\u72b6\u6001 $(x,c)$\uff0c\u8868\u793a\u8d70\u5230 $x$ \u70b9\uff0c\u624b\u4e2d\u7684\u6570\u5b57\u662f $y$\uff0c\u5982\u679c\u8d70\u5230\u91cd\u590d\u7684\u72b6\u6001\u5219\u4f1a\u9677\u5165\u5faa\u73af\u3002\u4f46\u662f\u95ee\u9898\u5728\u4e8e\u8fd9\u4e2a $y$ \u53ef\u4ee5\u662f\u65e0\u9650\u5927\u6216\u8005\u65e0\u9650\u5c0f\u3002\n\u8003\u8651\u5bf9\u4e8e\u4e00\u4e2a\u70b9 $x$\uff0c\u5728\u8d70\u5230\u8fd9\u4e2a\u70b9\u4e0a\u65f6\u6301\u6709\u7684\u6570\u5b57\u5982\u679c\u662f $y$ \u548c $y+m_i$\uff0c\u7ed3\u679c\u662f\u4e00\u6837\u7684\u3002\u90a3\u4e48\u5982\u5bf9\u4e8e\u6240\u6709\u70b9\uff0c\u5c31\u90fd\u6ee1\u8db3 $y$ \u548c $y+lcm(m_i)$ \u540c\u7b49\u3002$lcm(1,\\dots,10) = 2520$\uff08\u8bb0\u4e3a $maxs$\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u6240\u6709 $y$ \u90fd\u63a7\u5236\u5230 $[0,2520)$\u3002\n\u63a5\u4e0b\u6765\u5c31\u7b80\u5355\u4e86\uff0c\u53ef\u4ee5\u628a\u6bcf\u4e2a $(x,y)$ \u72b6\u6001\u770b\u6210\u4e00\u4e2a\u70b9\uff0c\u7f16\u53f7\u4e3a $(x-1)\\ast maxs+y$\uff0c\u90a3\u4e48\u6bcf\u4e2a\u70b9\u5c31\u53ea\u6709\u4e00\u6761\u51fa\u8fb9\uff0c\u76f4\u63a5\u6c42\u73af\u5c31\u53ef\u4ee5\u4e86\u2026\u2026\nCode\n\u5f00 long long \u8fc7\u4e0d\u4e86\uff0c\u53ef\u80fd\u4f1a\u7206\u5185\u5b58\uff0c\u4f46\u662f\u663e\u793a\u7684\u662f RE\u2026\u2026\n#include&lt;bits\/stdc++.h&gt;\n\nusing namespace std;\n\n\/\/ #define int long long\n\ninline int read(){\n    int ret=0,f=1;char ch=getchar();\n    while (ch&lt;'0'||ch&gt;'9') {if (ch=='-') f=-1;ch=getchar();}\n    while (ch&gt;='0'&amp;&amp;ch&lt;='9') ret=ret*10+ch-'0',ch=getchar();\n    return ret*f;\n}\n\nconst int maxn=2005,maxs=2520;\n\nint n,v[maxn];\nint m[maxn],k[15],lnk[maxn*maxs],rlnk[maxn*maxs];\nint q;\n\nint ans[maxn*maxs];\nint deep[maxn*maxs],onl[maxn*maxs];\nbool vis[maxn*maxs],cnd[maxn];\n\nint DFS(int x,int y,int fa){\n    int now=(x-1)*maxs+y;\n    if (ans[now]!=-1) return ans[now];\n\n    deep[now]=deep[fa]+1; onl[deep[now]]=x;\n    vis[now]=true;\n    if (vis[lnk[now]]){\n        for (int i=deep[lnk[now]];i&lt;=deep[now];i++) if (!cnd[onl[i]]) ans[now]++,cnd[onl[i]]=true;\n        for (int i=deep[lnk[now]];i&lt;=deep[now];i++) cnd[onl[i]]=false;\n    } else ans[now]=DFS(rlnk[now],(y+v[x])%maxs,now);\n    vis[now]=false;\n    return ans[now];\n}\n\nsigned main(){\n    n=read();\n    for (int i=1;i&lt;=n;i++) v[i]=read(),v[i]=(v[i]%maxs+maxs)%maxs;\n    for (int i=1;i&lt;=n;i++){\n        m[i]=read();\n        for (int j=0;j&lt;m[i];j++) k[j]=read();\n        for (int j=0;j&lt;maxs;j++){\n            int nowto=(j+v[i])%maxs;\n            lnk[(i-1)*maxs+j]=(k[nowto%m[i]]-1)*maxs+nowto;\n            rlnk[(i-1)*maxs+j]=k[nowto%m[i]];\n            ans[(i-1)*maxs+j]=-1;\n        }\n    }\n\n    for (int i=1;i&lt;=n;i++)\n        for (int j=0;j&lt;maxs;j++)\n            if (ans[(i-1)*maxs+j]==-1) DFS(i,j,(i-1)*maxs+j);\n\n    q=read();\n    while (q--){\n        int x=read(),c=read();\n        c=(c%maxs+maxs)%maxs;\n        printf(\"%d\\n\",ans[(x-1)*maxs+c]+1);\n    }\n    return 0;\n}","tags":[{"name":"OI\u5b66\u4e60","slug":"OI\u5b66\u4e60","permalink":"https:\/\/skywt.cn\/tag\/OI%E5%AD%A6%E4%B9%A0\/"},{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"CodeForces","slug":"CodeForces","permalink":"https:\/\/skywt.cn\/tag\/CodeForces\/"},{"name":"\u54c8\u5e0c","slug":"\u54c8\u5e0c","permalink":"https:\/\/skywt.cn\/tag\/%E5%93%88%E5%B8%8C\/"},{"name":"\u524d\u7f00\u548c","slug":"\u524d\u7f00\u548c","permalink":"https:\/\/skywt.cn\/tag\/%E5%89%8D%E7%BC%80%E5%92%8C\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":null,"date":"2019-08-20T17:00:52+08:00","path":"https:\/\/skywt.cn\/posts\/2415","text":"\u7f51\u7ad9\u901a\u8fc7\u5907\u6848\u5566\uff01 \u6d59ICP\u590719034233\u53f7\u3002","tags":[],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"NOIP \u63d0\u9ad8\u7ec4 \u9898\u89e3\u805a\u5408\uff08\uff08\u4f2a\uff09\u5b8c\u7ed3\u6492\u82b1\uff01\uff09","date":"2019-11-07T18:16:00+08:00","path":"https:\/\/skywt.cn\/posts\/noip-s-solution","text":"2019.11.07 Upd\uff1a\u5176\u5b9e\u4e0d\u662f\u771f\u7684\u5b8c\u7ed3\u4e86\uff0c\u6709\u4e9b\u9898\u76ee\u5b9e\u5728\u641e\u4e0d\u52a8 QwQ\n\u8fd8\u6709\u592a\u591a\u8584\u5f31\u7684\u5730\u65b9\u8981\u8865\u4e86\uff0c\u8fd9\u4e2a\u9879\u76ee\u5c31\u5148\u5230\u6b64\u4e3a\u6b62\u5427\u3002\n\u4eca\u5e74\u8054\u8d5b\u6bd4\u5b8c\u53ef\u80fd\u5c31\u8981\u9000\u5f79\u4e86\uff0c\u90a3\u4e9b To be continued \u7684\u683c\u5b50\u53ef\u80fd\u4e0d\u4f1a be continued \u4e86\n\u66f4\u591a\u4f24\u611f\u7684\u8bdd\u8fd8\u662f\u5728\u9000\u5f79\u603b\u7ed3\u91cc\u5199\u5427\u2026\u2026\n\n\n\u4e89\u53d6 CSP \u4e4b\u524d\u628a\u8fd9\u4e2a\u5751\u586b\u5b8c\n\u6bd5\u7adf\u4ee5\u540e\u6ca1\u6709 NOIP \u4e86\uff08\u5927\u96fe\n\n\u9898\u76ee\u7f16\u53f7\u793a\u610f\uff1a\n2010 \u53ca\u4ee5\u524d XY0Z \u4ee3\u8868 20XY \u5e74 NOIP tZ\uff1b\n2011 \u53ca\u4ee5\u540e XYZW \u4ee3\u8868 20XY \u5e74 NOIP dayZ tW\u3002\n\u9898\u76ee\u540d\u52a0\u7c97\u8868\u793a\u6b64\u9898\u4e3a\u6bd2\u7624\uff0c\u5e26\u611f\u53f9\u53f7\u8868\u793a\u4e3a\u5927\u6bd2\u7624\n\n\n\nNumber\nName\nLink\nSolution\n\n\n\n\n0901\n\u6f5c\u4f0f\u8005\nLink\n\u6a21\u62df\u3002\n\n\n0902\nHankson \u7684\u8da3\u5473\u9898\nLink\n\u7ecf\u8fc7\u4e00\u756a\u4e71\u641e\u6570\u5b66\u63a2\u7a76\u4e4b\u540e\u53ef\u4ee5\u53d1\u73b0\u51e0\u4e2a\u6027\u8d28\uff1a$x$ \u662f $b_1$ \u7684\u56e0\u6570\u5e76\u4e14\u662f $a_1$ \u7684\u500d\u6570\uff0c\u5e76\u4e14\u6ee1\u8db3 $\\gcd(\\frac x {a_1},\\frac {a_0} {a_1})=1,\\gcd(\\frac {b_1} x,\\frac {b_1} {b_0})=1$\u3002\u6240\u4ee5\u53ea\u9700\u8981\u8fdb\u884c $\\sqrt{b_1}$ \u7684\u679a\u4e3e\u5e76 check \u5373\u53ef\u3002\u7406\u8bba\u4e0a\u5e94\u8be5\u5e26\u4e2a $\\log$ \u7684\u4e9a\u5b50\u2026\u2026\n\n\n0903\n\u6700\u4f18\u8d38\u6613\nLink\n\u5148\u53cd\u5efa\u8fb9\u53cd\u5411 DFS \u5237\u51fa\u54ea\u4e9b\u70b9\u80fd\u8d70\u5230\u7ec8\u70b9\uff0c\u7136\u540e\u4e71\u5199\u4e2a SPFA \u6c42 1 \u5230 $i$ \u8def\u5f84\u4e0a\u6700\u5c0f\u503c\uff0c\u5c31\u8fc7\u4e86\u2026\u2026\n\n\n0904\n\u9776\u5f62\u6570\u72ec\nLink\n\u975e\u5e38\u91cd\u8981\u7684\u4e00\u4e2a\u4f18\u5316\u662f\uff1a\u5148\u586b 0 \u7684\u6570\u91cf\u5c11\u7684\u884c\uff0c\u56e0\u4e3a 0 \u7684\u6570\u91cf\u8d8a\u5c11\uff0c\u6ee1\u8db3\u7684\u5206\u652f\u5c31\u4f1a\u8d8a\u5c11\u3002\u7136\u540e\u76f4\u63a5 DFS \u586b\u6570\u5b57\u5c31\u597d\u5566\u3002\u6211\u4ee5\u4e3a\u8fd8\u8981\u8fdb\u884c\u4e00\u756a\u7cbe\u81f4\u7684\u526a\u679d\uff0c\u6ca1\u60f3\u5230\u76f4\u63a5\u8fd9\u4e48\u5199\u5c31\u8fc7\u4e86\uff0c\u8fd8\u8dd1\u5f97\u5f88\u5feb\u2026\u2026Code\n\n\n1001\n\u673a\u5668\u7ffb\u8bd1\nLink\n\u961f\u5217\u6a21\u62df\u3002\n\n\n1002\n\u4e4c\u9f9f\u68cb\nLink\nDP\uff0cF[i][j][k][t] \u8868\u793a\u4f7f\u7528\u56db\u79cd\u5361\u7247\u6570\u91cf\u7684\u6700\u5927\u5f97\u5206\u3002\n\n\n1003\n\u5f15\u6c34\u5165\u57ce\nLink\n\u5148 DFS \u68c0\u67e5\u662f\u5426\u6ee1\u8db3\uff1b\u5982\u679c\u6ee1\u8db3\uff1a\u9884\u5904\u7406\uff0c\u8bb0 pii F[i][j] \u4e3a (i,j) \u683c\u6709\u6c34\uff0c\u6700\u540e\u4e00\u884c\u4f1a\u6709\u6c34\u7684\u533a\u95f4\uff0c\u7136\u540e\u76f4\u63a5 DP\u3002\n\n\n1004\n\u5173\u62bc\u7f6a\u72af\nLink\n\u4e8c\u5206\u679a\u4e3e\u7b54\u6848\uff0c\u5e76\u67e5\u96c6 check\u3002\n\n\n1111\n\u94fa\u5730\u6bef\nLink\n\u6a21\u62df\/\u66b4\u529b\u3002\n\n\n1112\n\u9009\u62e9\u5ba2\u6808\nLink\n\u76f4\u63a5\u9884\u5904\u7406\u51e0\u4e2a\u6570\u7ec4\uff0c\u66b4\u529b\u679a\u4e3e\u3002\n\n\n1113\n\uff01Mayan \u6e38\u620f\nLink\n\u5927\u641c\u7d22+\u526a\u679d\uff0c\u5341\u5206\u6076\u5fc3\u3002To be continued...\n\n\n1121\n\u8ba1\u7b97\u7cfb\u6570\nLink\n\u76f4\u63a5\u6c42\u6768\u8f89\u4e09\u89d2\u3002\n\n\n1122\n\u806a\u660e\u7684\u8d28\u76d1\u5458\nLink\n\u4e24\u6b21\u4e8c\u5206\uff0c\u4e8c\u5206\u679a\u4e3e\u53c2\u6570 W\uff0c\u7528\u524d\u7f00\u548c check\u3002\n\n\n1123\n\u89c2\u5149\u516c\u4ea4\nLink\n#60\uff1aDP\u3002#100\uff1a$\\Theta(N\\ast K)$ \u7684\u8d2a\u5fc3\uff0c\u6bcf\u6b21\u6c42\u51fa\u6bcf\u6761\u8fb9\u52a0\u901f\u5bf9\u7b54\u6848\u8d21\u732e\uff0c\u53d6\u6700\u5927\uff0c\u505a k \u6b21\uff08\u5982\u679c\u5199\u5f97\u4e0d\u597d\u53ef\u80fd\u88ab\u5361\u5e38\u2026\u2026\uff09\u3002\n\n\n1211\nVigen\u00e8re \u5bc6\u7801\nLink\n\u6a21\u62df\/\u66b4\u529b\u3002\n\n\n1212\n\u56fd\u738b\u6e38\u620f\nLink\n\u63a8\u51fa\u4e00\u4e2a\u5c0f\u7ed3\u8bba\uff1a\u6309 $a_i\\ast b_i$ \u6392\u5e8f\u5904\u7406\u5373\u53ef\u3002\u8981\u5199\u9ad8\u7cbe\u5ea6\u3002\n\n\n1213\n\u5f00\u8f66\u65c5\u884c\nLink\n\u601d\u7ef4\u96be\u5ea6\u7565\u5927\uff0c\u9884\u5904\u7406\u96be\u60f3\u3002\u6392\u5e8f\uff0c\u53cc\u5411\u94fe\u8868\u9884\u5904\u7406\u51fa\u6700\u5c0f\u70b9\u548c\u6b21\u5c0f\u70b9\u3002\u7136\u540e\u500d\u589e\uff1aF[i][j] \u8868\u793a\u4ece i \u57ce\u5e02\u51fa\u53d1\uff0c\u6bcf\u4eba\u9a7e\u9a76 $2^j$ \u6b21\u540e\u5230\u8fbe\u7684\u57ce\u5e02\uff0cA[i][j] \u548c B[i][j] \u5206\u522b\u8868\u793a A\/B \u884c\u9a76\u7684\u8def\u7a0b\u3002Code\n\n\n1221\n\u540c\u4f59\u65b9\u7a0b\nLink\n\u62d3\u5c55\u6b27\u51e0\u91cc\u5f97\u3002\n\n\n1222\n\u501f\u6559\u5ba4\nLink\n\u4e8c\u5206\u679a\u4e3e\u4ece\u5f00\u5934\u5f00\u59cb\u6709\u591a\u5c11\u8ba2\u5355\u53ef\u4ee5\u6ee1\u8db3\u5373\u53ef\u3002\n\n\n1223\n\u75ab\u60c5\u63a7\u5236\nLink\n\u4e8c\u5206\u7b54\u6848\uff0ccheck \u65f6\u53ef\u4ee5\u53d1\u73b0\u5bf9\u4e8e\u6bcf\u4e2a\u519b\u961f\uff0c\u5728\u65f6\u95f4\u5141\u8bb8\u7684\u60c5\u51b5\u4e0b\u5c3d\u91cf\u5f80\u4e0a\u79fb\u53ef\u4ee5\u8986\u76d6\u5230\u66f4\u591a\u7684\u53f6\u7ed3\u70b9\uff0c\u90a3\u4e48\u5982\u679c\u80fd\u79fb\u5230\u6839\u5c31\u300c\u95f2\u7f6e\u300d\u5728\u6839\u8282\u70b9\uff0c\u5426\u5219\u5c31\u505c\u7559\u5728\u80fd\u79fb\u52a8\u5230\u7684\u6df1\u5ea6\u6700\u5c0f\u7684\u70b9\u3002\u5269\u4e0b\u5728\u6839\u8282\u70b9\u5f85\u547d\u7684\u519b\u961f\u5219\u5168\u90e8\u9a7b\u624e\u5728\u6839\u8282\u70b9\u7684\u513f\u5b50\u4e3a\u6700\u4f18\uff0c\u90a3\u4e48\u53ef\u4ee5\u8d2a\u5fc3\u5339\u914d\u9700\u8981\u9a7b\u624e\u7684\u6839\u7684\u513f\u5b50\u3002\u4ee3\u7801\u7565\u590d\u6742\u3002\u63a8\u8350\u9898\u89e3\n\n\n1311\n\u8f6c\u5708\u6e38\u620f\nLink\n\u5feb\u901f\u5e42\u53d6\u6a21\u3002\n\n\n1312\n\u706b\u67f4\u6392\u961f\nLink\n\u4e0d\u96be\u53d1\u73b0\u4e0a\u4e0b\u6392\u5e8f\u540e\u5bf9\u5e94\u706b\u67f4\u5c31\u662f\u6700\u4f18\u7b54\u6848\uff08\u8bc1\u660e\uff1a$(x+y)^2>x^2+y^2$\uff09\uff0c\u5047\u8bbe\u53ea\u5b89\u6392\u7b2c\u4e8c\u4e2a\u5e8f\u5217\uff0c\u5219\u6784\u9020\u51fa\u7b2c i \u4e2a\u5143\u7d20\u5b89\u6392\u540e\u7684\u4f4d\u7f6e\u5e8f\u5217\uff0c\u6c42\u9006\u5e8f\u5bf9\u5373\u53ef\u3002\n\n\n1313\n\u8d27\u8f66\u8fd0\u8f93\nLink\nLCA \u6c42\u8def\u5f84\u4e0a\u6700\u77ed\u8fb9\u3002\n\n\n1321\n\u79ef\u6728\u5927\u8d5b\nLink\n\u6c42\u9012\u51cf\u90e8\u5206\u7d2f\u79ef\u9ad8\u5ea6\u5c31\u662f\uff08\u6700\u5c11\uff09\u533a\u95f4\u53f3\u7aef\u70b9\u4e2a\u6570\u3002\n\n\n1322\n\u82b1\u5320\nLink\n\u6700\u957f\u6ce2\u52a8\u5e8f\u5217\uff0c\u9012\u63a8\u6c42\u89e3\u3002\n\n\n1323\n\u534e\u5bb9\u9053\nLink\n#60\uff1a\u8bb0\u7a7a\u767d\u683c\u5b50\u548c\u6307\u5b9a\u683c\u5b50\u7684\u4f4d\u7f6e\u4e3a\u4e00\u4e2a\u72b6\u6001\uff0c\u8bb0\u4e3a\u56db\u5143\u7ec4 (x1,y1,x2,y2)\uff0c\u66b4\u529b\u4e71\u79fb\u767d\u683c\u5b50\uff0c\u8bb0\u641c\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $\\Theta((n\\ast m)^2\\ast q)$\uff08\u5f3a\u884c\u4f18\u5316\u662f\u4e0d\u53ef\u4ee5\u7684\uff09\u3002#100\uff1a\u53ef\u4ee5\u53d1\u73b0\u6709\u7528\u7684\u72b6\u6001\u53ea\u6709\u7a7a\u767d\u683c\u5b50\u5728\u6307\u5b9a\u683c\u5b50\u5468\u56f4\u7684\u72b6\u6001\uff0c\u5373\u6bcf\u4e2a\u6307\u5b9a\u683c\u5b50\u7684\u5750\u6807\u6709 4 \u79cd\u6709\u7528\u72b6\u6001\uff0c\u5219\u4e00\u4e2a\u72b6\u6001\u8868\u793a\u4e3a (x,y,0\/1\/2\/3)\uff0c\u53ef\u4ee5\u5c06\u72b6\u6001\u62bd\u79bb\u3001\u8fde\u8fb9\uff0c\u8f6c\u5316\u4e3a\u56fe\u8bba\u95ee\u9898\uff0c\u8dd1 SPFA \u5c31\u884c\u5566\u3002\u4ee3\u7801\u5f88\u9ebb\u70e6\u3002Code\n\n\n1411\n\u751f\u6d3b\u5927\u7206\u70b8\u7248\u77f3\u5934\u526a\u5200\u5e03\nLink\n\u76f4\u63a5\u6a21\u62df\u3002\n\n\n1412\n\u8054\u5408\u6743\u503c\nLink\n\u5728\u7ed9\u51fa\u7684\u6811\u4e0a\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u5206\u522b\u8003\u8651\u5176\u513f\u5b50\u548c\u7236\u4eb2\u3001\u513f\u5b50\u548c\u513f\u5b50\u7684\u8054\u5408\u6743\u503c\u3002\n\n\n1413\n\u98de\u626c\u7684\u5c0f\u9e1f\nLink\nDP\uff0cF[i][j] \u8868\u793a\u6a2a\u5750\u6807\u4e3a i\uff0c\u9ad8\u5ea6\u4e3a j \u7684\u6700\u5c0f\u70b9\u51fb\u6b21\u6570\u3002\u5411\u4e0a\u8df3\u5c31\u5b8c\u5168\u80cc\u5305\uff0c\u5411\u4e0b\u964d\u5c31\u76f4\u63a5\u8f6c\u79fb\u3002\n\n\n1421\n\u65e0\u7ebf\u7f51\u7edc\u53d1\u5c04\u5668\u9009\u5740\nLink\n\u66b4\u529b\u679a\u4e3e\u3002\n\n\n1422\n\u5bfb\u627e\u9053\u8def\nLink\n\u53cd\u5efa\u8fb9 BFS \u627e\u53ef\u7528\u70b9\uff0c\u7136\u540e\u5c06\u53ef\u7528\u7684\u70b9\u91cd\u65b0\u6784\u56fe\u8dd1\u6700\u77ed\u8def\u3002\n\n\n1423\n\u89e3\u65b9\u7a0b\nLink\n#50\uff1a\u679a\u4e3e $x$\uff0c\u6bcf\u6b21\u9ad8\u7cbe\u5ea6 $\\Theta(N\\ast len^2)$ \u5730\u68c0\u67e5\u3002#70+\uff1a\u79e6\u4e5d\u97f6\u7b97\u6cd5\uff1a$a_0+a_1x+a_2x^2+\\dots+a_nx^n=(\\dots((a_nx+a_{n-1})x+a_{n-2})x\\dots+a_1)x+a_0$\u3002\u4e0d\u7528\u5199\u9ad8\u7cbe\u5ea6\uff0c\u76f4\u63a5\u591a\u53d6\u51e0\u4e2a\u8d28\u6570\uff082\uff5e4 \u4e2a\uff09\u53d6\u6a21\u9a8c\u8bc1\u3002\uff08\u6d1b\u8c37\u4e0a\u6b64\u505a\u6cd5\u53ef AC\u2026\u2026\uff09#100\uff1a\u5f53\u6a21\u6570\u4e3a $tt$ \u65f6\uff0c$f(x)=f(x+k\\ast tt)$\u3002\u6839\u636e\u6b64\u6027\u8d28\u4f18\u5316 #70 \u7b97\u6cd5\u53ef\u8fbe\u6ee1\u5206\u3002\n\n\n1511\n\u795e\u5947\u7684\u5e7b\u65b9\nLink\n\u9898\u76ee\u592a\u76f4\u767d\u4e86\uff0c\u76f4\u63a5\u6309\u7167\u9898\u76ee\u63cf\u8ff0\u505a\u2026\u2026\n\n\n1512\n\u4fe1\u606f\u4f20\u9012\nLink\n\u627e\u56fe\u4e2d\u6700\u5c0f\u73af\uff0c\u62d3\u6251\u6392\u5e8f\u540e\u76f4\u63a5\u5e76\u67e5\u96c6\u627e\u6700\u5927\u8054\u901a\u5757\u3002\n\n\n1513\n\uff01\u6597\u5730\u4e3b\nLink\n\u53c8\u4e00\u9053\u53d8\u6001\u7684\u5927\u6a21\u62df\/\u5927\u641c\u7d22\u9898\u3002To be continued...\n\n\n1521\n\u8df3\u77f3\u5934\nLink\n\u4e8c\u5206\u3002\n\n\n1522\n\u5b50\u4e32\nLink\n#70\uff1aF[i][j][k] \u8868\u793a A \u4e32\u8d70\u5230 i \u4f4d\uff0cB \u4e32\u5339\u914d\u5230 j \u4f4d\uff0c\u5df2\u7ecf\u9009\u62e9 k \u4e2a\u5b50\u4e32\u7684\u65b9\u6848\u6570\uff0c\u5219\u72b6\u6001\u8f6c\u79fb\u4e3a\uff1aF[i][j][k] &lt;- F[i-len][j-len][k-1], F[i-t][j][k]\uff0c\u6761\u4ef6 A[i-len][i] = B[j-len][j]\u3002\u53ef\u4ee5\u7528\u5b57\u7b26\u4e32\u54c8\u5e0c\u5224\u65ad\u6761\u4ef6\uff0c\u6eda\u52a8\u6570\u7ec4\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $\\Theta(N\\ast M\\ast K)$\u3002#100\uff1a\u6539\u53d8\u4e00\u4e0b DP \u7684\u5b9a\u4e49\uff0cF[i][j][k][0\/1]\uff0c\u589e\u52a0\u4e00\u7ef4\u8868\u793a A[i] \u662f\u5426\u53c2\u4e0e\u5339\u914d\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u679a\u4e3e\u540e\u7f00\u53bb\u5b57\u7b26\u4e32\u54c8\u5e0c\u6bd4\u8f83\u4e86\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e0a\u4e00\u72b6\u6001\u4f20\u9012\uff0c\u7701\u53bb\u4e00\u4e2a $\\Theta(M)$ \u7684\u679a\u4e3e\u3002\u8f6c\u79fb\u65b9\u7a0b\uff1a1\uff09A[i]=B[j] \u65f6\uff1aF[i][j][k][1] &lt;- F[i-1][j-1][k-1][0\/1] + F[i-1][j-1][k][1]\uff0cF[i][j][k][0] &lt;- F[i-1][j][k][0\/1]\uff1b2\uff09A[i]!=B[j] \u65f6\uff1aF[i][j][k][1]=0\uff0cF[i][j][k][0] \u540c\u4e0a\u3002\n\n\n1523\n\u8fd0\u8f93\u8ba1\u5212\nLink\n#50\uff5e60\uff1a\u66b4\u529b\u679a\u4e3e\u8fb9\u6e05\u96f6\uff0c$\\Theta(m^2\\log n)$\u3002#100\uff1a\u9996\u5148\u5728\u6811\u5256\u4e2d\u53ef\u4ee5\u628a\u8fb9\u6743\u5316\u4e3a\u70b9\u6743\uff1b\u53e6\u5916\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a\u6027\u8d28\uff1a\u7531\u4e8e\u7b54\u6848\u7531\u6700\u957f\u8def\u5f84\u51b3\u5b9a\uff0c\u8981\u6e05\u96f6\u7684\u8fb9\u5fc5\u7136\u5728\u6700\u957f\u8def\u5f84\u4e0a\u3002\u8fdb\u4e00\u6b65\u53ef\u4ee5\u53d1\u73b0\uff0c\u6e05\u9664\u4e00\u6761\u8fb9 $e$ \u540e\u53ef\u80fd\u7684\u6700\u5927\u8def\u5f84\u53ea\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\uff081\uff09\u4e4b\u524d\u7684\u6700\u957f\u8def\u5f84\u51cf\u53bb $w_e$\uff1b\uff082\uff09\u4e0d\u5305\u542b $e$ \u7684\u6700\u957f\u8def\u5f84\u3002\u5bf9\u4e8e\u540e\u8005\u53ef\u4ee5\u8fdb\u884c\u9884\u5904\u7406\uff1a\u8bbe $mx(e)$ \u4e3a\u4e0d\u7ecf\u8fc7 $e$ \u8fd9\u6761\u8fb9\u7684\u6700\u957f\u8def\u5f84\u957f\u5ea6\u3002\u5bf9\u4e8e\u4e00\u6761\u8def\u5f84\u8003\u8651\uff0c\u8bbe\u5176\u5305\u542b\u8fb9\u96c6 $E$\uff0c\u90a3\u4e48 $E$ \u4e2d\u7684\u8fb9\u66f4\u65b0\u540e\u8fd9\u6761\u8def\u5f84\u4e5f\u4f1a\u66f4\u65b0\uff0c\u4e5f\u5c31\u662f\u8bf4\u5e94\u8be5\u7528\u8fd9\u6761\u8def\u5f84\u957f\u5ea6\u53bb\u4fee\u6b63 $E$ \u7684\u8865\u96c6\u7684 $mx$\u3002\u5bf9\u4e8e\u8fd9\u6761\u8def\u5f84\uff08\u6811\u5256\u540e\u67e5\u627e\uff09\u5bf9\u5e94\u7ebf\u6bb5\u6811\u4e0a\u7684\u82e5\u5e72\u533a\u95f4\uff08\u5373\u4ee3\u8868\u4e86\u96c6\u5408 $E$\uff09\uff0c\u5b58\u50a8\u3001\u6392\u5e8f\uff0c\u53d6\u8865\u96c6\u4fee\u6b63\u5373\u53ef\u3002\u6700\u540e\uff0c\u679a\u4e3e\u6e05\u96f6\u7684\u8fb9\uff0c\u5728\u4e24\u79cd\u60c5\u51b5\u4e2d\u53d6\u6700\u5927\u503c\u4fee\u6b63\u7b54\u6848\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $\\Theta(n+m\\log n)$\u3002Code \u4e5f\u5c31 200+ \u884c\uff0c\u4e0d\u591a\u4e0d\u591a\u2026\u2026 \u4f3c\u4e4e\u4f1a\u88ab\u6781\u9650\u5361\u5e38\uff0c\u5f00 O2 \u624d\u8fc7\u2026\u2026\uff08\u7136\u800c UOJ \u4e0a\u5c31\u662f\u600e\u4e48\u7f16\u8bd1\u4f18\u5316\u90fd\u8fc7\u4e0d\u53bb\u7684 QwQ\uff09\u5e94\u8be5\u8fd8\u6709\u66f4\u4f18\u505a\u6cd5\u3002\n\n\n1611\n\u73a9\u5177\u8c1c\u9898\nLink\n\u6a21\u62df\u3002\n\n\n1612\n\uff01\u5929\u5929\u7231\u8dd1\u6b65\nLink\n#40\uff1a$\\Theta(n^2)$ \u66b4\u529b\uff0c\u6811\u9000\u5316\u6210\u94fe\u7684\u60c5\u51b5\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\uff0c\u7528\u4e00\u79cd\u7c7b\u4f3c\u5dee\u5206\u7684\u5199\u6cd5\u3002#100\uff1aTo be continued...\n\n\n1613\n\u6362\u6559\u5ba4\nLink\nDP\uff0cF[i][j][0\/1] \u8868\u793a\u4e0a\u5b8c\u4e86\u524d i \u8282\u8bfe\uff0c\u5df2\u7ecf\u7533\u8bf7 j \u6b21\uff0c\u6700\u540e\u4e00\u6b21\u6709\/\u6ca1\u6709\u63d0\u4ea4\u7533\u8bf7\uff0c\u8017\u8d39\u7684\u4f53\u529b\u503c\u671f\u671b\u6700\u5c0f\u503c\u3002\u72b6\u6001\u8f6c\u79fb\u9700\u8981\u8003\u8651\u4e0a\u4e00\u72b6\u6001\u7533\u8bf7\u901a\u8fc7\u7684\u6982\u7387\u3002Code\n\n\n1621\n\u7ec4\u5408\u6570\u95ee\u9898\nLink\n\u5148\u9884\u5904\u7406\u51fa\u7ec4\u5408\u6570\u548c\u524d\u7f00\u548c\uff0c\u7136\u540e\u66b4\u529b\u7d2f\u8ba1\u3002\n\n\n1622\n\u86af\u8693\nLink\n#85\uff1astd::priority_queue\uff0c$\\Theta(m\\log(n+m))$\uff0c\u4f1a T \u98de\u3002#100\uff1a\u6bcf\u6b21\u9009\u51fa\u4e00\u4e2a\u6700\u5927\u7684\uff0c\u53ef\u4ee5\u770b\u6210\u5c06\u5176\u957f\u5ea6\u51cf\u53bb q \u518d\u5206\u6210\u4e24\u534a\uff08\u8fd9\u6837\u7b2c i \u6b21\u8fc7\u540e\u5c31\u53ef\u4ee5\u957f\u5ea6\u7edf\u4e00\u589e\u52a0 i*q\uff0c\u5373\u5ffd\u7565\u957f\u5ea6\u968f\u65f6\u95f4\u7684\u589e\u957f\uff09\uff0c\u53ef\u4ee5\u53d1\u73b0\u6bcf\u6b21\u9009\u51fa\u8981\u5207\u5272\u7684\u6700\u957f\u7684\u86af\u8693\u957f\u5ea6\u9012\u51cf\uff0c\u5219\u7ef4\u62a4\u4e09\u4e2a\u961f\u5217\uff0c\u5206\u522b\u8868\u793a\u521d\u59cb\u86af\u8693\u3001\u5207\u51fa\u7684\u7b2c\u4e00\u6bb5\u3001\u5207\u51fa\u7684\u7b2c\u4e8c\u6bb5\uff0c\u6bcf\u6b21\u53d6\u4e09\u4e2a\u961f\u5217\u9996\u6700\u957f\u7684\u5207\u5272\u5373\u53ef\u3002\n\n\n1623\n\u6124\u6012\u7684\u5c0f\u9e1f\nLink\n\u72b6\u538b DP\uff0cF[mask] \u8868\u793a\u6d88\u706d\u7684\u732a\u96c6\u5408\u662f mask\uff0c\u8003\u8651\u5230\u629b\u7269\u7ebf\u4e00\u5b9a\u7ecf\u8fc7\u539f\u70b9\uff0c\u5219\u4e24\u4e2a\u70b9\u53ef\u4ee5\u786e\u5b9a\u4e00\u6761\u629b\u7269\u7ebf\uff0c\u679a\u4e3e mask \u548c i,j\uff0c\u9884\u5904\u7406\u8fd9\u6761\u629b\u7269\u7ebf\u80fd\u300c\u987a\u4fbf\u300d\u6d88\u706d\u591a\u5c11\u732a\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $\\Theta(2^nn^2)$\u3002\n\n\n1711\n\u5c0f\u51ef\u7684\u7591\u60d1\nLink\n#60\uff1a\u5b8c\u5168\u80cc\u5305\u3002#100\uff1a\u627e\u89c4\u5f8b\u53d1\u73b0\u7b54\u6848\u5c31\u662f $a\\ast b-a-b$\u3002\u63a8\u8350\u8bc1\u660e\u3002\n\n\n1712\n\u65f6\u95f4\u590d\u6742\u5ea6\nLink\n\u5c0f\u6a21\u62df\uff0c\u53ea\u8981\u7ec6\u5fc3\u4e00\u70b9\u5c31\u597d\u4e86\u3002\n\n\n1713\n\u901b\u516c\u56ed\nLink\n#30\uff1a$K=0$ \u7684\u6570\u636e\uff0c\u5c31\u662f\u6700\u77ed\u8def\u8ba1\u6570\uff0c\u8fd8\u4fdd\u8bc1\u6ca1\u6709 0 \u8fb9\u3002DP \u5373\u53ef\u3002#70\uff1a\u8003\u8651\u5230 $K$ \u53ea\u6709 50\uff0c\u53ef\u4ee5\u5b9a\u4e49 F[i][j] \u8868\u793a\u8d70\u5230\u7b2c i \u4e2a\u70b9\uff0c\u8def\u5f84\u957f\u5ea6\u6bd4\u6700\u77ed\u8def\u591a\u4e86 j \u7684\u65b9\u6848\u6570\u3002\u5148\u9884\u5904\u7406\u4e00\u904d\u6700\u77ed\u8def\uff0c\u7136\u540e\u8dd1\u8fd9\u4e2a DP \u5373\u53ef\uff0cF[u][j] &lt;- F[v][j+(dist[u]+w(u,v)-dist[v])]\uff0c\u8981\u5148\u6309 dist \u6392\u4e2a\u5e8f\uff08\u6240\u4ee5\u6709 0 \u73af\u7684\u5c31\u505a\u4e0d\u4e86\uff09\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $\\Theta(k\\ast m)$\u3002#100\uff1a\u5148\u53cd\u5efa\u8fb9\u8dd1\u6700\u77ed\u8def\uff0c\u7136\u540e\u5728 #70 \u7684\u57fa\u7840\u4e0a\u8bb0\u5fc6\u5316\u641c\u7d22\uff0c\u641c\u7d22\u7684\u65f6\u5019\u8bb0\u5f55\u54ea\u4e9b\u70b9\u5728\u9012\u5f52\u6808\u91cc\uff0c\u53ef\u4ee5\u5b9e\u73b0\u5bf9 0 \u73af\u7684\u5224\u65ad\u3002\n\n\n1721\n\u5976\u916a\nLink\n$\\Theta(n^2)$ \u679a\u4e3e+\u5e76\u67e5\u96c6\u3002\n\n\n1722\n\u5b9d\u85cf\nLink\n$n\\le 12$\uff0c\u663e\u7136\u53ef\u4ee5\u7528\u72b6\u538b\uff0c\u679a\u4e3e\u8d77\u70b9\uff0c$F(mask)$ \u8868\u793a\u6253\u901a\u72b6\u6001\u4e3a $mask$ \u7684\u6700\u5c0f\u4ee3\u4ef7\u3002$n$ \u592a\u5c0f\u4e86\uff0c\u597d\u50cf\u600e\u4e48\u641e\u90fd\u53ef\u4ee5\u2026\u2026\uff08\u8fd9\u9898\u597d\u50cf\u5728 ZS \u90a3\u91cc\u5c31\u505a\u8fc7\u4e86 =_=\uff09\n\n\n1723\n\uff01\u5217\u961f\nLink\nTo be continued...\n\n\n1811\n\u94fa\u8bbe\u9053\u8def\nLink\n\u540c 1321 \u79ef\u6728\u5927\u8d5b\u2026\u2026\n\n\n1812\n\u8d27\u5e01\u7cfb\u7edf\nLink\n\u6392\u5e8f+\u5b8c\u5168\u80cc\u5305\u3002\n\n\n1813\n\u8d5b\u9053\u4fee\u5efa\nLink\n\u5148\u4e8c\u5206\u8d5b\u9053\u6700\u5c0f\u957f\u5ea6\uff0c\u7136\u540e DFS\uff0c\u6bcf\u4e2a\u70b9\u641e\u4e2a std::set \u4e0a\u4f20\u5373\u53ef\u3002\n\n\n1821\n\u65c5\u884c\nLink\n#60\uff1a\u4ece 1 \u5f00\u59cb\u6bcf\u6b21\u8d70\u5e8f\u53f7\u6700\u5c0f\u70b9\u3002#100\uff1a\u5bf9\u4e8e\u57fa\u73af\u6811\uff0c\u76f4\u63a5\u679a\u4e3e\u4e00\u6761\u8fb9\u5220\u9664\u518d\u91cd\u65b0\u6c42\u7b54\u6848\uff0c\u53d6\u6700\u7ec8\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u7b54\u6848\u3002\u975e\u5e38\u53d8\u6001\u7684\u4e00\u70b9\uff0c\u8fd9\u9898\u6570\u636e\u6781\u9650\u5361\u5e38\uff0c\u6d1b\u8c37\u8bc4\u6d4b\u673a\u53c8\u5f88\u7384\u5b66\uff0c\u4ea4\u4e86\u5341\u51e0\u53d1\uff0c\u6bcf\u6b21\u8bc4\u51fa\u6765\u7ed3\u679c\u90fd\u4e0d\u4e00\u6837\uff0cTLE \u7684\u70b9\u8fd8\u5404\u4e0d\u4e00\u6837\u2026\u2026\u8fd8\u597d\u6709\u4e2a\u4e1c\u897f\u53eb\u505a\u8bc4\u6d4b\u9e2d\uff0c\u8fd8\u6211\u516c\u9053 :new_moon_with_face:\n\n\n1822\n\u586b\u6570\u6e38\u620f\nLink\n#65\uff1a\u5bf9\u4e8e $n\\le 3$ \u7684\u60c5\u51b5\uff0c\u6bcf\u79cd $n$ \u90fd\u53ef\u4ee5\u5355\u72ec\u5199\u4e2a DP \u89e3\u51b3\u3002\uff08\u5176\u5b9e $n=2$ \u7684\u60c5\u51b5\u7b54\u6848\u5c31\u662f $4\\ast 3^{n-1}$\u2026\u2026\uff09#100\uff1a\u5176\u5b9e\u662f\u4e2a\u627e\u89c4\u5f8b\u9898\u2026\u2026\u6709\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u6027\u8d28\uff1a\u5982\u679c $(x-1,y)$ \u548c $(x,y-1)$ \u683c\u5b50\u586b\u7684\u6570\u5b57\u4e00\u6837\uff0c\u90a3\u4e48\u4ee5 $x,y$ \u4e3a\u5de6\u4e0a\u89d2\u7684\u53f3\u4e0b\u89d2\u5b50\u77e9\u9635\u5bf9\u89d2\u7ebf\u4e0a\u586b\u7684\u6570\u5b57\u90fd\u8981\u76f8\u540c\u3002\u6839\u636e\u8fd9\u4e2a\u6027\u8d28\u53ef\u4ee5\u8f83\u4e3a\u8f7b\u677e\u5730\u75af\u72c2\u624b\u6a21\u627e\u89c4\u5f8b\u5566 $Ans(n,n)=\\frac{83\\ast 8^n+5\\ast2^{n+7}}{384},Ans(n,m+1)=3\\ast Ans(n,m)$\u3002\u8bc1\u660e\u5f88\u9ebb\u70e6\u3002\u63a8\u8350\u8fd9\u7bc7\u9898\u89e3\n\n\n1823\n\uff01\u4fdd\u536b\u738b\u56fd\nLink\nTo be continued...\n\n\n","tags":[{"name":"OI\u5b66\u4e60","slug":"OI\u5b66\u4e60","permalink":"https:\/\/skywt.cn\/tag\/OI%E5%AD%A6%E4%B9%A0\/"},{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"NOIP","slug":"NOIP","permalink":"https:\/\/skywt.cn\/tag\/NOIP\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":null,"date":"2019-10-12T16:44:05+08:00","path":"https:\/\/skywt.cn\/posts\/2424","text":"\u5410\u69fd\uff1a\u90fd 9102 \u5e74\u4e86\uff0c \u8fd8\u6ca1\u6709 https \u7684\u7f51\u7ad9\u90fd\u5e94\u8be5\u7981\u6b62\u8bbf\u95ee\u3002\u5bf9\u7528\u6237\u9690\u79c1\u6ca1\u6709\u8d77\u7801\u7684\u5c0a\u91cd :new_moon_with_face:\n\uff08\u70b9\u540d\u67d0\u90e8\u95e8\u5b98\u7f51\u548c\u67d0\u7ade\u8d5b\u5b98\u7f51\uff01\uff09","tags":[],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"Codeforces Round #596 Div2 \u9898\u89e3","date":"2019-10-28T15:12:00+08:00","path":"https:\/\/skywt.cn\/posts\/cf1247","text":"Link: Codeforces Round #596 (Div. 2, based on Technocup 2020 Elimination Round 2)\nD - Power Products\nDescription\n\u7ed9\u51fa\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u5e8f\u5217\u548c\u4e00\u4e0d\u5c0f\u4e8e 2 \u7684\u6574\u6570 $k$\uff0c\u8981\u6c42\u627e\u51fa\u6570\u5b57\u5bf9 $(i,j)$ \u7684\u6570\u91cf\uff0c\u6ee1\u8db3 $i\\lt j$ \u5e76\u4e14\u5b58\u5728\u4e00\u4e2a\u6574\u6570 $x$ \u4f7f\u5f97 $a_i\\ast a_j = x^k$\u3002\n\nSolution\n\u5bf9\u4e8e\u6bcf\u4e2a\u6570\u5b57\u8fdb\u884c\u8d28\u56e0\u6570\u5206\u89e3\uff0c\u5206\u89e3\u6210 $x=p_1^{k_1}+p_2^{k_2}+\\dots+p_m^{k_m}$\uff0c\u6211\u4eec\u7528\u4e00\u4e2a std::vector \u5b58\u50a8\u82e5\u5e72\u4e2a\u4e8c\u5143\u7ec4 $(p_i,k_i)$\uff0c\u8868\u793a\u8fd9\u4e2a\u6570\u5b57\u6709 $k_i$ \u4e2a $p_i$ \u8fd9\u4e2a\u8d28\u56e0\u5b50\uff0c\u663e\u7136\u5b58\u50a8\u7684\u65f6\u5019\u8fd9\u4e2a $k_i$ \u6b21\u6570\u53ef\u4ee5\u5bf9\u9898\u4e2d\u6240\u7ed9\u7684 $K$ \u53d6\u6a21\u3002\u5982\u679c\u5b58\u5728\u4e24\u4e2a\u6570\u5b57\u6ee1\u8db3 $p_i$ \u96c6\u5408\u76f8\u540c\uff0c\u5e76\u4e14\u5bf9\u4e8e\u6240\u6709 $p_i$\uff0c$k_1i + k_2i = K$\uff0c\u5219\u8bf4\u660e\u8fd9\u4e24\u4e2a\u6570\u5b57\u76f8\u4e58\u80fd\u5f97\u5230 $x^K$\u3002\n\u7528 std::map \u7ef4\u62a4\u5373\u53ef\u3002\nCode\n#include&lt;bits\/stdc++.h&gt;\n\n#define int long long\n\n#define pii pair&lt;int,int&gt;\n\nusing namespace std;\n\nconst int maxn=1e5+5;\n\ninline int read(){\n    int ret=0,f=1;char ch=getchar();\n    while (ch&lt;'0'||ch&gt;'9') {if (ch=='-') f=-1;ch=getchar();}\n    while (ch&gt;='0'&amp;&amp;ch&lt;='9') ret=ret*10+ch-'0',ch=getchar();\n    return ret*f;\n}\n\nconst int N=1e5;\n\nint n,k;\nint a[maxn];\n\nint prime[maxn];\nbool flag[maxn];\n\nmap&lt;vector&lt;pii&gt;,int&gt; hsh;\n\nvoid build_prime(){\n    memset(flag,true,sizeof(flag));\n    flag[1]=false;\n    for (int i=2;i&lt;=N;i++){\n        if (flag[i]) prime[++prime[0]]=i;\n        for (int j=1;j&lt;=prime[0];j++){\n            if (i*prime[j] &gt; N) break;\n            flag[i*prime[j]]=false;\n            if (i%prime[j]==0) break;\n        }\n    }\n}\n\nvector&lt;pii&gt; break_down(int x){\n    vector&lt;pii&gt; ret; ret.clear();\n    for (int i=1;i&lt;=prime[0];i++) if (x%prime[i]==0){\n        int cnt=0;\n        while (x%prime[i]==0) cnt++,x\/=prime[i];\n        if (cnt%k) ret.push_back(make_pair(prime[i],cnt%k));\n    } else if (x==1) break;\n    return ret;\n}\n\nvector&lt;pii&gt; get_comp(vector&lt;pii&gt; &amp;vec){\n    vector&lt;pii&gt; ret=vec;\n    for (int i=0;i&lt;ret.size();i++) ret[i].second=k-ret[i].second;\n    return ret;\n}\n\nint ans=0;\n\nsigned main(){\n    n=read(); k=read();\n    for (int i=1;i&lt;=n;i++) a[i]=read();\n\n    build_prime();\n\n    for (int i=1;i&lt;=n;i++){\n        vector&lt;pii&gt; now=break_down(a[i]);\n        vector&lt;pii&gt; com=get_comp(now);\n        ans+=hsh[com]; hsh[now]++;\n    }\n\n    printf(\"%lld\\n\",ans);\n    return 0;\n}\nE - Rock Is Push\nDescription\n\u4f60\u5728\u4e00\u4e2a $n\\ast m$ \u7684\u8ff7\u5bab\u5de6\u4e0a\u89d2 $1,1$ \u4f4d\u7f6e\uff0c\u4f60\u8981\u5230\u8fbe\u53f3\u4e0b\u89d2 $n,m$ \u7684\u4f4d\u7f6e\u3002\u6bcf\u6b21\u4f60\u53ea\u80fd\u5411\u53f3\u6216\u8005\u5411\u4e0b\u79fb\u52a8\u3002\n\u8ff7\u5bab\u7684\u4e00\u4e9b\u683c\u5b50\u91cc\u6709\u77f3\u5934\u3002\u5f53\u4f60\u79fb\u52a8\u5230\u6709\u77f3\u5934\u7684\u683c\u5b50\u65f6\uff0c\u77f3\u5934\u5c31\u4f1a\u6309\u4f60\u79fb\u52a8\u7684\u65b9\u5411\u88ab\u63a8\u5230\u4e0b\u4e00\u4e2a\u683c\u5b50\u3002\u5982\u679c\u4e0b\u4e00\u4e2a\u683c\u5b50\u91cc\u6709\u77f3\u5934\uff0c\u5b83\u5c31\u4f1a\u88ab\u63a8\u5f97\u66f4\u8fdc\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u8ff7\u5bab\u88ab\u4e0d\u53ef\u7a7f\u900f\u7684\u5899\u58c1\u6240\u5305\u56f4\uff0c\u56e0\u6b64\u4efb\u4f55\u5c06\u4f60\u6216\u4efb\u4f55\u77f3\u5934\u79fb\u51fa\u8ff7\u5bab\u7684\u884c\u4e3a\u90fd\u662f\u975e\u6cd5\u7684\u3002\n\u6c42\u51fa\u8d77\u70b9\u5230\u7ec8\u70b9\u8def\u5f84\u6570\u91cf\uff0c\u5bf9 $10^9+7$ \u53d6\u6a21\u3002\n$n\\le 2000$\u3002\n\u4e00\u4e9b\u5f88\u6709\u8da3\u7684\u52a8\u56fe\uff08\u6837\u4f8b\u89e3\u91ca\uff09\uff1a\n\n\n\n\nSolution\n\u5b9a\u4e49 $R(i,j)$ \u548c $D(i,j)$\uff0c\u8868\u793a\u8d70\u5230 $i,j$ \uff0c\u4e0b\u4e00\u6b21\u5206\u522b\u8981\u5411\u53f3\/\u5411\u4e0b\u8d70\uff0c\u4e0a\u4e00\u6b21\u548c\u4e0b\u4e00\u6b21\u8d70\u7684\u65b9\u5411\u4e0d\u4e00\u6837\uff0c\u8d70\u5230\u7ec8\u70b9\u7684\u65b9\u6848\u6570\u3002\n\u5219 $R(n,m)=D(n,m)=1$\u3002\n\u8003\u8651\u5230\u4ee5\u8fd9\u79cd\u5b9a\u4e49\u8d70\u5230 $i,j$ \u7684\u65f6\u5019\uff0c\u53f3\u4e0b\u89d2\u80fd\u5230\u8fbe\u7684\u77f3\u5934\u4f4d\u7f6e\u90fd\u6ca1\u6709\u6539\u53d8\u8fc7\uff1b\u6240\u4ee5 $i,j$ \u7684\u72b6\u6001\u53ef\u4ee5\u72ec\u7acb\u8003\u8651\uff0c\u548c\u7ecf\u8fc7\u7684\u8def\u5f84\u65e0\u5173\u3002\n\u5047\u8bbe $i,j$ \u53f3\u8fb9\u6216\u8005\u4e0b\u9762\u6709 $k$ \u4e2a\u77f3\u5934\uff0c\u5219\n$$R(i,j)=\\sum_{t=1}^{m-k-j} D(i,j+t)\\\\ D(i,j)=\\sum_{t=1}^{n-k-i} R(i+t,j)$$\n\u7136\u540e\u524d\u7f00\u548c\u4f18\u5316\u5373\u53ef\u3002\nCode\n#include&lt;bits\/stdc++.h&gt;\n\n#define int long long\n\nusing namespace std;\n\nconst int maxn=2005;\nconst int tt=1e9+7;\n\ninline int read(){\n    int ret=0,f=1;char ch=getchar();\n    while (ch&lt;'0'||ch&gt;'9') {if (ch=='-') f=-1;ch=getchar();}\n    while (ch&gt;='0'&amp;&amp;ch&lt;='9') ret=ret*10+ch-'0',ch=getchar();\n    return ret*f;\n}\n\nint n,m;\nchar a[maxn][maxn];\nint rock[maxn][maxn];\nint sum_r[maxn][maxn],sum_d[maxn][maxn];\nint d[maxn][maxn],r[maxn][maxn];\n\nint sd[maxn][maxn],sr[maxn][maxn]; \/\/ DP prefix sum\n\nsigned main(){\n    n=read(); m=read();\n    for (int i=1;i&lt;=n;i++) scanf(\"%s\",a[i]+1);\n\n    for (int i=1;i&lt;=n;i++)\n        for (int j=1;j&lt;=m;j++)\n            rock[i][j]=a[i][j]=='R';\n\n    if (n==1 &amp;&amp; m==1){printf(\"%lld\\n\",1-rock[1][1]);return 0;}\n\n    for (int i=1;i&lt;=n;i++)\n        for (int j=m;j&gt;=1;j--)\n            sum_r[i][j]=sum_r[i][j+1]+rock[i][j];\n    for (int j=1;j&lt;=m;j++)\n        for (int i=n;i&gt;=1;i--)\n            sum_d[i][j]=sum_d[i+1][j]+rock[i][j];\n\n    for (int i=n;i&gt;=1;i--){\n        for (int j=m;j&gt;=1;j--){\n            \/\/ for (int t=1;t&lt;=n-sum_d[i+1][j]-i;t++) d[i][j]=(d[i][j]+r[i+t][j])%tt;\n            \/\/ for (int t=1;t&lt;=m-sum_r[i][j+1]-j;t++) r[i][j]=(r[i][j]+d[i][j+t])%tt;\n            d[i][j] = (sr[i+1][j] - sr[i+ (n-sum_d[i+1][j]-i) +1][j] + tt)%tt;\n            r[i][j] = (sd[i][j+1] - sd[i][j+ (m-sum_r[i][j+1]-j) +1] + tt)%tt;\n            if (i==n &amp;&amp; j==m) d[i][j]=r[i][j]=1-rock[i][j]; else\n            if (i==n){d[i][j]=0; if (sum_r[i][j+1]) r[i][j]=0;} else \n            if (j==m){r[i][j]=0; if (sum_d[i+1][j]) d[i][j]=0;}\n\n            sr[i][j]=(sr[i+1][j]+r[i][j])%tt;\n            sd[i][j]=(sd[i][j+1]+d[i][j])%tt;\n        }\n    }\n\n    printf(\"%lld\\n\",(d[1][1]+r[1][1])%tt);\n    return 0;\n}\nF - Tree Factory\nDescription\n\u7ed9\u51fa\u4e00\u68f5\u6811\uff0c\u8282\u70b9\u7f16\u53f7\u4e3a $[0,n-1]$\uff0c0 \u4e3a\u6811\u6839\uff0c\u8282\u70b9 $x$ \u7236\u4eb2\u7684\u6807\u53f7 $p(x)$ \u5c0f\u4e8e $x$\u3002\n\u4f60\u9700\u8981\u6784\u9020\u4e00\u6761\u94fe\uff0c\u8d4b\u4e88\u94fe\u4e0a\u6bcf\u4e2a\u70b9 $[0,n-1]$ \u7684\u6807\u53f7\uff0c\u5e76\u4e14\u5728\u5bf9\u8fd9\u4e2a\u94fe\u8fdb\u884c $k$ \u6b21\u64cd\u4f5c\u540e\uff0c\u5176\u5f62\u6001\u548c\u7ed9\u51fa\u7684\u6811\u5b8c\u5168\u76f8\u540c\u3002\n\u6240\u8c13\u7684\u201c\u64cd\u4f5c\u201d\u5982\u4e0b\uff1a\u9009\u5b9a\u4e00\u4e2a\u70b9 $x$\uff0c\u6ee1\u8db3 $x$ \u4e0d\u662f\u6811\u6839\u5e76\u4e14\u5176\u7236\u4eb2 $p(x)$ \u4e0d\u662f\u6811\u6839\uff0c\u628a $x$ \u7684\u7236\u4eb2\u8bbe\u7f6e\u4e3a $p(p(x))$\u3002\u5176\u5b83\u6240\u6709\u70b9\u7684\u7236\u4eb2\u4e0d\u53d8\u3002\n\u8f93\u51fa\u4e00\u79cd\u94fe\u4e0a\u70b9\u7684\u6807\u53f7\u65b9\u6848\uff0c\u7136\u540e\u8f93\u51fa\u64cd\u4f5c\u6b21\u6570\u548c\u4e00\u79cd\u64cd\u4f5c\u65b9\u6848\u3002\u64cd\u4f5c\u6b21\u6570\u4e0d\u80fd\u5927\u4e8e $10^6$ \u7684\u3002\u4fdd\u8bc1\u6709\u89e3\u3002\n$2\\le n\\le 10^5$\u3002\nSolution\n\u8003\u8651\u53cd\u7740\u505a\uff0c\u628a\u7ed9\u5b9a\u7684\u6811\u53d8\u6210\u4e00\u6761\u94fe\u3002\u5982\u679c\u6bcf\u6b21\u64cd\u4f5c\u90fd\u80fd\u4f7f\u6811\u7684\u6df1\u5ea6\u589e\u52a0 1\uff0c\u90a3\u4e48\u6211\u4eec\u6700\u591a\u53ea\u9700\u8981\u505a $n-1$ \u6b21\uff0c\u6ee1\u8db3\u7b54\u6848\u7684\u9650\u5236\u3002\u90a3\u4e48\u8003\u8651\u5982\u4f55\u8ba9\u6bcf\u6b21\u64cd\u4f5c\u90fd\u4f7f\u6df1\u5ea6\u52a0 1\u3002\n\u9996\u5148\u8d2a\u5fc3\u5730\u60f3\uff0c\u80af\u5b9a\u9009\u53d6\u6811\u4e2d\u4ece\u6839\u8282\u70b9\u51fa\u53d1\u7684\u6700\u957f\u7684\u4e00\u6761\u8def\u5f84\u4f5c\u4e3a\u94fe\u7684\u57fa\u7840\uff0c\u5176\u4ed6\u64cd\u4f5c\u5728\u5269\u4f59\u7684\u70b9\u4e0a\u5b8c\u6210\u3002\u5982\u679c\u8fd9\u6761\u8def\u5f84\u4e0a\u6240\u6709\u8282\u70b9\u90fd\u6ca1\u6709\u5927\u4e8e\u4e00\u4e2a\u513f\u5b50\uff0c\u5219\u5df2\u7ecf\u505a\u5b8c\u4e86\uff1b\u5426\u5219\u627e\u51fa\u4e00\u4e2a\u6709\u81f3\u5c11\u4e24\u4e2a\u513f\u5b50\u7684\u70b9 $x$\uff0c\u5047\u8bbe\u5176\u4e00\u4e2a\u5728\u8def\u5f84\u4e0a\u7684\u70b9\u662f $u$\uff0c\u53e6\u4e00\u4e2a\u4e0d\u5728\u8def\u5f84\u4e0a\u7684\u70b9\u662f $v$\uff0c\u6211\u4eec\u53e6 $u$ \u7684\u7236\u4eb2\u53d8\u6210 $v$\uff0c\u5c31\u5b9e\u73b0\u4e86\u6df1\u5ea6\u589e\u52a0\u3002\n\u5177\u4f53\u5b9e\u73b0\uff0c\u5bf9\u6700\u6df1\u7684\u5206\u53c9\u70b9\uff0c\u628a\u8fd9\u4e2a\u8282\u70b9\u7684\u6240\u6709\u513f\u5b50\u4e00\u4e2a\u4e2a\u5408\u5e76\u3002\n\u53c2\u8003 wxhtxdy \u7684\u4ee3\u7801\u2026\u2026\nCode\n#include&lt;bits\/stdc++.h&gt;\n\n#define int long long\n\nusing namespace std;\n\ninline int read(){\n    int ret=0,f=1;char ch=getchar();\n    while (ch&lt;'0'||ch&gt;'9') {if (ch=='-') f=-1;ch=getchar();}\n    while (ch&gt;='0'&amp;&amp;ch&lt;='9') ret=ret*10+ch-'0',ch=getchar();\n    return ret*f;\n}\n\nconst int maxn=1e5+5;\n\nint n,fa[maxn],deep[maxn];\nint tot=0,lnk[maxn],nxt[maxn],to[maxn],son[maxn];\n\nint opt[maxn],ans[maxn];\n\nint heavy_son[maxn];\n\nvoid add_edge(int x,int y){\n    tot++; to[tot]=y; son[x]++;\n    nxt[tot]=lnk[x]; lnk[x]=tot;\n}\n\nint cnt=0;\n\nvoid DFS(int x){\n    ans[++ans[0]]=x;\n    for (int i=1;i&lt;=cnt;i++) opt[++opt[0]]=x;\n    cnt=0;\n    for (int i=lnk[x];i;i=nxt[i]) if (to[i]!=heavy_son[x]) DFS(to[i]);\n    if (heavy_son[x]) DFS(heavy_son[x]);\n    cnt++;\n}\n\nsigned main(){\n    n=read();\n\n    fa[0]=-1; deep[0]=1;\n    for (int i=1;i&lt;n;i++) fa[i]=read(),add_edge(fa[i],i),deep[i]=deep[fa[i]]+1;\n\n    int max_deep=0,k=-1;\n    for (int i=0;i&lt;n;i++) if (deep[i]&gt;max_deep) max_deep=deep[i],k=i;\n    while (k!=-1){\n        if (fa[k]!=-1) heavy_son[fa[k]]=k;\n        k=fa[k];\n    }\n\n    DFS(0);\n\n    for (int i=1;i&lt;=ans[0];i++) printf(\"%lld \",ans[i]); printf(\"\\n\");\n\n    printf(\"%lld\\n\",opt[0]);\n    for (int i=1;i&lt;=opt[0];i++) printf(\"%lld \",opt[i]);\n    printf(\"\\n\");\n    return 0;\n}","tags":[{"name":"\u9898\u89e3","slug":"\u9898\u89e3","permalink":"https:\/\/skywt.cn\/tag\/%E9%A2%98%E8%A7%A3\/"},{"name":"CodeForces","slug":"CodeForces","permalink":"https:\/\/skywt.cn\/tag\/CodeForces\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"WordPress \u5b8c\u5168\u8fc1\u79fb\u5230 Typecho \u9047\u5230\u7684\u82e5\u5e72\u95ee\u9898","date":"2019-11-13T18:00:00+08:00","path":"https:\/\/skywt.cn\/posts\/wordpress-to-typecho-solution","text":"\u7531\u4e8e\u4f7f\u7528\u4e86 WP-Editor.md \u63d2\u4ef6\uff0c\u7531 WordPress \u5b8c\u5168\u5bfc\u5165 Typecho \u5f88\u4e0d\u5bb9\u6613\u3002\u6545\u5f00\u7bc7\u6587\u7ae0\u7eaa\u5ff5\u4e0b\u9047\u5230\u7684\u5751\u3002\n\nMarkdown \u5bfc\u51fa\u95ee\u9898\nTypecho \u5b98\u65b9\u63a8\u8350\u7684\u63d2\u4ef6\u662f WordpressToTypecho\uff0c\u7528\u8fd9\u4e2a\u63d2\u4ef6\u4f1a\u76f4\u63a5\u5bfc\u51fa WordPress \u7684 wp_posts \u8868\u91cc post_content \u5b57\u6bb5\u3002\u8fd9\u6837\u4f1a\u53d1\u73b0\u5b58\u7684\u5168\u90fd\u662f HTML\uff0c\u4e0d\u65b9\u4fbf\u7f16\u8f91\u3002\n\u4ed4\u7ec6\u7814\u7a76\u4e00\u756a WP \u7684\u6570\u636e\u5e93\u7ed3\u6784\uff0c\u4f1a\u53d1\u73b0\u6709\u4e2a\u53eb\u505a post_content_filtered \u7684\u5b57\u6bb5\u3002\u867d\u7136\u5b98\u65b9\u5bf9\u8fd9\u4e2a\u5b57\u6bb5\u6ca1\u6709\u89e3\u91ca\uff0c\u4f46\u662f WP-Editor.md \u63d2\u4ef6\u5728\u8fd9\u4e2a\u5b57\u6bb5\u91cc\u5b58\u7684\u5c31\u662f Markdown \u6e90\u7801\u3002\u4f46\u662f\uff0c\u5bf9\u4e8e\u5728 WP-Editor.md \u63d2\u4ef6\u542f\u7528\u4e4b\u524d\u5199\u7684\u6587\u7ae0\uff0c\u8fd9\u4e2a\u5b57\u6bb5\u662f\u7a7a\u7684\uff0c\u5bf9\u4e8e\u8fd9\u4e9b\u6587\u7ae0\u6211\u4eec\u5e94\u8be5\u53ea\u80fd\u5bfc\u51fa HTML\u3002\n\u5c1d\u8bd5\u6539\u5199\u63d2\u4ef6\uff0cMD \u6e90\u7801\u786e\u5b9e\u5bfc\u51fa\u4e86\uff0c\u4f46\u662f\u5728\u7f16\u8f91\u5668\u4e2d Typecho \u5374\u8ba4\u4e3a\u8fd9\u662f HTML\u3002\u4e8e\u662f\u53c8\u7814\u7a76\u4e86\u4e00\u756a Typecho \u7684\u6570\u636e\u5e93\uff0c\u53d1\u73b0\u5176\u5b9e Markdown \u7684\u6587\u7ae0\u6e90\u7801\u5185\u5bb9\u4e4b\u524d\u90fd\u52a0\u4e86\u4e00\u4e2a\u6ce8\u91ca\uff1a&lt;!--markdown--&gt;\uff0c\u4ee3\u8868\u8fd9\u662f\u4e00\u6bb5 markdown\u3002\u6240\u4ee5\u6211\u4eec\u5bfc\u51fa\u7684 Markdown \u4e5f\u8981\u52a0\u4e0a\u3002\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6539\u5199\u63d2\u4ef6\u7684 Action.php \u4e2d\u5bfc\u51fa\u6587\u7ae0\u7684\u90e8\u5206\uff08181 \u884c\uff09\uff1a\n'text'  =&gt;  $row['post_content_filtered'] ? '&lt;!--markdown--&gt;'.$row['post_content_filtered']:$row['post_content'],\n\u6ce8\u610f\uff1a\u6709\u4e00\u4e2a\u5751\u70b9\uff0c\u6709\u4e9b WP \u6570\u636e\u5e93\u91cc\u7684\u81ea\u52a8\u5b58\u6863\u65f6\u95f4\u5b57\u6bb5\u662f 0000-00-00 00:00:00\uff0c\u63d2\u4ef6\u91cc\u4f7f\u7528\u4e86\u683c\u5f0f\u5316\u4e3a Unix \u65f6\u95f4\u6233\u7684\u4e00\u4e2a php \u51fd\u6570\uff0c\u8fd9\u6837\u7684\u65f6\u95f4\u4f1a\u88ab\u683c\u5f0f\u5316\u6210\u4e00\u4e2a\u8d1f\u6570\uff0c\u800c Typecho \u6570\u636e\u5e93\u91cc\u65f6\u95f4\u6233\u5b57\u6bb5\u5b58\u7684\u90fd\u662f UNSIGN \u7c7b\u578b\uff0c\u6240\u4ee5\u4f1a\u5bfc\u81f4\u5bfc\u51fa\u7684\u65f6\u5019\u67e5\u8be2\u8bed\u53e5\u9519\u8bef\uff0cTypecho \u663e\u793a Database Query Error\u3002\u867d\u7136\u5b9e\u9645\u4e0a\u5e76\u4e0d\u5f71\u54cd\u5bfc\u5165\uff0c\u4f46\u8fd8\u662f\u5efa\u8bae\u5148\u5220\u9664 wp_posts \u91cc\u6240\u6709\u65f6\u95f4\u4e3a 0000-00-00 00:00:00 \u7684\u8bb0\u5f55\u3002\n\uff08\u987a\u4fbf\u5410\u69fd\uff1aWordPress \u81ea\u52a8\u4fdd\u5b58\u548c\u6587\u7ae0\u5386\u53f2\u7684\u673a\u5236\u5b9e\u5728\u592a\u6076\u5fc3\uff0c\u5927\u91cf\u5360\u7528\u6570\u636e\u5e93\uff0c\u5173\u90fd\u5173\u4e0d\u6389\uff0c\u8fd8\u6bcf\u4e2a\u7248\u672c\u90fd\u4fdd\u5b58\u5168\u6587\u2026\u2026\uff09\n\u5b57\u7b26\u8f6c\u4e49\u95ee\u9898\n\u5bfc\u51fa Markdown \u4f1a\u53d1\u73b0\uff1a\u53ef\u80fd WP-Editor \u4e3a\u4e86\u517c\u5bb9\u7684\u65b9\u4fbf\uff0c\u5f88\u591a\u5b57\u7b26\u88ab\u8f6c\u4e49\u4e86\u2026\u2026\n\u76ee\u6d4b WP-Editor.md \u63d2\u4ef6\u4f1a\u8f6c\u4e49\u7684\u5b57\u7b26\u662f &lt; &gt; ' \" &amp;\uff08\u5176\u5b9e\u5c31\u662f htmlspecialchars() \u8f6c\u4e49\u7684\u5427\uff09\u3002\u6211\u4eec\u53ef\u4ee5\u7528 SQL \u7684 replace \u51fd\u6570\u6765\u6279\u91cf\u66ff\u6362\u3002\n\u5728 phpMyAdmin \u4e4b\u7c7b\u7684\u63a7\u5236\u53f0\u91cc\uff0c\u53ef\u4ee5\u8fd0\u884c\u4ee5\u4e0b SQL \u8bed\u53e5\uff1a\nupdate `te_contents` set text=replace(text,'&amp;lt;','&lt;')\nupdate `te_contents` set text=replace(text,'&amp;gt;','&gt;')\nupdate `te_contents` set text=replace(text,\"&amp;#039;\",\"'\")\nupdate `te_contents` set text=replace(text,'&amp;quot;','\"')\nupdate `te_contents` set text=replace(text,'&amp;amp;','&amp;')\n\u8fd0\u884c\u4e4b\u540e\u5c31\u4f1a\u53d1\u73b0\u95ee\u9898\u90fd\u5b8c\u7f8e\u89e3\u51b3\u4e86\u3002\nWordPress\uff0c\u518d\u89c1\u5566\u3002","tags":[{"name":"\u65e5\u5e38\u641e\u673a","slug":"\u65e5\u5e38\u641e\u673a","permalink":"https:\/\/skywt.cn\/tag\/%E6%97%A5%E5%B8%B8%E6%90%9E%E6%9C%BA\/"},{"name":"\u7f51\u7edc","slug":"\u7f51\u7edc","permalink":"https:\/\/skywt.cn\/tag\/%E7%BD%91%E7%BB%9C\/"},{"name":"WordPress","slug":"WordPress","permalink":"https:\/\/skywt.cn\/tag\/WordPress\/"},{"name":"Typecho","slug":"Typecho","permalink":"https:\/\/skywt.cn\/tag\/Typecho\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"Nginx \u901a\u8fc7 UA \u5224\u65ad\u641c\u7d22\u5f15\u64ce\u722c\u866b\u5e76\u4e0d\u9650\u6d41","date":"2019-11-02T19:41:49+08:00","path":"https:\/\/skywt.cn\/posts\/nginx-friendly-to-spiders","text":"\u80cc\u666f\n\u4e4b\u524d\u7f51\u7ad9\u4e00\u76f4\u6ca1\u4ec0\u4e48\u5b89\u5168\u6027\u7684\u63aa\u65bd\uff08\u56e0\u4e3a\u6211\u7684\u5047\u8bbe\u662f\u6ca1\u4eba\u4f1a\u6765\u770b\u6211\u7684\u7f51\u7ad9\u7684\u2026\u2026\uff09\uff0c\u76f4\u5230\u524d\u6bb5\u65f6\u95f4\u670d\u52a1\u5668\u88ab\u67d0\u4e2a\u9ad8\u4e00\u7684 dalao D \u5f97\u5b9e\u5728\u4e0d\u884c\u4e86\u2026\u2026 \u88c5\u4e86\u4e2a Wordfence Security \u63d2\u4ef6\u4fdd\u62a4 WordPress\uff0c\u4f46\u662f\u8981\u5168\u7ad9\u7684\u4fdd\u62a4\u8fd8\u662f\u5f97\u4ece nginx \u5165\u624b\u2026\u2026\n\n\u4e8e\u662f\u82b1\u4e86\u534a\u4e2a\u4e0b\u5348\u7684\u65f6\u95f4\u7814\u7a76 Nginx \u9650\u6d41\u529f\u80fd\u7684\u914d\u7f6e\u3002\n\u53bb\u7f51\u4e0a\u641c\u7d22\u4e00\u5927\u5806\u6559\u7a0b\u5168\u90fd\u662f\u6284\u6765\u6284\u53bb\u7684\uff0c\u627e\u5230\u6709\u70b9\u8d28\u91cf\u7684\u6587\u7ae0\u771f\u662f\u592a\u4e0d\u5bb9\u6613\u4e86\u2026\u2026\n\u4e4b\u524d\u7528\u7684 AppNode \u4e5f\u5f00\u8fc7 nginx IP \u9650\u6d41\uff08\u65b9\u4fbf\u5f97\u591a\u2026\u2026\uff09\uff0c\u4e00\u5206\u949f\u5185\u8bf7\u6c42\u8d85\u8fc7\u6307\u5b9a\u6b21\u6570\u5c31\u4f1a\u663e\u793a\u4e00\u4e2a\u9759\u6001\u9875\u9762\uff0c\u4ece\u800c\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u9632\u8303 DoS \u6216\u8005 CC \u653b\u51fb\u3002\u4f46\u662f\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u4e00\u4e2a\u5f88\u4e25\u91cd\u7684\u95ee\u9898\u5c31\u662f\u5bf9\u641c\u7d22\u5f15\u64ce\u4e0d\u53cb\u597d\uff0cGoogle\u3001\u767e\u5ea6\u90fd\u663e\u793a\u6293\u53d6\u5931\u8d25\u4e86\u3002\n\u4e09\u79cd\u65b9\u5f0f\n\u76ee\u524d\u5224\u65ad\u641c\u7d22\u5f15\u64ce\u722c\u866b\u7684\u4f3c\u4e4e\u4e3b\u8981\u6709\u4e09\u79cd\u65b9\u5f0f\uff1a\n\n\u5b58\u50a8\/\u7ef4\u62a4\u4e00\u4e2a IP \u5217\u8868\u4f5c\u4e3a\u767d\u540d\u5355 \uff08\u4ece\u8fd9\u91cc\u770b\u5230\u7684\uff09\uff1b\n\u901a\u8fc7 UA \u5224\u65ad\u662f\u5426\u662f\u641c\u7d22\u5f15\u64ce\u722c\u866b\uff1b\n\u901a\u8fc7\u53cd\u5411 DNS \u67e5\u8be2\uff08\u8c37\u6b4c\u7684\u5efa\u8bae\uff09\u3002\n\n\u901a\u8fc7 IP \u5224\u65ad\u7f3a\u70b9\u5f88\u660e\u663e\uff0c\u9996\u5148\u8c37\u6b4c\u5b98\u65b9\u8bf4\u4e86\u4eba\u5bb6\u6ca1\u6709\u4ec0\u4e48\u722c\u866b\u7684 IPlist\uff1aVerifying Googlebot - Search Console Help\n\nGoogle doesn't post a public list of IP addresses for webmasters to whitelist. This is because these IP address ranges can change, causing problems for any webmasters who have hard-coded them, so you must run a DNS lookup as described next.\n\n\uff08\u767e\u5ea6\u80af\u5b9a\u66f4\u6ca1\u6709\u4e86\uff09\n\u7f51\u4e0a\u53bb\u641c\u7d22 Google\u3001\u767e\u5ea6\u7684\u722c\u866b IP \u5217\u8868\uff0c\u5168\u90fd\u662f\u590d\u5236\u6765\u590d\u5236\u53bb\u7684\u51e0\u5e74\u524d\u7684\u5185\u5bb9\uff08\u5410\u8840\uff09\nGithub \u4e0a\u901b\u4e00\u5708\u597d\u50cf\u4e5f\u6ca1\u627e\u5230\u4ec0\u4e48\u7ef4\u62a4 IPlist \u7684\u9879\u76ee\uff0c\u81ea\u5df1\u7ef4\u62a4\u5de5\u4f5c\u91cf\u6781\u5927\uff0c\u4e0d\u592a\u53ef\u80fd\u2026\u2026\n\n\u8c37\u6b4c\u63a8\u8350\u7684\u722c\u866b\u9a8c\u8bc1\u65b9\u5f0f\u662f DNS \u53cd\u67e5\uff08rDNS\uff09\uff1a\n\n\nRun a reverse DNS lookup on the accessing IP address from your logs, using the host command.\nVerify that the domain name is in either googlebot.com or google.com\nRun a forward DNS lookup on the domain name retrieved in step 1 using the host command on the retrieved domain name. Verify that it is the same as the original accessing IP address from your logs.\n\n\n\u767e\u5ea6\u7684\u8fd9\u4e2a\u6587\u6863\u4e5f\u8bf4\uff1a\n\n\u7ad9\u957f\u53ef\u4ee5\u901a\u8fc7 DNS \u53cd\u67e5 IP \u7684\u65b9\u5f0f\u5224\u65ad\u67d0\u53ea spider \u662f\u5426\u6765\u81ea\u767e\u5ea6\u641c\u7d22\u5f15\u64ce\u3002\u6839\u636e\u5e73\u53f0\u4e0d\u540c\u9a8c\u8bc1\u65b9\u6cd5\u4e0d\u540c\uff0c\u5982 linux\/windows\/os \u4e09\u79cd\u5e73\u53f0\u4e0b\u7684\u9a8c\u8bc1\u65b9\u6cd5\u5206\u522b\u5982\u4e0b\uff1a\n\n\u5728 linux \u5e73\u53f0\u4e0b\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 host ip \u547d\u4ee4\u53cd\u89e3 ip \u6765\u5224\u65ad\u662f\u5426\u6765\u81ea Baiduspider \u7684\u6293\u53d6\u3002Baiduspider \u7684 hostname \u4ee5 *.baidu.com  \u6216 *.baidu.jp \u7684\u683c\u5f0f\u547d\u540d\uff0c\u975e *.baidu.com \u6216 *.baidu.jp \u5373\u4e3a\u5192\u5145\u3002\n\n\n\u5386\u7ecf\u5343\u8f9b\u4e07\u82e6\u627e\u5230\u4e86 nginx \u6709\u4e00\u4e2a\u73b0\u6210\u7684\u63d2\u4ef6\uff1arDNS\n\u4f46\u662f V2EX \u4e0a dalao \u4eec\u7684\u8ba8\u8bba\u53c8\u6cfc\u4e86\u76c6\u51b7\u6c34\uff1a\u5982\u4f55\u9a8c\u8bc1\u767e\u5ea6\u8718\u86db\n\u5212\u91cd\u70b9\uff1arDNS \u975e\u5e38\u6d88\u8017\u8d44\u6e90\uff0c\u800c\u4e14\u4e5f\u53ef\u4ee5\u4f2a\u9020\u2026\u2026\n\n\u89e3\u6790\u8bb0\u5f55\u6709 2 \u79cd \u4e00\u79cd\u6b63\u5411 \u4e00\u79cd\u53cd\u5411\n\u53cd\u5411\u7684\u610f\u601d \u5c31\u662f IP \u89e3\u6790\u5230\u57df\u540d\n\u8fd9\u4e2a\u524d\u63d0\u662f\u4f60\u8981\u6709\u8fd9\u4e2a\u6743\u9650 \u5c31\u662f\u6709 ASN \u5e76\u4e14 IP \u662f\u4f60\u81ea\u5df1\u7684 \u6216\u8005\u8fd0\u8425\u5546\u613f\u610f\u63d0\u4f9b\u6743\u9650\uff08\u6b63\u5e38\u60c5\u51b5\u4e0b\u662f\u4e0d\u5141\u8bb8 \u7ba1\u7406\u673a\u6784\u6709\u8981\u6c42\uff09\u4e0d\u7136\u4f60\u89e3\u6790\u4ec0\u4e48\uff1f\n\u8fd9\u4e2a\u548c\u6b63\u5411\u4e00\u6837 \u4e5f\u662f DNS \u89e3\u6790\u8bb0\u5f55 \u53ea\u662f\u53cd\u8fc7\u6765\u4e86\n\u4f60\u57df\u540d\u89e3\u6790\u5230 IP \u57df\u540d\u6700\u5c11\u4f60\u8981\u6709\u7ba1\u7406\u6743\u9650\u662f\u5427\uff1f\u4e00\u4e2a\u9053\u7406\n\u4f60\u57df\u540d\u6709\u89e3\u6790\u6743\u9650\u4e86 \u4e5f\u53ef\u4ee5\u89e3\u6790\u5230\u4efb\u610f IP \u6bd4\u5982\u767e\u5ea6\uff1f\u6bd4\u5982\u8c37\u6b4c\uff1f\u8fd8\u662f\u4e00\u4e2a\u9053\u7406 \u53cd\u5411\u89e3\u6790\u4e5f\u4e00\u6837\n\n\u4e0d\u8fc7\u66f4\u91cd\u8981\u7684\u662f\uff1anginx \u5b89\u88c5\u7b2c\u4e09\u65b9\u6a21\u5757\u662f\u8981\u91cd\u65b0\u7f16\u8bd1\u6574\u4e2a\u7a0b\u5e8f\u7684\uff0c\u592a\u9ebb\u70e6\u4e86\u2026\u2026\n\n\u90a3\u4e48\u53ea\u5269\u4e0b\u4e00\u79cd\u53ef\u884c\u7684\u65b9\u6cd5\uff1aUA \u5224\u65ad\u3002\n\u7f3a\u70b9\u5f88\u660e\u663e\uff1a\u5f88\u5bb9\u6613\u4f2a\u9020\uff01\uff01\uff01\u5728\u8c37\u6b4c\u5b98\u65b9\u7684 UA \u5217\u8868\u9875\u9762\uff0c\u5b83\u7ed9\u4f60\u4e86\u4e00\u4e2a Warning\uff1a\n\nThese values can be spoofed. If you need to verify that the visitor is Googlebot, you should use reverse DNS lookup.\n\n\u4f46\u662f\u81f3\u5c11\u662f\u4e00\u79cd\u7b80\u5355\u6613\u884c\u7684\u65b9\u6cd5\u2026\u2026\n\u63a2\u7d22\u4e86\u8fd9\u4e48\u957f\u65f6\u95f4\u5c31\u662f\u60f3\u6c34\u7bc7\u535a\u5ba2\u2026\u2026\n\u524d\u7f6e\u77e5\u8bc6\n\u63a8\u8350\u4e00\u7bc7\u535a\u5ba2\uff0c\u4ecb\u7ecd nginx \u9650\u6d41\u5f88\u8be6\u7ec6\u3002\nnginx \u6709\u4e00\u4e2a\u53d6\u51fa UA \u7684\u5168\u5c40\u53d8\u91cf $http_user_agent\u3002\nnginx \u914d\u7f6e\u6587\u4ef6\u4e2d\u7684 if \u8bed\u53e5\uff0c\u6761\u4ef6\u4e2d\u6bd4\u8f83\u8fd0\u7b97\u7b26\u7528\u6cd5\uff1a\n\uff5e \u4e24\u8fb9\u5b57\u4e32\u4e25\u683c\u76f8\u7b49\uff1b~* \u4e24\u8fb9\u5b57\u4e32\u4e0d\u5206\u5927\u5c0f\u5199\u5730\u76f8\u7b49\uff1b\n!~ \u4e24\u8fb9\u5b57\u4e32\u4e25\u683c\u4e0d\u76f8\u7b49\uff1b!~* \u4e24\u8fb9\u5b57\u4e32\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u5730\u4e0d\u76f8\u7b49\u3002\nUA \u5224\u65ad\n\u8c37\u6b4c\u5b98\u65b9\u8bf4\u5b83\u7684 UA \u5217\u8868\u662f\uff1a\nOverview of Google crawlers (user agents) - Search Console Help\n\u8fd9 UA \u4e5f\u592a\u591a\u4e86\u2026\u2026\u90a3\u5c31\u76f4\u63a5\u68c0\u6d4b\u5305\u542b Googlebot Baiduspider \u5b50\u4e32\u7684\u597d\u4e86\u2026\u2026\n\u5199\u4e2a if \u5224\u65ad\u4e00\u4e0b\u5427\uff1a\uff08\u6b63\u5219\u8868\u8fbe\u5f0f\u4ee4\u4eba\u5934\u75bc\uff09\nif ($http_user_agent !~ .*(Googlebot|Baiduspider).*)\n{\n    limit_req zone=reqlim burst=10 nodelay;\n}\nreload \u4e4b\u540e\uff0cnginx \u4f1a\u65e0\u60c5\u5730\u544a\u8bc9\u4f60\uff1a\nnginx: [emerg] \"limit_req\" directive is not allowed here in \/usr\/local\/nginx\/conf\/vhost\/skywt.cn.conf:69\n\u300cIf\u300d is evil\n\u53c2\u89c1\u8fd9\u4e2a\u9875\u9762\uff1aIf Is Evil | NGINX\u3002\u300cif \u4e0d\u662f\u50cf\u4f60\u60f3\u7684\u90a3\u6837\u5de5\u4f5c\u7684\uff01\u300d\n\nThe only 100% safe things which may be done inside if in a location context are:\n\nreturn ...;\nrewrite ... last;\n\nAnything else may possibly cause unpredictable behaviour, including potential SIGSEGV.\n\n\u6839\u636e\u6587\u6863\u91cc\u7684\u5efa\u8bae\uff0c\u6211\u4eec\u53ea\u80fd\u5199\u6210\u8fd9\u79cd\u5f62\u5f0f\uff1a\nlocation \/{\n    error_page 418 = @human;\n    recursive_error_pages on;\n    if ($http_user_agent !~ .*(Googlebot|Baiduspider).*)\n    {\n        return 418;\n    }\n}\n\nlocation @human\n{\n    limit_req zone=reqlim burst=10 nodelay;\n}\n\uff08\u6ce8\u610f\u5982\u679c\u88c5\u4e86 wordpress \u5e94\u8be5\u8981\u5728 @robots \u548c location \/ \u6700\u540e\u52a0\u4e00\u53e5 try_files $uri $uri\/ \/index.php?$args;\uff09\n@ \u5f00\u5934\u7684\u8def\u5f84\u7528\u4e8e\u5904\u7406\u5185\u90e8\u91cd\u5b9a\u5411\u3002\nHTTP 418 \u662f\u300cI\u2018m a teapot\u300d\u9519\u8bef\uff08\u7b97\u662f HTTP \u534f\u8bae\u7684\u4e00\u4e2a\u5f69\u86cb\uff1f\uff1f\uff09\uff0c\u6240\u4ee5\u8fd9\u4e48\u5199\uff08\u5e94\u8be5\uff09\u4e0d\u4f1a\u6709\u5f71\u54cd\u3002\n\u914d\u7f6e\u5e76\u53d1\u9650\u5236\u4e5f\u662f\u7c7b\u4f3c\u3002\n\u672c\u5730\u6d4b\u8bd5\n\u7528 Apache Benchmark \u8fdb\u884c\u538b\u529b\u6d4b\u8bd5\u3002\n\u5148\u53d1 30 \u4e2a\u8bf7\u6c42\uff0c\u5047\u88c5\u6211\u4eec\u662f\u641c\u7d22\u5f15\u64ce\u722c\u866b\uff1a\nab -n 30 -c 1 -H \"Mozilla\/5.0 (compatible; Googlebot\/2.1; +http:\/\/www.google.com\/bot.html)\" https:\/\/skywt.cn\/\n\u8fd4\u56de\u4fe1\u606f\uff1a\nComplete requests:      30\nFailed requests:        0\n\u8868\u793a\u670d\u52a1\u5668\u6ca1\u6709\u505a\u9650\u6d41\uff0c\u5141\u8bb8\u4e86\u5168\u90e8\u8bf7\u6c42\u3002\n\uff08\u901a\u8fc7\u8fd9\u4e2a\u4f8b\u5b50\u53ef\u4ee5\u77e5\u9053\u4f2a\u9020\u4e00\u4e2a UA \u662f\u591a\u4e48\u5bb9\u6613\uff08\u5410\u8840\uff09\uff09\n\u518d\u968f\u4fbf\u641e\u4e2a UA \u5c1d\u8bd5\uff1a\nab -n 30 -c 1 -H \"User-Agent:Mozilla\/5.0 (X11; Linux i686; rv:70.0) Gecko\/20100101 Firefox\/70.0\" https:\/\/skywt.cn\/\n\u8f93\u51fa\uff1a\nComplete requests:      30\nFailed requests:        15\n   (Connect: 0, Receive: 0, Length: 15, Exceptions: 0)\nNon-2xx responses:      15\n15 \u6b21\u8bf7\u6c42\u88ab\u62d2\u7edd\u4e86\u3002\n\u540e\u8bb0\n\u6539\u5929\u8fd8\u662f\u7814\u7a76\u4e0b rDNS \u5427\uff0c\u7528\u4e86 UA \u68c0\u6d4b\u4e86\u653b\u51fb\u8005\u8fd8\u662f\u53ef\u4ee5\u7ee7\u7eed\u653b\u51fb\u2026\u2026\n\uff08\u51b5\u4e14\u6211\u8fd8\u53d1\u4e86\u7bc7\u8fd9\u4e48\u8be6\u7ec6\u7684\u535a\u5ba2\u8bb2\u8ff0\u6211\u7684\u914d\u7f6e\u2026\u2026\uff09","tags":[{"name":"\u65e5\u5e38\u641e\u673a","slug":"\u65e5\u5e38\u641e\u673a","permalink":"https:\/\/skywt.cn\/tag\/%E6%97%A5%E5%B8%B8%E6%90%9E%E6%9C%BA\/"},{"name":"\u7f51\u7edc","slug":"\u7f51\u7edc","permalink":"https:\/\/skywt.cn\/tag\/%E7%BD%91%E7%BB%9C\/"},{"name":"Linux","slug":"Linux","permalink":"https:\/\/skywt.cn\/tag\/Linux\/"},{"name":"nginx","slug":"nginx","permalink":"https:\/\/skywt.cn\/tag\/nginx\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"Nginx \u901a\u8fc7\u53cd\u5411 DNS \u67e5\u8be2\u5224\u65ad\u641c\u7d22\u5f15\u64ce\u722c\u866b","date":"2019-11-08T14:53:14+08:00","path":"https:\/\/skywt.cn\/posts\/nginx-rdns-judge-spiders","text":"\u524d\u666f\u63d0\u8981\uff1a\u901a\u8fc7 UA \u5224\u65ad\u5bf9\u641c\u7d22\u5f15\u64ce\u722c\u866b\u4e0d\u9650\u6d41\u7684\u65b9\u5f0f\u975e\u5e38\u5bb9\u6613\u4f2a\u9020\uff0c\u4e00\u822c\u5199\u722c\u866b\u7684\u4eba\u6216\u8005\u653b\u51fb\u8005\u90fd\u662f\u76f4\u63a5\u7528\u7684\u641c\u7d22\u5f15\u64ce\u722c\u866b\u7684 UA\u3002\n\u6839\u636e\u8c37\u6b4c\u5b98\u65b9\u7684\u5efa\u8bae\uff0c\u6700\u597d\u7684\u65b9\u6cd5\u662f\u901a\u8fc7\u53cd\u5411 DNS \u89e3\u6790\u6765\u5224\u65ad\u641c\u7d22\u5f15\u64ce\u722c\u866b\u3002\n\u5728 Github \u4e0a\u627e\u5230\u4e86\u8fd9\u4e2a nginx \u6a21\u5757\uff1anginx-http-rdns\n\n\n\u611f\u89c9 UA \u68c0\u6d4b\u50cf\u662f\u81ea\u5df1\u9a97\u81ea\u5df1\n\u2014\u2014\u9ad8\u4e00\u67d0 dalao\n\n\u53cd\u5411 DNS \u89e3\u6790\u7684\u82e5\u5e72\u597d\u5904\n\n\u548c UA \u5224\u65ad\u76f8\u6bd4\u96be\u4ee5\u4f2a\u9020\uff08\u5b9e\u9645\u4e0a\u8fd8\u662f\u4e0d\u96be\u4f2a\u9020\u7684\u2026\u2026\u89c1\u540e\u95ee\uff09\uff1b\n\u6613\u4e8e\u914d\u7f6e\uff0c\u4e0d\u7528\u7ef4\u62a4\u4ec0\u4e48\u767d\u540d\u5355\u2026\u2026\n\u6709\u73b0\u6210\u7684 Nginx \u6a21\u5757\uff1arDNS\uff1b\n\u8c37\u6b4c\u3001\u767e\u5ea6\u63a8\u8350\u7684\u5224\u65ad\u65b9\u5f0f\u3002\n\nNginx \u5b89\u88c5 rDNS \u6a21\u5757\n\uff08\u4e0d\u5b8c\u5168\u53c2\u8003 nginx-http-rdns wiki\uff09\n\u56e0\u4e3a Nginx \u662f\u7528 C \u5199\u7684\uff0c\u5b89\u88c5 Nginx \u6a21\u5757\u662f\u8981\u91cd\u65b0\u7f16\u8bd1 Nginx \u4e3b\u7a0b\u5e8f\u7684\u2026\u2026\n\u5148\u5728 Github \u4e0a\u514b\u9686\u8fd9\u4e2a\u9879\u76ee\uff0c\u6ce8\u610f\u4e0d\u80fd\u76f4\u63a5\u653e\u5230 Nginx \u7684\u5b89\u88c5\u76ee\u5f55\u91cc\uff0c\u4e0d\u7136\u5b89\u88c5\u6a21\u5757\u7684\u65f6\u5019\u4f1a\u62a5\u9519\u3002\n\u5728 .\/configure \u7684\u65f6\u5019\u6dfb\u52a0\u53c2\u6570\uff1a--add-module=\/path\/to\/nginx-http-rdns\uff0c\u7136\u540e\u91cd\u65b0 make &amp; make install \u5373\u53ef\u3002\n\u4e0d\u8fc7\u6211\u7528\u7684\u662f lnmp1.6\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u5728 lnmp.conf \u91cc\u589e\u52a0\u8fd9\u4e2a\u53c2\u6570\uff0c\u7136\u540e upgrade.sh nginx \u5373\u53ef\u3002\n\u914d\u7f6e\n\u8fd9\u4e2a\u6a21\u5757\u7684\u6587\u6863\u5bf9\u7528\u6cd5\u5199\u5f97\u5f88\u8be6\u7ec6\u4e86\u3002\n\u9996\u5148\u8981\u8bbe\u7f6e\u4e00\u4e2a\u7c7b\u4f3c DNS \u670d\u52a1\u5668\u7684\u4e1c\u897f\uff0c\u65e2\u7136\u670d\u52a1\u5668\u5728\u963f\u91cc\u4e91\uff0c\u5c31\u7528\u963f\u91cc\u4e91\u7684 DNS \u597d\u4e86\uff08\u5982\u679c\u670d\u52a1\u5668\u5728\u56fd\u5916\u8fd8\u662f\u63a8\u8350 1.1.1.1 \u6216\u8005 8.8.8.8 \u5427\uff09\uff1a\nresolver 223.5.5.5;\n\u6211\u4eec\u7684\u9700\u6c42\u662f\uff1a\u5148\u5224\u65ad\u662f\u5426\u641c\u7d22\u5f15\u64ce UA\uff0c\u5982\u679c\u662f\u5219 rdns on \u8fdb\u884c\u53cd\u5411 DNS \u67e5\u8be2\uff0c\u5982\u679c\u67e5\u8be2\u5230\u662f *.googlebot.com \u6216\u8005 *.baidu.com \u6216\u8005 *.baidu.jp \u5c31\u4e0d\u9650\u6d41\uff0c\u5426\u5219\u9650\u6d41\u3002\n\u914d\u7f6e\u6587\u4ef6\u5982\u4e0b\uff08\u5e26\u4e86 WordPress \u7684\u4f2a\u9759\u6001\u914d\u7f6e\uff09\uff1a\nlocation \/\n{\n    resolver 223.5.5.5;\n    if ($http_user_agent ~ .*(Googlebot|Baiduspider).*)\n    {\n        rdns on;\n    }\n    error_page 418 = @human;\n    recursive_error_pages on;\n    if ($rdns_hostname !~ .*(baidu.com|baidu.jp|googlebot.com|google.com))\n    {\n        return 418;\n    }\n    try_files $uri $uri\/ \/index.php?$args;\n}\nlocation @human\n{\n    limit_req zone=reqlim burst=5 nodelay;\n    #limit_conn perip 5;\n    #limit_rate 500k;\n    try_files $uri $uri\/ \/index.php?$args;\n}\n\u6548\u679c\u6d4b\u8bd5\n\u4ecd\u7136\u7528 Apache \u7684 ab \u5de5\u5177\u6d4b\u8bd5\uff0c\u5047\u88c5\u6211\u4eec\u662f\u8c37\u6b4c\u7684\u722c\u866b\uff1a\nab -n 30 -c 1 -H \"Mozilla\/5.0 (compatible; Googlebot\/2.1; +http:\/\/www.google.com\/bot.html)\" https:\/\/skywt.cn\/\n\u8fd4\u56de\u7ed3\u679c\uff1a\nComplete requests:      30\nFailed requests:        12\n   (Connect: 0, Receive: 0, Length: 12, Exceptions: 0)\nNon-2xx responses:      12\n\u62d2\u7edd\u4e86 12 \u6b21\u8bf7\u6c42\u3002\n\n\u5173\u4e8e\u8fd9\u4e48\u505a\u7684\u5f0a\u7aef\uff0c\u8d44\u6e90\u6d88\u8017\u4e2a\u4eba\u89c9\u5f97\u6ca1\u4ec0\u4e48\uff0c\u6bd5\u7adf\u8981\u5224\u65ad\u662f\u641c\u7d22\u5f15\u64ce\u7684 UA \u624d\u4f1a\u53bb\u67e5\u8be2\uff0c\u6b63\u5e38\u7528\u6237\u8bbf\u95ee\u57fa\u672c\u65e0\u5f71\u54cd\u3002\u800c\u4e14\u8bbf\u95ee\u7f51\u7ad9\u672c\u6765\u5c31\u662f\u8981 DNS \u67e5\u8be2\u7684\u3002\n\u4f46\u662f\uff01\uff01\u53cd\u5411 DNS \u7684\u4f2a\u9020\u6bd4\u6211\u60f3\u8c61\u7684\u8981\u5bb9\u6613\u5f97\u591a\uff01\nrDNS \u7684\u4f2a\u9020\n\u56fd\u5185\u670d\u52a1\u5668\u4e00\u822c\u90fd\u6ca1\u6709\u8bbe\u7f6e PTR \u7684\u5165\u53e3\uff0c\u50cf\u56fd\u5916 BandwagonHost \u5c31\u63d0\u4f9b\u4e86\u8bbe\u7f6e PTR \u8bb0\u5f55\uff08\u5c31\u662f\u53cd\u5411 DNS \u8bb0\u5f55\uff09\u7684\u5165\u53e3\uff1a\n\n\nThis page allows you to change the PTR record (Reverse DNS record) for an IP address.\nPTR records are primarily needed for mail to work properly. If you do not know what value to use for a PTR record, then use your server hostname.\n\n\u8fde\u6b63\u5411 DNS \u9a8c\u8bc1\u4e4b\u7c7b\u7684\u64cd\u4f5c\u90fd\u4e0d\u9700\u8981\uff1f\uff1f\uff1f\n\u6211\u5c1d\u8bd5\u628a\u6211\u53e6\u4e00\u53f0 bwh \u4e0a\u7684\u670d\u52a1\u5668 PTR \u8bbe\u7f6e\u6210 googlebot.com\uff0c\u7136\u540e\u5c31\u6210\u529f\u4e86\u2026\u2026\u6210\u529f\u4e86\u2026\u2026\n\u901a\u8fc7 host \u547d\u4ee4\u67e5\u8be2 IP\uff0c\u5f97\u5230\u7ed3\u679c\uff1a\n$ host 65.***.***.***\n***.***.***.65.in-addr.arpa domain name pointer googlebot.com.\n\u5728\u90a3\u53f0\u670d\u52a1\u5668\u4e0a\u5bf9\u7f51\u7ad9\u538b\u529b\u6d4b\u8bd5\uff0c\u5f97\u5230\u7ed3\u679c\u662f\nComplete requests:      30\nFailed requests:        0\n\u679c\u7136\u6ca1\u6709\u62d2\u7edd\u8bf7\u6c42\u2026\u2026\uff08\u5410\u8840\uff09\n\u518d\u6b21\u6b63\u5411\u9a8c\u8bc1\n\u8c37\u6b4c\u7684\u5efa\u8bae\u91cc\u8fd8\u6709\u4e00\u6b65\uff0c\u5c31\u662f\u518d\u67e5\u8be2\u53cd\u5411 DNS \u5f97\u5230\u7684\u57df\u540d\uff0c\u68c0\u67e5\u89e3\u6790\u51fa\u7684 IP \u662f\u5426\u4e0e IP \u7b26\u5408\u3002\u8fd9\u6837\u6b63\u5411\u4e5f\u9700\u8981\u89e3\u6790\uff0c\u5982\u679c\u6ca1\u6709\u57df\u540d\u7684\u6240\u6709\u6743\u662f\u505a\u4e0d\u5230\u7684\u3002\n\u4f46\u662f\uff0c\u767e\u5ea6\u5e76\u6ca1\u6709\u63d0\u4f9b\u6b63\u5411\u89e3\u6790\u7684\u4fdd\u8bc1\uff01\n\u5bf9\u767e\u5ea6\u793a\u4f8b\u7684\u722c\u866b IP 123.125.66.120 \u53cd\u67e5\u5f97\u5230 baiduspider-123-125-66-120.crawl.baidu.com\uff0c\u518d\u6b21\u6b63\u5411\u67e5\u8be2\uff1a\nHost baiduspider-123-125-66-120.crawl.baidu.com not found: 3(NXDOMAIN)\n\u6839\u672c\u6ca1\u6709\u2026\u2026\u6240\u4ee5\u767e\u5ea6\u7684\u8718\u86db\u6ca1\u6cd5\u8fd9\u4e48\u5224\u65ad\u2026\u2026\n\u540e\u8bb0\n\u679c\u7136\u7ef4\u62a4 IPlist \u662f\u6700\u9760\u8c31\u7684\u65b9\u5f0f\u5417\u2026\u2026","tags":[{"name":"\u65e5\u5e38\u641e\u673a","slug":"\u65e5\u5e38\u641e\u673a","permalink":"https:\/\/skywt.cn\/tag\/%E6%97%A5%E5%B8%B8%E6%90%9E%E6%9C%BA\/"},{"name":"\u7f51\u7edc","slug":"\u7f51\u7edc","permalink":"https:\/\/skywt.cn\/tag\/%E7%BD%91%E7%BB%9C\/"},{"name":"Linux","slug":"Linux","permalink":"https:\/\/skywt.cn\/tag\/Linux\/"},{"name":"nginx","slug":"nginx","permalink":"https:\/\/skywt.cn\/tag\/nginx\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"Hello Typecho!","date":"2019-11-15T10:24:00+08:00","path":"https:\/\/skywt.cn\/posts\/hello-typecho","text":"\u5728 WordPress \u7684\u65b0\u7248\u672c\u53d1\u5e03\u51e0\u5929\u4e4b\u540e\uff0c\u6211\u6700\u7ec8\u8fd8\u662f\u4e0b\u5b9a\u51b3\u5fc3\u6362 Typecho \u4e86\u3002\n\u4e3a\u4e86\u7559\u4f5c\u7eaa\u5ff5\uff0c\u539f\u7f51\u7ad9\u5c31\u653e\u5728 old.skywt.cn \u4e86\u3002\nWordPress\uff0c\u611f\u8c22\u4f60\u966a\u6211\u8d70\u8fc7\u7684\u8def\u3002\u518d\u89c1\u5566\u3002\n","tags":[{"name":"\u65e5\u5e38\u641e\u673a","slug":"\u65e5\u5e38\u641e\u673a","permalink":"https:\/\/skywt.cn\/tag\/%E6%97%A5%E5%B8%B8%E6%90%9E%E6%9C%BA\/"},{"name":"WordPress","slug":"WordPress","permalink":"https:\/\/skywt.cn\/tag\/WordPress\/"},{"name":"Typecho","slug":"Typecho","permalink":"https:\/\/skywt.cn\/tag\/Typecho\/"}],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]},{"title":"\u9000\u5f79\u4e86\u3002","date":"2019-11-23T18:58:00+08:00","path":"https:\/\/skywt.cn\/posts\/afo","text":"CSP-S 2019 \u7ed3\u675f\u4e86\u3002\u56de\u5f52\u6587\u5316\u8bfe\u5b66\u4e60\uff0c\u7b2c\u4e00\u5468\u3002\n\u867d\u7136\u5b66\u6587\u5316\u8bfe\u7684\u786e\u5f88\u8f9b\u82e6\uff0c\u4f46\u662f\u7ec8\u4e8e\u6709\u771f\u6b63\u7684\u5468\u672b\uff0c\u7ec8\u4e8e\u6709\u65f6\u95f4\u5e72\u4e00\u4e9b\u81ea\u5df1\u60f3\u5e72\u7684\u4e8b\u60c5\u3002\n\n\u6bd4\u5982\u7814\u7a76\u4e0b php\uff0c\u7cfb\u7edf\u5730\u5b66\u4e0b css\uff0c\u4e0d\u4e3a\u529f\u5229\n\u6bd4\u5982\u5b66\u5b66\u4e00\u76f4\u60f3\u5b66\u7684 py \u722c\u866b\n\u6bd4\u5982\u6298\u817e\u90a3\u51e0\u53f0 VPS\n\u6bd4\u5982\u7814\u7a76\u4e0b WordPress \u7684\u67b6\u6784\uff0c\u6211\u4e00\u76f4\u60f3\u5f00\u53d1\u4e00\u4e2a\u5b8c\u5168\u539f\u521b\u7684\u4e3b\u9898\uff0c\u5373\u4f7f\u57fa\u4e8e Bootstrap\u2026\n\u6bd4\u5982\u73a9\u73a9 mc\n\u6bd4\u5982\u72c2\u5237\u732b\u548c\u8001\u9f20\n\u6bd4\u5982\u53bb\u6cb3\u574a\u8857\u5403\u70e7\u70e4\uff0c\u5373\u4f7f\u6211\u4e00\u4e2a\u4eba\n\u6bd4\u5982\u5728\u665a\u4e0a\u51fa\u53bb\u56db\u5904\u4e71\u901b\n\u6bd4\u5982\u4f53\u9a8c\u4e00\u4e0b\u6211\u60f3\u8981\u7684\u9752\u6625\n\u751f\u6d3b\u8fd8\u662f\u5f88\u7cbe\u5f69\u7684\u5440\u3002","tags":[],"categories":[{"name":"\u6587\u7ae0","slug":"passages","permalink":"https:\/\/skywt.cn\/category\/passages\/"}]}],"pages":[{"title":"Lab","date":"2018-03-31T19:29:00+08:00","path":"https:\/\/skywt.cn\/labindex","text":" \u8fd9\u91cc\u6709\u4e9b\u65b0\u5947\u7684\/\u5947\u5947\u602a\u602a\u7684\/\u6709\u8da3\u7684\u4e1c\u897f\uff0c\u5927\u90e8\u5206\u90fd\u662f GitHub \u4e0a\u8d3a\u8fc7\u6765\u7684\u3002\n\u6587\u4ef6\u7d22\u5f15\n My Projects\n\n    PasteBurn\n    status\n    HelloZemin\uff08\u5212\u6389\uff09\n\n Tools\n\n    Nextcloud\n    API Management\n    Spider\n    Calendar\n    Poetry\n    Aria2 WebUI\n    IDE Online\n    Music\n    Core Value Encoder\n    GetUA\nUUID\n\n Games\n\n    A Dark Room\n    PlantsVsZombies Demo\n\n Admin Tools\n\n    phpMyAdmin\n    File Manager\n"},{"title":"About","date":"2018-04-21T18:03:00+08:00","path":"https:\/\/skywt.cn\/about","text":"\u5173\u4e8e\u6211 \/ About me\n\u66fe\u7ecf\u662f\u4e00\u4e2a OIer\uff0c\n\u73b0\u5c45\u4e8e\u6d59\u6c5f\u676d\u5dde\uff0c\u6545\u4e61\u662f\u6d59\u6c5f\u8862\u5dde\u3002\n\u6bd5\u4e1a\u4e8e\u8862\u5dde\u5e02\u5b9e\u9a8c\u5b66\u6821\uff0c\u73b0\u5c31\u8bfb\u4e8e\u676d\u5dde\u5b66\u519b\u4e2d\u5b66\u3002\n\u9000\u5f79\u4e86\u3002\nLocation\n\n#188, Wensan Road.\nHangzhou Xuejun HS.\nHangzhou, Zhejiang, China.\n\n\uff08\u6682\u65f6\u6ca1\u6709\u627e\u5230 https \u8c03\u7528\u767e\u5ea6\u5730\u56fe\u7684\u65b9\u6cd5\uff0c\u8bf7\u628a\u6b64\u5904\u60f3\u8c61\u6210\u4e00\u4e2a\u663e\u793a\u6211\u5b66\u6821\u4f4d\u7f6e\u7684\u767e\u5ea6\u5730\u56fe qwq\uff09\nAvatar &amp; screen name\nQ\uff1a\u4e3a\u4ec0\u4e48\u8981\u7528\u8fd9\u4e2a\u94bb\u77f3\u4f5c\u5934\u50cf\uff1f\u6709\u4f55\u7279\u6b8a\u542b\u4e49\uff1f\u8fd9\u4e2a\u201cSkyWT\u201d\u53c8\u662f\u5565\uff1f\nA\uff1a\u8fd9\u4e2a\u662f\u6ce8\u518c QQ \u90a3\u5929\u624b\u673a\u91cc\u968f\u4fbf\u627e\u51fa\u6765\u7684\u4e00\u5f20\u56fe\u7247\uff0c\u7136\u540e\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u5c31\u6cbf\u7528\u81f3\u4eca\u2026\u2026\n\u81f3\u4e8e\u8fd9\u4e2a\u7f51\u540d\uff0c\u548c\u6211\u672c\u4eba\u7684\u540d\u5b57\u6709\u5173\uff0c\u4f46\u662f\u597d\u50cf\u547d\u540d\u89c4\u5219\u6709\u70b9\u5947\u602a\u2026\u2026\uff1f\n\n\u4f60\u8fd9\u4e2a\u201cTrieTree\u201d\u7684\u547d\u540d\u65b9\u5f0f\u548c\u201cSkyWT\u201d\u6709\u5f02\u66f2\u540c\u5de5\u4e4b\u5999\u554a\u2026\u2026\n\u2014\u2014Vanququ\n\n\u4e0d\u8fc7\u6700\u8fd1\u9009\u4e86\u4e00\u5f20\u6bd4\u8f83\u559c\u6b22\u7684\u65b0\u5934\u50cf\uff0c\u4f5c\u4e3a QQ \u5934\u50cf\uff08\u5047\u88c5\u6587\u827a\u9752\u5e74\uff09\u2026\u2026\n\n\uff08\u8001\u5e08\u542c\u6211\u89e3\u91ca\uff01\u8fd9\u4e2a\u771f\u7684\u4e0d\u662f\u60c5\u5934\uff01\uff09\nMy life\n\u5176\u5b9e\u633a\u60f3\u7528\u8fd9\u4e2a\u535a\u5ba2\u591a\u8bb0\u5f55\u70b9\u751f\u6d3b\u4e0a\u7684\u4e1c\u897f\uff0c\u5c31\u662f\u61d2\u6ca1\u65f6\u95f4\u5199\u2026\u2026\n\u5934\u53d1\u662f\u81ea\u7136\u5377\uff01\uff01\uff01\u6ca1\u6709\u70eb\u8fc7\u5934\u53d1\uff01\uff01\uff01\uff08\u66f4\u6ca1\u6709\u201c\u505a\u8fc7\u53d1\u578b\u201d\uff01\uff01\uff09\u4e0d\u8bb8\u518d\u95ee\u4e86\uff0c\u518d\u95ee\u67aa\u6bd9\uff01\uff01\n\uff08\u521d\u4e2d\u73ed\u4e3b\u4efb\u5c45\u7136\u771f\u7684\u4ee5\u4e3a\u6211\u793e\u4f1a\u5230\u53bb\u70eb\u5934\u53d1\u4e86\u2026\u2026\uff1f\uff1f\uff1f\uff09\n\u4e0d\u73a9\u5403\u9e21\uff0c\u4e0d\u73a9\u738b\u8005\uff0c\u4e0d\u73a9\u4e00\u5207\u817e\u8baf\u7cfb\/\u7f51\u6613\u7cfb\u7684\u8054\u7f51\u6e38\u620f\uff0c\u5076\u5c14\u73a9 Minecraft\uff08\u56fd\u9645\u7248\uff09\u3002\n\u867d\u7136\u4e0d\u600e\u4e48\u73a9\u6e38\u620f\uff0c\u4f46\u662f\u603b\u80fd\u53d1\u73b0\u65b0\u7684\u9893\u5e9f\u65b9\u5f0f\u2026\u2026\u5e73\u65f6\u559c\u6b22\u6363\u9f13\u670d\u52a1\u5668\uff0c\u641e\u5404\u79cd\u6742\u4e03\u6742\u516b\u7684\u4e1c\u897f\u2026\u2026\u539f\u6765\u77e5\u4e4e\u4e0a\u6709\u4e2a\u8001\u6bb5\u5b50\uff1a\u628a\u5b69\u5b50\u7684 Windows \u5378\u8f7d\uff0c\u6362\u6210 Linux\uff0c\u53ef\u4ee5\u963b\u6b62\u5b69\u5b50\u73a9\u6e38\u620f\u5417\uff1f\u7b54\u6848\u662f\u53ef\u4ee5\uff0c\u4f46\u662f\u4f1a\u63d0\u4f9b\u66f4\u591a\u9893\u5e9f\u7684\u65b9\u5f0f\u2026\u2026Linux \u4e0b\u597d\u73a9\u7684\u4e1c\u897f\u7684\u786e\u6bd4\u90a3\u4e9b\u6e38\u620f\u6709\u8da3\u5f97\u591a\uff1a\u6709\u4e00\u53f0 VPS \u53ef\u4ee5\u505a\u54ea\u4e9b\u4e8b\uff1f\uff09\nC++ \u5927\u62ec\u53f7\u4e0d\u6362\u884c\u3002\u7528 Tab \u4e0d\u7528\u7a7a\u683c\u3002\n\u5f88\u559c\u6b22\u676d\u5dde\u8fd9\u4e2a\u57ce\u5e02\uff0c\u6bd4\u8f83\u559c\u6b22\u676d\u5dde\u83dc\uff0c\u7279\u522b\u559c\u6b22\u5916\u5a46\u5bb6\u7cfb\u5217\u9910\u996e\uff01\uff01\u5c31\u662f\u8d85\u7ea7\u597d\u5403\uff0c\u6765\u676d\u5dde\u7684\u6211\u5df2\u7ecf\u5f7b\u5e95\u6210\u4e3a\u676d\u5dde\u5f0f\u4e2d\u9910\u7684\u7c89\u4e1d\u4e86 QwQ\n\u80af\u5fb7\u57fa\u548c\u9ea6\u5f53\u52b3\u91cc\uff0c\u66f4\u559c\u6b22\u9ea6\u5f53\u52b3\u3002\n\u521d\u4e2d\u5c5e\u4e8e\u90a3\u79cd\u4f53\u80b2\u6ca1\u600e\u4e48\u53ca\u683c\u8fc7\u7684\u7537\u751f\uff0c\u5e78\u4e8f\u8fdb\u5165\u9ad8\u4e2d\u88ab XJ \u7684\u6668\u8dd1\u62ef\u6551\u4e86\u2026\u2026\u7279\u522b\u4e0d\u600e\u4e48\u4f1a\u7bee\u7403\u8fd9\u6837\u7684\u8fd0\u52a8\uff0c\u5531\u8df3 rap \u5c31\u66f4\u4e0d\u4f1a\u4e86\uff08\u4e0d\u8fc7\u8fdb\u5165\u9ad8\u4e2d\u5988\u5988\u518d\u4e5f\u4e0d\u7528\u62c5\u5fc3\u6211\u7684\u4f53\u80b2\u4e0d\u53ca\u683c\u4e86\uff0c\u56e0\u4e3a 13 \u73ed\u6ca1\u6709\u4f53\u80b2\u8bfe\uff01\uff01\uff09\n\u8f7b\u5ea6\u793e\u4ea4\u6050\u60e7\u75c7\uff0c\u6709\u65f6\u5019\u89c9\u5f97\u4e00\u4e2a\u4eba\u66f4\u81ea\u5728\u3002\u6709\u65f6\u5019\u65e0\u6cd5\u878d\u5165\u96c6\u4f53\u3002\u521d\u4e2d\u4ee5\u524d\u662f\u8001\u5e08\u5bb6\u957f\u53e3\u4e2d\u201c\u5185\u5411\u7684\u5b69\u5b50\u201d\uff0c\u521d\u4e2d\u4e4b\u540e\u867d\u7136\u8feb\u4f7f\u81ea\u5df1\u505a\u51fa\u4e86\u4e00\u70b9\u6539\u53d8\uff0c\u4f46\u662f\u4ecd\u7136\u6709\u5f88\u591a\u4e0d\u9002\u5e94\u3002\u611f\u89c9\u4e0d\u5230\u957f\u5b58\u7684\u53cb\u8c0a\uff0c\u603b\u662f\u5bb3\u6015\u670b\u53cb\u7684\u79bb\u5f00\u3002\u6709\u70b9\u73bb\u7483\u5fc3\uff0c\u5185\u5fc3\u8fc7\u5ea6\u654f\u611f\uff0c\u7279\u522b\u5728\u610f\u522b\u4eba\u7684\u770b\u6cd5\uff0c\u4e5f\u8fc7\u5ea6\u8003\u8651\u522b\u4eba\u7684\u611f\u53d7\u3002\u975e\u5e38\u7f3a\u4e4f\u81ea\u4fe1\u5fc3\u3002\n\u4e3a\u6b64\u53bb\u505a\u8fc7\u5fc3\u7406\u54a8\u8be2\uff0c\u5fc3\u7406\u8001\u5e08\u544a\u8bc9\u8fc7\uff1a\u6211\u7684\u601d\u60f3\u6bd4\u540c\u9f84\u4eba\u6210\u719f\u2026\u2026\uff1f\uff1f\uff1f\n\u521d\u4e00\u4e0b\u5b66\u671f\u56e0\u4e3a\u5b66\u6821\u7684\u201c\u9009\u62d4\u201d\u5f00\u59cb\u8bef\u5165\u63a5\u89e6 OI\uff0c\u521d\u4e8c\u62ff\u5230\u4e86\u666e\u4e00\uff0c\u7136\u540e\u5f88\u540e\u6094\u521d\u4e09\u6ca1\u53bb\u5b66\u63d0\u9ad8\u7ec4\u7684\u4e1c\u897f\uff0c\u4ecd\u7136\u53bb\u8003\u666e\u53ca\u7ec4\uff0c\u6d6a\u8d39\u4e86\u4e00\u5e74\u2026\u2026\u521d\u4e2d\u7684\u65f6\u5019\u53ef\u80fd\u81ea\u5df1\u4e5f\u6ca1\u600e\u4e48\u52aa\u529b\u5427\uff08\u6587\u5316\u8bfe\u4f5c\u4e1a\u51e0\u4e4e\u6ca1\u505a\u8fc7 2333\uff09\uff0c\u52a0\u4e0a\u521d\u4e2d\u53d7\u9650\u4e8e\u6559\u80b2\u8d44\u6e90\u3001\u5bb6\u5ead\u51fa\u8eab\u3001\u7578\u5f62\u7684\u653f\u7b56\uff08\u62ff\u5230\u666e\u4e00\u76f4\u63a5\u4fdd\u9001\u8862\u4e8c\u4e2d\u521b\u65b0\u73ed\u7684\u53d8\u6001\u653f\u7b56\uff09\u7b49\u7b49\uff0c\u73b0\u5728\u9ad8\u4e2d\u6587\u5316\u8bfe\u6210\u7ee9\u4e0d\u7b97\u597d\uff0c\u7ade\u8d5b\u4e5f\u6ca1\u51fa\u4ec0\u4e48\u6210\u7ee9\u3002\u53ef\u80fd\u81ea\u5df1\u4e5f\u6ca1\u6709\u8db3\u591f\u7684\u5174\u8da3\u5427\uff0c\u7279\u522b\u662f\u6587\u5316\u8bfe\u6210\u7ee9\u4e0d\u597d\u3001\u538b\u529b\u5927\u7684\u65f6\u5019\uff0c\u641e\u7ade\u8d5b\u5c31\u9759\u4e0d\u4e0b\u5fc3\u6765\u3002\n\u53ef\u80fd\u81ea\u5df1\u771f\u6b63\u7684\u5174\u8da3\u662f\u5728\u4e92\u8054\u7f51\u4e00\u5757\uff0c\u800c\u4e0d\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\uff08\u6ca1\u6cd5\u50cf\u4e00\u4e9b dalao \u4e00\u6837\u201c\u54c1\u5473\u6570\u5b66\u7684\u7f8e\u201d\u2026\u2026\uff09\u2026\u2026\n\u603b\u662f\u88ab\u751f\u6d3b\u4e2d\u79cd\u79cd\u5947\u5947\u602a\u602a\u7684\u60c5\u611f\u95ee\u9898\u56f0\u6270\u3002\u60c5\u7eea\u53d8\u5316\u65e0\u5e38\u3002\n\u611f\u89c9\u73b0\u5728\u6ca1\u6709\u6d3b\u51fa\u81ea\u5df1\u60f3\u8c61\u4e2d\u9752\u6625\u7684\u6837\u5b50\u3002\u6211\u4e0d\u60f3\u8981\u6240\u8c13\u201c\u7406\u5de5\u7537\u201d\u6c89\u6ca6\u5728\u7535\u5b50\u5c4f\u5e55\u91cc\u7684\u9752\u6625\uff0c\u800c\u60f3\u8981\u6587\u79d1\u751f\u4e00\u6837\u4f53\u4f1a\u60c5\u611f\u548c\u751f\u6d3b\u7684\u5f69\u8272\u7684\u9752\u6625\u3002\u53ef\u60dc\u73b0\u5728\u770b\u6765\uff0c\u53ef\u80fd\u8981\u6765\u4e0d\u53ca\u4e86\u2026\u2026\n\u65f6\u95f4\u8fc7\u5f97\u5f88\u5feb\uff0c\u9ad8\u4e2d\u751f\u6d3b\u7684\u4e09\u5206\u4e4b\u4e00\u5df2\u7ecf\u8fc7\u53bb\u4e86\uff0c\u8054\u8d5b\u7701\u9009 NOI\uff0c\u5b66\u8003\u9009\u8003\u9ad8\u8003\u7eb7\u81f3\u6c93\u6765\uff0c\u53ea\u613f\u4e0d\u8d1f\u524d\u7a0b\u548c\u9752\u6625\u3002\u51b2\u9e2d\uff01\uff01\n\n\uff08\u4ee5\u4e0a\u7f16\u8f91\u4e8e 2019 \u5e74 9 \u6708\u4ee5\u524d\uff09\n2019 \u5e74 11 \u6708\uff0cCSP-S 2019 \u5706\u6ee1\u7ed3\u675f\uff0c\u6211\u4e5f\u6216\u8bb8\u8d70\u5b8c\u4e86 OI \u751f\u6daf\u7684\u6700\u540e\u4e00\u7a0b\u3002\n\u6216\u8bb8\u4ee5\u540e\u53ef\u4ee5\u5b89\u5fc3\u7814\u7a76\u81ea\u5df1\u611f\u5174\u8da3\u7684\u4e1c\u897f\u4e86\u5427\u3002\n\u6587\u5316\u8bfe\u52a0\u6cb9\uff01\n\u5173\u4e8e\u672c\u7ad9 \/ About the site\n\n\u8f7d\u5165\u5929\u6570...\u8f7d\u5165\u65f6\u5206\u79d2...\n\u521b\u5efa\u4e8e 2017.12.12\n190820 \u901a\u8fc7\u5907\u6848\uff1a\u6d59ICP\u590719034233\u53f7\n190827 \u540e\u5df2\u7ecf\u8fc1\u79fb\u5230\u963f\u91cc\u4e91\uff08\u676d\u5dde\u6570\u636e\u4e2d\u5fc3\uff09\uff08\u5f3a\u70c8\u5b89\u5229\u4e91\u7ffc\u8ba1\u5212\uff0c\u8d85\u7ea7\u4fbf\u5b9c\uff09\n191115 \u8fc1\u79fb\u5230 Typecho\n\u4f7f\u7528\u91cd\u5ea6\u9b54\u6539\u7684 Fantasy \u4e3b\u9898\n\u66fe\u7ecf\u4f7f\u7528 WordPress \u7684 Adams \u4e3b\u9898\uff0c\u4e5f\u662f\u5f88\u559c\u6b22\u7684\u4e00\u4e2a\u4e3b\u9898\uff0c\u53ef\u89c1\uff1aold.skywt.cn\n\u4e3b\u673a\u66fe\u7ecf\u662f BandwagonHost VPS\uff08\u5f3a\u70c8\u5b89\u5229\uff09\n\u5df2\u5f00\u542f\u5168\u7ad9 HSTS\uff0c\u5468\u671f 180 \u5929\n\u5df2\u52a0\u5165 HSTS Preload List\n\u66fe\u7ecf\u7528\u8fc7\u7684 WordPress \u4e3b\u9898\uff1aTwenty Seventeen, Cenote, Konmi, Maupassant, Akina\u2026\u2026\n\u8bbf\u5ba2\u7edf\u8ba1\uff1aRevolvermaps\n\u65e7\u57df\u540d\uff08\u5df2\u5230\u671f\uff09\uff1askywt.top\n\n\u8bf7\u52ff\u4f7f\u7528 IE \u7b49\u4e0a\u53e4\u6d4f\u89c8\u5668\u8bbf\u95ee\u2026\u2026\n\u8054\u7cfb\u65b9\u5f0f \/ Contact Information\n{name}\uff1a{description}\n\u670b\u53cb\u4eec \/ Friends\nWT \u548c\u670b\u2642\u53cb\u4eec\u7684\u5e78\u2642\u798f\u751f\u6d3b\n{name} - {description}\n\nvar now = new Date();\nfunction createtime() {\n    var grt = new Date(\"12\/12\/2017 11:00:00\");\n    now.setTime(now.getTime() + 250);\n    days = (now - grt) \/ 1000 \/ 60 \/ 60 \/ 24;\n    dnum = Math.floor(days);\n    hours = (now - grt) \/ 1000 \/ 60 \/ 60 - (24 * dnum);\n    hnum = Math.floor(hours);\n    if (String(hnum).length == 1) {\n        hnum = \"0\" + hnum\n    }\n    minutes = (now - grt) \/ 1000 \/ 60 - (24 * 60 * dnum) - (60 * hnum);\n    mnum = Math.floor(minutes);\n    if (String(mnum).length == 1) {\n        mnum = \"0\" + mnum\n    }\n    seconds = (now - grt) \/ 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);\n    snum = Math.round(seconds);\n    if (String(snum).length == 1) {\n        snum = \"0\" + snum\n    }\n    document.getElementById(\"timeDate\").innerHTML = \"\u672c\u7ad9\u5df2\u8fd0\u884c \" + dnum + \" \u5929 \";\n    document.getElementById(\"times\").innerHTML = hnum + \" \u5c0f\u65f6 \" + mnum + \" \u5206 \" + snum + \" \u79d2\"\n}\nsetInterval(\"createtime()\", 250);\n"},{"title":"Archives","date":"2018-10-11T11:58:00+08:00","path":"https:\/\/skywt.cn\/archives","text":""},{"title":"Gallery","date":"2019-11-23T21:28:43+08:00","path":"https:\/\/skywt.cn\/gallery","text":"Comming soon..."}]}